<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vaapi_encode_mjpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_enc_jpeg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_jpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpegtables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_encode.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>vaapi_encode_mjpeg_quant_luminance</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">40</literal></expr>,

<expr><literal type="number">26</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">37</literal></expr>,

<expr><literal type="number">29</literal></expr>, <expr><literal type="number">40</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">51</literal></expr>,

<expr><literal type="number">56</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">68</literal></expr>,

<expr><literal type="number">87</literal></expr>, <expr><literal type="number">69</literal></expr>, <expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">87</literal></expr>,

<expr><literal type="number">95</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">113</literal></expr>,

<expr><literal type="number">121</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">101</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">99</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>vaapi_encode_mjpeg_quant_chrominance</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">26</literal></expr>,

<expr><literal type="number">26</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,

<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,

<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,

<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,

<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,

<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,

<expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">99</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeMJPEGContext</name> <block>{

<decl_stmt><decl><type><name>VAAPIEncodeContext</name></type> <name>common</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>jfif</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>huffman</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>jfif_data</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawFrameHeader</name></type> <name>frame_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawScan</name></type> <name>scan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawApplicationData</name></type> <name>jfif_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawQuantisationTableSpecification</name></type> <name>quant_tables</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawHuffmanTableSpecification</name></type> <name>huffman_tables</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>current_fragment</name></decl>;</decl_stmt>

}</block></struct></type> <name>VAAPIEncodeMJPEGContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mjpeg_write_image_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMJPEGContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_fragment</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>jfif</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>JPEG_MARKER_APPN</name> <operator>+</operator> <literal type="number">0</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>jfif_header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>JPEG_MARKER_DQT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>quant_tables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>JPEG_MARKER_SOF0</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>huffman</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>JPEG_MARKER_DHT</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>huffman_tables</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>JPEG_MARKER_SOS</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>scan</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_fragment_data</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write image header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_len</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Image header too large: "</literal>

<literal type="string">"%zu &lt; %zu.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>data_len</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mjpeg_write_extra_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>type</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMJPEGContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawFrameHeader</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawQuantisationTableSpecification</name> <modifier>*</modifier></type><name>dqt</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>quant_tables</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAQMatrixBufferJPEG</name> <modifier>*</modifier></type><name>quant</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>quant</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>VAQMatrixBufferType</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>quant</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>quant</name> <operator>=</operator> <operator>(</operator><name>VAQMatrixBufferJPEG</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>quant</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>quant</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>load_lum_quantiser_matrix</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>lum_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>dqt</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>fh</name><operator>-&gt;</operator><name>Tq</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>load_chroma_quantiser_matrix</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>chroma_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>dqt</name><operator>-&gt;</operator><name>table</name><index>[<expr><name><name>fh</name><operator>-&gt;</operator><name>Tq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>Q</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>index</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawScanHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawHuffmanTableSpecification</name> <modifier>*</modifier></type><name>dht</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>huffman_tables</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAHuffmanTableBufferJPEGBaseline</name> <modifier>*</modifier></type><name>huff</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_len</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>huff</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>VAHuffmanTableBufferType</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>huff</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>huff</name> <operator>=</operator> <operator>(</operator><name>VAHuffmanTableBufferJPEGBaseline</name><operator>*</operator><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>huff</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>huff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>sh</name><operator>-&gt;</operator><name>Ns</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>JPEGRawHuffmanTable</name> <modifier>*</modifier></type><name>ht</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>load_huffman_table</name><index>[<expr><name>t</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>dht</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>t</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name><name>huff</name><operator>-&gt;</operator><name>huffman_table</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name><name>num_dc_codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>huff</name><operator>-&gt;</operator><name>huffman_table</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>dc_values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>huffman_table</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name><name>dc_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ht</name> <operator>=</operator> <operator>&amp;</operator><name><name>dht</name><operator>-&gt;</operator><name>table</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name><name>huff</name><operator>-&gt;</operator><name>huffman_table</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name><name>num_ac_codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>L</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>k</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>huff</name><operator>-&gt;</operator><name>huffman_table</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name>ac_values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>huffman_table</name><index>[<expr><name>t</name></expr>]</index></name><operator>.</operator><name><name>ac_values</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ht</name><operator>-&gt;</operator><name>V</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mjpeg_init_picture_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMJPEGContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawFrameHeader</name> <modifier>*</modifier></type><name>fh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawScanHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncPictureParameterBufferJPEG</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>components_rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="char">'R'</literal></expr>, <expr><literal type="char">'G'</literal></expr>, <expr><literal type="char">'B'</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>components_yuv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>components</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>quant_scale</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>common</name><operator>.</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_RGB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>components</name> <operator>=</operator> <name>components_rgb</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>components</name> <operator>=</operator> <name>components_yuv</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>P</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>Y</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>X</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>components</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>H</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>Tq</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>fh</name><operator>-&gt;</operator><name>Lf</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>jfif</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawApplicationData</name> <modifier>*</modifier></type><name>app</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>jfif_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>input_image</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sar_w</name></decl>, <decl><type ref="prev"/><name>sar_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutByteContext</name></type> <name>pbc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init_writer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>jfif_data</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>jfif_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="string">"JFIF"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0x0102</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sar_w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sar_h</name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sar_w</name> <operator>&amp;&amp;</operator> <name>sar_h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>sar_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><name>sar_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_put_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><call><name>bytestream2_get_bytes_left_p</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pbc</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>app</name><operator>-&gt;</operator><name>Lp</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>jfif_data</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>app</name><operator>-&gt;</operator><name>Ap</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>jfif_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>app</name><operator>-&gt;</operator><name>Ap_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">50</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>quant_scale</name> <operator>=</operator> <literal type="number">5000</literal> <operator>/</operator> <name><name>priv</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>quant_scale</name> <operator>=</operator> <literal type="number">200</literal> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>quality</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawQuantisationTable</name> <modifier>*</modifier></type><name>quant</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>quant_tables</name><operator>.</operator><name>table</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><ternary><condition><expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then>

<expr><name>vaapi_encode_mjpeg_quant_luminance</name></expr> </then><else>:

<expr><name>vaapi_encode_mjpeg_quant_chrominance</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>Pq</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>Tq</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant</name><operator>-&gt;</operator><name>Q</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>quant_scale</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">65</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_tables</name><operator>.</operator><name>Lq</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>JPEGRawHuffmanTable</name> <modifier>*</modifier></type><name>huff</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>huffman_tables</name><operator>.</operator><name>table</name><index>[<expr><name>t</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>lengths</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>lengths</name> <operator>=</operator> <name>avpriv_mjpeg_bits_dc_luminance</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>values</name> <operator>=</operator> <name>avpriv_mjpeg_val_dc</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>lengths</name> <operator>=</operator> <name>avpriv_mjpeg_bits_ac_luminance</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>values</name> <operator>=</operator> <name>avpriv_mjpeg_val_ac_luminance</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>lengths</name> <operator>=</operator> <name>avpriv_mjpeg_bits_dc_chrominance</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>values</name> <operator>=</operator> <name>avpriv_mjpeg_val_dc</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>lengths</name> <operator>=</operator> <name>avpriv_mjpeg_bits_ac_chrominance</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>values</name> <operator>=</operator> <name>avpriv_mjpeg_val_ac_chrominance</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>Tc</name></name> <operator>=</operator> <name>t</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>Th</name></name> <operator>=</operator> <name>t</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <operator>(</operator><name><name>huff</name><operator>-&gt;</operator><name>L</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>k</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>huff</name><operator>-&gt;</operator><name>V</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>len</name> <operator>+=</operator> <literal type="number">17</literal> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>huffman_tables</name><operator>.</operator><name>Lh</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Ns</name></name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Cs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Td</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Ta</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Ss</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Se</name></name> <operator>=</operator> <literal type="number">63</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Ah</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Al</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>Ls</name></name> <operator>=</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sh</name><operator>-&gt;</operator><name>Ns</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vpic</name> <operator>=</operator> <operator>(</operator><name>VAEncPictureParameterBufferJPEG</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>reconstructed_picture</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name></expr>,

<expr><operator>.</operator><name>coded_buf</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr>,

<expr><operator>.</operator><name>picture_width</name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>X</name></name></expr>,

<expr><operator>.</operator><name>picture_height</name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>Y</name></name></expr>,

<expr><operator>.</operator><name><name>pic_flags</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>profile</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>progressive</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>huffman</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>interleaved</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>differential</name> <operator>=</operator> <literal type="number">0</literal></expr>,

}</block></expr>,

<expr><operator>.</operator><name>sample_bit_depth</name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>P</name></name></expr>,

<expr><operator>.</operator><name>num_scan</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>num_components</name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name></expr>,

<expr><operator>.</operator><name>quality</name> <operator>=</operator> <literal type="number">50</literal></expr>,

}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>fh</name><operator>-&gt;</operator><name>Nf</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>component_id</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>quantiser_table_selector</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>fh</name><operator>-&gt;</operator><name>Tq</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mjpeg_init_slice_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMJPEGContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JPEGRawScanHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>scan</name><operator>.</operator><name>header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncSliceParameterBufferJPEG</name> <modifier>*</modifier></type><name>vslice</name> <init>= <expr><name><name>slice</name><operator>-&gt;</operator><name>codec_slice_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>vslice</name> <operator>=</operator> <operator>(</operator><name>VAEncSliceParameterBufferJPEG</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>restart_interval</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>num_components</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>Ns</name></name></expr>,

}</block></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sh</name><operator>-&gt;</operator><name>Ns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>component_selector</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>Cs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dc_table_selector</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>Td</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>components</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ac_table_selector</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>Ta</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_mjpeg_configure</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodeMJPEGContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quality</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc_quality</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>quality</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>priv</name><operator>-&gt;</operator><name>quality</name></name> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid quality value %d "</literal>

<literal type="string">"(must be 1-100).\n"</literal></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>quality</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_RAW_DATA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;=</operator> <operator>~</operator><name>VA_ENC_PACKED_HEADER_RAW_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>|=</operator> <name>VA_ENC_PACKED_HEADER_SLICE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_MJPEG</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeProfile</name></type> <name><name>vaapi_encode_mjpeg_profiles</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT</name></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VAProfileJPEGBaseline</name></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT</name></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileJPEGBaseline</name></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT</name></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VAProfileJPEGBaseline</name></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_MJPEG_HUFFMAN_BASELINE_DCT</name></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VAProfileJPEGBaseline</name></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeType</name></type> <name>vaapi_encode_type_mjpeg</name> <init>= <expr><block>{

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <name>vaapi_encode_mjpeg_profiles</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAG_CONSTANT_QUALITY_ONLY</name> <operator>|</operator>

<name>FLAG_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>configure</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_configure</name></expr>,

<expr><operator>.</operator><name>default_quality</name> <operator>=</operator> <literal type="number">80</literal></expr>,

<expr><operator>.</operator><name>picture_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncPictureParameterBufferJPEG</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init_picture_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_init_picture_params</name></expr>,

<expr><operator>.</operator><name>slice_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSliceParameterBufferJPEG</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init_slice_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_init_slice_params</name></expr>,

<expr><operator>.</operator><name>slice_header_type</name> <operator>=</operator> <name>VAEncPackedHeaderRawData</name></expr>,

<expr><operator>.</operator><name>write_slice_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_write_image_header</name></expr>,

<expr><operator>.</operator><name>write_extra_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_write_extra_buffer</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_mjpeg_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_type_mjpeg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>=</operator>

<name>VA_ENC_PACKED_HEADER_RAW_DATA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_encode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_mjpeg_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMJPEGContext</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VAAPIEncodeMJPEGContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vaapi_encode_mjpeg_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VAAPI_ENCODE_COMMON_OPTIONS</name></expr>,

<expr><block>{ <expr><literal type="string">"jfif"</literal></expr>, <expr><literal type="string">"Include JFIF header"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>jfif</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"huffman"</literal></expr>, <expr><literal type="string">"Include huffman tables"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>huffman</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>vaapi_encode_mjpeg_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vaapi_encode_mjpeg_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"mjpeg_vaapi"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>vaapi_encode_mjpeg_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_mjpeg_vaapi_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mjpeg_vaapi"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MJPEG (VAAPI)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MJPEG</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIEncodeMJPEGContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_init</name></expr>,

<expr><operator>.</operator><name>send_frame</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_send_frame</name></expr>,

<expr><operator>.</operator><name>receive_packet</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_receive_packet</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_close</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mjpeg_class</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_HARDWARE</name> <operator>|</operator>

<name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>vaapi_encode_mjpeg_defaults</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_VAAPI</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"vaapi"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
