<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\videodsp_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<function><type><name>void</name> <name>FUNC</name></type>(<name>ff_emulated_edge_mc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>buf_linesize</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>src_linesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>block_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_y</name></decl>, <decl><type ref="prev"/><name>start_x</name></decl>, <decl><type ref="prev"/><name>end_y</name></decl>, <decl><type ref="prev"/><name>end_x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>w</name> <operator>||</operator> <operator>!</operator><name>h</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>block_w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof> <operator>&lt;=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>buf_linesize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src_y</name> <operator>&gt;=</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>src_y</name> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_y</name> <operator>&lt;=</operator> <operator>-</operator><name>block_h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>src_y</name> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>block_h</name><operator>)</operator> <operator>*</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_y</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>block_h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>src_x</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>src_x</name> <operator>-</operator> <name>w</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <name>w</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>src_x</name> <operator>&lt;=</operator> <operator>-</operator><name>block_w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <operator>(</operator><literal type="number">1</literal> <operator>-</operator> <name>block_w</name> <operator>-</operator> <name>src_x</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>src_x</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <name>block_w</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start_y</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>src_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_x</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><name>src_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>block_h</name></expr></argument>, <argument><expr><name>h</name><operator>-</operator><name>src_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>end_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>block_w</name></expr></argument>, <argument><expr><name>w</name><operator>-</operator><name>src_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>start_y</name> <operator>&lt;</operator> <name>end_y</name> <operator>&amp;&amp;</operator> <name>block_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>start_x</name> <operator>&lt;</operator> <name>end_x</name> <operator>&amp;&amp;</operator> <name>block_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>end_x</name> <operator>-</operator> <name>start_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>start_y</name> <operator>*</operator> <name>src_linesize</name> <operator>+</operator> <name>start_x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>start_x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>start_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>buf_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>end_y</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>buf_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>src_linesize</name></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>block_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>w</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>buf_linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>-=</operator> <name>block_h</name> <operator>*</operator> <name>buf_linesize</name> <operator>+</operator> <name>start_x</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<while>while <condition>(<expr><name>block_h</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>bufp</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>start_x</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>bufp</name><index>[<expr><name>start_x</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>end_x</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>block_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bufp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>bufp</name><index>[<expr><name>end_x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>+=</operator> <name>buf_linesize</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

</unit>
