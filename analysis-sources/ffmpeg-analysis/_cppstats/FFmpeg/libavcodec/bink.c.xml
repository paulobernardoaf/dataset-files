<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\bink.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"binkdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"binkdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"blockdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINK_FLAG_ALPHA</name></cpp:macro> <cpp:value>0x00100000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BINK_FLAG_GRAY</name></cpp:macro> <cpp:value>0x00020000</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>bink_trees</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<enum>enum <name>OldSources</name> <block>{

<decl><name>BINKB_SRC_BLOCK_TYPES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>BINKB_SRC_COLORS</name></decl>, 

<decl><name>BINKB_SRC_PATTERN</name></decl>, 

<decl><name>BINKB_SRC_X_OFF</name></decl>, 

<decl><name>BINKB_SRC_Y_OFF</name></decl>, 

<decl><name>BINKB_SRC_INTRA_DC</name></decl>, 

<decl><name>BINKB_SRC_INTER_DC</name></decl>, 

<decl><name>BINKB_SRC_INTRA_Q</name></decl>, 

<decl><name>BINKB_SRC_INTER_Q</name></decl>, 

<decl><name>BINKB_SRC_INTER_COEFS</name></decl>, 

<decl><name>BINKB_NB_SRC</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>binkb_bundle_sizes</name><index>[<expr><name>BINKB_NB_SRC</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">7</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>binkb_bundle_signed</name><index>[<expr><name>BINKB_NB_SRC</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name><name>binkb_intra_quant</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name><name>binkb_inter_quant</name><index>[<expr><literal type="number">16</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<enum>enum <name>Sources</name> <block>{

<decl><name>BINK_SRC_BLOCK_TYPES</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>BINK_SRC_SUB_BLOCK_TYPES</name></decl>, 

<decl><name>BINK_SRC_COLORS</name></decl>, 

<decl><name>BINK_SRC_PATTERN</name></decl>, 

<decl><name>BINK_SRC_X_OFF</name></decl>, 

<decl><name>BINK_SRC_Y_OFF</name></decl>, 

<decl><name>BINK_SRC_INTRA_DC</name></decl>, 

<decl><name>BINK_SRC_INTER_DC</name></decl>, 

<decl><name>BINK_SRC_RUN</name></decl>, 

<decl><name>BINK_NB_SRC</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>Tree</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>vlc_num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>syms</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>Tree</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_HUFF</name><parameter_list>(<parameter><type><name>gb</name></type></parameter>, <parameter><type><name>tree</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(tree).syms[get_vlc2(gb, bink_trees[(tree).vlc_num].table,bink_trees[(tree).vlc_num].bits, 1)]</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Bundle</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Tree</name></type> <name>tree</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur_dec</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cur_ptr</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Bundle</name>;</typedef>

<typedef>typedef <type><struct>struct <name>BinkContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BlockDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HpelDSPContext</name></type> <name>hdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BinkDSPContext</name></type> <name>binkdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>last</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>has_alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>swap_planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>frame_num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bundle</name></type> <name><name>bundle</name><index>[<expr><name>BINKB_NB_SRC</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Tree</name></type> <name><name>col_high</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>col_lastval</name></decl>;</decl_stmt> 

}</block></struct></type> <name>BinkContext</name>;</typedef>

<enum>enum <name>BlockTypes</name> <block>{

<decl><name>SKIP_BLOCK</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>SCALED_BLOCK</name></decl>, 

<decl><name>MOTION_BLOCK</name></decl>, 

<decl><name>RUN_BLOCK</name></decl>, 

<decl><name>RESIDUE_BLOCK</name></decl>, 

<decl><name>INTRA_BLOCK</name></decl>, 

<decl><name>FILL_BLOCK</name></decl>, 

<decl><name>INTER_BLOCK</name></decl>, 

<decl><name>PATTERN_BLOCK</name></decl>, 

<decl><name>RAW_BLOCK</name></decl>, 

}</block>;</enum>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_lengths</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_BLOCK_TYPES</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">511</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_SUB_BLOCK_TYPES</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">511</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_COLORS</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>bw</name><operator>*</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">511</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_INTRA_DC</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_INTER_DC</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_X_OFF</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_Y_OFF</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><operator>(</operator><name>width</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">511</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_PATTERN</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><operator>(</operator><name>bw</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <literal type="number">511</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_RUN</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>bw</name><operator>*</operator><literal type="number">48</literal> <operator>+</operator> <literal type="number">511</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>init_bundles</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name></decl>, <decl><type ref="prev"/><name>bh</name></decl>, <decl><type ref="prev"/><name>blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bw</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bh</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>blocks</name> <operator>=</operator> <name>bw</name> <operator>*</operator> <name>bh</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINKB_NB_SRC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>blocks</name> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data_end</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>+</operator> <name>blocks</name> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>free_bundles</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINKB_NB_SRC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>merge</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name>src</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size2</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>size2</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>size</name> <operator>&amp;&amp;</operator> <name>size2</name></expr>)</condition>;</do>

<while>while <condition>(<expr><name>size</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>size2</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src2</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_tree</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Tree</name> <modifier>*</modifier></type><name>tree</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name><name>tmp2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>in</name> <init>= <expr><name>tmp1</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name> <init>= <expr><name>tmp2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>vlc_num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tree</name><operator>-&gt;</operator><name>vlc_num</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>syms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>syms</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><name><name>tree</name><operator>-&gt;</operator><name>syms</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tmp1</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tree</name><operator>-&gt;</operator><name>syms</name><index>[<expr><operator>++</operator><name>len</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>t</name> <operator>+=</operator> <name>size</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>merge</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>out</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tree</name><operator>-&gt;</operator><name>syms</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_bundle</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bundle_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bundle_num</name> <operator>==</operator> <name>BINK_SRC_COLORS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>read_tree</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>col_high</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>col_lastval</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bundle_num</name> <operator>!=</operator> <name>BINK_SRC_INTRA_DC</name> <operator>&amp;&amp;</operator> <name>bundle_num</name> <operator>!=</operator> <name>BINK_SRC_INTER_DC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>read_tree</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>tree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>cur_dec</name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_READ_VAL</name><parameter_list>(<parameter><type><name>gb</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!b-&gt;cur_dec || (b-&gt;cur_dec &gt; b-&gt;cur_ptr)) return 0; t = get_bits(gb, b-&gt;len); if (!t) { b-&gt;cur_dec = NULL; return 0; }</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_runs</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Bundle</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dec_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_READ_VAL</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_end</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_end</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>data_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Run value went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>&lt;</operator> <name>dec_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name><operator>++</operator> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_motion_values</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Bundle</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dec_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_READ_VAL</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_end</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_end</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>data_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many motion values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>&lt;</operator> <name>dec_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bink_rlelens</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_block_types</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Bundle</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BinkContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dec_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_READ_VAL</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="char">'k'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>^=</operator> <literal type="number">0xBBu</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dec_end</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_end</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>data_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many block type values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>&lt;</operator> <name>dec_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><name><name>bink_rlelens</name><index>[<expr><name>v</name> <operator>-</operator> <literal type="number">12</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_end</name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>&lt;</operator> <name>run</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_patterns</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Bundle</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dec_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_READ_VAL</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_end</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_end</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>data_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many pattern values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>&lt;</operator> <name>dec_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>|=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_colors</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Bundle</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>dec_end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_READ_VAL</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec_end</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+</operator> <name>t</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dec_end</name> <operator>&gt;</operator> <name><name>b</name><operator>-&gt;</operator><name>data_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many color values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>col_lastval</name></name> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>col_high</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>col_lastval</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>col_lastval</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>&lt;</operator> <name>dec_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>col_lastval</name></name> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>col_high</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>col_lastval</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>GET_HUFF</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>col_lastval</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <literal type="char">'i'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int8_t</name><operator>)</operator> <name>v</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DC_START_BITS</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_dcs</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>Bundle</name> <modifier>*</modifier></type><name>b</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>has_sign</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>len2</name></decl>, <decl><type ref="prev"/><name>bsize</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst_end</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>data_end</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_READ_VAL</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>start_bits</name> <operator>-</operator> <name>has_sign</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>start_bits</name> <operator>-</operator> <name>has_sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <name>has_sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_end</name> <operator>-</operator> <name>dst</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>len2</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_end</name> <operator>-</operator> <name>dst</name> <operator>&lt;</operator> <name>len2</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bsize</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bsize</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <operator>(</operator><name>v2</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>v2</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">32768</literal> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <literal type="number">32767</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"DC value went out of bounds: %d\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len2</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_value</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bundle</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bundle</name> <operator>&lt;</operator> <name>BINK_SRC_X_OFF</name> <operator>||</operator> <name>bundle</name> <operator>==</operator> <name>BINK_SRC_RUN</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name><operator>++</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bundle</name> <operator>==</operator> <name>BINK_SRC_X_OFF</name> <operator>||</operator> <name>bundle</name> <operator>==</operator> <name>BINK_SRC_Y_OFF</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name><operator>++</operator></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>binkb_init_bundle</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bundle_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>cur_dec</name> <operator>=</operator>

<name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>binkb_init_bundles</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINKB_NB_SRC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>binkb_init_bundle</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>binkb_read_bundle</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bundle_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><name><name>binkb_bundle_sizes</name><index>[<expr><name>bundle_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>issigned</name> <init>= <expr><name><name>binkb_bundle_signed</name><index>[<expr><name>bundle_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Bundle</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK_READ_VAL</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>&lt;</operator> <name>len</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>bits</name> <operator>&gt;</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>issigned</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>issigned</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>cur_dec</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>binkb_get_value</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bundle_num</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bits</name> <init>= <expr><name><name>binkb_bundle_sizes</name><index>[<expr><name>bundle_num</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name><operator>++</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><name><name>binkb_bundle_signed</name><index>[<expr><name>bundle_num</name></expr>]</index></name></expr> ?</condition><then> <expr><operator>(</operator><name>int8_t</name><operator>)</operator><name>val</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>bundle_num</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_dct_coeffs</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>coef_count_</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>coef_idx</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>coef_list</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mode_list</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>, <decl><type ref="prev"/><name>ccoef</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_start</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, <decl><type ref="prev"/><name>list_end</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, <decl><type ref="prev"/><name>list_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coef_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_idx</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">44</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>bits</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>bits</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>list_pos</name> <operator>=</operator> <name>list_start</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>list_pos</name> <operator>&lt;</operator> <name>list_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>|</operator> <name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>list_pos</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ccoef</name> <operator>=</operator> <name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <name>ccoef</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ccoef</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><operator>--</operator><name>list_start</name></expr>]</index></name> <operator>=</operator> <name>ccoef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[ <expr><name>list_start</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scan</name><index>[<expr><name>ccoef</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_idx</name><index>[<expr><name>coef_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ccoef</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ccoef</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <name>ccoef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call> <operator>|</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><name>t</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scan</name><index>[<expr><name>ccoef</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_idx</name><index>[<expr><name>coef_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ccoef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>q</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quant_idx</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>quant_idx</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>quant_idx</name> <operator>&gt;</operator> <literal type="number">15U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"quant_index %d out of range\n"</literal></expr></argument>, <argument><expr><name>quant_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>coef_count_</name> <operator>=</operator> <name>coef_count</name></expr>;</expr_stmt>

<return>return <expr><name>quant_idx</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>unquantize_dct_coeffs</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name><name>quant</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>coef_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>coef_idx</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>quant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>coef_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name><name>coef_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>scan</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>block</name><index>[<expr><name><name>scan</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <name><name>quant</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_residue</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>masks_count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>coef_list</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>mode_list</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>, <decl><type ref="prev"/><name>mask</name></decl>, <decl><type ref="prev"/><name>ccoef</name></decl>, <decl><type ref="prev"/><name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>list_start</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, <decl><type ref="prev"/><name>list_end</name> <init>= <expr><literal type="number">64</literal></expr></init></decl>, <decl><type ref="prev"/><name>list_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>nz_coeff</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nz_coeff_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">44</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>mask</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>mask</name></expr>;</condition> <incr><expr><name>mask</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nz_coeff_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><index>[<expr><name><name>nz_coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>nz_coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>-=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>nz_coeff</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>+=</operator> <name>mask</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>masks_count</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>masks_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>list_pos</name> <operator>=</operator> <name>list_start</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>list_pos</name> <operator>&lt;</operator> <name>list_end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>|</operator> <name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>list_pos</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ccoef</name> <operator>=</operator> <name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <name>ccoef</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>ccoef</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><operator>--</operator><name>list_start</name></expr>]</index></name> <operator>=</operator> <name>ccoef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[ <expr><name>list_start</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>nz_coeff</name><index>[<expr><name>nz_coeff_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>bink_scan</name><index>[<expr><name>ccoef</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>bink_scan</name><index>[<expr><name>ccoef</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mask</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>masks_count</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>masks_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ccoef</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_end</name></expr>]</index></name> <operator>=</operator> <name>ccoef</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_end</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>nz_coeff</name><index>[<expr><name>nz_coeff_count</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>bink_scan</name><index>[<expr><name>ccoef</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <operator>-</operator><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name><name>bink_scan</name><index>[<expr><name>ccoef</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>mask</name> <operator>^</operator> <name>sign</name><operator>)</operator> <operator>-</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef_list</name><index>[<expr><name>list_pos</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mode_list</name><index>[<expr><name>list_pos</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>masks_count</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>masks_count</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>put_pixels8x8_overlapped</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name>tmp</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>binkb_decode_plane</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>plane_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>coordmap</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ybias</name> <init>= <expr><ternary><condition><expr><name>is_key</name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">15</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>, <decl><type ref="prev"/><name>quant_idx</name></decl>, <decl><type ref="prev"/><name>coef_count</name></decl>, <decl><type ref="prev"/><name><name>coef_idx</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name> <init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> </then><else>: <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bh</name> <init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> </then><else>: <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>binkb_init_bundles</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_start</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_end</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>bh</name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_idx</name></expr>]</index></name> <operator>+</operator> <name>bw</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coordmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>by</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINKB_NB_SRC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>binkb_read_bundle</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>by</name><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>bw</name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>blk</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>bink_patterns</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>binkb_runbits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>coordmap</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>coordmap</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>coordmap</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dctblock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dctblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_INTRA_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>quant_idx</name> <operator>=</operator> <call><name>read_dct_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>quant_idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unquantize_dct_coeffs</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name><name>binkb_intra_quant</name><index>[<expr><name>quant_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_Y_OFF</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ybias</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>xoff</name> <operator>+</operator> <name>yoff</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name> <argument_list type="generic">&lt; <argument><expr><name>ref_start</name> <operator>||</operator> <name>ref</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr></argument> &gt;</argument_list></name> <name>ref_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Reference block is out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ref</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name> <operator>&lt;</operator> <name>dst</name> <operator>||</operator> <name>ref</name> <operator>&gt;=</operator> <name>dst</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>ref</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_pixels8x8_overlapped</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_INTER_COEFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_residue</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>add_pixels8</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_Y_OFF</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ybias</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>xoff</name> <operator>+</operator> <name>yoff</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name> <argument_list type="generic">&lt; <argument><expr><name>ref_start</name> <operator>||</operator> <name>ref</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr></argument> &gt;</argument_list></name> <name>ref_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Reference block is out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ref</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name> <operator>&lt;</operator> <name>dst</name> <operator>||</operator> <name>ref</name> <operator>&gt;=</operator> <name>dst</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>ref</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_pixels8x8_overlapped</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dctblock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dctblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_INTER_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_INTER_Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>quant_idx</name> <operator>=</operator> <call><name>read_dct_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><name>qp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>quant_idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unquantize_dct_coeffs</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name><name>binkb_inter_quant</name><index>[<expr><name>quant_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>fill_block_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>v</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">6</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<expr_stmt><expr><name>xoff</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <call><name>binkb_get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINKB_SRC_Y_OFF</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>ybias</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>xoff</name> <operator>+</operator> <name>yoff</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name> <argument_list type="generic">&lt; <argument><expr><name>ref_start</name> <operator>||</operator> <name>ref</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>stride</name></expr></argument> &gt;</argument_list></name> <name>ref_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Reference block is out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ref</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name> <operator>&lt;</operator> <name>dst</name> <operator>||</operator> <name>ref</name> <operator>&gt;=</operator> <name>dst</name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>stride</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>ref</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_pixels8x8_overlapped</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINKB_SRC_COLORS</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINKB_SRC_COLORS</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown block type %d\n"</literal></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bink_put_pixels</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_start</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref_end</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xoff</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_X_OFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yoff</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_Y_OFF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name>prev</name> <operator>+</operator> <name>xoff</name> <operator>+</operator> <name>yoff</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name> <argument_list type="generic">&lt; <argument><expr><name>ref_start</name> <operator>||</operator> <name>ref</name></expr></argument> &gt;</argument_list></name> <name>ref_end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Copy out of bounds @%d, %d\n"</literal></expr></argument>,

<argument><expr><name>xoff</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>ref</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>bink_decode_plane</name><parameter_list>(<parameter><decl><type><name>BinkContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>plane_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_chroma</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>bx</name></decl>, <decl><type ref="prev"/><name>by</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name><name>col</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>scan</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>ublock</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>coordmap</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>quant_idx</name></decl>, <decl><type ref="prev"/><name>coef_count</name></decl>, <decl><type ref="prev"/><name><name>coef_idx</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name> <init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> </then><else>: <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bh</name> <init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> </then><else>: <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <name>is_chroma</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <name>is_chroma</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="char">'k'</literal> <operator>&amp;&amp;</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fill</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>stride</name></expr></argument>, <argument><expr><name>fill</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_lengths</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>bw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>BINK_NB_SRC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>read_bundle</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ref_start</name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr>

</then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_end</name> <operator>=</operator> <name>ref_start</name>

<operator>+</operator> <operator>(</operator><name>bw</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>plane_idx</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>bh</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>coordmap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>by</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>by</name> <operator>&lt;</operator> <name>bh</name></expr>;</condition> <incr><expr><name>by</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_block_types</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_block_types</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_SUB_BLOCK_TYPES</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_colors</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_COLORS</name></expr>]</index></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_patterns</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_PATTERN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_motion_values</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_X_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_motion_values</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_Y_OFF</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_dcs</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_INTRA_DC</name></expr>]</index></name></expr></argument>, <argument><expr><name>DC_START_BITS</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_dcs</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_INTER_DC</name></expr>]</index></name></expr></argument>, <argument><expr><name>DC_START_BITS</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_runs</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_RUN</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>by</name><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr> ?</condition><then> <expr><name><name>c</name><operator>-&gt;</operator><name>last</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr>

</then><else>: <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>plane_idx</name></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>+</operator> <literal type="number">8</literal><operator>*</operator><name>by</name><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bx</name> <operator>&lt;</operator> <name>bw</name></expr>;</condition> <incr><expr><name>bx</name><operator>++</operator></expr><operator>,</operator> <expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>prev</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>by</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>blk</name> <operator>==</operator> <name>SCALED_BLOCK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>blk</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SKIP_BLOCK</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hdsp</name><operator>.</operator><name>put_pixels_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>prev</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SCALED_BLOCK</name></expr>:</case>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_SUB_BLOCK_TYPES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>blk</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>RUN_BLOCK</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>bink_patterns</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ublock</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ublock</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ublock</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>INTRA_BLOCK</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dctblock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dctblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>quant_idx</name> <operator>=</operator> <call><name>read_dct_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>quant_idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unquantize_dct_coeffs</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name><name>bink_intra_quant</name><index>[<expr><name>quant_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>ublock</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILL_BLOCK</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>fill_block_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>v</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PATTERN_BLOCK</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ublock</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>RAW_BLOCK</name></expr>:</case>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ublock</name><index>[<expr><name>i</name> <operator>+</operator> <name>j</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect 16x16 block type %d\n"</literal></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>!=</operator> <name>FILL_BLOCK</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>scale_block</name></name><argument_list>(<argument><expr><name>ublock</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bx</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>prev</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MOTION_BLOCK</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bink_put_pixels</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>ref_start</name></expr></argument>, <argument><expr><name>ref_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RUN_BLOCK</name></expr>:</case>

<expr_stmt><expr><name>scan</name> <operator>=</operator> <name><name>bink_patterns</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>run</name> <init>= <expr><call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_RUN</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Run went out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>coordmap</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>coordmap</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">63</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name><name>coordmap</name><index>[<expr><operator>*</operator><name>scan</name><operator>++</operator></expr>]</index></name></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>RESIDUE_BLOCK</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bink_put_pixels</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>ref_start</name></expr></argument>, <argument><expr><name>ref_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>clear_block</name></name><argument_list>(<argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_residue</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>add_pixels8</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INTRA_BLOCK</name></expr>:</case>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dctblock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dctblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_INTRA_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>quant_idx</name> <operator>=</operator> <call><name>read_dct_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>quant_idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unquantize_dct_coeffs</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name><name>bink_intra_quant</name><index>[<expr><name>quant_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>idct_put</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FILL_BLOCK</name></expr>:</case>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>fill_block_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator> <name>v</name><operator>,</operator> <name>stride</name><operator>,</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INTER_BLOCK</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>bink_put_pixels</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>ref_start</name></expr></argument>, <argument><expr><name>ref_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dctblock</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dctblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_INTER_DC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>quant_idx</name> <operator>=</operator> <call><name>read_dct_coeffs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>quant_idx</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>unquantize_dct_coeffs</name><argument_list>(<argument><expr><name>dctblock</name></expr></argument>, <argument><expr><name><name>bink_inter_quant</name><index>[<expr><name>quant_idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>coef_count</name></expr></argument>, <argument><expr><name>coef_idx</name></expr></argument>, <argument><expr><name>bink_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name><operator>.</operator><name>idct_add</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>dctblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PATTERN_BLOCK</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>col</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_COLORS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>get_value</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>BINK_SRC_PATTERN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name><operator>*</operator><name>stride</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <name><name>col</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>RAW_BLOCK</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_COLORS</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bundle</name><index>[<expr><name>BINK_SRC_COLORS</name></expr>]</index></name><operator>.</operator><name>cur_ptr</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown block type %d\n"</literal></expr></argument>, <argument><expr><name>blk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></for>

<label><name>end</name>:</label>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1F</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BinkContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane</name></decl>, <decl><type ref="prev"/><name>plane_idx</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_count</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_reget_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>bits_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>has_alpha</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>bink_decode_plane</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_num</name></name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>plane</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>plane</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane_idx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><operator>!</operator><name>plane</name> <operator>||</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>swap_planes</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>plane</name></expr> </then><else>: <expr><operator>(</operator><name>plane</name> <operator>^</operator> <literal type="number">3</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>bink_decode_plane</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>plane_idx</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>plane</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>binkb_decode_plane</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>plane_idx</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>plane</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>bits_count</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>last</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>binkb_calc_quant</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>inv_bink_scan</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>s</name><index>[<expr><literal type="number">64</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">1073741824</literal></expr>,<expr><literal type="number">1489322693</literal></expr>,<expr><literal type="number">1402911301</literal></expr>,<expr><literal type="number">1262586814</literal></expr>,<expr><literal type="number">1073741824</literal></expr>, <expr><literal type="number">843633538</literal></expr>, <expr><literal type="number">581104888</literal></expr>, <expr><literal type="number">296244703</literal></expr>,

<expr><literal type="number">1489322693</literal></expr>,<expr><literal type="number">2065749918</literal></expr>,<expr><literal type="number">1945893874</literal></expr>,<expr><literal type="number">1751258219</literal></expr>,<expr><literal type="number">1489322693</literal></expr>,<expr><literal type="number">1170153332</literal></expr>, <expr><literal type="number">806015634</literal></expr>, <expr><literal type="number">410903207</literal></expr>,

<expr><literal type="number">1402911301</literal></expr>,<expr><literal type="number">1945893874</literal></expr>,<expr><literal type="number">1832991949</literal></expr>,<expr><literal type="number">1649649171</literal></expr>,<expr><literal type="number">1402911301</literal></expr>,<expr><literal type="number">1102260336</literal></expr>, <expr><literal type="number">759250125</literal></expr>, <expr><literal type="number">387062357</literal></expr>,

<expr><literal type="number">1262586814</literal></expr>,<expr><literal type="number">1751258219</literal></expr>,<expr><literal type="number">1649649171</literal></expr>,<expr><literal type="number">1484645031</literal></expr>,<expr><literal type="number">1262586814</literal></expr>, <expr><literal type="number">992008094</literal></expr>, <expr><literal type="number">683307060</literal></expr>, <expr><literal type="number">348346918</literal></expr>,

<expr><literal type="number">1073741824</literal></expr>,<expr><literal type="number">1489322693</literal></expr>,<expr><literal type="number">1402911301</literal></expr>,<expr><literal type="number">1262586814</literal></expr>,<expr><literal type="number">1073741824</literal></expr>, <expr><literal type="number">843633538</literal></expr>, <expr><literal type="number">581104888</literal></expr>, <expr><literal type="number">296244703</literal></expr>,

<expr><literal type="number">843633538</literal></expr>,<expr><literal type="number">1170153332</literal></expr>,<expr><literal type="number">1102260336</literal></expr>, <expr><literal type="number">992008094</literal></expr>, <expr><literal type="number">843633538</literal></expr>, <expr><literal type="number">662838617</literal></expr>, <expr><literal type="number">456571181</literal></expr>, <expr><literal type="number">232757969</literal></expr>,

<expr><literal type="number">581104888</literal></expr>, <expr><literal type="number">806015634</literal></expr>, <expr><literal type="number">759250125</literal></expr>, <expr><literal type="number">683307060</literal></expr>, <expr><literal type="number">581104888</literal></expr>, <expr><literal type="number">456571181</literal></expr>, <expr><literal type="number">314491699</literal></expr>, <expr><literal type="number">160326478</literal></expr>,

<expr><literal type="number">296244703</literal></expr>, <expr><literal type="number">410903207</literal></expr>, <expr><literal type="number">387062357</literal></expr>, <expr><literal type="number">348346918</literal></expr>, <expr><literal type="number">296244703</literal></expr>, <expr><literal type="number">232757969</literal></expr>, <expr><literal type="number">160326478</literal></expr>, <expr><literal type="number">81733730</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>C</name></cpp:macro> <cpp:value>(1LL&lt;&lt;30)</cpp:value></cpp:define>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>inv_bink_scan</name><index>[<expr><name><name>bink_scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>inv_bink_scan</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>binkb_intra_quant</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>binkb_intra_seed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator>

<name><name>binkb_num</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><operator>(</operator><name><name>binkb_den</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>C</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>binkb_inter_quant</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>binkb_inter_seed</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator>

<name><name>binkb_num</name><index>[<expr><name>j</name></expr>]</index></name><operator>/</operator><operator>(</operator><name><name>binkb_den</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>C</name><operator>&gt;&gt;</operator><literal type="number">12</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BinkContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC_TYPE</name></type> <name><name>table</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">128</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>binkb_initialised</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extradata missing or too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>has_alpha</name></name> <operator>=</operator> <name>flags</name> <operator>&amp;</operator> <name>BINK_FLAG_ALPHA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>swap_planes</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>bink_trees</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>.</operator><name>table</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>maxbits</name> <init>= <expr><name><name>bink_tree_lens</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bink_trees</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name>table</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bink_trees</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table_allocated</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>maxbits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bink_trees</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>maxbits</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>,

<argument><expr><name><name>bink_tree_lens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>bink_tree_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INIT_VLC_USE_NEW_STATIC</name> <operator>|</operator> <name>INIT_VLC_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>last</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>last</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>has_alpha</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_YUVA420P</name></expr> </then><else>: <expr><name>AV_PIX_FMT_YUV420P</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="char">'k'</literal></expr> ?</condition><then> <expr><name>AVCOL_RANGE_JPEG</name></expr> </then><else>: <expr><name>AVCOL_RANGE_MPEG</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_blockdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_binkdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>binkdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_bundles</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free_bundles</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>binkb_initialised</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>binkb_calc_quant</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>binkb_initialised</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BinkContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>last</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free_bundles</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>BinkContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_bink_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"binkvideo"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Bink video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_BINKVIDEO</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BinkContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
