<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpeg12framerate.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12data.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVRational</name></type> <name><name>ff_mpeg12_frame_rate_tab</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">24000</literal></expr>, <expr><literal type="number">1001</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">60000</literal></expr>, <expr><literal type="number">1001</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">12</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>ff_mpeg12_find_best_frame_rate</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>code</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ext_n</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ext_d</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nonstandard</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mpeg2</name> <init>= <expr><name>ext_n</name> <operator>&amp;&amp;</operator> <name>ext_d</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_code</name> <init>= <expr><ternary><condition><expr><name>nonstandard</name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>best_c</name></decl>, <decl><type ref="prev"/><name>best_n</name></decl>, <decl><type ref="prev"/><name>best_d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>best_error</name> <init>= <expr><block>{ <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>best_c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>best_n</name> <operator>=</operator> <name>best_d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>max_code</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_cmp_q</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name><name>ff_mpeg12_frame_rate_tab</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;=</operator> <name>max_code</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name>mpeg2</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>d</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;=</operator> <operator>(</operator><ternary><condition><expr><name>mpeg2</name></expr> ?</condition><then> <expr><literal type="number">32</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>test</name></decl>, <decl><type ref="prev"/><name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>test</name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>ff_mpeg12_frame_rate_tab[c]</argument>,

<argument>(AVRational) { n</argument>, <argument>d }</argument>)</argument_list></macro></expr>;</expr_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>av_cmp_q</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_n</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_d</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<goto>goto <name>found</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>av_div_q</name><argument_list>(<argument><expr><name>frame_rate</name></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>error</name> <operator>=</operator> <call><name>av_div_q</name><argument_list>(<argument><expr><name>test</name></expr></argument>, <argument><expr><name>frame_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>cmp</name> <operator>=</operator> <call><name>av_cmp_q</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><name>best_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name>cmp</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d</name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_c</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_n</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_d</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>best_error</name> <operator>=</operator> <name>error</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<label><name>found</name>:</label>

<expr_stmt><expr><operator>*</operator><name>code</name> <operator>=</operator> <name>best_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mpeg2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ext_n</name> <operator>=</operator> <name>best_n</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ext_d</name> <operator>=</operator> <name>best_d</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
