<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hpeldsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpeldsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIT_DEPTH</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hpel_template.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pel_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXOP2</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void OPNAME ##_no_rnd_pixels8_l2_8(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, int dst_stride, int src_stride1, int src_stride2, int h) { int i; for (i = 0; i &lt; h; i++) { uint32_t a, b; a = AV_RN32(&amp;src1[i * src_stride1]); b = AV_RN32(&amp;src2[i * src_stride2]); OP(*((uint32_t *) &amp;dst[i * dst_stride]), no_rnd_avg32(a, b)); a = AV_RN32(&amp;src1[i * src_stride1 + 4]); b = AV_RN32(&amp;src2[i * src_stride2 + 4]); OP(*((uint32_t *) &amp;dst[i * dst_stride + 4]), no_rnd_avg32(a, b)); } } static inline void OPNAME ##_no_rnd_pixels8_x2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_no_rnd_pixels8_l2_8(block, pixels, pixels + 1, line_size, line_size, line_size, h); } static inline void OPNAME ##_pixels8_x2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_pixels8_l2_8(block, pixels, pixels + 1, line_size, line_size, line_size, h); } static inline void OPNAME ##_no_rnd_pixels8_y2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_no_rnd_pixels8_l2_8(block, pixels, pixels + line_size, line_size, line_size, line_size, h); } static inline void OPNAME ##_pixels8_y2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_pixels8_l2_8(block, pixels, pixels + line_size, line_size, line_size, line_size, h); } static inline void OPNAME ##_pixels4_x2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_pixels4_l2_8(block, pixels, pixels + 1, line_size, line_size, line_size, h); } static inline void OPNAME ##_pixels4_y2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_pixels4_l2_8(block, pixels, pixels + line_size, line_size, line_size, line_size, h); } static inline void OPNAME ##_pixels2_x2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_pixels2_l2_8(block, pixels, pixels + 1, line_size, line_size, line_size, h); } static inline void OPNAME ##_pixels2_y2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { OPNAME ##_pixels2_l2_8(block, pixels, pixels + line_size, line_size, line_size, line_size, h); } static inline void OPNAME ##_pixels2_xy2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int i, a1, b1; int a0 = pixels[0]; int b0 = pixels[1] + 2; a0 += b0; b0 += pixels[2]; pixels += line_size; for (i = 0; i &lt; h; i += 2) { a1 = pixels[0]; b1 = pixels[1]; a1 += b1; b1 += pixels[2]; block[0] = (a1 + a0) &gt;&gt; 2; block[1] = (b1 + b0) &gt;&gt; 2; pixels += line_size; block += line_size; a0 = pixels[0]; b0 = pixels[1] + 2; a0 += b0; b0 += pixels[2]; block[0] = (a1 + a0) &gt;&gt; 2; block[1] = (b1 + b0) &gt;&gt; 2; pixels += line_size; block += line_size; } } static inline void OPNAME ##_pixels4_xy2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int i; const uint32_t a = AV_RN32(pixels); const uint32_t b = AV_RN32(pixels + 1); uint32_t l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; uint32_t h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); uint32_t l1, h1; pixels += line_size; for (i = 0; i &lt; h; i += 2) { uint32_t a = AV_RN32(pixels); uint32_t b = AV_RN32(pixels + 1); l1 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL); h1 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; a = AV_RN32(pixels); b = AV_RN32(pixels + 1); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; } } static inline void OPNAME ##_pixels8_xy2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int j; for (j = 0; j &lt; 2; j++) { int i; const uint32_t a = AV_RN32(pixels); const uint32_t b = AV_RN32(pixels + 1); uint32_t l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; uint32_t h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); uint32_t l1, h1; pixels += line_size; for (i = 0; i &lt; h; i += 2) { uint32_t a = AV_RN32(pixels); uint32_t b = AV_RN32(pixels + 1); l1 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL); h1 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; a = AV_RN32(pixels); b = AV_RN32(pixels + 1); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x02020202UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; } pixels += 4 - line_size * (h + 1); block += 4 - line_size * h; } } static inline void OPNAME ##_no_rnd_pixels8_xy2_8_c(uint8_t *block, const uint8_t *pixels, ptrdiff_t line_size, int h) { int j; for (j = 0; j &lt; 2; j++) { int i; const uint32_t a = AV_RN32(pixels); const uint32_t b = AV_RN32(pixels + 1); uint32_t l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x01010101UL; uint32_t h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); uint32_t l1, h1; pixels += line_size; for (i = 0; i &lt; h; i += 2) { uint32_t a = AV_RN32(pixels); uint32_t b = AV_RN32(pixels + 1); l1 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL); h1 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; a = AV_RN32(pixels); b = AV_RN32(pixels + 1); l0 = (a &amp; 0x03030303UL) + (b &amp; 0x03030303UL) + 0x01010101UL; h0 = ((a &amp; 0xFCFCFCFCUL) &gt;&gt; 2) + ((b &amp; 0xFCFCFCFCUL) &gt;&gt; 2); OP(*((uint32_t *) block), h0 + h1 + (((l0 + l1) &gt;&gt; 2) &amp; 0x0F0F0F0FUL)); pixels += line_size; block += line_size; } pixels += 4 - line_size * (h + 1); block += 4 - line_size * h; } } CALL_2X_PIXELS(OPNAME ##_pixels16_x2_8_c, OPNAME ##_pixels8_x2_8_c, 8) CALL_2X_PIXELS(OPNAME ##_pixels16_y2_8_c, OPNAME ##_pixels8_y2_8_c, 8) CALL_2X_PIXELS(OPNAME ##_pixels16_xy2_8_c, OPNAME ##_pixels8_xy2_8_c, 8) CALL_2X_PIXELS(OPNAME ##_no_rnd_pixels16_8_c, OPNAME ##_pixels8_8_c, 8) CALL_2X_PIXELS(OPNAME ##_no_rnd_pixels16_x2_8_c, OPNAME ##_no_rnd_pixels8_x2_8_c, 8) CALL_2X_PIXELS(OPNAME ##_no_rnd_pixels16_y2_8_c, OPNAME ##_no_rnd_pixels8_y2_8_c, 8) CALL_2X_PIXELS(OPNAME ##_no_rnd_pixels16_xy2_8_c, OPNAME ##_no_rnd_pixels8_xy2_8_c, 8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rnd_avg32(a, b)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = b</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_no_rnd_pixels8_8_c</name></cpp:macro> <cpp:value>put_pixels8_8_c</cpp:value></cpp:define>

<macro><name>PIXOP2</name><argument_list>(<argument>avg</argument>, <argument>op_avg</argument>)</argument_list></macro>

<macro><name>PIXOP2</name><argument_list>(<argument>put</argument>, <argument>op_put</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_avg</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_put</name></cpp:undef>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_hpeldsp_init</name><parameter_list>(<parameter><decl><type><name>HpelDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>hpel_funcs</name><parameter_list>(<parameter><type><name>prefix</name></type></parameter>, <parameter><type><name>idx</name></type></parameter>, <parameter><type><name>num</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;prefix ##_pixels_tab idx [0] = prefix ##_pixels ##num ##_8_c; c-&gt;prefix ##_pixels_tab idx [1] = prefix ##_pixels ##num ##_x2_8_c; c-&gt;prefix ##_pixels_tab idx [2] = prefix ##_pixels ##num ##_y2_8_c; c-&gt;prefix ##_pixels_tab idx [3] = prefix ##_pixels ##num ##_xy2_8_c</cpp:value></cpp:define>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>put</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>put_no_rnd</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>put_no_rnd</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>avg</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hpel_funcs</name><argument_list>(<argument><expr><name>avg_no_rnd</name></expr></argument>,, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hpeldsp_init_aarch64</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ALPHA</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hpeldsp_init_alpha</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hpeldsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_PPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hpeldsp_init_ppc</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hpeldsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_hpeldsp_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
