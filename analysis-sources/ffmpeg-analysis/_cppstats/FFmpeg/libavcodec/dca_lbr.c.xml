<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dca_lbr.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcahuff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_syncwords.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMP_MAX</name></cpp:macro> <cpp:value>56</cpp:value></cpp:define>

<enum>enum <name>LBRFlags</name> <block>{

<decl><name>LBR_FLAG_24_BIT</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>LBR_FLAG_LFE_PRESENT</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>,

<decl><name>LBR_FLAG_BAND_LIMIT_2_3</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>LBR_FLAG_BAND_LIMIT_1_2</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>,

<decl><name>LBR_FLAG_BAND_LIMIT_1_3</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>,

<decl><name>LBR_FLAG_BAND_LIMIT_1_4</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>LBR_FLAG_BAND_LIMIT_1_8</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,

<decl><name>LBR_FLAG_BAND_LIMIT_NONE</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>,

<decl><name>LBR_FLAG_BAND_LIMIT_MASK</name> <init>= <expr><literal type="number">0x1c</literal></expr></init></decl>,

<decl><name>LBR_FLAG_DMIX_STEREO</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>,

<decl><name>LBR_FLAG_DMIX_MULTI_CH</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <name>LBRChunkTypes</name> <block>{

<decl><name>LBR_CHUNK_NULL</name> <init>= <expr><literal type="number">0x00</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_PAD</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_FRAME</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_FRAME_NO_CSUM</name> <init>= <expr><literal type="number">0x06</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_LFE</name> <init>= <expr><literal type="number">0x0a</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_ECS</name> <init>= <expr><literal type="number">0x0b</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RESERVED_1</name> <init>= <expr><literal type="number">0x0c</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RESERVED_2</name> <init>= <expr><literal type="number">0x0d</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_SCF</name> <init>= <expr><literal type="number">0x0e</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_GRP_1</name> <init>= <expr><literal type="number">0x11</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_GRP_2</name> <init>= <expr><literal type="number">0x12</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_GRP_3</name> <init>= <expr><literal type="number">0x13</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_GRP_4</name> <init>= <expr><literal type="number">0x14</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_GRP_5</name> <init>= <expr><literal type="number">0x15</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_SCF</name> <init>= <expr><literal type="number">0x16</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_SCF_GRP_1</name> <init>= <expr><literal type="number">0x17</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_SCF_GRP_2</name> <init>= <expr><literal type="number">0x18</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_SCF_GRP_3</name> <init>= <expr><literal type="number">0x19</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_SCF_GRP_4</name> <init>= <expr><literal type="number">0x1a</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_TONAL_SCF_GRP_5</name> <init>= <expr><literal type="number">0x1b</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_GRID_LR</name> <init>= <expr><literal type="number">0x30</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_GRID_LR_LAST</name> <init>= <expr><literal type="number">0x3f</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_GRID_HR</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_GRID_HR_LAST</name> <init>= <expr><literal type="number">0x4f</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_TS_1</name> <init>= <expr><literal type="number">0x50</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_TS_1_LAST</name> <init>= <expr><literal type="number">0x5f</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_TS_2</name> <init>= <expr><literal type="number">0x60</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_RES_TS_2_LAST</name> <init>= <expr><literal type="number">0x6f</literal></expr></init></decl>,

<decl><name>LBR_CHUNK_EXTENSION</name> <init>= <expr><literal type="number">0x7f</literal></expr></init></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>LBRChunk</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>, <name>len</name>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block></struct></type> <name>LBRChunk</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>channel_reorder_nolfe</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>channel_reorder_lfe</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>lfe_index</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>channel_counts</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>channel_layouts</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AV_CH_LAYOUT_MONO</name></expr>,

<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,

<expr><name>AV_CH_LAYOUT_SURROUND</name></expr>,

<expr><name>AV_CH_SIDE_LEFT</name> <operator>|</operator> <name>AV_CH_SIDE_RIGHT</name></expr>,

<expr><name>AV_CH_FRONT_CENTER</name> <operator>|</operator> <name>AV_CH_SIDE_LEFT</name> <operator>|</operator> <name>AV_CH_SIDE_RIGHT</name></expr>,

<expr><name>AV_CH_LAYOUT_2_2</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT0</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>cos_tab</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>float</name></type> <name><name>lpc_tab</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>initialized</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cos_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>cos</name><argument_list>(<argument><expr><name>M_PI</name> <operator>*</operator> <name>i</name> <operator>/</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>lpc_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>M_PI</name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">17</literal></expr> </then><else>: <expr><literal type="number">15</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>initialized</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_lfe_24</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>step_max</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_dca_lfe_step_size_24</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ps</name></decl>, <decl><type ref="prev"/><name>si</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>step_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>step</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <name>ps</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ps</name> <operator>&amp;</operator> <literal type="number">0x7fffff</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><name>si</name><operator>)</operator> <operator>+</operator> <name>si</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">0x7fffff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>step_i</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step_i</name> <operator>&gt;</operator> <name>step_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid LFE step size index\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_dca_lfe_step_size_24</name><index>[<expr><name>step_i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.03125f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.125f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.0625f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">3.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><literal type="number">3.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">3.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">3.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>step_i</name> <operator>+=</operator> <name><name>ff_dca_lfe_delta_index_24</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">31</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>step_i</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>step_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_dca_lfe_step_size_24</name><index>[<expr><name>step_i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_scale</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_lfe_16</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>step_max</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_dca_lfe_step_size_16</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ps</name></decl>, <decl><type ref="prev"/><name>si</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>step_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>step</name></decl>, <decl><type ref="prev"/><name>value</name></decl>, <decl><type ref="prev"/><name>delta</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ps</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>si</name> <operator>=</operator> <name>ps</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>ps</name> <operator>&amp;</operator> <literal type="number">0x7fff</literal><operator>)</operator> <operator>^</operator> <operator>-</operator><name>si</name><operator>)</operator> <operator>+</operator> <name>si</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0f</literal> <operator>/</operator> <literal type="number">0x7fff</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>step_i</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>step_i</name> <operator>&gt;</operator> <name>step_max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid LFE step size index\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_dca_lfe_step_size_16</name><index>[<expr><name>step_i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.125f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>delta</name> <operator>+=</operator> <name>step</name> <operator>*</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>code</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">3.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <operator>-</operator><literal type="number">3.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>value</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&gt;</operator> <literal type="number">3.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <literal type="number">3.0f</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>step_i</name> <operator>+=</operator> <name><name>ff_dca_lfe_delta_index_16</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>step_i</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>step_i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>step_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step</name> <operator>=</operator> <name><name>ff_dca_lfe_step_size_16</name><index>[<expr><name>step_i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lfe_scale</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_lfe_chunk</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LBRChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_LFE_PRESENT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">52</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>parse_lfe_24</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;=</operator> <literal type="number">35</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>parse_lfe_16</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"LFE chunk too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>parse_vlc</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_depth</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_vlc2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>table</name></name></expr></argument>, <argument><expr><name><name>vlc</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name>max_depth</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>v</name> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_tonal</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>amp</name><index>[<expr><name>DCA_LBR_CHANNELS_TOTAL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name><name>phs</name><index>[<expr><name>DCA_LBR_CHANNELS_TOTAL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>main_amp</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sf</name></decl>, <decl><type ref="prev"/><name>sf_idx</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>main_ch</name></decl>, <decl><type ref="prev"/><name>freq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch_nbits</name> <init>= <expr><call><name>av_ceil_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sf</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>group</name></expr>;</condition> <incr><expr><name>sf</name> <operator>+=</operator> <ternary><condition><expr><name>diff</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sf_idx</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>&lt;&lt;</operator> <name>group</name><operator>)</operator> <operator>+</operator> <name>sf</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>sf_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ntones</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>freq</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>freq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Tonal group chunk too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ff_dca_vlc_tnl_grp</name><index>[<expr><name>group</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_dca_fst_amp</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tonal frequency diff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>diff</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>ff_dca_fst_amp</name><index>[<expr><name>diff</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>diff</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>freq</name> <operator>+=</operator> <name>diff</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>group</name><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>-</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid spectral line offset\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>main_ch</name> <operator>=</operator> <call><name>get_bitsz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>ch_nbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>main_amp</name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_tnl_scf</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call>

<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tonal_scf</name><index>[<expr><name><name>ff_dca_freq_to_sb</name><index>[<expr><name>freq</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>group</name><operator>)</operator></expr>]</index></name></expr>]</index></name>

<operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>limited_range</name></name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>amp</name><index>[<expr><name>main_ch</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>main_amp</name> <operator>&lt;</operator> <name>AMP_MAX</name></expr> ?</condition><then> <expr><name>main_amp</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phs</name><index>[<expr><name>main_ch</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>==</operator> <name>main_ch</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>amp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>amp</name><index>[<expr><name>main_ch</name></expr>]</index></name> <operator>-</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_damp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>phs</name><index>[<expr><name>main_ch</name></expr>]</index></name> <operator>-</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_dph</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>amp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>phs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>amp</name><index>[<expr><name>main_ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DCALbrTone</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ntones</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ntones</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ntones</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>DCA_LBR_TONES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>x_freq</name></name> <operator>=</operator> <name>freq</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>group</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>f_delt</name></name> <operator>=</operator> <operator>(</operator><name>freq</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>group</name><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;&lt;</operator> <name>group</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>ph_rot</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>-</operator> <operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>x_freq</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">128</literal> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>f_delt</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>ff_dca_ph0_shift</name><index>[<expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>x_freq</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>freq</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name>

<operator>-</operator> <operator>(</operator><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>ph_rot</name></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>group</name><operator>)</operator><operator>)</operator> <operator>-</operator> <name><name>t</name><operator>-&gt;</operator><name>ph_rot</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>amp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>amp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&lt;</operator> <name>AMP_MAX</name></expr> ?</condition><then> <expr><name><name>amp</name><index>[<expr><name>ch</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>phs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal> <operator>-</operator> <name><name>phs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>*</operator> <literal type="number">32</literal> <operator>+</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>sf_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ntones</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_tonal_chunk</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LBRChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>group</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>LBR_CHUNK_SCF</name> <operator>||</operator> <name><name>chunk</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>LBR_CHUNK_TONAL_SCF</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Tonal scale factor chunk too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_scf</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>chunk</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>LBR_CHUNK_TONAL</name> <operator>||</operator> <name><name>chunk</name><operator>-&gt;</operator><name>id</name></name> <operator>==</operator> <name>LBR_CHUNK_TONAL_SCF</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_tonal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_tonal_group</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LBRChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>parse_tonal</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ensure_bits</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>left</name> <init>= <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_scale_factors</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>scf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>prev</name></decl>, <decl><type ref="prev"/><name>next</name></decl>, <decl><type ref="prev"/><name>dist</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_fst_rsd_amp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sf</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>sf</name> <operator>+=</operator> <name>dist</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name></expr>]</index></name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_rsd_apprx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <literal type="number">7</literal> <operator>-</operator> <name>sf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid scale factor distance\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next</name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_rsd_amp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>prev</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>next</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>prev</name> <operator>-</operator> <operator>(</operator> <name>next</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name>dist</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;</operator> <name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>next</name> <operator>-</operator> <name>prev</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>prev</name> <operator>-</operator> <name>next</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&gt;</operator> <name>prev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>next</name> <operator>-</operator> <name>prev</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>+</operator> <operator>(</operator> <operator>(</operator><name>next</name> <operator>-</operator> <name>prev</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>next</name> <operator>-</operator> <name>prev</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>-</operator> <operator>(</operator> <operator>(</operator><name>prev</name> <operator>-</operator> <name>next</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>-</operator> <operator>(</operator> <operator>(</operator><name>prev</name> <operator>-</operator> <name>next</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>prev</name> <operator>-</operator> <name>next</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dist</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>prev</name> <operator>+</operator> <operator>(</operator><name>next</name> <operator>-</operator> <name>prev</name><operator>)</operator> <operator>*</operator> <name>i</name> <operator>/</operator> <name>dist</name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>scf</name><index>[<expr><name>sf</name></expr>]</index></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt> 

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_st_code</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name> <init>= <expr><call><name>parse_vlc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_st_grid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>+</operator> <name>min_v</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">16</literal> <operator>-</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_dca_st_coeff</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_grid_1_chunk</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LBRChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>nsubbands</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nsubbands</name> <operator>=</operator> <name><name>ff_dca_scf_to_grid_1</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>nsubbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_scale_factors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name><index>[<expr><name>ch1</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name> <operator>&amp;&amp;</operator> <name><name>ff_dca_grid_1_to_scf</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_scale_factors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name><index>[<expr><name>ch2</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name><index>[<expr><name>ch1</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_avg_g3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>+</operator> <literal type="number">4</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name><index>[<expr><name>ch2</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_avg_g3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name><index>[<expr><name>ch2</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name><index>[<expr><name>ch1</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"First grid chunk too short\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>min_v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>min_v</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>min_v</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nsubbands</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>nsubbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>sf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sf</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sf</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>sf</name></expr>]</index></name> <operator>=</operator> <call><name>parse_st_code</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>min_v</name><index>[<expr><name>ch</name> <operator>-</operator> <name>ch1</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo_pres</name></name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ch1</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_grid_1_sec_ch</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>nsubbands</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nsubbands</name> <operator>=</operator> <name><name>ff_dca_scf_to_grid_1</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>nsubbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_dca_grid_1_to_scf</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_scale_factors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name><index>[<expr><name>ch2</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name><index>[<expr><name>ch2</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_avg_g3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_grid_3</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>!=</operator> <name>ch1</name> <operator>&amp;&amp;</operator> <name>sb</name> <operator>+</operator> <literal type="number">4</literal> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name><operator>)</operator> <operator>!=</operator> <name>flag</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_pres</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>sb</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_grid_3</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_pres</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>sb</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>float</name></type> <name>lbr_rand</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lbr_rand</name></name> <operator>=</operator> <literal type="number">1103515245U</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>lbr_rand</name></name> <operator>+</operator> <literal type="number">12345U</literal></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>lbr_rand</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_scf</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_ch</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>quant_level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>nblocks</name></decl>, <decl><type ref="prev"/><name>coding_method</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<expr_stmt><expr><name>coding_method</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>quant_level</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>DCA_LBR_TIME_SAMPLES</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>samples</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_rsd_level_2a</name><index>[<expr><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <name>j</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>coding_method</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_rsd_level_2b</name><index>[<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>(</operator><name>DCA_LBR_TIME_SAMPLES</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>samples</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>ff_dca_rsd_pack_5_in_8</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_rsd_level_3</name><index>[<expr><operator>(</operator><name>code</name> <operator>&gt;&gt;</operator> <name>j</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>(</operator><name>DCA_LBR_TIME_SAMPLES</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>samples</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_rsd_level_5</name><index>[<expr><name><name>ff_dca_rsd_pack_3_in_7</name><index>[<expr><name>code</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>nblocks</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_rsd_level_8</name><index>[<expr><call><name>get_vlc2</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ff_dca_vlc_rsd</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">5</literal></expr>:</case>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>DCA_LBR_TIME_SAMPLES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_rsd_level_16</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">20</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt> 

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lbr_rand</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_pres</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>sb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ts</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start_sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>sb_g3</name></decl>, <decl><type ref="prev"/><name>sb_reorder</name></decl>, <decl><type ref="prev"/><name>quant_level</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <name>start_sb</name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>end_sb</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sb_reorder</name> <operator>=</operator> <name>sb</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_mono_subband</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sb_reorder</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_indices</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">28</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sb_reorder</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>limited_range</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sb_reorder</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sb_reorder</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_indices</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name>sb_reorder</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb_reorder</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>sb_g3</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb_g3</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>g3_avg_only_start_sb</name></name> <operator>-</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sb_g3</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_grid_3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><name>sb_g3</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <name>sb_reorder</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>parse_grid_3</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><name>sb_reorder</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name> <operator>||</operator> <name>sb_reorder</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_mono_subband</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sec_ch_sbms</name><index>[<expr><name>ch1</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb_reorder</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flag</name> <operator>&amp;&amp;</operator> <name>sb_reorder</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sec_ch_lrms</name><index>[<expr><name>ch1</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb_reorder</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>quant_level</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>quant_levels</name><index>[<expr><name>ch1</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>quant_level</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_mono_subband</name></name> <operator>&amp;&amp;</operator> <name>sb_reorder</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>sb_reorder</name></expr></argument>, <argument><expr><name>quant_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><name>sb_reorder</name></expr></argument>, <argument><expr><name>quant_level</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>parse_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>sb_reorder</name></expr></argument>, <argument><expr><name>quant_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>parse_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><name>sb_reorder</name></expr></argument>, <argument><expr><name>quant_level</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>convert_lpc</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>codes</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>rc</name> <init>= <expr><name><name>lpc_tab</name><index>[<expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tmp1</name> <init>= <expr><name><name>coeff</name><index>[ <expr><name>j</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tmp2</name> <init>= <expr><name><name>coeff</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[ <expr><name>j</name></expr> ]</index></name> <operator>=</operator> <name>tmp1</name> <operator>+</operator> <name>rc</name> <operator>*</operator> <name>tmp2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tmp2</name> <operator>+</operator> <name>rc</name> <operator>*</operator> <name>tmp1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_lpc</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name><name>codes</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <name>start_sb</name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>end_sb</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ncodes</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>sb</name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <name>ncodes</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncodes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>codes</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ncodes</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>convert_lpc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><name>f</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>codes</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_high_res_grid</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LBRChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>quant_levels</name><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sb</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ol</name></decl>, <decl><type ref="prev"/><name>st</name></decl>, <decl><type ref="prev"/><name>max_sb</name></decl>, <decl><type ref="prev"/><name>profile</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ol</name> <operator>=</operator> <operator>(</operator><name>profile</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>st</name> <operator>=</operator> <name>profile</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_sb</name> <operator>=</operator> <name>profile</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name>sb</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>limited_rate</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><literal type="number">18000</literal> <operator>/</operator> <operator>(</operator><literal type="number">12</literal> <operator>*</operator> <name>f</name> <operator>/</operator> <literal type="number">1000</literal> <operator>+</operator> <literal type="number">100</literal> <operator>+</operator> <literal type="number">40</literal> <operator>*</operator> <name>st</name><operator>)</operator> <operator>+</operator> <literal type="number">20</literal> <operator>*</operator> <name>ol</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <literal type="number">95</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_levels</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <literal type="number">140</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_levels</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <literal type="number">180</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_levels</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <literal type="number">230</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_levels</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>quant_levels</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_levels</name><index>[<expr><name>ch1</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>quant_levels</name><index>[<expr><name><name>ff_dca_sb_reorder</name><index>[<expr><name>max_sb</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_levels</name><index>[<expr><name>ch1</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name><name>quant_levels</name><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_lpc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_ts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_scale_factors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_grid_2</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start_sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>nsubbands</name></decl>;</decl_stmt>

<expr_stmt><expr><name>nsubbands</name> <operator>=</operator> <name><name>ff_dca_scf_to_grid_2</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_sb</name> <operator>&gt;</operator> <name>nsubbands</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>end_sb</name> <operator>=</operator> <name>nsubbands</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <name>start_sb</name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>end_sb</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>g2_scf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grid_2_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ch</name> <operator>!=</operator> <name>ch1</name> <operator>&amp;&amp;</operator> <name><name>ff_dca_grid_2_to_scf</name><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name><operator>)</operator> <operator>!=</operator> <name>flag</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>g2_scf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_2_scf</name><index>[<expr><name>ch1</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>g2_scf</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g2_scf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ensure_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>g2_scf</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>parse_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff_dca_vlc_grid_2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>g2_scf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ts1_chunk</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LBRChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_lpc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_ts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_grid_2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_ts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_ts2_chunk</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>LBRChunk</name> <modifier>*</modifier></type><name>chunk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>chunk</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_grid_2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_ts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_mono_subband</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_grid_1_sec_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_grid_2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_ts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_sample_rate</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><operator>(</operator><operator>-</operator><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">17</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>limited_range</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>br_per_ch</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate_scaled</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dca_long_window</name><index>[<expr><name>i</name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>br_per_ch</name> <operator>&lt;</operator> <literal type="number">14000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">0.85</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>br_per_ch</name> <operator>&lt;</operator> <literal type="number">32000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>(</operator><name>br_per_ch</name> <operator>-</operator> <literal type="number">14000</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">120000</literal><operator>)</operator> <operator>+</operator> <literal type="number">0.85</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>scale</name> <operator>*=</operator> <literal type="number">1.0</literal> <operator>/</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_scf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if> 

<if type="elseif">else if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_scf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">0.25</literal> <operator>*</operator> <literal type="number">0.785</literal> <operator>*</operator> <name>scale</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_scf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.785</literal> <operator>*</operator> <name>scale</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_scale</name></name> <operator>=</operator> <operator>(</operator><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name><operator>)</operator> <operator>*</operator> <literal type="number">0.0000078265894</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_sample_buffer</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nchsamples</name> <init>= <expr><name>DCA_LBR_TIME_SAMPLES</name> <operator>+</operator> <name>DCA_LBR_TIME_HISTORY</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nsamples</name> <init>= <expr><name>nchsamples</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fast_mallocz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ts_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ts_size</name></name></expr></argument>, <argument><expr><name>nsamples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ts_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ts_buffer</name></name> <operator>+</operator> <name>DCA_LBR_TIME_HISTORY</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>nchsamples</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_decoder_init</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetByteContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>old_rate</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_band_limit</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>old_nchannels</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>version</name></decl>, <decl><type ref="prev"/><name>bit_rate_hi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sr_code</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sr_code</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sr_code</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>ff_dca_sampling_freqs</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid LBR sample rate\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>ff_dca_sampling_freqs</name><index>[<expr><name>sr_code</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">48000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%d Hz LBR sample rate"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"LBR channel mask %#x"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>&amp;</operator> <literal type="number">0xfff0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>warned</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"LBR channel mask %#x"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>warned</name></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>version</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>version</name> <operator>&amp;</operator> <literal type="number">0xff00</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0x0800</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"LBR stream version %#x"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_DMIX_MULTI_CH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"LBR multi-channel downmix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_LFE_PRESENT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>!=</operator> <literal type="number">48000</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>warned</name></name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"%d Hz LFE interpolation"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>warned</name></name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LBR_FLAG_LFE_PRESENT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bit_rate_hi</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate_orig</name></name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bit_rate_hi</name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate_scaled</name></name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>|</operator> <operator>(</operator><operator>(</operator><name>bit_rate_hi</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name> <operator>=</operator> <call><name>ff_dca_count_chs_for_mask</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>&amp;</operator> <operator>~</operator><name>DCA_SPEAKER_PAIR_LFE1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name></expr></argument>, <argument><expr><name>DCA_LBR_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_BAND_LIMIT_MASK</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LBR_FLAG_BAND_LIMIT_NONE</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_FLAG_BAND_LIMIT_1_2</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_FLAG_BAND_LIMIT_1_4</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"LBR band limit %#x"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_BAND_LIMIT_MASK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name> <operator>=</operator> <name><name>ff_dca_freq_ranges</name><index>[<expr><name>sr_code</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate_orig</name></name> <operator>&gt;=</operator> <literal type="number">44000</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res_profile</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_rate_orig</name></name> <operator>&gt;=</operator> <literal type="number">25000</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res_profile</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>res_profile</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limited_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>limited_range</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>limited_range</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid LBR band limit for frequency range\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>limited_range</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>g3_avg_only_start_sb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>*</operator> <name><name>ff_dca_avg_g3_freqs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>res_profile</name></name></expr>]</index></name> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>limited_rate</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>g3_avg_only_start_sb</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>g3_avg_only_start_sb</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>*</operator> <literal type="number">2000</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>limited_rate</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_mono_subband</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>*</operator> <literal type="number">14000</literal> <operator>/</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>limited_rate</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>max_mono_subband</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_mono_subband</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>old_rate</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator> <name>old_band_limit</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>init_sample_rate</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_DMIX_STEREO</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>DCAContext</name> <modifier>*</modifier></type><name>dca</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name> <operator>&lt;</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name> <operator>&gt;</operator> <name>DCA_LBR_CHANNELS_TOTAL</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels for LBR stereo downmix\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dca</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>!=</operator> <name>DCA_SPEAKER_LAYOUT_STEREO</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>warned</name></name> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Embedded LBR stereo downmix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>warned</name></name> <operator>|=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels_total</name></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>=</operator> <name>DCA_SPEAKER_PAIR_LR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;=</operator> <operator>~</operator><name>LBR_FLAG_LFE_PRESENT</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>old_rate</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name>

<operator>||</operator> <name>old_band_limit</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>band_limit</name></name>

<operator>||</operator> <name>old_nchannels</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>alloc_sample_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dca_lbr_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dca_lbr_parse</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>DCAExssAsset</name> <modifier>*</modifier></type><name>asset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct>struct <block>{

<decl_stmt><decl><type><name>LBRChunk</name></type> <name>lfe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LBRChunk</name></type> <name>tonal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LBRChunk</name></type> <name><name>tonal_grp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LBRChunk</name></type> <name><name>grid1</name><index>[<expr><name>DCA_LBR_CHANNELS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LBRChunk</name></type> <name><name>hr_grid</name><index>[<expr><name>DCA_LBR_CHANNELS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LBRChunk</name></type> <name><name>ts1</name><index>[<expr><name>DCA_LBR_CHANNELS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LBRChunk</name></type> <name><name>ts2</name><index>[<expr><name>DCA_LBR_CHANNELS</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block> <decl><name>chunk</name> <init>= <expr><block>{ <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr> }</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>group</name></decl>, <decl><type ref="prev"/><name>chunk_id</name></decl>, <decl><type ref="prev"/><name>chunk_len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name><name>asset</name><operator>-&gt;</operator><name>lbr_offset</name></name></expr></argument>, <argument><expr><name><name>asset</name><operator>-&gt;</operator><name>lbr_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>DCA_SYNCWORD_LBR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid LBR sync word\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>DCA_LBR_HEADER_SYNC_ONLY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"LBR decoder not initialized\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>DCA_LBR_HEADER_DECODER_INIT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_decoder_init</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid LBR header type\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name>chunk_id</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>chunk_id</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_len</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunk_len</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"LBR frame chunk was truncated\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>chunk_id</name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LBR_CHUNK_FRAME</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <operator>(</operator><name>AV_EF_CRCCHECK</name> <operator>|</operator> <name>AV_EF_CAREFUL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>checksum</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>res</name> <init>= <expr><name>chunk_id</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name>chunk_len</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name>chunk_len</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chunk_len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>!=</operator> <name>res</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid LBR checksum\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_FRAME_NO_CSUM</name></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid LBR frame chunk ID\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quant_levels</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quant_levels</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_indices</name></name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_indices</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sec_ch_sbms</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sec_ch_sbms</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sec_ch_lrms</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sec_ch_lrms</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_pres</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ch_pres</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_2_scf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_2_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_scf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_pres</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_pres</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_scf</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_scf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo_pres</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>part_stereo</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sf</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>group</name></expr>;</condition> <incr><expr><name>sf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sf_idx</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>&lt;&lt;</operator> <name>group</name><operator>)</operator> <operator>+</operator> <name>sf</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>sf_idx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>sf_idx</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ntones</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunk_id</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_len</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>chunk_id</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>chunk_id</name> <operator>&amp;=</operator> <literal type="number">0x7f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chunk_len</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>chunk_len</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"LBR chunk %#x was truncated\n"</literal></expr></argument>, <argument><expr><name>chunk_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>chunk_id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>LBR_CHUNK_LFE</name></expr>:</case>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>lfe</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>lfe</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_SCF</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_SCF</name></expr>:</case>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal</name><operator>.</operator><name>id</name></name> <operator>=</operator> <name>chunk_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_TONAL_GRP_1</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_GRP_2</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_GRP_3</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_GRP_4</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_GRP_5</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>LBR_CHUNK_TONAL_GRP_5</name> <operator>-</operator> <name>chunk_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal_grp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal_grp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal_grp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_TONAL_SCF_GRP_1</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_SCF_GRP_2</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_SCF_GRP_3</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_SCF_GRP_4</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_TONAL_SCF_GRP_5</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>LBR_CHUNK_TONAL_SCF_GRP_5</name> <operator>-</operator> <name>chunk_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal_grp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal_grp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>tonal_grp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_RES_GRID_LR</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_GRID_LR</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_GRID_LR</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>chunk_id</name> <operator>-</operator> <name>LBR_CHUNK_RES_GRID_LR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>grid1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>grid1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_RES_GRID_HR</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_GRID_HR</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_GRID_HR</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>chunk_id</name> <operator>-</operator> <name>LBR_CHUNK_RES_GRID_HR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>hr_grid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>hr_grid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_RES_TS_1</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_TS_1</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_TS_1</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>chunk_id</name> <operator>-</operator> <name>LBR_CHUNK_RES_TS_1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>ts1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>ts1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>LBR_CHUNK_RES_TS_2</name></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_TS_2</name> <operator>+</operator> <literal type="number">1</literal></expr>:</case>

<case>case <expr><name>LBR_CHUNK_RES_TS_2</name> <operator>+</operator> <literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>chunk_id</name> <operator>-</operator> <name>LBR_CHUNK_RES_TS_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>chunk_len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>chunk</name><operator>.</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>gb</name><operator>.</operator><name>buffer</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>chunk_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_lfe_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>.</operator><name>lfe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>parse_tonal_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>.</operator><name>tonal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>parse_tonal_group</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>.</operator><name>tonal_grp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch1</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ch1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_grid_1_chunk</name> <argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>.</operator><name>grid1</name> <index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>parse_high_res_grid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>.</operator><name>hr_grid</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>chunk</name><operator>.</operator><name>grid1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>||</operator> <operator>!</operator><name><name>chunk</name><operator>.</operator><name>hr_grid</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>||</operator> <operator>!</operator><name><name>chunk</name><operator>.</operator><name>ts1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_ts1_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>.</operator><name>ts1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>parse_ts2_chunk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>chunk</name><operator>.</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_grid</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>g1_sb</name> <init>= <expr><name><name>ff_dca_scf_to_grid_1</name><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>g1_scf_a</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>g1_sb</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>g1_scf_b</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grid_1_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>g1_sb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w1</name> <init>= <expr><name><name>ff_dca_grid_1_weights</name><index>[<expr><name>g1_sb</name></expr> ]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w2</name> <init>= <expr><name><name>ff_dca_grid_1_weights</name><index>[<expr><name>g1_sb</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hr_scf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>high_res_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scf</name> <init>= <expr><name>w1</name> <operator>*</operator> <name><name>g1_scf_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>w2</name> <operator>*</operator> <name><name>g1_scf_b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hr_scf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>scf</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>g3_scf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g3_avg</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grid_3_avg</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>scf</name> <init>= <expr><name>w1</name> <operator>*</operator> <name><name>g1_scf_a</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>w2</name> <operator>*</operator> <name><name>g1_scf_b</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>hr_scf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>scf</name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <name>g3_avg</name> <operator>-</operator> <name><name>g3_scf</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>random_ts</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ch_pres</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>sb</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DCA_LBR_TIME_SAMPLES</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>lbr_rand</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name> <operator>/</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>samples</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name><name>accum</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>other</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>accum</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>other</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>accum</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <literal type="number">0.25f</literal> <operator>+</operator> <literal type="number">0.5f</literal><operator>)</operator> <operator>*</operator> <call><name>lbr_rand</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predict</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coeff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nsamples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nsamples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <name><name>coeff</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>samples</name><index>[<expr><name>i</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>synth_lpc</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ch_pres</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>sb</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>predict</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><name>f</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>predict</name><argument_list>(<argument><expr><name>samples</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><name>f</name></expr> ]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>predict</name><argument_list>(<argument><expr><name>samples</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><name>f</name></expr> ]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>predict</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><name>f</name><operator>^</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>predict</name><argument_list>(<argument><expr><name>samples</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name><index>[<expr><name>f</name></expr> ]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">112</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter_ts</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>hr_scf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>high_res_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name> <operator>/</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>samples</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scf</name> <init>= <expr><name><name>hr_scf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scf</name> <operator>&gt;</operator> <name>AMP_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scf</name> <operator>=</operator> <name>AMP_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name><name>ff_dca_quant_amp</name><index>[<expr><name>scf</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>g2_scf</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>grid_2_scf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name><name>ff_dca_scf_to_grid_2</name><index>[<expr><name>sb</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>scf</name> <init>= <expr><name><name>hr_scf</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>g2_scf</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>scf</name> <operator>&gt;</operator> <name>AMP_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>scf</name> <operator>=</operator> <name>AMP_MAX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*=</operator> <name><name>ff_dca_quant_amp</name><index>[<expr><name>scf</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*=</operator> <name><name>ff_dca_quant_amp</name><index>[<expr><name>scf</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples_l</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch1</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples_r</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch2</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch2_pres</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ch_pres</name><index>[<expr><name>ch2</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>sb</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name> <operator>/</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sbms</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sec_ch_sbms</name><index>[<expr><name>ch1</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lrms</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sec_ch_lrms</name><index>[<expr><name>ch1</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>lrms</name> <operator>&amp;&amp;</operator> <name>ch2_pres</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sbms</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ch2_pres</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sbms</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>part_stereo_pres</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ch1</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>sbms</name> <operator>&amp;&amp;</operator> <name>ch2_pres</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>tmp</name> <init>= <expr><name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>samples_l</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>-</operator> <name><name>samples_r</name><index>[<expr><name>j</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samples_l</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_r</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sb</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>synth_lpc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><name>sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_part_stereo</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>sf</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>ch1</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name>ch2</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pt_st</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><operator>(</operator><name>sb</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>min_mono_subband</name></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ch_pres</name><index>[<expr><name>ch2</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>sb</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sf</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>sf</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sf</name><operator>++</operator></expr><operator>,</operator> <expr><name>samples</name> <operator>+=</operator> <literal type="number">32</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>prev</name> <init>= <expr><name><name>ff_dca_st_coeff</name><index>[<expr><name><name>pt_st</name><index>[<expr><name>sf</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>next</name> <init>= <expr><name><name>ff_dca_st_coeff</name><index>[<expr><name><name>pt_st</name><index>[<expr><name>sf</name></expr> ]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>prev</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>next</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>synth_tones</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>group</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>group_sf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>synth_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>start</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>synth_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>group_sf</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name><index>[<expr><name>group</name></expr>]</index><index>[<expr><name>group_sf</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name>start</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>DCA_LBR_TONES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DCALbrTone</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tones</name><index>[<expr><operator>(</operator><name>start</name> <operator>+</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>DCA_LBR_TONES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>amp</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>amp</name> <init>= <expr><name><name>ff_dca_synth_env</name><index>[<expr><name>synth_idx</name></expr>]</index></name> <operator>*</operator> <name><name>ff_dca_quant_amp</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>amp</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>c</name> <init>= <expr><name>amp</name> <operator>*</operator> <name><name>cos_tab</name><index>[<expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>phs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>s</name> <init>= <expr><name>amp</name> <operator>*</operator> <name><name>cos_tab</name><index>[<expr><operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>phs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name><name>ff_dca_corr_cf</name><index>[<expr><name><name>t</name><operator>-&gt;</operator><name>f_delt</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_freq</name> <init>= <expr><name><name>t</name><operator>-&gt;</operator><name>x_freq</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>x_freq</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<goto>goto <name>p0</name>;</goto>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>c</name></expr>;</expr_stmt>

<goto>goto <name>p1</name>;</goto>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<goto>goto <name>p2</name>;</goto>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<goto>goto <name>p3</name>;</goto>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<goto>goto <name>p4</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<label><name>p4</name>:</label> <expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<label><name>p3</name>:</label> <expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<label><name>p2</name>:</label> <expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>c</name></expr>;</expr_stmt>

<label><name>p1</name>:</label> <expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<label><name>p0</name>:</label> <expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name></expr> ]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <operator>-</operator><name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>values</name><index>[<expr><name>x_freq</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name><name>cf</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>*</operator> <name>s</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>phs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name><name>t</name><operator>-&gt;</operator><name>ph_rot</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>base_func_synth</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sf</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>group</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>group</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>group</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>group</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>group_sf</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>&lt;&lt;</operator> <name>group</name><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name>sf</name> <operator>-</operator> <literal type="number">22</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>-</operator> <name>group</name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>synth_idx</name> <init>= <expr><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>sf</name> <operator>-</operator> <literal type="number">22</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>group</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>group</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>synth_tones</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><operator>(</operator><name>group_sf</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">30</literal> <operator>-</operator> <name>synth_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>synth_tones</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>group</name></expr></argument>, <argument><expr><operator>(</operator><name>group_sf</name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></argument>, <argument><expr><name>synth_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>transform_channel</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><index>[<expr><name>DCA_LBR_SUBBANDS</name></expr> ]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><index>[<expr><name>DCA_LBR_SUBBANDS</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sf</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>nsubbands</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr></init></decl>, <decl><type ref="prev"/><name>noutsubbands</name> <init>= <expr><literal type="number">8</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nsubbands</name> <operator>&lt;</operator> <name>noutsubbands</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><name>nsubbands</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>noutsubbands</name> <operator>-</operator> <name>nsubbands</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>sf</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sf</name> <operator>&lt;</operator> <name>DCA_LBR_TIME_SAMPLES</name> <operator>/</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>sf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dcadsp</name><operator>-&gt;</operator><name>lbr_bank</name></name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><name>ff_dca_bank_coeff</name></expr></argument>, <argument><expr><name>sf</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>nsubbands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>base_func_synth</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>imdct</name><operator>.</operator><name>imdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct</name></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>noutsubbands</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><name>noutsubbands</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><name>noutsubbands</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>+=</operator> <name>noutsubbands</name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name>nsubbands</name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>-</operator> <name>DCA_LBR_TIME_HISTORY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>samples</name> <operator>+</operator> <name>DCA_LBR_TIME_SAMPLES</name></expr></argument>, <argument><expr><name>DCA_LBR_TIME_HISTORY</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dca_lbr_filter_frame</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>nchannels</name></decl>, <decl><type ref="prev"/><name>ch_conf</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>reorder</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <name><name>channel_layouts</name><index>[<expr><name>ch_conf</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>nchannels</name> <operator>=</operator> <name><name>channel_counts</name><index>[<expr><name>ch_conf</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_DTS_EXPRESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_rate_scaled</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_LFE_PRESENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>|=</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>reorder</name> <operator>=</operator> <name><name>channel_reorder_lfe</name><index>[<expr><name>ch_conf</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>reorder</name> <operator>=</operator> <name><name>channel_reorder_nolfe</name><index>[<expr><name>ch_conf</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">1024</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch1</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch2</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>ch1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>decode_grid</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>random_ts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>filter_ts</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>part_stereo_pres</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ch1</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>decode_part_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>&lt;</operator> <name>nchannels</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>transform_channel</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch1</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>reorder</name><index>[<expr><name>ch1</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ch1</name> <operator>!=</operator> <name>ch2</name> <operator>&amp;&amp;</operator> <name>ch2</name> <operator>&lt;</operator> <name>nchannels</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>transform_channel</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch2</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>reorder</name><index>[<expr><name>ch2</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>LBR_FLAG_LFE_PRESENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dcadsp</name><operator>-&gt;</operator><name>lfe_iir</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>lfe_index</name><index>[<expr><name>ch_conf</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_data</name></name></expr></argument>, <argument><expr><name>ff_dca_lfe_iir</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_history</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>freq_range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_side_data_update_matrix_encoding</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_MATRIX_ENCODING_NONE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_dca_lbr_flush</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>part_stereo</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lpc_coeff</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>history</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tonal_bounds</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lfe_history</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>framenum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ntones</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nsubbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>time_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>-</operator> <name>DCA_LBR_TIME_HISTORY</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>DCA_LBR_TIME_HISTORY</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_dca_lbr_init</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>init_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lbr_rand</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_dca_lbr_close</name><parameter_list>(<parameter><decl><type><name>DCALbrDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ts_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ts_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>imdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
