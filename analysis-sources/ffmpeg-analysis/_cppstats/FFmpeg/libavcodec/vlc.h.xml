<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vlc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VLC_TYPE</name></cpp:macro> <cpp:value>int16_t</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>VLC</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>VLC_TYPE</name> <argument_list>(<argument><expr><operator>*</operator><name>table</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>table_size</name></decl>, <name>table_allocated</name>;</decl_stmt>

}</block></struct></type> <name>VLC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RL_VLC_ELEM</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>run</name></decl>;</decl_stmt>

}</block></struct></type> <name>RL_VLC_ELEM</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>init_vlc</name><parameter_list>(<parameter><type><name>vlc</name></type></parameter>, <parameter><type><name>nb_bits</name></type></parameter>, <parameter><type><name>nb_codes</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>bits_wrap</name></type></parameter>, <parameter><type><name>bits_size</name></type></parameter>, <parameter><type><name>codes</name></type></parameter>, <parameter><type><name>codes_wrap</name></type></parameter>, <parameter><type><name>codes_size</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_init_vlc_sparse(vlc, nb_bits, nb_codes, bits, bits_wrap, bits_size, codes, codes_wrap, codes_size, NULL, 0, 0, flags)</cpp:value></cpp:define>

<function_decl><type><name>int</name></type> <name>ff_init_vlc_sparse</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_codes</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits_wrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>codes</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codes_wrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>codes_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>symbols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbols_wrap</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>symbols_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_free_vlc</name><parameter_list>(<parameter><decl><type><name>VLC</name> <modifier>*</modifier></type><name>vlc</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_VLC_LE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_VLC_USE_NEW_STATIC</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_VLC_SPARSE_STATIC</name><parameter_list>(<parameter><type><name>vlc</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>static_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { static VLC_TYPE table[static_size][2]; (vlc)-&gt;table = table; (vlc)-&gt;table_allocated = static_size; ff_init_vlc_sparse(vlc, bits, a, b, c, d, e, f, g, h, i, j, INIT_VLC_USE_NEW_STATIC); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_LE_VLC_SPARSE_STATIC</name><parameter_list>(<parameter><type><name>vlc</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>h</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>j</name></type></parameter>, <parameter><type><name>static_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { static VLC_TYPE table[static_size][2]; (vlc)-&gt;table = table; (vlc)-&gt;table_allocated = static_size; ff_init_vlc_sparse(vlc, bits, a, b, c, d, e, f, g, h, i, j, INIT_VLC_USE_NEW_STATIC | INIT_VLC_LE); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_VLC_STATIC</name><parameter_list>(<parameter><type><name>vlc</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>static_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INIT_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g, NULL, 0, 0, static_size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_LE_VLC_STATIC</name><parameter_list>(<parameter><type><name>vlc</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>g</name></type></parameter>, <parameter><type><name>static_size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INIT_LE_VLC_SPARSE_STATIC(vlc, bits, a, b, c, d, e, f, g, NULL, 0, 0, static_size)</cpp:value></cpp:define>

</unit>
