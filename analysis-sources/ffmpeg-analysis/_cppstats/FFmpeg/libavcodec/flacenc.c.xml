<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\flacenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lpc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_SUBFRAME_CONSTANT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_SUBFRAME_VERBATIM</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_SUBFRAME_FIXED</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAC_SUBFRAME_LPC</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FIXED_ORDER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARTITION_ORDER</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PARTITIONS</name></cpp:macro> <cpp:value>(1 &lt;&lt; MAX_PARTITION_ORDER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LPC_PRECISION</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LPC_SHIFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LPC_SHIFT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<enum>enum <name>CodingMode</name> <block>{

<decl><name>CODING_MODE_RICE</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>CODING_MODE_RICE2</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>CompressionOptions</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>compression_level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_time_ms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>FFLPCType</name></name></type> <name>lpc_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lpc_passes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lpc_coeff_precision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_prediction_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_prediction_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>prediction_order_method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_partition_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_partition_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>exact_rice_parameters</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>multi_dim_quant</name></decl>;</decl_stmt>

}</block></struct></type> <name>CompressionOptions</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RiceContext</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>CodingMode</name></name></type> <name>coding_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>porder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>params</name><index>[<expr><name>MAX_PARTITIONS</name></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RiceContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FlacSubframe</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>obits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>wasted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>coefs</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RiceContext</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>rc_udata</name><index>[<expr><name>FLAC_MAX_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>rc_sums</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><name>MAX_PARTITIONS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>samples</name><index>[<expr><name>FLAC_MAX_BLOCKSIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>residual</name><index>[<expr><name>FLAC_MAX_BLOCKSIZE</name><operator>+</operator><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>FlacSubframe</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FlacFrame</name> <block>{

<decl_stmt><decl><type><name>FlacSubframe</name></type> <name><name>subframes</name><index>[<expr><name>FLAC_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>bs_code</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>crc8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>verbatim_only</name></decl>;</decl_stmt>

}</block></struct></type> <name>FlacFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>FlacEncodeContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samplerate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>sr_code</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bps_code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_blocksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_framesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_framesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_encoded_framesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frame_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sample_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>md5sum</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FlacFrame</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CompressionOptions</name></type> <name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPCContext</name></type> <name>lpc_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVMD5</name></name> <modifier>*</modifier></type><name>md5ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>md5_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>md5_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FLACDSPContext</name></type> <name>flac_dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flushed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>next_pts</name></decl>;</decl_stmt>

}</block></struct></type> <name>FlacEncodeContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_streaminfo</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FLAC_STREAMINFO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>FLAC_STREAMINFO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_blocksize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>min_framesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>max_framesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sample_count</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFF000LL</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_count</name></name> <operator>&amp;</operator> <literal type="number">0x000000FFFLL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>header</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>md5sum</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>select_blocksize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>samplerate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block_time_ms</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>samplerate</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <name><name>ff_flac_blocksize_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>target</name> <operator>=</operator> <operator>(</operator><name>samplerate</name> <operator>*</operator> <name>block_time_ms</name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>target</name> <operator>&gt;=</operator> <name><name>ff_flac_blocksize_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>ff_flac_blocksize_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>blocksize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blocksize</name> <operator>=</operator> <name><name>ff_flac_blocksize_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>blocksize</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dprint_compression_options</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CompressionOptions</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>options</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" compression: %d\n"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>lpc_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>FF_LPC_TYPE_NONE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" lpc type: None\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_LPC_TYPE_FIXED</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" lpc type: Fixed pre-defined coefficients\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_LPC_TYPE_LEVINSON</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" lpc type: Levinson-Durbin recursion with Welch window\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>FF_LPC_TYPE_CHOLESKY</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" lpc type: Cholesky factorization, %d pass%s\n"</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>lpc_passes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>lpc_passes</name></name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"es"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" prediction order: %d, %d\n"</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>min_prediction_order</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>max_prediction_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>prediction_order_method</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>ORDER_METHOD_EST</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" order method: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"estimate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORDER_METHOD_2LEVEL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" order method: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"2-level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORDER_METHOD_4LEVEL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" order method: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"4-level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORDER_METHOD_8LEVEL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" order method: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"8-level"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORDER_METHOD_SEARCH</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" order method: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"full search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>ORDER_METHOD_LOG</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" order method: %s\n"</literal></expr></argument>, <argument><expr><literal type="string">"log search"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" partition order: %d, %d\n"</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>min_partition_order</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>max_partition_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" block size: %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" lpc precision: %d\n"</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>lpc_coeff_precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flac_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>streaminfo</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>!=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"encoding as 24 bits-per-sample\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>channels</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>channels</name></expr></argument> &gt;</argument_list></name> <name>FLAC_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d channels not supported (max %d)\n"</literal></expr></argument>,

<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>FLAC_MAX_CHANNELS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>==</operator> <name><name>ff_flac_sample_rate_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>=</operator> <name><name>ff_flac_sample_rate_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>freq</name> <operator>%</operator> <literal type="number">1000</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&lt;</operator> <literal type="number">255000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>freq</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>freq</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>freq</name> <operator>&lt;</operator> <literal type="number">655350</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>freq</name> <operator>/</operator> <literal type="number">10</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>freq</name> <operator>&lt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d Hz not supported\n"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate</name></name> <operator>=</operator> <name>freq</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>compression_level</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>compression_level</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>compression_level</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid compression level: %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>block_time_ms</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">27</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>,<expr><literal type="number">105</literal></expr>}</block><operator>)</operator><index>[<expr><name>level</name></expr>]</index></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>==</operator> <name>FF_LPC_TYPE_DEFAULT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>FF_LPC_TYPE_FIXED</name></expr>, <expr><name>FF_LPC_TYPE_FIXED</name></expr>, <expr><name>FF_LPC_TYPE_FIXED</name></expr>,

<expr><name>FF_LPC_TYPE_LEVINSON</name></expr>, <expr><name>FF_LPC_TYPE_LEVINSON</name></expr>, <expr><name>FF_LPC_TYPE_LEVINSON</name></expr>,

<expr><name>FF_LPC_TYPE_LEVINSON</name></expr>, <expr><name>FF_LPC_TYPE_LEVINSON</name></expr>, <expr><name>FF_LPC_TYPE_LEVINSON</name></expr>,

<expr><name>FF_LPC_TYPE_LEVINSON</name></expr>, <expr><name>FF_LPC_TYPE_LEVINSON</name></expr>, <expr><name>FF_LPC_TYPE_LEVINSON</name></expr>,

<expr><name>FF_LPC_TYPE_LEVINSON</name></expr>}</block><operator>)</operator><index>[<expr><name>level</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block><operator>)</operator><index>[<expr><name>level</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">32</literal></expr>}</block><operator>)</operator><index>[<expr><name>level</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>prediction_order_method</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>prediction_order_method</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>ORDER_METHOD_EST</name></expr>, <expr><name>ORDER_METHOD_EST</name></expr>, <expr><name>ORDER_METHOD_EST</name></expr>,

<expr><name>ORDER_METHOD_EST</name></expr>, <expr><name>ORDER_METHOD_EST</name></expr>, <expr><name>ORDER_METHOD_EST</name></expr>,

<expr><name>ORDER_METHOD_4LEVEL</name></expr>, <expr><name>ORDER_METHOD_LOG</name></expr>, <expr><name>ORDER_METHOD_4LEVEL</name></expr>,

<expr><name>ORDER_METHOD_LOG</name></expr>, <expr><name>ORDER_METHOD_SEARCH</name></expr>, <expr><name>ORDER_METHOD_LOG</name></expr>,

<expr><name>ORDER_METHOD_SEARCH</name></expr>}</block><operator>)</operator><index>[<expr><name>level</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_partition_order</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_partition_order</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid partition orders: min=%d max=%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_partition_order</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_partition_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_partition_order</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_partition_order</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block><operator>)</operator><index>[<expr><name>level</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_partition_order</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_partition_order</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>int</name><index>[]</index></name><operator>)</operator><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>}</block><operator>)</operator><index>[<expr><name>level</name></expr>]</index></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PRIVATE_OPT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>==</operator> <name>FF_LPC_TYPE_FIXED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name> <operator>&gt;</operator> <name>MAX_FIXED_ORDER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"invalid min prediction order %d, clamped to %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name></expr></argument>, <argument><expr><name>MAX_FIXED_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name> <operator>=</operator> <name>MAX_FIXED_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name> <operator>&lt;</operator> <name>MIN_LPC_ORDER</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name> <operator>&gt;</operator> <name>MAX_LPC_ORDER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid min prediction order: %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>min_prediction_order</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>==</operator> <name>FF_LPC_TYPE_FIXED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name> <operator>&gt;</operator> <name>MAX_FIXED_ORDER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"invalid max prediction order %d, clamped to %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name></expr></argument>, <argument><expr><name>MAX_FIXED_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name> <operator>=</operator> <name>MAX_FIXED_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name> <operator>&lt;</operator> <name>MIN_LPC_ORDER</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name> <operator>&gt;</operator> <name>MAX_LPC_ORDER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid max prediction order: %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_prediction_order</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>==</operator> <name>FF_LPC_TYPE_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>==</operator> <name>FF_LPC_TYPE_FIXED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name> <operator>&gt;</operator> <name>MAX_FIXED_ORDER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"invalid min prediction order %d, clamped to %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name></expr></argument>, <argument><expr><name>MAX_FIXED_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name> <operator>=</operator> <name>MAX_FIXED_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name> <operator>&gt;</operator> <name>MAX_FIXED_ORDER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"invalid max prediction order %d, clamped to %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name></expr></argument>, <argument><expr><name>MAX_FIXED_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name> <operator>=</operator> <name>MAX_FIXED_ORDER</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid prediction orders: min=%d max=%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&lt;</operator> <name>FLAC_MIN_BLOCKSIZE</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>&gt;</operator> <name>FLAC_MAX_BLOCKSIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid block size: %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <call><name>select_blocksize</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>block_time_ms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_blocksize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_framesize</name></name> <operator>=</operator> <call><name>ff_flac_get_max_frame_size</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>md5ctx</name></name> <operator>=</operator> <call><name>av_md5_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>md5ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_md5_init</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>md5ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>streaminfo</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>FLAC_STREAMINFO_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>streaminfo</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>write_streaminfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>streaminfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <name>streaminfo</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>FLAC_STREAMINFO_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_framesize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_framesize</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>==</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <operator>(</operator><name>AV_CH_LAYOUT_STEREO</name><operator>|</operator><name>AV_CH_FRONT_CENTER</name><operator>)</operator> <operator>||</operator>

<name>channels</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_2_2</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_QUAD</name> <operator>||</operator>

<name>channels</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_5POINT0</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_5POINT0_BACK</name> <operator>||</operator>

<name>channels</name> <operator>==</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_5POINT1</name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>!=</operator> <name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Channel layout not supported by Flac, "</literal>

<literal type="string">"output stream will have incorrect "</literal>

<literal type="string">"channel layout.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No channel layout specified. The encoder "</literal>

<literal type="string">"will use Flac channel layout for "</literal>

<literal type="string">"%d channels.\n"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_lpc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lpc_ctx</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name></expr></argument>, <argument><expr><name>FF_LPC_TYPE_LEVINSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_flacdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>, <argument><expr><name>channels</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dprint_compression_options</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_frame</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FlacFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>==</operator> <name><name>ff_flac_blocksize_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name><name>ff_flac_blocksize_table</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>=</operator> <name>nb_samples</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>blocksize</name></name> <operator>&lt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocksize</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocksize</name></name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FlacSubframe</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>wasted</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>obits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>obits</name></name> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>coding_mode</name></name> <operator>=</operator> <name>CODING_MODE_RICE2</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>coding_mode</name></name> <operator>=</operator> <name>CODING_MODE_RICE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>verbatim_only</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_samples</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FlacFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SAMPLES</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { const int ##bits ##_t *samples0 = samples; frame = &amp;s-&gt;frame; for (i = 0, j = 0; i &lt; frame-&gt;blocksize; i++) for (ch = 0; ch &lt; s-&gt;channels; ch++, j++) frame-&gt;subframes[ch].samples[i] = samples0[j] &gt;&gt; shift; } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COPY_SAMPLES</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>COPY_SAMPLES</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>rice_count_exact</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><operator>-</operator><literal type="number">2</literal> <operator>*</operator> <name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>^=</operator> <name>v</name> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>subframe_count_exact</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>FlacSubframe</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pred_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>, <decl><type ref="prev"/><name>porder</name></decl>, <decl><type ref="prev"/><name>psize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>part_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>wasted</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>sub</name><operator>-&gt;</operator><name>wasted</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC_SUBFRAME_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>sub</name><operator>-&gt;</operator><name>obits</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC_SUBFRAME_VERBATIM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name> <operator>*</operator> <name><name>sub</name><operator>-&gt;</operator><name>obits</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name>pred_order</name> <operator>*</operator> <name><name>sub</name><operator>-&gt;</operator><name>obits</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC_SUBFRAME_LPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>pred_order</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>porder</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>porder</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name> <operator>&gt;&gt;</operator> <name>porder</name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>pred_order</name></expr>;</expr_stmt>

<expr_stmt><expr><name>part_end</name> <operator>=</operator> <name>psize</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>porder</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>params</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>coding_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>rice_count_exact</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>residual</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>part_end</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name>part_end</name></expr>;</expr_stmt>

<expr_stmt><expr><name>part_end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>part_end</name> <operator>+</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rice_encode_count</name><parameter_list>(<parameter><type><name>sum</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((n)*((k)+1))+((sum-(n&gt;&gt;1))&gt;&gt;(k)))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_optimal_param</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>sum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sum</name> <operator>&lt;=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sum2</name> <operator>=</operator> <name>sum</name> <operator>-</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><call><name>av_clipl_int32</name><argument_list>(<argument><expr><name>sum2</name> <operator>/</operator> <name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>max_param</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_optimal_param_exact</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name><name>sums</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><name>MAX_PARTITIONS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bestk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>bestbits</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>max_param</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>bits</name> <init>= <expr><name><name>sums</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>bestbits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bestbits</name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bestk</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>bestk</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>calc_optimal_rice_params</name><parameter_list>(<parameter><decl><type><name>RiceContext</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>porder</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name><name>sums</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><name>MAX_PARTITIONS</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_param</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exact</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>cnt</name></decl>, <decl><type ref="prev"/><name>part</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>all_bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>part</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>porder</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>all_bits</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name>part</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>&gt;&gt;</operator> <name>porder</name><operator>)</operator> <operator>-</operator> <name>pred_order</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>part</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>exact</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>find_optimal_param_exact</name><argument_list>(<argument><expr><name>sums</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>max_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>all_bits</name> <operator>+=</operator> <name><name>sums</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>find_optimal_param</name><argument_list>(<argument><expr><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>max_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>all_bits</name> <operator>+=</operator> <call><name>rice_encode_count</name><argument_list>(<argument><expr><name><name>sums</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cnt</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>porder</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>rc</name><operator>-&gt;</operator><name>porder</name></name> <operator>=</operator> <name>porder</name></expr>;</expr_stmt>

<return>return <expr><name>all_bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_sum_top</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pmax</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kmax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred_order</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name><name>sums</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><name>MAX_PARTITIONS</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>res_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>parts</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>pmax</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;=</operator> <name>kmax</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><index>[<expr><name>pred_order</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>res_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>data</name><index>[<expr><name>n</name> <operator>&gt;&gt;</operator> <name>pmax</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>parts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>kmax</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>+</operator> <name>k</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>res_end</name> <operator>-</operator> <name>res</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>res_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>res</name><operator>++</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>k</name></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>sums</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>res_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>*</operator><operator>(</operator><name>res</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>sums</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>res_end</name> <operator>+=</operator> <name>n</name> <operator>&gt;&gt;</operator> <name>pmax</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>calc_sum_next</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name><name>sums</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><name>MAX_PARTITIONS</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>kmax</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parts</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>level</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>parts</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name><operator>&lt;=</operator><name>kmax</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sums</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sums</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>sums</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>calc_rice_params</name><parameter_list>(<parameter><decl><type><name>RiceContext</name> <modifier>*</modifier></type><name>rc</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name><name>udata</name><index>[<expr><name>FLAC_MAX_BLOCKSIZE</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name><name>sums</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><name>MAX_PARTITIONS</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pmin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pmax</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exact</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bits</name><index>[<expr><name>MAX_PARTITION_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_porder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RiceContext</name></type> <name>tmp_rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>kmax</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>rc</name><operator>-&gt;</operator><name>coding_mode</name></name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>pmin</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pmin</name> <operator>&lt;=</operator> <name>MAX_PARTITION_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>pmax</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pmax</name> <operator>&lt;=</operator> <name>MAX_PARTITION_ORDER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>pmin</name> <operator>&lt;=</operator> <name>pmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp_rc</name><operator>.</operator><name>coding_mode</name></name> <operator>=</operator> <name><name>rc</name><operator>-&gt;</operator><name>coding_mode</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>udata</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>^</operator> <operator>(</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>calc_sum_top</name><argument_list>(<argument><expr><name>pmax</name></expr></argument>, <argument><expr><ternary><condition><expr><name>exact</name></expr> ?</condition><then> <expr><name>kmax</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name>udata</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pred_order</name></expr></argument>, <argument><expr><name>sums</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_porder</name> <operator>=</operator> <name>pmin</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>pmin</name></expr>]</index></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pmax</name></expr>;</init> <condition>;</condition> <incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>calc_optimal_rice_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_rc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>sums</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>pred_order</name></expr></argument>, <argument><expr><name>kmax</name></expr></argument>, <argument><expr><name>exact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>bits</name><index>[<expr><name>opt_porder</name></expr>]</index></name> <operator>||</operator> <name>pmax</name> <operator>==</operator> <name>pmin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_porder</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rc</name> <operator>=</operator> <name>tmp_rc</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>pmin</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>calc_sum_next</name><argument_list>(<argument><expr><operator>--</operator><name>i</name></expr></argument>, <argument><expr><name>sums</name></expr></argument>, <argument><expr><ternary><condition><expr><name>exact</name></expr> ?</condition><then> <expr><name>kmax</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name><name>bits</name><index>[<expr><name>opt_porder</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_max_p_order</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>max_porder</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>porder</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>max_porder</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>n</name><operator>^</operator><operator>(</operator><name>n</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>porder</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>porder</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>n</name><operator>/</operator><name>order</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>porder</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>find_subframe_rice_params</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>FlacSubframe</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pred_order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pmin</name> <init>= <expr><call><name>get_max_p_order</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_partition_order</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>pred_order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pmax</name> <init>= <expr><call><name>get_max_p_order</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_partition_order</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>pred_order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>bits</name> <init>= <expr><literal type="number">8</literal> <operator>+</operator> <name>pred_order</name> <operator>*</operator> <name><name>sub</name><operator>-&gt;</operator><name>obits</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>coding_mode</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC_SUBFRAME_LPC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>+</operator> <name>pred_order</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <call><name>calc_rice_params</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>rc</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rc_udata</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rc_sums</name></name></expr></argument>, <argument><expr><name>pmin</name></expr></argument>, <argument><expr><name>pmax</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>residual</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr></argument>, <argument><expr><name>pred_order</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>exact_rice_parameters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_residual_fixed</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>res</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>smp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>-</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>order</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>b</name> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d</name> <operator>-</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name> <init>= <expr><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">3</literal><operator>*</operator><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>order</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name> <init>= <expr><name>b</name> <operator>-</operator> <name>a</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>f</name> <init>= <expr><name>d</name> <operator>-</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>f</name> <operator>-</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>smp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>smp</name><index>[<expr><name>i</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>a</name> <operator>-</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>c</name> <operator>-</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>e</name> <operator>-</operator> <name>f</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_residual_ch</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_order</name></decl>, <decl><type ref="prev"/><name>max_order</name></decl>, <decl><type ref="prev"/><name>opt_order</name></decl>, <decl><type ref="prev"/><name>omethod</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FlacFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FlacSubframe</name> <modifier>*</modifier></type><name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>coefs</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>shift</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>res</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>smp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sub</name> <operator>=</operator> <operator>&amp;</operator><name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>residual</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>smp</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>samples</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>smp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>smp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>type_code</name></name> <operator>=</operator> <name>FLAC_SUBFRAME_CONSTANT</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>smp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><call><name>subframe_count_exact</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>verbatim_only</name></name> <operator>||</operator> <name>n</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>type_code</name></name> <operator>=</operator> <name>FLAC_SUBFRAME_VERBATIM</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>subframe_count_exact</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>min_order</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>min_prediction_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_order</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>max_prediction_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>omethod</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>prediction_order_method</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>FLAC_SUBFRAME_FIXED</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>==</operator> <name>FF_LPC_TYPE_NONE</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name> <operator>==</operator> <name>FF_LPC_TYPE_FIXED</name> <operator>||</operator> <name>n</name> <operator>&lt;=</operator> <name>max_order</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bits</name><index>[<expr><name>MAX_FIXED_ORDER</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_order</name> <operator>&gt;</operator> <name>MAX_FIXED_ORDER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_order</name> <operator>=</operator> <name>MAX_FIXED_ORDER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>min_order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>encode_residual_fixed</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find_subframe_rice_params</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>bits</name><index>[<expr><name>opt_order</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>opt_order</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>type_code</name></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>|</operator> <name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name> <operator>!=</operator> <name>max_order</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encode_residual_fixed</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>find_subframe_rice_params</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>subframe_count_exact</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>FLAC_SUBFRAME_LPC</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <call><name>ff_lpc_calc_coefs</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lpc_ctx</name></name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>min_order</name></expr></argument>, <argument><expr><name>max_order</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name></expr></argument>, <argument><expr><name>coefs</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_type</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_passes</name></name></expr></argument>, <argument><expr><name>omethod</name></expr></argument>,

<argument><expr><name>MIN_LPC_SHIFT</name></expr></argument>, <argument><expr><name>MAX_LPC_SHIFT</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>omethod</name> <operator>==</operator> <name>ORDER_METHOD_2LEVEL</name> <operator>||</operator>

<name>omethod</name> <operator>==</operator> <name>ORDER_METHOD_4LEVEL</name> <operator>||</operator>

<name>omethod</name> <operator>==</operator> <name>ORDER_METHOD_8LEVEL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>levels</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>omethod</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bits</name><index>[<expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>ORDER_METHOD_8LEVEL</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opt_index</name> <init>= <expr><name>levels</name><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <name>max_order</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>opt_index</name></expr>]</index></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>levels</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_order</name> <init>= <expr><name>order</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>order</name> <operator>=</operator> <name>min_order</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>max_order</name><operator>-</operator><name>min_order</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>levels</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>order</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>order</name></expr></argument>, <argument><expr><name>min_order</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_order</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>last_order</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc16_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>order</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>order</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>shift</name><index>[<expr><name>order</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc32_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>order</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>order</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>shift</name><index>[<expr><name>order</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find_subframe_rice_params</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>order</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>bits</name><index>[<expr><name>opt_index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>opt_index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>opt_order</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>omethod</name> <operator>==</operator> <name>ORDER_METHOD_SEARCH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bits</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>UINT32_MAX</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>min_order</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc16_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>shift</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc32_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>shift</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find_subframe_rice_params</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>bits</name><index>[<expr><name>opt_order</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>opt_order</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>omethod</name> <operator>==</operator> <name>ORDER_METHOD_LOG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>bits</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step</name></decl>;</decl_stmt>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <name>min_order</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>max_order</name><operator>-</operator><name>min_order</name><operator>)</operator><operator>/</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bits</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>step</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>step</name></expr>;</condition> <incr><expr><name>step</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><name>opt_order</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>last</name><operator>-</operator><name>step</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>last</name><operator>+</operator><name>step</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>min_order</name><operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>max_order</name> <operator>||</operator> <name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc32_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>shift</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc16_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>shift</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>find_subframe_rice_params</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>bits</name><index>[<expr><name>opt_order</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opt_order</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>opt_order</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>multi_dim_quant</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>allsteps</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>step</name></decl>, <decl><type ref="prev"/><name>improved</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>best_score</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>qmax</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qmax</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>opt_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>allsteps</name> <operator>*=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

<do>do <block>{<block_content>

<expr_stmt><expr><name>improved</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>step</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>step</name> <operator>&lt;</operator> <name>allsteps</name></expr>;</condition> <incr><expr><name>step</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name> <init>= <expr><name>step</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lpc_try</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>score</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>diffsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>opt_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name> <init>= <expr><operator>(</operator><operator>(</operator><name>tmp</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lpc_try</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>coefs</name><index>[<expr><name>opt_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>diff</name></expr></argument>, <argument><expr><operator>-</operator><name>qmax</name></expr></argument>, <argument><expr><name>qmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>/=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>diffsum</name> <operator>+=</operator> <operator>!</operator><operator>!</operator><name>diff</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>diffsum</name> <operator>&gt;</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>opt_order</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc16_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>opt_order</name></expr></argument>, <argument><expr><name>lpc_try</name></expr></argument>, <argument><expr><name><name>shift</name><index>[<expr><name>opt_order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc32_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>opt_order</name></expr></argument>, <argument><expr><name>lpc_try</name></expr></argument>, <argument><expr><name><name>shift</name><index>[<expr><name>opt_order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>score</name> <operator>=</operator> <call><name>find_subframe_rice_params</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name>opt_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>score</name> <operator>&lt;</operator> <name>best_score</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>best_score</name> <operator>=</operator> <name>score</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>coefs</name><index>[<expr><name>opt_order</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lpc_try</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>coefs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>improved</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block> while<condition>(<expr><name>improved</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>opt_order</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>type_code</name></name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>|</operator> <operator>(</operator><name><name>sub</name><operator>-&gt;</operator><name>order</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>shift</name></name> <operator>=</operator> <name><name>shift</name><index>[<expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>coefs</name><index>[<expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>opt_order</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc16_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>coefs</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>flac_dsp</name><operator>.</operator><name>lpc32_encode</name></name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>smp</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>coefs</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>find_subframe_rice_params</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>subframe_count_exact</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>count_frame_header</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <name>av_unused</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<macro><name>PUT_UTF8</name><argument_list>(<argument>s-&gt;frame_count</argument>, <argument>tmp</argument>, <argument>count += <literal type="number">8</literal>;</argument>)</argument_list></macro>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">12</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>

<expr_stmt><expr><name>count</name> <operator>=</operator> <call><name>count_frame_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <call><name>encode_residual_ch</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>count</name> <operator>+=</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>count</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name>count</name> <operator>&gt;&gt;=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>remove_wasted_bits</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FlacSubframe</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>subframes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>sub</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>ff_ctz</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>samples</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>wasted</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>obits</name></name> <operator>-=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>obits</name></name> <operator>&lt;=</operator> <literal type="number">17</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>coding_mode</name></name> <operator>=</operator> <name>CODING_MODE_RICE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>estimate_stereo_mode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>left_ch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>right_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_rice_param</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>best</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>lt</name></decl>, <decl><type ref="prev"/><name>rt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>sum</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>score</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lt</name> <operator>=</operator> <name><name>left_ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>left_ch</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left_ch</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rt</name> <operator>=</operator> <name><name>right_ch</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><name><name>right_ch</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>right_ch</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>lt</name> <operator>+</operator> <name>rt</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>lt</name> <operator>-</operator> <name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>find_optimal_param</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>max_rice_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>rice_encode_count</name><argument_list>( <argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>sum</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>score</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>score</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>score</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>score</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>best</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>score</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>score</name><index>[<expr><name>best</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>best</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>best</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>channel_decorrelation</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlacFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>left</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocksize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>samples</name></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>samples</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>=</operator> <name>FLAC_CHMODE_INDEPENDENT</name></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ch_mode</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>max_rice_param</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>rc</name><operator>.</operator><name>coding_mode</name></name><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>=</operator> <call><name>estimate_stereo_mode</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>right</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>max_rice_param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ch_mode</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>==</operator> <name>FLAC_CHMODE_INDEPENDENT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>==</operator> <name>FLAC_CHMODE_MID_SIDE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>tmp</name> <operator>+</operator> <name><name>right</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>-</operator> <name><name>right</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>obits</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>==</operator> <name>FLAC_CHMODE_LEFT_SIDE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>right</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>right</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>obits</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name><name>right</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subframes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>obits</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_utf8</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<macro><name>PUT_UTF8</name><argument_list>(<argument>val</argument>, <argument>tmp</argument>, <argument>put_bits(pb, <literal type="number">8</literal>, tmp);</argument>)</argument_list></macro>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_frame_header</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlacFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0xFFF8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>==</operator> <name>FLAC_CHMODE_INDEPENDENT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>ch_mode</name></name> <operator>+</operator> <name>FLAC_MAX_CHANNELS</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bps_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_utf8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>bs_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sr_code</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_8_ATM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_subframes</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FlacSubframe</name> <modifier>*</modifier></type><name>sub</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>subframes</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>p</name></decl>, <decl><type ref="prev"/><name>porder</name></decl>, <decl><type ref="prev"/><name>psize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>part_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>residual</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>frame_end</name> <init>= <expr><operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>residual</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>type_code</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>sub</name><operator>-&gt;</operator><name>wasted</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>wasted</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>wasted</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC_SUBFRAME_CONSTANT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>obits</name></name></expr></argument>, <argument><expr><name><name>res</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC_SUBFRAME_VERBATIM</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>frame_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>obits</name></name></expr></argument>, <argument><expr><operator>*</operator><name>res</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>obits</name></name></expr></argument>, <argument><expr><operator>*</operator><name>res</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>FLAC_SUBFRAME_LPC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cbits</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>( <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cbits</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sub</name><operator>-&gt;</operator><name>order</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>cbits</name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>coefs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>coding_mode</name></name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>porder</name> <operator>=</operator> <name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>porder</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>psize</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name> <operator>&gt;&gt;</operator> <name>porder</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>porder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>part_end</name> <operator>=</operator> <operator>&amp;</operator><name><name>sub</name><operator>-&gt;</operator><name>residual</name><index>[<expr><name>psize</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>p</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>porder</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>params</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>sub</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>coding_mode</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>res</name> <operator>&lt;</operator> <name>part_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>set_sr_golomb_flac</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><operator>*</operator><name>res</name><operator>++</operator></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>part_end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>frame_end</name></expr></argument>, <argument><expr><name>part_end</name> <operator>+</operator> <name>psize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>write_frame_footer</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>crc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_bswap16</name><argument_list>(<argument><expr><call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_16_ANSI</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pb</name><operator>.</operator><name>buf</name></name></expr></argument>,

<argument><expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>crc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_frame</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_frame_header</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_subframes</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_frame_footer</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_md5_sum</name><parameter_list>(<parameter><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator>

<operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator> <name>HAVE_BIGENDIAN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>md5_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>md5_buffer_size</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>md5_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><name>samples</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap16_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>md5_buffer</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint16_t</name> <operator>*</operator><operator>)</operator> <name>samples</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>md5_buffer</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>samples0</name> <init>= <expr><name>samples</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>md5_buffer</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>v</name> <init>= <expr><name><name>samples0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WL24</name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>i</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>buf</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>md5_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_md5_update</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>md5ctx</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>flac_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_bytes</name></decl>, <decl><type ref="prev"/><name>out_bytes</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_framesize</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>max_encoded_framesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_md5_final</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>md5ctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>md5sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_streaminfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_SIDEDATA_ONLY_PKT</name></expr></cpp:if>

<macro><name>FF_DISABLE_DEPRECATION_WARNINGS</name></macro>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>side_data_only_packets</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name></expr>)</condition> <block>{<block_content>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name></expr>)</condition> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name> <init>= <expr><call><name>av_packet_new_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_NEW_EXTRADATA</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flushed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocksize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_framesize</name></name> <operator>=</operator> <call><name>ff_flac_get_max_frame_size</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>init_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>channel_decorrelation</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remove_wasted_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame_bytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>frame_bytes</name></expr></argument> &gt;</argument_list></name> <name><name>s</name><operator>-&gt;</operator><name>max_framesize</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>verbatim_only</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_bytes</name> <operator>=</operator> <call><name>encode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bad frame count\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>frame_bytes</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>frame_bytes</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_bytes</name> <operator>=</operator> <call><name>write_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_count</name></name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>update_md5_sum</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error updating MD5 checksum\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_bytes</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_encoded_framesize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_encoded_framesize</name></name> <operator>=</operator> <name>out_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_bytes</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>min_framesize</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_framesize</name></name> <operator>=</operator> <name>out_bytes</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>out_bytes</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_pts</name></name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>+</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>flac_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>FlacEncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>md5ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>md5_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lpc_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lpc_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"lpc_coeff_precision"</literal></expr>, <expr><literal type="string">"LPC coefficient precision"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>lpc_coeff_precision</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">15</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>MAX_LPC_PRECISION</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lpc_type"</literal></expr>, <expr><literal type="string">"LPC algorithm"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>lpc_type</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_LPC_TYPE_DEFAULT</name></expr> }</block></expr>, <expr><name>FF_LPC_TYPE_DEFAULT</name></expr>, <expr><name>FF_LPC_TYPE_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lpc_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_LPC_TYPE_NONE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lpc_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fixed"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_LPC_TYPE_FIXED</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lpc_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"levinson"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_LPC_TYPE_LEVINSON</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lpc_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cholesky"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_LPC_TYPE_CHOLESKY</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"lpc_type"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"lpc_passes"</literal></expr>, <expr><literal type="string">"Number of passes to use for Cholesky factorization during LPC analysis"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>lpc_passes</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"min_partition_order"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>min_partition_order</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>MAX_PARTITION_ORDER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_partition_order"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>max_partition_order</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>MAX_PARTITION_ORDER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"prediction_order_method"</literal></expr>, <expr><literal type="string">"Search method for selecting prediction order"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>prediction_order_method</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>ORDER_METHOD_LOG</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"predm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"estimation"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ORDER_METHOD_EST</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"predm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2level"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ORDER_METHOD_2LEVEL</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"predm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4level"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ORDER_METHOD_4LEVEL</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"predm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"8level"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ORDER_METHOD_8LEVEL</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"predm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"search"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ORDER_METHOD_SEARCH</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"predm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>ORDER_METHOD_LOG</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"predm"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ch_mode"</literal></expr>, <expr><literal type="string">"Stereo decorrelation mode"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>ch_mode</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>FLAC_CHMODE_MID_SIDE</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ch_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ch_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"indep"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FLAC_CHMODE_INDEPENDENT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ch_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"left_side"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FLAC_CHMODE_LEFT_SIDE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ch_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"right_side"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FLAC_CHMODE_RIGHT_SIDE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ch_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"mid_side"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FLAC_CHMODE_MID_SIDE</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"ch_mode"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"exact_rice_parameters"</literal></expr>, <expr><literal type="string">"Calculate rice parameters exactly"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>exact_rice_parameters</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"multi_dim_quant"</literal></expr>, <expr><literal type="string">"Multi-dimensional quantization"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>multi_dim_quant</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"min_prediction_order"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>min_prediction_order</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>MAX_LPC_ORDER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"max_prediction_order"</literal></expr>, <expr><name>NULL</name></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>max_prediction_order</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>MAX_LPC_ORDER</name></expr>, <expr><name>FLAGS</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>flac_encoder_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"FLAC encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_flac_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"flac"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"FLAC (Free Lossless Audio Codec)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_FLAC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>FlacEncodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>flac_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>flac_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>flac_encode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_LOSSLESS</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>flac_encoder_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt></block_content></block></function>

</unit>
