<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hevcdec.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdatomic.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cabac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h2645_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_sei.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videodsp.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NB_THREADS</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_CTB_WPP</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRANSFORM_DEPTH</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TB_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_QP</name></cpp:macro> <cpp:value>51</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_INTRA_TC_OFFSET</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_CONTEXTS</name></cpp:macro> <cpp:value>199</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MRG_MAX_NUM_CANDS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L0</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>L1</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPEL_EXTRA_BEFORE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPEL_EXTRA_AFTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPEL_EXTRA</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_EXTRA_BEFORE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_EXTRA_AFTER</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QPEL_EXTRA</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDGE_EMU_BUFFER_STRIDE</name></cpp:macro> <cpp:value>80</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE</name><parameter_list>(<parameter><type><name>tab</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tab)[(y) * s-&gt;sps-&gt;width + (x)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_CTB</name><parameter_list>(<parameter><type><name>tab</name></type></parameter>, <parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((tab)[(y) * min_cb_width + (x)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IDR</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;nal_unit_type == HEVC_NAL_IDR_W_RADL || (s)-&gt;nal_unit_type == HEVC_NAL_IDR_N_LP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_BLA</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;nal_unit_type == HEVC_NAL_BLA_W_RADL || (s)-&gt;nal_unit_type == HEVC_NAL_BLA_W_LP || (s)-&gt;nal_unit_type == HEVC_NAL_BLA_N_LP)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_IRAP</name><parameter_list>(<parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((s)-&gt;nal_unit_type &gt;= 16 &amp;&amp; (s)-&gt;nal_unit_type &lt;= 23)</cpp:value></cpp:define>

<enum>enum <name>RPSType</name> <block>{

<decl><name>ST_CURR_BEF</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>ST_CURR_AFT</name></decl>,

<decl><name>ST_FOLL</name></decl>,

<decl><name>LT_CURR</name></decl>,

<decl><name>LT_FOLL</name></decl>,

<decl><name>NB_RPS_TYPE</name></decl>,

}</block>;</enum>

<enum>enum <name>SyntaxElement</name> <block>{

<decl><name>SAO_MERGE_FLAG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SAO_TYPE_IDX</name></decl>,

<decl><name>SAO_EO_CLASS</name></decl>,

<decl><name>SAO_BAND_POSITION</name></decl>,

<decl><name>SAO_OFFSET_ABS</name></decl>,

<decl><name>SAO_OFFSET_SIGN</name></decl>,

<decl><name>END_OF_SLICE_FLAG</name></decl>,

<decl><name>SPLIT_CODING_UNIT_FLAG</name></decl>,

<decl><name>CU_TRANSQUANT_BYPASS_FLAG</name></decl>,

<decl><name>SKIP_FLAG</name></decl>,

<decl><name>CU_QP_DELTA</name></decl>,

<decl><name>PRED_MODE_FLAG</name></decl>,

<decl><name>PART_MODE</name></decl>,

<decl><name>PCM_FLAG</name></decl>,

<decl><name>PREV_INTRA_LUMA_PRED_FLAG</name></decl>,

<decl><name>MPM_IDX</name></decl>,

<decl><name>REM_INTRA_LUMA_PRED_MODE</name></decl>,

<decl><name>INTRA_CHROMA_PRED_MODE</name></decl>,

<decl><name>MERGE_FLAG</name></decl>,

<decl><name>MERGE_IDX</name></decl>,

<decl><name>INTER_PRED_IDC</name></decl>,

<decl><name>REF_IDX_L0</name></decl>,

<decl><name>REF_IDX_L1</name></decl>,

<decl><name>ABS_MVD_GREATER0_FLAG</name></decl>,

<decl><name>ABS_MVD_GREATER1_FLAG</name></decl>,

<decl><name>ABS_MVD_MINUS2</name></decl>,

<decl><name>MVD_SIGN_FLAG</name></decl>,

<decl><name>MVP_LX_FLAG</name></decl>,

<decl><name>NO_RESIDUAL_DATA_FLAG</name></decl>,

<decl><name>SPLIT_TRANSFORM_FLAG</name></decl>,

<decl><name>CBF_LUMA</name></decl>,

<decl><name>CBF_CB_CR</name></decl>,

<decl><name>TRANSFORM_SKIP_FLAG</name></decl>,

<decl><name>EXPLICIT_RDPCM_FLAG</name></decl>,

<decl><name>EXPLICIT_RDPCM_DIR_FLAG</name></decl>,

<decl><name>LAST_SIGNIFICANT_COEFF_X_PREFIX</name></decl>,

<decl><name>LAST_SIGNIFICANT_COEFF_Y_PREFIX</name></decl>,

<decl><name>LAST_SIGNIFICANT_COEFF_X_SUFFIX</name></decl>,

<decl><name>LAST_SIGNIFICANT_COEFF_Y_SUFFIX</name></decl>,

<decl><name>SIGNIFICANT_COEFF_GROUP_FLAG</name></decl>,

<decl><name>SIGNIFICANT_COEFF_FLAG</name></decl>,

<decl><name>COEFF_ABS_LEVEL_GREATER1_FLAG</name></decl>,

<decl><name>COEFF_ABS_LEVEL_GREATER2_FLAG</name></decl>,

<decl><name>COEFF_ABS_LEVEL_REMAINING</name></decl>,

<decl><name>COEFF_SIGN_FLAG</name></decl>,

<decl><name>LOG2_RES_SCALE_ABS</name></decl>,

<decl><name>RES_SCALE_SIGN_FLAG</name></decl>,

<decl><name>CU_CHROMA_QP_OFFSET_FLAG</name></decl>,

<decl><name>CU_CHROMA_QP_OFFSET_IDX</name></decl>,

}</block>;</enum>

<enum>enum <name>PartMode</name> <block>{

<decl><name>PART_2Nx2N</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PART_2NxN</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>PART_Nx2N</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>PART_NxN</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>PART_2NxnU</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>PART_2NxnD</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>PART_nLx2N</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>PART_nRx2N</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>PredMode</name> <block>{

<decl><name>MODE_INTER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>MODE_INTRA</name></decl>,

<decl><name>MODE_SKIP</name></decl>,

}</block>;</enum>

<enum>enum <name>InterPredIdc</name> <block>{

<decl><name>PRED_L0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PRED_L1</name></decl>,

<decl><name>PRED_BI</name></decl>,

}</block>;</enum>

<enum>enum <name>PredFlag</name> <block>{

<decl><name>PF_INTRA</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PF_L0</name></decl>,

<decl><name>PF_L1</name></decl>,

<decl><name>PF_BI</name></decl>,

}</block>;</enum>

<enum>enum <name>IntraPredMode</name> <block>{

<decl><name>INTRA_PLANAR</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>INTRA_DC</name></decl>,

<decl><name>INTRA_ANGULAR_2</name></decl>,

<decl><name>INTRA_ANGULAR_3</name></decl>,

<decl><name>INTRA_ANGULAR_4</name></decl>,

<decl><name>INTRA_ANGULAR_5</name></decl>,

<decl><name>INTRA_ANGULAR_6</name></decl>,

<decl><name>INTRA_ANGULAR_7</name></decl>,

<decl><name>INTRA_ANGULAR_8</name></decl>,

<decl><name>INTRA_ANGULAR_9</name></decl>,

<decl><name>INTRA_ANGULAR_10</name></decl>,

<decl><name>INTRA_ANGULAR_11</name></decl>,

<decl><name>INTRA_ANGULAR_12</name></decl>,

<decl><name>INTRA_ANGULAR_13</name></decl>,

<decl><name>INTRA_ANGULAR_14</name></decl>,

<decl><name>INTRA_ANGULAR_15</name></decl>,

<decl><name>INTRA_ANGULAR_16</name></decl>,

<decl><name>INTRA_ANGULAR_17</name></decl>,

<decl><name>INTRA_ANGULAR_18</name></decl>,

<decl><name>INTRA_ANGULAR_19</name></decl>,

<decl><name>INTRA_ANGULAR_20</name></decl>,

<decl><name>INTRA_ANGULAR_21</name></decl>,

<decl><name>INTRA_ANGULAR_22</name></decl>,

<decl><name>INTRA_ANGULAR_23</name></decl>,

<decl><name>INTRA_ANGULAR_24</name></decl>,

<decl><name>INTRA_ANGULAR_25</name></decl>,

<decl><name>INTRA_ANGULAR_26</name></decl>,

<decl><name>INTRA_ANGULAR_27</name></decl>,

<decl><name>INTRA_ANGULAR_28</name></decl>,

<decl><name>INTRA_ANGULAR_29</name></decl>,

<decl><name>INTRA_ANGULAR_30</name></decl>,

<decl><name>INTRA_ANGULAR_31</name></decl>,

<decl><name>INTRA_ANGULAR_32</name></decl>,

<decl><name>INTRA_ANGULAR_33</name></decl>,

<decl><name>INTRA_ANGULAR_34</name></decl>,

}</block>;</enum>

<enum>enum <name>SAOType</name> <block>{

<decl><name>SAO_NOT_APPLIED</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SAO_BAND</name></decl>,

<decl><name>SAO_EDGE</name></decl>,

<decl><name>SAO_APPLIED</name></decl>

}</block>;</enum>

<enum>enum <name>SAOEOClass</name> <block>{

<decl><name>SAO_EO_HORIZ</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SAO_EO_VERT</name></decl>,

<decl><name>SAO_EO_135D</name></decl>,

<decl><name>SAO_EO_45D</name></decl>,

}</block>;</enum>

<enum>enum <name>ScanType</name> <block>{

<decl><name>SCAN_DIAG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>SCAN_HORIZ</name></decl>,

<decl><name>SCAN_VERT</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>RefPicList</name> <block>{

<decl_stmt><decl><type><name><name>struct</name> <name>HEVCFrame</name></name> <modifier>*</modifier></type><name><name>ref</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>list</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>isLongTerm</name><index>[<expr><name>HEVC_MAX_REFS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_refs</name></decl>;</decl_stmt>

}</block></struct></type> <name>RefPicList</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RefPicListTab</name> <block>{

<decl_stmt><decl><type><name>RefPicList</name></type> <name><name>refPicList</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>RefPicListTab</name>;</typedef>

<typedef>typedef <type><struct>struct <name>CodingUnit</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>PredMode</name></name></type> <name>pred_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name><name>enum</name> <name>PartMode</name></name></type> <name>part_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>intra_split_flag</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>max_trafo_depth</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cu_transquant_bypass_flag</name></decl>;</decl_stmt>

}</block></struct></type> <name>CodingUnit</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Mv</name> <block>{

<decl_stmt><decl><type><name>int16_t</name></type> <name>x</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name>y</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Mv</name>;</typedef>

<typedef>typedef <type><struct>struct <name>MvField</name> <block>{

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>Mv</name></expr></argument>, <argument><expr><name>mv</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>ref_idx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>pred_flag</name></decl>;</decl_stmt>

}</block></struct></type> <name>MvField</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NeighbourAvailable</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cand_bottom_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_up</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_up_left</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_up_right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_up_right_sap</name></decl>;</decl_stmt>

}</block></struct></type> <name>NeighbourAvailable</name>;</typedef>

<typedef>typedef <type><struct>struct <name>PredictionUnit</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>mpm_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rem_intra_luma_pred_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>intra_pred_mode</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Mv</name></type> <name>mvd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>merge_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>intra_pred_mode_c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>chroma_mode_c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>PredictionUnit</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TransformUnit</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>cu_qp_delta</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res_scale_val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra_pred_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra_pred_mode_c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_mode_c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_cu_qp_delta_coded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>is_cu_chroma_qp_offset_coded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>cu_qp_offset_cb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>cu_qp_offset_cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>cross_pf</name></decl>;</decl_stmt>

}</block></struct></type> <name>TransformUnit</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DBParams</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>beta_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tc_offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>DBParams</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_FRAME_FLAG_OUTPUT</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_FRAME_FLAG_SHORT_REF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_FRAME_FLAG_LONG_REF</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEVC_FRAME_FLAG_BUMPING</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>HEVCFrame</name> <block>{

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>tf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MvField</name> <modifier>*</modifier></type><name>tab_mvf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RefPicList</name> <modifier>*</modifier></type><name>refPicList</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RefPicListTab</name> <modifier>*</modifier><modifier>*</modifier></type><name>rpl_tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctb_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HEVCFrame</name></name> <modifier>*</modifier></type><name>collocated_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>tab_mvf_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>rpl_tab_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>rpl_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hwaccel_priv_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwaccel_picture_private</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>sequence</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>HEVCFrame</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HEVCLocalContext</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cabac_state</name><index>[<expr><name>HEVC_CONTEXTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>stat_coeff</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>first_qp_group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CABACContext</name></type> <name>cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>qp_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>curr_qp_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qPy_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TransformUnit</name></type> <name>tu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ctb_left_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ctb_up_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ctb_up_right_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ctb_up_left_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_of_tiles_x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_of_tiles_y</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>edge_emu_buffer</name></expr></argument>)</argument_list></call><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <name>EDGE_EMU_BUFFER_STRIDE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>edge_emu_buffer2</name></expr></argument>)</argument_list></call><index>[<expr><operator>(</operator><name>MAX_PB_SIZE</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>*</operator> <name>EDGE_EMU_BUFFER_STRIDE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_PB_SIZE</name> <operator>*</operator> <name>MAX_PB_SIZE</name></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ct_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodingUnit</name></type> <name>cu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PredictionUnit</name></type> <name>pu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NeighbourAvailable</name></type> <name>na</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDARY_LEFT_SLICE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDARY_LEFT_TILE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDARY_UPPER_SLICE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOUNDARY_UPPER_TILE</name></cpp:macro> <cpp:value>(1 &lt;&lt; 3)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>boundary_flags</name></decl>;</decl_stmt>

}</block></struct></type> <name>HEVCLocalContext</name>;</typedef>

<typedef>typedef <type><struct>struct <name>HEVCContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>HEVCContext</name></name> <modifier>*</modifier></type><name><name>sList</name><index>[<expr><name>MAX_NB_THREADS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name><name>HEVClcList</name><index>[<expr><name>MAX_NB_THREADS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>HEVClc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>threads_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>threads_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cabac_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>slice_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>sao_pixel_buffer_h</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>sao_pixel_buffer_v</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCParamSets</name></type> <name>ps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCSEI</name></type> <name>sei</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVMD5</name></name> <modifier>*</modifier></type><name>md5_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>tab_mvf_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>rpl_tab_pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RefPicList</name></type> <name><name>rps</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SliceHeader</name></type> <name>sh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SAOParams</name> <modifier>*</modifier></type><name>sao</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DBParams</name> <modifier>*</modifier></type><name>deblock</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>HEVCNALUnitType</name></name></type> <name>nal_unit_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temporal_id</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>HEVCFrame</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCFrame</name></type> <name><name>DPB</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pocTid0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>eos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>last_eos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>max_ra</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bs_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bs_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>overlap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_decoded</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_rasl_output_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCPredContext</name></type> <name>hpc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEVCDSPContext</name></type> <name>hevcdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VideoDSPContext</name></type> <name>vdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>qp_y_tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>horizontal_bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>vertical_bs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>tab_slice_address</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>skip_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tab_ct_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tab_ipm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>cbf_luma</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>is_pcm</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>filter_slice_edges</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>checksum_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>checksum_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq_decode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>seq_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_parallel_tiles</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atomic_int</name></type> <name>wpp_err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H2645Packet</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>HEVCNALUnitType</name></name></type> <name>first_nal_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>context_initialized</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_nalff</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>apply_defdispwin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nal_length_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nuh_layer_id</name></decl>;</decl_stmt>

}</block></struct></type> <name>HEVCContext</name>;</typedef>

<function_decl><type><name>void</name></type> <name>ff_hevc_clear_refs</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_flush_dpb</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>RefPicList</name> <modifier>*</modifier></type><name>ff_hevc_get_ref_list</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_frame_rps</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_slice_rpl</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_save_states</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_addr_ts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cabac_init</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_addr_ts</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_sao_merge_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_sao_type_idx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_sao_band_position_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_sao_offset_abs_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_sao_offset_sign_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_sao_eo_class_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_end_of_slice_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cu_transquant_bypass_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_skip_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x_cb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_cb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_pred_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_split_coding_unit_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ct_depth</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_part_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_pcm_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_prev_intra_luma_pred_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_mpm_idx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_rem_intra_luma_pred_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_intra_chroma_pred_mode_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_merge_idx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_merge_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_inter_pred_idc_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPbW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPbH</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_ref_idx_lx_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_ref_idx_lx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_mvp_lx_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_no_residual_syntax_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_split_transform_flag_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_trafo_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cbf_cb_cr_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trafo_depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cbf_luma_decode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>trafo_depth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_log2_res_scale_abs</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_res_scale_sign_flag</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_frame_nb_refs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_set_new_ref</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier><modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>poc</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>ff_hevc_nal_is_nonref</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>HEVCNALUnitType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>HEVC_NAL_TRAIL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_TSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_STSA_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RADL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_RASL_N</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_VCL_N10</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_VCL_N12</name></expr>:</case>

<case>case <expr><name>HEVC_NAL_VCL_N14</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<default>default:</default> <break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_hevc_output_frame</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flush</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_bump_frame</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_unref_frame</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>HEVCFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_set_neighbour_available</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nPbW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPbH</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_luma_mv_merge_mode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nPbW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPbH</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>part_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>merge_idx</name></decl></parameter>, <parameter><decl><type><name>MvField</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_luma_mv_mvp_mode</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nPbW</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nPbH</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>part_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>merge_idx</name></decl></parameter>,

<parameter><decl><type><name>MvField</name> <modifier>*</modifier></type><name>mv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mvp_lx_flag</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>LX</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_set_qPy</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>xBase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>yBase</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_deblocking_boundary_strengths</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_trafo_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cu_qp_delta_sign_flag</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cu_qp_delta_abs</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cu_chroma_qp_offset_flag</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_hevc_cu_chroma_qp_offset_idx</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_hls_filter</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_hls_filters</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x_ctb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y_ctb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ctb_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_hls_residual_coding</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_trafo_size</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>ScanType</name></name></type> <name>scan_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_hevc_hls_mvd_coding</name><parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_cb_size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_hevc_qpel_extra_before</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_hevc_qpel_extra_after</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_hevc_qpel_extra</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

</unit>
