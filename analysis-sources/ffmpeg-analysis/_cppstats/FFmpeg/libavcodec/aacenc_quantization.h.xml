<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacenc_quantization.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenctab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_utils.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>float</name></type> <name>quantize_and_encode_band_cost_template</name><parameter_list>(

<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>BT_ZERO</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>BT_UNSIGNED</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>BT_PAIR</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>BT_ESC</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>BT_NOISE</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>BT_STEREO</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>ROUNDING</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q_idx</name> <init>= <expr><name>POW_SF2_ZERO</name> <operator>-</operator> <name>scale_idx</name> <operator>+</operator> <name>SCALE_ONE_POS</name> <operator>-</operator> <name>SCALE_DIV_512</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>q_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>Q34</name> <init>= <expr><name><name>ff_aac_pow34sf_tab</name><index>[<expr><name>q_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>IQ</name> <init>= <expr><name><name>ff_aac_pow2sf_tab</name> <index>[<expr><name>POW_SF2_ZERO</name> <operator>+</operator> <name>scale_idx</name> <operator>-</operator> <name>SCALE_ONE_POS</name> <operator>+</operator> <name>SCALE_DIV_512</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>CLIPPED_ESCAPE</name> <init>= <expr><literal type="number">165140.0f</literal><operator>*</operator><name>IQ</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cost</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>qenergy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dim</name> <init>= <expr><ternary><condition><expr><name>BT_PAIR</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>resbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>BT_ZERO</name> <operator>||</operator> <name>BT_NOISE</name> <operator>||</operator> <name>BT_STEREO</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>dim</name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>cost</name> <operator>*</operator> <name>lambda</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>scaled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scaled</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scoefs</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>quant_bands</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qcoefs</name></name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>!</operator><name>BT_UNSIGNED</name></expr></argument>, <argument><expr><name><name>aac_cb_maxval</name><index>[<expr><name>cb</name></expr>]</index></name></expr></argument>, <argument><expr><name>Q34</name></expr></argument>, <argument><expr><name>ROUNDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>BT_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>off</name> <operator>=</operator> <name><name>aac_cb_maxval</name><index>[<expr><name>cb</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>dim</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>vec</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>quants</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>qcoefs</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curbits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>quantized</name></decl>, <decl><type ref="prev"/><name>rd</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>curidx</name> <operator>*=</operator> <name><name>aac_cb_range</name><index>[<expr><name>cb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>curidx</name> <operator>+=</operator> <name><name>quants</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>off</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>curbits</name> <operator>=</operator> <name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>curidx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vec</name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>curidx</name><operator>*</operator><name>dim</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>BT_UNSIGNED</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>t</name> <init>= <expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>di</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>BT_ESC</name> <operator>&amp;&amp;</operator> <name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">64.0f</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>CLIPPED_ESCAPE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>quantized</name> <operator>=</operator> <name>CLIPPED_ESCAPE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <literal type="number">21</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>quant</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>, <argument><expr><name>ROUNDING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>quantized</name> <operator>=</operator> <name>c</name><operator>*</operator><call><name>cbrtf</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>*</operator><name>IQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name>curbits</name> <operator>+=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>quantized</name> <operator>=</operator> <name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name>IQ</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>di</name> <operator>=</operator> <name>t</name> <operator>-</operator> <name>quantized</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>quantized</name></expr> </then><else>: <expr><operator>-</operator><name>quantized</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curbits</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>quantized</name><operator>*</operator><name>quantized</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rd</name> <operator>+=</operator> <name>di</name><operator>*</operator><name>di</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>quantized</name> <operator>=</operator> <name><name>vec</name><index>[<expr><name>j</name></expr>]</index></name><operator>*</operator><name>IQ</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qenergy</name> <operator>+=</operator> <name>quantized</name><operator>*</operator><name>quantized</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name>quantized</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rd</name> <operator>+=</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>-</operator> <name>quantized</name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>-</operator> <name>quantized</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>cost</name> <operator>+=</operator> <name>rd</name> <operator>*</operator> <name>lambda</name> <operator>+</operator> <name>curbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>resbits</name> <operator>+=</operator> <name>curbits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cost</name> <operator>&gt;=</operator> <name>uplim</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>uplim</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name><name>ff_aac_spectral_bits</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>curidx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_aac_spectral_codes</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>curidx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>BT_UNSIGNED</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dim</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>curidx</name><operator>*</operator><name>dim</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0.0f</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0.0f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>BT_ESC</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ff_aac_codebook_vectors</name><index>[<expr><name>cb</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>curidx</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>j</name></expr>]</index></name> <operator>==</operator> <literal type="number">64.0f</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>coef</name> <init>= <expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><call><name>quant</name><argument_list>(<argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>Q</name></expr></argument>, <argument><expr><name>ROUNDING</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>coef</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>resbits</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>energy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>energy</name> <operator>=</operator> <name>qenergy</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>cost</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>quantize_and_encode_band_cost_NONE</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>quant</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0.0f</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>BT_ZERO</name></type></parameter>, <parameter><type><name>BT_UNSIGNED</name></type></parameter>, <parameter><type><name>BT_PAIR</name></type></parameter>, <parameter><type><name>BT_ESC</name></type></parameter>, <parameter><type><name>BT_NOISE</name></type></parameter>, <parameter><type><name>BT_STEREO</name></type></parameter>, <parameter><type><name>ROUNDING</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static float quantize_and_encode_band_cost_ ##NAME( struct AACEncContext *s, PutBitContext *pb, const float *in, float *quant, const float *scaled, int size, int scale_idx, int cb, const float lambda, const float uplim, int *bits, float *energy) { return quantize_and_encode_band_cost_template( s, pb, in, quant, scaled, size, scale_idx, BT_ESC ? ESC_BT : cb, lambda, uplim, bits, energy, BT_ZERO, BT_UNSIGNED, BT_PAIR, BT_ESC, BT_NOISE, BT_STEREO, ROUNDING); }</cpp:value></cpp:define>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>ZERO</argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>SQUAD</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>UQUAD</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>SPAIR</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>UPAIR</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>ESC</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>ESC_RTZ</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_TO_ZERO</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>NOISE</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<macro><name>QUANTIZE_AND_ENCODE_BAND_COST_FUNC</name><argument_list>(<argument>STEREO</argument>,<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>ROUND_STANDARD</argument>)</argument_list></macro>

<expr_stmt><expr><specifier>static</specifier> <macro><name>float</name> <argument_list>(<argument>*const quantize_and_encode_band_cost_arr[]</argument>)</argument_list></macro><operator>(</operator>

struct <name>AACEncContext</name> <operator>*</operator><name>s</name><operator>,</operator>

<name>PutBitContext</name> <operator>*</operator><name>pb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <operator>*</operator><name>in</name><operator>,</operator> <name>float</name> <operator>*</operator><name>quant</name><operator>,</operator>

<specifier>const</specifier> <name>float</name> <operator>*</operator><name>scaled</name><operator>,</operator> <name>int</name> <name>size</name><operator>,</operator> <name>int</name> <name>scale_idx</name><operator>,</operator>

<name>int</name> <name>cb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>lambda</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>uplim</name><operator>,</operator>

<name>int</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>float</name> <operator>*</operator><name>energy</name><operator>)</operator> <operator>=</operator> <block>{

<expr><name>quantize_and_encode_band_cost_ZERO</name></expr>,

<expr><name>quantize_and_encode_band_cost_SQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_SQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_UQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_UQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_SPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_SPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_ESC</name></expr>,

<expr><name>quantize_and_encode_band_cost_NONE</name></expr>, 

<expr><name>quantize_and_encode_band_cost_NOISE</name></expr>,

<expr><name>quantize_and_encode_band_cost_STEREO</name></expr>,

<expr><name>quantize_and_encode_band_cost_STEREO</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <macro><name>float</name> <argument_list>(<argument>*const quantize_and_encode_band_cost_rtz_arr[]</argument>)</argument_list></macro><operator>(</operator>

struct <name>AACEncContext</name> <operator>*</operator><name>s</name><operator>,</operator>

<name>PutBitContext</name> <operator>*</operator><name>pb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <operator>*</operator><name>in</name><operator>,</operator> <name>float</name> <operator>*</operator><name>quant</name><operator>,</operator>

<specifier>const</specifier> <name>float</name> <operator>*</operator><name>scaled</name><operator>,</operator> <name>int</name> <name>size</name><operator>,</operator> <name>int</name> <name>scale_idx</name><operator>,</operator>

<name>int</name> <name>cb</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>lambda</name><operator>,</operator> <specifier>const</specifier> <name>float</name> <name>uplim</name><operator>,</operator>

<name>int</name> <operator>*</operator><name>bits</name><operator>,</operator> <name>float</name> <operator>*</operator><name>energy</name><operator>)</operator> <operator>=</operator> <block>{

<expr><name>quantize_and_encode_band_cost_ZERO</name></expr>,

<expr><name>quantize_and_encode_band_cost_SQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_SQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_UQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_UQUAD</name></expr>,

<expr><name>quantize_and_encode_band_cost_SPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_SPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_UPAIR</name></expr>,

<expr><name>quantize_and_encode_band_cost_ESC_RTZ</name></expr>,

<expr><name>quantize_and_encode_band_cost_NONE</name></expr>, 

<expr><name>quantize_and_encode_band_cost_NOISE</name></expr>,

<expr><name>quantize_and_encode_band_cost_STEREO</name></expr>,

<expr><name>quantize_and_encode_band_cost_STEREO</name></expr>,

}</block></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>quantize_and_encode_band_cost</name><parameter_list>( <parameter><type><name>s</name></type></parameter>, <parameter><type><name>pb</name></type></parameter>, <parameter><type><name>in</name></type></parameter>, <parameter><type><name>quant</name></type></parameter>, <parameter><type><name>scaled</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>scale_idx</name></type></parameter>, <parameter><type><name>cb</name></type></parameter>, <parameter><type><name>lambda</name></type></parameter>, <parameter><type><name>uplim</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>, <parameter><type><name>energy</name></type></parameter>, <parameter><type><name>rtz</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rtz) ? quantize_and_encode_band_cost_rtz_arr : quantize_and_encode_band_cost_arr)[cb]( s, pb, in, quant, scaled, size, scale_idx, cb, lambda, uplim, bits, energy)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>quantize_band_cost</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>quantize_and_encode_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>scale_idx</name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>, <argument><expr><name>uplim</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>energy</name></expr></argument>, <argument><expr><name>rtz</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>quantize_band_cost_bits</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>scaled</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>uplim</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>bits</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>energy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>auxbits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>quantize_and_encode_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scaled</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>scale_idx</name></expr></argument>,

<argument><expr><name>cb</name></expr></argument>, <argument><expr><literal type="number">0.0f</literal></expr></argument>, <argument><expr><name>uplim</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>auxbits</name></expr></argument>, <argument><expr><name>energy</name></expr></argument>, <argument><expr><name>rtz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>bits</name> <operator>=</operator> <name>auxbits</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>auxbits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>quantize_and_encode_band</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>scale_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>cb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name></type> <name>lambda</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rtz</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>quantize_and_encode_band_cost</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>pb</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>scale_idx</name></expr></argument>, <argument><expr><name>cb</name></expr></argument>, <argument><expr><name>lambda</name></expr></argument>,

<argument><expr><name>INFINITY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>rtz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_quantization_misc.h"</cpp:file></cpp:include>

</unit>
