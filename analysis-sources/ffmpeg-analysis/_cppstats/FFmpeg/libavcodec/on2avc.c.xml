<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\on2avc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/ffmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"on2avcdata.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ON2AVC_SUBFRAME_SIZE</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>

<enum>enum <name>WindowTypes</name> <block>{

<decl><name>WINDOW_TYPE_LONG</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>WINDOW_TYPE_LONG_STOP</name></decl>,

<decl><name>WINDOW_TYPE_LONG_START</name></decl>,

<decl><name>WINDOW_TYPE_8SHORT</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>WINDOW_TYPE_EXT4</name></decl>,

<decl><name>WINDOW_TYPE_EXT5</name></decl>,

<decl><name>WINDOW_TYPE_EXT6</name></decl>,

<decl><name>WINDOW_TYPE_EXT7</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>On2AVCContext</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>mdct</name></decl>, <name>mdct_half</name>, <name>mdct_small</name>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name>fft128</name></decl>, <name>fft256</name>, <name>fft512</name>, <name>fft1024</name>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>wtf</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>On2AVCContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>is_av500</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>On2AVCMode</name> <modifier>*</modifier></type><name>modes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>window_type</name></decl>, <name>prev_window_type</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_windows</name></decl>, <name>num_bands</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_section</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>band_start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>grouping</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ms_present</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>ms_info</name><index>[<expr><name>ON2AVC_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_long</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>band_type</name><index>[<expr><name>ON2AVC_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>band_run_end</name><index>[<expr><name>ON2AVC_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_sections</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>band_scales</name><index>[<expr><name>ON2AVC_MAX_BANDS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name>scale_diff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VLC</name></type> <name><name>cb_vlc</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>scale_tab</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ON2AVC_SUBFRAME_SIZE</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>delay</name></expr></argument>)</argument_list></call> <index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ON2AVC_SUBFRAME_SIZE</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call> <index>[<expr><name>ON2AVC_SUBFRAME_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>mdct_buf</name></expr></argument>)</argument_list></call> <index>[<expr><name>ON2AVC_SUBFRAME_SIZE</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>long_win</name></expr></argument>)</argument_list></call> <index>[<expr><name>ON2AVC_SUBFRAME_SIZE</name></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>short_win</name></expr></argument>)</argument_list></call><index>[<expr><name>ON2AVC_SUBFRAME_SIZE</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

}</block></struct></type> <name>On2AVCContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>on2avc_read_ms_info</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>band_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ms_present</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>ms_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>grouping</name><index>[<expr><name>w</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ms_info</name></name> <operator>+</operator> <name>band_off</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ms_info</name></name> <operator>+</operator> <name>band_off</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>ms_info</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>band_off</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ms_info</name><index>[<expr><name>band_off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_decode_band_types</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits_per_sect</name> <init>= <expr><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>is_long</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>esc_val</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bits_per_sect</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_bands</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>band_type</name></decl>, <decl><type ref="prev"/><name>run_len</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>band</name> <operator>&lt;</operator> <name>num_bands</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>band_type</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run_len</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>run</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>bits_per_sect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>run</name> <operator>&gt;</operator> <name>num_bands</name> <operator>-</operator> <name>band</name> <operator>-</operator> <name>run_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid band type run\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>run_len</name> <operator>+=</operator> <name>run</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>run</name> <operator>==</operator> <name>esc_val</name></expr>)</condition>;</do>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>band</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>band</name> <operator>+</operator> <name>run_len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>band_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_run_end</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>band</name> <operator>+</operator> <name>run_len</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>band</name> <operator>+=</operator> <name>run_len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_decode_band_scales</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>grouping</name><index>[<expr><name>w</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_scales</name></name> <operator>+</operator> <name>band_off</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_scales</name></name> <operator>+</operator> <name>band_off</name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>band_scales</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>band_off</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>band_off</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>all_zero</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <name>w</name> <operator>+</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>grouping</name><index>[<expr><name>w2</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w2</name> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name> <operator>+</operator> <name>b</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>all_zero</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>all_zero</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_scales</name><index>[<expr><name>band_off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>scale</name> <operator>+=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>scale_diff</name><operator>.</operator><name>table</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">60</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>scale</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>scale</name></expr></argument> &gt;</argument_list></name> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid scale value %d\n"</literal></expr></argument>,

<argument><expr><name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_scales</name><index>[<expr><name>band_off</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>scale_tab</name><index>[<expr><name>scale</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>float</name></type> <name>on2avc_scale</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>v</name> <operator>*</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><call><name>abs</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <name>scale</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_decode_quads</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>band_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cb_vlc</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><operator>(</operator><name>val</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">12</literal> <operator>-</operator> <name>j</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xF</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>on2avc_scale</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name>band_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_egolomb</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Too large golomb code in get_egolomb.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>v</name><operator>)</operator> <operator>+</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_decode_pairs</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>band_scale</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>dst_size</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_vlc2</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cb_vlc</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <call><name>sign_extend</name><argument_list>(<argument><expr><name>val</name> <operator>&amp;</operator> <literal type="number">0xFF</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>ON2AVC_ESC_CB</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val1</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">16</literal> <operator>||</operator> <name>val1</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>val1</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <name>sign</name> <operator>*</operator> <call><name>get_egolomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>val2</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">16</literal> <operator>||</operator> <name>val2</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <operator>(</operator><name>val2</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <name>sign</name> <operator>*</operator> <call><name>get_egolomb</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>on2avc_scale</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name>band_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>on2avc_scale</name><argument_list>(<argument><expr><name>val2</name></expr></argument>, <argument><expr><name>band_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_read_channel_data</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>band_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>coeff_ptr</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>on2avc_decode_band_types</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>on2avc_decode_band_scales</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>coeff_ptr</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>band_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>coeff_ptr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ON2AVC_SUBFRAME_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>coeff_ptr</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band_size</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band_type</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>band_idx</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>band_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>coeff_ptr</name> <operator>+=</operator> <name>band_size</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>band_type</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>on2avc_decode_quads</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>coeff_ptr</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>band_type</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_scales</name><index>[<expr><name>band_idx</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>on2avc_decode_pairs</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>coeff_ptr</name></expr></argument>, <argument><expr><name>band_size</name></expr></argument>, <argument><expr><name>band_type</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>band_scales</name><index>[<expr><name>band_idx</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>coeff_ptr</name> <operator>+=</operator> <name>band_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>band_idx</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_apply_ms</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>band_off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ch0</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>ch1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>ms_info</name><index>[<expr><name>band_off</name> <operator>+</operator> <name>b</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>l</name> <init>= <expr><operator>*</operator><name>ch0</name></expr></init></decl>, <decl><type ref="prev"/><name>r</name> <init>= <expr><operator>*</operator><name>ch1</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ch0</name><operator>++</operator> <operator>=</operator> <name>l</name> <operator>+</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ch1</name><operator>++</operator> <operator>=</operator> <name>l</name> <operator>-</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ch0</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ch1</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>band_start</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>band_off</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>zero_head_and_tail</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>order0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>len</name> <operator>-</operator> <name>order1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>order1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pretwiddle</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tab_step</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>tabs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>src2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name><name>tabs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tab_step</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order0</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>tab</name><index>[<expr><name>j</name> <operator>*</operator> <name>tab_step</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>dst_len</name> <operator>-</operator> <name>tab_step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <name><name>tabs</name><index>[<expr><name>order0</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name> <operator>=</operator> <name>src</name> <operator>+</operator> <operator>(</operator><name>dst_len</name> <operator>-</operator> <name>tab_step</name><operator>)</operator> <operator>/</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>order0</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tab_step</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order1</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>src2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>tab</name><index>[<expr><name>j</name> <operator>*</operator> <name>tab_step</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>twiddle</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src2_len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tab_len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>order0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>tabs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>steps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>steps</name> <operator>=</operator> <operator>(</operator><name>src2_len</name> <operator>-</operator> <name>tab_len</name><operator>)</operator> <operator>/</operator> <name>step</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>src2_len</name></expr></argument>, <argument><expr><name>tab_len</name></expr></argument>, <argument><expr><name>step</name></expr></argument>, <argument><expr><name>order0</name></expr></argument>, <argument><expr><name>order1</name></expr></argument>, <argument><expr><name>tabs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>tab_len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>steps</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>in0</name> <init>= <expr><name><name>src1</name><index>[<expr><name>order0</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><operator>(</operator><name>src2_len</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>tab_len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>tab</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>pos</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>in0</name> <operator>*</operator> <operator>*</operator><name>t</name><operator>++</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tab_len</name> <operator>-</operator> <name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src2</name><index>[<expr><name>src2_len</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>in0</name> <operator>*</operator> <name><name>tab</name><index>[<expr><name>pos</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>tab_len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src2</name><index>[<expr><name>pos</name> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>+=</operator> <name>in0</name> <operator>*</operator> <name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>mask</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL1_R</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s[is + 0] * t[it + 0] - s[is + 1] * t[it + 1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL1_I</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s[is + 0] * t[it + 1] + s[is + 1] * t[it + 0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL2_R</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s[is + 0] * t[it + 0] + s[is + 1] * t[it + 1]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL2_I</name><parameter_list>(<parameter><type><name>s</name></type></parameter>, <parameter><type><name>t</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s[is + 0] * t[it + 1] - s[is + 1] * t[it + 0]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL0</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>t0</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t3</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[id] = s0[is] * t0[it] + s1[is] * t1[it] + s2[is] * t2[it] + s3[is] * t3[it]; dst[id + 1] = s0[is] * t0[it + 1] + s1[is] * t1[it + 1] + s2[is] * t2[it + 1] + s3[is] * t3[it + 1];</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL1</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>t0</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t3</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*dst++ = CMUL1_R(s0, t0, is, it) + CMUL1_R(s1, t1, is, it) + CMUL1_R(s2, t2, is, it) + CMUL1_R(s3, t3, is, it); *dst++ = CMUL1_I(s0, t0, is, it) + CMUL1_I(s1, t1, is, it) + CMUL1_I(s2, t2, is, it) + CMUL1_I(s3, t3, is, it);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL2</name><parameter_list>(<parameter><type><name>dst</name></type></parameter>, <parameter><type><name>s0</name></type></parameter>, <parameter><type><name>s1</name></type></parameter>, <parameter><type><name>s2</name></type></parameter>, <parameter><type><name>s3</name></type></parameter>, <parameter><type><name>t0</name></type></parameter>, <parameter><type><name>t1</name></type></parameter>, <parameter><type><name>t2</name></type></parameter>, <parameter><type><name>t3</name></type></parameter>, <parameter><type><name>is</name></type></parameter>, <parameter><type><name>it</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>*dst++ = CMUL2_R(s0, t0, is, it) + CMUL2_R(s1, t1, is, it) + CMUL2_R(s2, t2, is, it) + CMUL2_R(s3, t3, is, it); *dst++ = CMUL2_I(s0, t0, is, it) + CMUL2_I(s1, t1, is, it) + CMUL2_I(s2, t2, is, it) + CMUL2_I(s3, t3, is, it);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>combine_fft</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>s0</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>s1</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>s2</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>s3</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>t0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>t2</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>t3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>step</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>h0</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>d1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>d2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>, <decl><type ref="prev"/><name>half</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>len4</name> <init>= <expr><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hoff</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>step</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>half</name> <operator>=</operator> <name>len2</name></expr>;</init> <condition><expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>half</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>tmp</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>h0</name> <operator>=</operator> <name>t0</name> <operator>+</operator> <name>half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <name>t1</name> <operator>+</operator> <name>half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <name>t2</name> <operator>+</operator> <name>half</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h3</name> <operator>=</operator> <name>t3</name> <operator>+</operator> <name>half</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CMUL0</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hoff</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name> <operator>*</operator> <operator>(</operator><name>len4</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>len4</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CMUL1</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CMUL1</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CMUL0</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len4</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CMUL0</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len4</name> <operator>+</operator> <name>len2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>hoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name>len4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>hoff</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name> <operator>*</operator> <name>len4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>len4</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>len4</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>len2</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>len4</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CMUL2</name><argument_list>(<argument><expr><name>d1</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CMUL2</name><argument_list>(<argument><expr><name>d2</name></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>h0</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>, <argument><expr><name>h3</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>step</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>CMUL0</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>len2</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>s0</name></expr></argument>, <argument><expr><name>s1</name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>s3</name></expr></argument>, <argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wtf_end_512</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp0</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">384</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp0</name> <operator>+</operator> <literal type="number">384</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">384</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">384</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">384</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft128</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">384</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>combine_fft</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">384</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>,

<argument><expr><name>ff_on2avc_ctab_1</name></expr></argument>, <argument><expr><name>ff_on2avc_ctab_2</name></expr></argument>,

<argument><expr><name>ff_on2avc_ctab_3</name></expr></argument>, <argument><expr><name>ff_on2avc_ctab_4</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft512</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft512</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft512</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft512</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">384</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wtf_end_1024</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp0</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">768</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmp0</name> <operator>+</operator> <literal type="number">768</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">768</literal></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>zero_head_and_tail</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">768</literal></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">768</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">512</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft256</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><operator>(</operator><name>src</name> <operator>+</operator> <literal type="number">768</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>combine_fft</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>src</name> <operator>+</operator> <literal type="number">768</literal></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>,

<argument><expr><name>ff_on2avc_ctab_1</name></expr></argument>, <argument><expr><name>ff_on2avc_ctab_2</name></expr></argument>,

<argument><expr><name>ff_on2avc_ctab_3</name></expr></argument>, <argument><expr><name>ff_on2avc_ctab_4</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft1024</name><operator>.</operator><name>fft_permute</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft1024</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fft1024</name><operator>.</operator><name>fft_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft1024</name></name></expr></argument>, <argument><expr><operator>(</operator><name>FFTComplex</name><operator>*</operator><operator>)</operator><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pretwiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">768</literal></expr>]</index></name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wtf_40</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp0</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp1</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">96</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">144</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">176</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">160</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">224</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">288</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">352</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wtf_end_512</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">96</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">224</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">288</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">320</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">352</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">320</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">320</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">384</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">640</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">704</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wtf_end_1024</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wtf_44</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>tmp0</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>tmp1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name> <operator>+</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp1</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">40</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_2</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">56</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_10_1</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_4_10_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">48</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">96</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">224</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wtf_end_512</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">96</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">112</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_20_1</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_9_20_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">96</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">224</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tmp0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[ <expr><literal type="number">64</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp1</name><index>[<expr><literal type="number">192</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">256</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_4</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_3</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">384</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_2</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_84_1</name></expr></argument>, <argument><expr><literal type="number">84</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_20_84_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_1</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>twiddle</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">640</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp0</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>ff_on2avc_tab_40_2</name></expr></argument>, <argument><expr><literal type="number">40</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>ff_on2avc_tabs_19_40_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wtf_end_1024</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>tmp0</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_reconstruct_channel_ext</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mdct_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>wout</name> <init>= <expr><name>out</name> <operator>+</operator> <literal type="number">448</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WINDOW_TYPE_EXT7</name></expr>:</case>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WINDOW_TYPE_EXT4</name></expr>:</case>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>wtf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WINDOW_TYPE_EXT5</name></expr>:</case>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>wtf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct_half</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">512</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">1023</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>WINDOW_TYPE_EXT6</name></expr>:</case>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct_half</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>buf</name><index>[<expr><literal type="number">511</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>wtf</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>wout</name></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wout</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_reconstruct_channel</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channel</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>channel</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>saved</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>delay</name><index>[<expr><name>channel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>mdct_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>temp</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>temp</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WINDOW_TYPE_LONG_START</name></expr>:</case>

<case>case <expr><name>WINDOW_TYPE_LONG_STOP</name></expr>:</case>

<case>case <expr><name>WINDOW_TYPE_LONG</name></expr>:</case>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WINDOW_TYPE_8SHORT</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ON2AVC_SUBFRAME_SIZE</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>ON2AVC_SUBFRAME_SIZE</name> <operator>/</operator> <literal type="number">8</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>mdct_small</name><operator>.</operator><name>imdct_half</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct_small</name></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>prev_window_type</name></name> <operator>==</operator> <name>WINDOW_TYPE_LONG</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>prev_window_type</name></name> <operator>==</operator> <name>WINDOW_TYPE_LONG_STOP</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name> <operator>==</operator> <name>WINDOW_TYPE_LONG</name> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>window_type</name></name> <operator>==</operator> <name>WINDOW_TYPE_LONG_START</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>long_win</name></name></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>wout</name> <init>= <expr><name>out</name> <operator>+</operator> <literal type="number">448</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>saved</name></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name> <operator>==</operator> <name>WINDOW_TYPE_8SHORT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>wout</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>wout</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>wout</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>wout</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wout</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>wout</name></expr></argument>, <argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>wout</name> <operator>+</operator> <literal type="number">128</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>WINDOW_TYPE_8SHORT</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>temp</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">192</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">320</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WINDOW_TYPE_LONG_START</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">448</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>WINDOW_TYPE_LONG_STOP</name></expr>:</case>

<case>case <expr><name>WINDOW_TYPE_LONG</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>saved</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <literal type="number">512</literal></expr></argument>, <argument><expr><literal type="number">512</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_decode_subframe</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"enh bit set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>prev_window_type</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>window_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>band_start</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name></expr>]</index></name><operator>.</operator><name>band_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name></expr>]</index></name><operator>.</operator><name>num_windows</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>num_bands</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>modes</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name></expr>]</index></name><operator>.</operator><name>num_bands</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>is_long</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name> <operator>!=</operator> <name>WINDOW_TYPE_8SHORT</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>grouping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>grouping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>on2avc_read_ms_info</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>on2avc_read_channel_data</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>ms_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>on2avc_apply_ms</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>window_type</name></name> <operator>&lt;</operator> <name>WINDOW_TYPE_EXT4</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>on2avc_reconstruct_channel</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>on2avc_reconstruct_channel_ext</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>on2avc_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type> <name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>frame_size</name></decl>, <decl><type ref="prev"/><name>audio_off</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>is_av500</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>ON2AVC_SUBFRAME_SIZE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>on2avc_decode_subframe</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_size</name> <operator>||</operator> <name>frame_size</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid subframe size %d\n"</literal></expr></argument>,

<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_frames</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_frames</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No subframes present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>ON2AVC_SUBFRAME_SIZE</name> <operator>*</operator> <name>num_frames</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>audio_off</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_size</name> <operator>=</operator> <call><name>bytestream2_get_le16</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>on2avc_decode_subframe</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>gb</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>,

<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>audio_off</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>audio_off</name> <operator>+=</operator> <name>ON2AVC_SUBFRAME_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>frame_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>on2avc_free_vlcs</name><parameter_list>(<parameter><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>scale_diff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cb_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>on2avc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"Decoding more than 2 channels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_STEREO</name></expr>

</then><else>: <expr><name>AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>is_av500</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>==</operator> <literal type="number">0x500</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>,

<argument><expr><literal type="string">"Stereo mode support is not good, patch is welcome\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scale_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ceil</name><argument_list>(<argument><expr><call><name>ff_exp10</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">0.1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">16</literal> <operator>-</operator> <literal type="number">0.01</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">32</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>scale_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ceil</name><argument_list>(<argument><expr><call><name>ff_exp10</name><argument_list>(<argument><expr><name>i</name> <operator>*</operator> <literal type="number">0.1</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.5</literal> <operator>-</operator> <literal type="number">0.01</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;</operator> <literal type="number">32000</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>long_win</name></name></expr></argument>, <argument><expr><name>ff_on2avc_window_long_24000</name></expr></argument>,

<argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>long_win</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>long_win</name></name></expr></argument>, <argument><expr><name>ff_on2avc_window_long_32000</name></expr></argument>,

<argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>long_win</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>, <argument><expr><name>ff_on2avc_window_short</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>short_win</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>modes</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">40000</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ff_on2avc_modes_40</name></expr>

</then><else>: <expr><name>ff_on2avc_modes_44</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>wtf</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&lt;=</operator> <literal type="number">40000</literal><operator>)</operator></expr> ?</condition><then> <expr><name>wtf_40</name></expr>

</then><else>: <expr><name>wtf_44</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">32768.0</literal> <operator>*</operator> <literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct_half</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">32768.0</literal> <operator>*</operator> <literal type="number">512.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct_small</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">32768.0</literal> <operator>*</operator> <literal type="number">128.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft512</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft1024</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>scale_diff</name></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>ON2AVC_SCALE_DIFFS</name></expr></argument>,

<argument><expr><name>ff_on2avc_scale_diff_bits</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name>ff_on2avc_scale_diff_codes</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>vlc_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cb_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>ff_on2avc_quad_cb_elems</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ff_on2avc_quad_cb_bits</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ff_on2avc_quad_cb_codes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>,

<argument><expr><name><name>ff_on2avc_quad_cb_syms</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>vlc_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">9</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>i</name> <operator>-</operator> <literal type="number">9</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>ff_init_vlc_sparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>cb_vlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name><name>ff_on2avc_pair_cb_elems</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ff_on2avc_pair_cb_bits</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>ff_on2avc_pair_cb_codes</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>ff_on2avc_pair_cb_syms</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<goto>goto <name>vlc_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>vlc_fail</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot init VLC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>on2avc_free_vlcs</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>on2avc_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>On2AVCContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct_half</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>mdct_small</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft128</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft256</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft512</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_fft_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fft1024</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>on2avc_free_vlcs</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_on2avc_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"on2avc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"On2 Audio for Video Codec"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_ON2AVC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>On2AVCContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>on2avc_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>on2avc_decode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>on2avc_decode_close</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_CLEANUP</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
