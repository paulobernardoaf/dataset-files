<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cbs_av1_syntax_template.c"><function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>obu_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawOBUHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"OBU header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>obu_forbidden_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>obu_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV1_OBU_PADDING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>obu_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>obu_has_size_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>obu_reserved_1bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>obu_extension_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>temporal_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>spatial_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>extension_header_reserved_3bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>trailing_bits</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>nb_bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trailing_one_bit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>nb_bits</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>nb_bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>trailing_zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name>nb_bits</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>byte_alignment</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>color_config</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawColorConfig</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>seq_profile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>high_bitdepth</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seq_profile</name> <operator>==</operator> <name>FF_PROFILE_AV1_PROFESSIONAL</name> <operator>&amp;&amp;</operator>

<name><name>current</name><operator>-&gt;</operator><name>high_bitdepth</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>twelve_bit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>twelve_bit</name></name></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">10</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>=</operator> <ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>high_bitdepth</name></name></expr> ?</condition><then> <expr><literal type="number">10</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>seq_profile</name> <operator>==</operator> <name>FF_PROFILE_AV1_HIGH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>mono_chrome</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>mono_chrome</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>=</operator> <ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>mono_chrome</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>color_description_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>color_description_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>color_primaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>color_primaries</name></expr></argument>, <argument><expr><name>AVCOL_PRI_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>, <argument><expr><name>AVCOL_TRC_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>, <argument><expr><name>AVCOL_SPC_UNSPECIFIED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>mono_chrome</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>color_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_sample_position</name></expr></argument>, <argument><expr><name>AV1_CSP_UNKNOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>separate_uv_delta_q</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <name>AVCOL_PRI_BT709</name> <operator>&amp;&amp;</operator>

<name><name>current</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>==</operator> <name>AVCOL_TRC_IEC61966_2_1</name> <operator>&amp;&amp;</operator>

<name><name>current</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>color_range</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>separate_uv_delta_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>color_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>seq_profile</name> <operator>==</operator> <name>FF_PROFILE_AV1_MAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>seq_profile</name> <operator>==</operator> <name>FF_PROFILE_AV1_HIGH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>subsampling_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>subsampling_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_x</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>subsampling_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>subsampling_x</name></name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>chroma_sample_position</name></expr></argument>, <argument><expr><name>AV1_CSP_UNKNOWN</name></expr></argument>,

<argument><expr><name>AV1_CSP_COLOCATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>separate_uv_delta_q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>timing_info</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawTimingInfo</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>num_units_in_display_tick</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>time_scale</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>equal_picture_interval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>equal_picture_interval</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uvlc</name><argument_list>(<argument><expr><name>num_ticks_per_picture_minus_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>decoder_model_info</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawDecoderModelInfo</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>buffer_delay_length_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>num_units_in_decoding_tick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>buffer_removal_time_length_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>frame_presentation_time_length_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sequence_header_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>seq_profile</name></expr></argument>, <argument><expr><name>FF_PROFILE_AV1_MAIN</name></expr></argument>,

<argument><expr><name>FF_PROFILE_AV1_PROFESSIONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>still_picture</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>reduced_still_picture_header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>reduced_still_picture_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>timing_info_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>decoder_model_info_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>initial_display_delay_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>operating_points_cnt_minus_1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>operating_point_idc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>seq_level_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>seq_tier</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>decoder_model_present_for_this_op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>initial_display_delay_present_for_this_op</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>timing_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>timing_info</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>timing_info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>decoder_model_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>decoder_model_info</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>decoder_model_info</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>decoder_model_info_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>initial_display_delay_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>operating_points_cnt_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>operating_points_cnt_minus_1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name><name>operating_point_idc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>seq_level_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seq_level_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>seq_tier</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>seq_tier</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>decoder_model_present_for_this_op</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>decoder_model_present_for_this_op</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><name><name>current</name><operator>-&gt;</operator><name>decoder_model_info</name><operator>.</operator><name>buffer_delay_length_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>decoder_buffer_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>encoder_buffer_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>low_delay_mode_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>decoder_model_present_for_this_op</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>initial_display_delay_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>initial_display_delay_present_for_this_op</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>initial_display_delay_present_for_this_op</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>initial_display_delay_minus_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>frame_width_bits_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>frame_height_bits_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>frame_width_bits_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_frame_width_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>frame_height_bits_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>max_frame_height_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>reduced_still_picture_header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>frame_id_numbers_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>frame_id_numbers_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_id_numbers_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>delta_frame_id_length_minus_2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>additional_frame_id_length_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>use_128x128_superblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_filter_intra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_intra_edge_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>reduced_still_picture_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_interintra_compound</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_masked_compound</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_warped_motion</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_dual_filter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_order_hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_jnt_comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_ref_frame_mvs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>seq_force_screen_content_tools</name></expr></argument>,

<argument><expr><name>AV1_SELECT_SCREEN_CONTENT_TOOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>seq_force_integer_mv</name></expr></argument>,

<argument><expr><name>AV1_SELECT_INTEGER_MV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_interintra_compound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_masked_compound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_warped_motion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_dual_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_order_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_jnt_comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_ref_frame_mvs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_jnt_comp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>enable_ref_frame_mvs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>seq_choose_screen_content_tools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seq_choose_screen_content_tools</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>seq_force_screen_content_tools</name></expr></argument>,

<argument><expr><name>AV1_SELECT_SCREEN_CONTENT_TOOLS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>seq_force_screen_content_tools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seq_force_screen_content_tools</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>seq_choose_integer_mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seq_choose_integer_mv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>seq_force_integer_mv</name></expr></argument>,

<argument><expr><name>AV1_SELECT_INTEGER_MV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>seq_force_integer_mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>seq_force_integer_mv</name></expr></argument>, <argument><expr><name>AV1_SELECT_INTEGER_MV</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>order_hint_bits_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_superres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_cdef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>enable_restoration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>color_config</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>color_config</name></name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>seq_profile</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>film_grain_params_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>temporal_delimiter_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Temporal Delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>seen_frame_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>set_frame_refs</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ref_frame_list</name><index>[<expr><name>AV1_NUM_REF_FRAMES</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AV1_REF_FRAME_LAST2</name></expr>, <expr><name>AV1_REF_FRAME_LAST3</name></expr>, <expr><name>AV1_REF_FRAME_BWDREF</name></expr>,

<expr><name>AV1_REF_FRAME_ALTREF2</name></expr>, <expr><name>AV1_REF_FRAME_ALTREF</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>ref_frame_idx</name><index>[<expr><name>AV1_REFS_PER_FRAME</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>used_frame</name><index>[<expr><name>AV1_NUM_REF_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>shifted_order_hints</name><index>[<expr><name>AV1_NUM_REF_FRAMES</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_frame_hint</name></decl>, <decl><type ref="prev"/><name>latest_order_hint</name></decl>, <decl><type ref="prev"/><name>earliest_order_hint</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>AV1_REF_FRAME_LAST</name> <operator>-</operator> <name>AV1_REF_FRAME_LAST</name></expr>]</index></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>last_frame_idx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>AV1_REF_FRAME_GOLDEN</name> <operator>-</operator> <name>AV1_REF_FRAME_LAST</name></expr>]</index></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>golden_frame_idx</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>used_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>used_frame</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>last_frame_idx</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>used_frame</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>golden_frame_idx</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_frame_hint</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>seq</name><operator>-&gt;</operator><name>order_hint_bits_minus_1</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>shifted_order_hints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cur_frame_hint</name> <operator>+</operator>

<call><name>cbs_av1_get_relative_dist</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order_hint</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>order_hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>latest_order_hint</name> <operator>=</operator> <name><name>shifted_order_hints</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>last_frame_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>earliest_order_hint</name> <operator>=</operator> <name><name>shifted_order_hints</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>golden_frame_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hint</name> <init>= <expr><name><name>shifted_order_hints</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>&gt;=</operator> <name>cur_frame_hint</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ref</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint</name> <operator>&gt;=</operator> <name>latest_order_hint</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>latest_order_hint</name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>AV1_REF_FRAME_ALTREF</name> <operator>-</operator> <name>AV1_REF_FRAME_LAST</name></expr>]</index></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>used_frame</name><index>[<expr><name>ref</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hint</name> <init>= <expr><name><name>shifted_order_hints</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>&gt;=</operator> <name>cur_frame_hint</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ref</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint</name> <operator>&lt;</operator> <name>earliest_order_hint</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>earliest_order_hint</name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>AV1_REF_FRAME_BWDREF</name> <operator>-</operator> <name>AV1_REF_FRAME_LAST</name></expr>]</index></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>used_frame</name><index>[<expr><name>ref</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hint</name> <init>= <expr><name><name>shifted_order_hints</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used_frame</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>&gt;=</operator> <name>cur_frame_hint</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ref</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint</name> <operator>&lt;</operator> <name>earliest_order_hint</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>earliest_order_hint</name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>AV1_REF_FRAME_ALTREF2</name> <operator>-</operator> <name>AV1_REF_FRAME_LAST</name></expr>]</index></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>used_frame</name><index>[<expr><name>ref</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_REFS_PER_FRAME</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ref_frame</name> <init>= <expr><name><name>ref_frame_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref_frame_idx</name><index>[<expr><name>ref_frame</name> <operator>-</operator> <name>AV1_REF_FRAME_LAST</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hint</name> <init>= <expr><name><name>shifted_order_hints</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>used_frame</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name>hint</name> <operator>&lt;</operator> <name>cur_frame_hint</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ref</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint</name> <operator>&gt;=</operator> <name>latest_order_hint</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name>latest_order_hint</name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>ref_frame</name> <operator>-</operator> <name>AV1_REF_FRAME_LAST</name></expr>]</index></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>used_frame</name><index>[<expr><name>ref</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hint</name> <init>= <expr><name><name>shifted_order_hints</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ref</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>hint</name> <operator>&lt;</operator> <name>earliest_order_hint</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>earliest_order_hint</name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ref</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>superres_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>denom</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>enable_superres</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>use_superres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>use_superres</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>use_superres</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>coded_denom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>coded_denom</name></name> <operator>+</operator> <name>AV1_SUPERRES_DENOM_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <name>AV1_SUPERRES_NUM</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>=</operator> <operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name> <operator>*</operator> <name>AV1_SUPERRES_NUM</name> <operator>+</operator>

<name>denom</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>denom</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_size</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_size_override_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>frame_width_bits_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>frame_width_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>frame_height_bits_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>frame_height_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>frame_width_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>frame_height_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>max_frame_width_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>max_frame_height_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>superres_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>render_size</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>render_and_frame_size_different</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>render_and_frame_size_different</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>render_width_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>render_height_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>render_width</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>render_width_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>render_height</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>render_height_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>render_width</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>render_height</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_height</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_size_with_refs</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>found_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>found_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1ReferenceFrameState</name> <modifier>*</modifier></type><name>ref</name> <init>=

<expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Missing reference frame needed for frame size "</literal>

<literal type="string">"(ref = %d, ref_frame_idx = %d).\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>upscaled_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>frame_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>frame_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>render_width</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>render_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>render_height</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>render_height</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>AV1_REFS_PER_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>render_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>superres_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>interpolation_filter</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>is_filter_switchable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>is_filter_switchable</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>interpolation_filter</name></expr></argument>,

<argument><expr><name>AV1_INTERPOLATION_FILTER_SWITCHABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>interpolation_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>tile_info</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mi_cols</name></decl>, <decl><type ref="prev"/><name>mi_rows</name></decl>, <decl><type ref="prev"/><name>sb_cols</name></decl>, <decl><type ref="prev"/><name>sb_rows</name></decl>, <decl><type ref="prev"/><name>sb_shift</name></decl>, <decl><type ref="prev"/><name>sb_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_tile_width_sb</name></decl>, <decl><type ref="prev"/><name>max_tile_height_sb</name></decl>, <decl><type ref="prev"/><name>max_tile_area_sb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_log2_tile_cols</name></decl>, <decl><type ref="prev"/><name>max_log2_tile_cols</name></decl>, <decl><type ref="prev"/><name>max_log2_tile_rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_log2_tiles</name></decl>, <decl><type ref="prev"/><name>min_log2_tile_rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mi_cols</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mi_rows</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_height</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sb_cols</name> <operator>=</operator> <ternary><condition><expr><name><name>seq</name><operator>-&gt;</operator><name>use_128x128_superblock</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>mi_cols</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><operator>(</operator><name>mi_cols</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>sb_rows</name> <operator>=</operator> <ternary><condition><expr><name><name>seq</name><operator>-&gt;</operator><name>use_128x128_superblock</name></name></expr> ?</condition><then> <expr><operator>(</operator><operator>(</operator><name>mi_rows</name> <operator>+</operator> <literal type="number">31</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>

</then><else>: <expr><operator>(</operator><operator>(</operator><name>mi_rows</name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>sb_shift</name> <operator>=</operator> <ternary><condition><expr><name><name>seq</name><operator>-&gt;</operator><name>use_128x128_superblock</name></name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>sb_size</name> <operator>=</operator> <name>sb_shift</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_tile_width_sb</name> <operator>=</operator> <name>AV1_MAX_TILE_WIDTH</name> <operator>&gt;&gt;</operator> <name>sb_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_tile_area_sb</name> <operator>=</operator> <name>AV1_MAX_TILE_AREA</name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>sb_size</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>min_log2_tile_cols</name> <operator>=</operator> <call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><name>max_tile_width_sb</name></expr></argument>, <argument><expr><name>sb_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_log2_tile_cols</name> <operator>=</operator> <call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>sb_cols</name></expr></argument>, <argument><expr><name>AV1_MAX_TILE_COLS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_log2_tile_rows</name> <operator>=</operator> <call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>sb_rows</name></expr></argument>, <argument><expr><name>AV1_MAX_TILE_ROWS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>min_log2_tiles</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>min_log2_tile_cols</name></expr></argument>,

<argument><expr><call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><name>max_tile_area_sb</name></expr></argument>, <argument><expr><name>sb_rows</name> <operator>*</operator> <name>sb_cols</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>uniform_tile_spacing_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>uniform_tile_spacing_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tile_width_sb</name></decl>, <decl><type ref="prev"/><name>tile_height_sb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>increment</name><argument_list>(<argument><expr><name>tile_cols_log2</name></expr></argument>, <argument><expr><name>min_log2_tile_cols</name></expr></argument>, <argument><expr><name>max_log2_tile_cols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tile_width_sb</name> <operator>=</operator> <operator>(</operator><name>sb_cols</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_cols_log2</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator>

<name><name>current</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>=</operator> <operator>(</operator><name>sb_cols</name> <operator>+</operator> <name>tile_width_sb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>tile_width_sb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>min_log2_tile_rows</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>min_log2_tiles</name> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_cols_log2</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>increment</name><argument_list>(<argument><expr><name>tile_rows_log2</name></expr></argument>, <argument><expr><name>min_log2_tile_rows</name></expr></argument>, <argument><expr><name>max_log2_tile_rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tile_height_sb</name> <operator>=</operator> <operator>(</operator><name>sb_rows</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_rows_log2</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator>

<name><name>current</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>=</operator> <operator>(</operator><name>sb_rows</name> <operator>+</operator> <name>tile_height_sb</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>tile_height_sb</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>widest_tile_sb</name></decl>, <decl><type ref="prev"/><name>start_sb</name></decl>, <decl><type ref="prev"/><name>size_sb</name></decl>, <decl><type ref="prev"/><name>max_width</name></decl>, <decl><type ref="prev"/><name>max_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>widest_tile_sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>start_sb</name> <operator>&lt;</operator> <name>sb_cols</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>AV1_MAX_TILE_COLS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>max_width</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sb_cols</name> <operator>-</operator> <name>start_sb</name></expr></argument>, <argument><expr><name>max_tile_width_sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ns</name><argument_list>(<argument><expr><name>max_width</name></expr></argument>, <argument><expr><name><name>width_in_sbs_minus_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_sb</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>width_in_sbs_minus_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>widest_tile_sb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>size_sb</name></expr></argument>, <argument><expr><name>widest_tile_sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_sb</name> <operator>+=</operator> <name>size_sb</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>tile_cols_log2</name></name> <operator>=</operator> <call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>min_log2_tiles</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>max_tile_area_sb</name> <operator>=</operator> <operator>(</operator><name>sb_rows</name> <operator>*</operator> <name>sb_cols</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>min_log2_tiles</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>max_tile_area_sb</name> <operator>=</operator> <name>sb_rows</name> <operator>*</operator> <name>sb_cols</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>max_tile_height_sb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max_tile_area_sb</name> <operator>/</operator> <name>widest_tile_sb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>start_sb</name> <operator>&lt;</operator> <name>sb_rows</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>AV1_MAX_TILE_ROWS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>max_height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sb_rows</name> <operator>-</operator> <name>start_sb</name></expr></argument>, <argument><expr><name>max_tile_height_sb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ns</name><argument_list>(<argument><expr><name>max_height</name></expr></argument>, <argument><expr><name><name>height_in_sbs_minus_1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>size_sb</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>height_in_sbs_minus_1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>start_sb</name> <operator>+=</operator> <name>size_sb</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>tile_rows_log2</name></name> <operator>=</operator> <call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>tile_cols_log2</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>tile_rows_log2</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>tile_cols_log2</name></name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_rows_log2</name></name></expr></argument>,

<argument><expr><name>context_update_tile_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>tile_size_bytes_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>context_update_tile_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>tile_rows</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>quantization_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>base_q_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_y_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>separate_uv_delta_q</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>diff_uv_delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>diff_uv_delta</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_u_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_u_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>diff_uv_delta</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_v_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>delta_q</name><argument_list>(<argument><expr><name>delta_q_v_ac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_q_v_dc</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>delta_q_u_dc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_q_v_ac</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>delta_q_u_ac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_q_u_dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_q_u_ac</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_q_v_dc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_q_v_ac</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>using_qmatrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>using_qmatrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>qm_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>qm_u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>separate_uv_delta_q</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>qm_v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>qm_v</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>qm_u</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>segmentation_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>bits</name><index>[<expr><name>AV1_SEG_LVL_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>sign</name><index>[<expr><name>AV1_SEG_LVL_MAX</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>segmentation_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>segmentation_enabled</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>primary_ref_frame</name></name> <operator>==</operator> <name>AV1_PRIMARY_REF_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>segmentation_update_map</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>segmentation_temporal_update</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>segmentation_update_data</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>segmentation_update_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>segmentation_update_map</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>segmentation_temporal_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>segmentation_temporal_update</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>segmentation_update_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>segmentation_update_data</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_MAX_SEGMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>AV1_SEG_LVL_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sign</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sus</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <name><name>bits</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><name><name>bits</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_MAX_SEGMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>AV1_SEG_LVL_MAX</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>delta_q_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>base_q_idx</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>delta_q_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_q_present</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>delta_q_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>delta_q_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>delta_lf_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>delta_q_present</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>allow_intrabc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>delta_lf_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_lf_present</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>delta_lf_present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>delta_lf_res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>delta_lf_multi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_lf_res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_lf_multi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_lf_present</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_lf_res</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>delta_lf_multi</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>loop_filter_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>coded_lossless</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>allow_intrabc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_level</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_INTRA</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_LAST</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_LAST2</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_LAST3</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_BWDREF</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_GOLDEN</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_ALTREF</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>AV1_REF_FRAME_ALTREF2</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>loop_filter_mode_deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_level</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>loop_filter_level</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>loop_filter_level</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_level</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_level</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>loop_filter_sharpness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>loop_filter_delta_enabled</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>loop_filter_delta_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>loop_filter_delta_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>loop_filter_delta_update</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_TOTAL_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>update_ref_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>update_ref_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sus</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_ref_deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>update_mode_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>update_mode_delta</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sus</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name><name>loop_filter_mode_deltas</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>cdef_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>coded_lossless</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>allow_intrabc</name></name> <operator>||</operator>

<operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>enable_cdef</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>cdef_damping_minus_3</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>cdef_bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>cdef_y_pri_strength</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>cdef_y_sec_strength</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>cdef_uv_pri_strength</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>cdef_uv_sec_strength</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cdef_damping_minus_3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>cdef_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>cdef_bits</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cdef_y_pri_strength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>cdef_y_sec_strength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>num_planes</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cdef_uv_pri_strength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>cdef_uv_sec_strength</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>lr_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uses_lr</name></decl>, <decl><type ref="prev"/><name>uses_chroma_lr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>all_lossless</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>allow_intrabc</name></name> <operator>||</operator>

<operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>enable_restoration</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>uses_lr</name> <operator>=</operator> <name>uses_chroma_lr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>num_planes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>lr_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>lr_type</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>uses_lr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>uses_chroma_lr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>uses_lr</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>use_128x128_superblock</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>increment</name><argument_list>(<argument><expr><name>lr_unit_shift</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>increment</name><argument_list>(<argument><expr><name>lr_unit_shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_x</name></name> <operator>&amp;&amp;</operator>

<name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_y</name></name> <operator>&amp;&amp;</operator> <name>uses_chroma_lr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>lr_uv_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>lr_uv_shift</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>read_tx_mode</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>coded_lossless</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>tx_mode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>increment</name><argument_list>(<argument><expr><name>tx_mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_reference_mode</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_INTRA_ONLY</name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>reference_select</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>reference_select</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>skip_mode_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_mode_allowed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_INTRA_ONLY</name> <operator>||</operator>

<operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>reference_select</name></name> <operator>||</operator> <operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_mode_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>forward_idx</name></decl>, <decl><type ref="prev"/><name>backward_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forward_hint</name></decl>, <decl><type ref="prev"/><name>backward_hint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_hint</name></decl>, <decl><type ref="prev"/><name>dist</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>forward_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>backward_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ref_hint</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>order_hint</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dist</name> <operator>=</operator> <call><name>cbs_av1_get_relative_dist</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name>ref_hint</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>order_hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dist</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>forward_idx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>

<name>cbs_av1_get_relative_dist</name><operator>(</operator><name>seq</name>, <name>ref_hint</name>,

<name>forward_hint</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>forward_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>forward_hint</name> <operator>=</operator> <name>ref_hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dist</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>backward_idx</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<call><name>cbs_av1_get_relative_dist</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name>ref_hint</name></expr></argument>,

<argument><expr><name>backward_hint</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>backward_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>backward_hint</name> <operator>=</operator> <name>ref_hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>forward_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_mode_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>backward_idx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_mode_allowed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>second_forward_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>second_forward_hint</name></decl>;</decl_stmt>

<expr_stmt><expr><name>second_forward_idx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ref_hint</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>order_hint</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>cbs_av1_get_relative_dist</name><argument_list>(<argument><expr><name>seq</name></expr></argument>, <argument><expr><name>ref_hint</name></expr></argument>,

<argument><expr><name>forward_hint</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>second_forward_idx</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator>

<name>cbs_av1_get_relative_dist</name><operator>(</operator><name>seq</name>, <name>ref_hint</name>,

<name>second_forward_hint</name><operator>)</operator></expr></argument> &gt;</argument_list></name> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>second_forward_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>second_forward_hint</name> <operator>=</operator> <name>ref_hint</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>second_forward_idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>skip_mode_allowed</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>skip_mode_allowed</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>skip_mode_allowed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>skip_mode_present</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>skip_mode_present</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>global_motion_param</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>abs_bits</name></decl>, <decl><type ref="prev"/><name>prec_bits</name></decl>, <decl><type ref="prev"/><name>num_syms</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AV1_WARP_MODEL_TRANSLATION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>abs_bits</name> <operator>=</operator> <name>AV1_GM_ABS_TRANS_ONLY_BITS</name> <operator>-</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>allow_high_precision_mv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prec_bits</name> <operator>=</operator> <name>AV1_GM_TRANS_ONLY_PREC_BITS</name> <operator>-</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>allow_high_precision_mv</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>abs_bits</name> <operator>=</operator> <name>AV1_GM_ABS_TRANS_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prec_bits</name> <operator>=</operator> <name>AV1_GM_TRANS_PREC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>abs_bits</name> <operator>=</operator> <name>AV1_GM_ABS_ALPHA_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>prec_bits</name> <operator>=</operator> <name>AV1_GM_ALPHA_PREC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>num_syms</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>abs_bits</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subexp</name><argument_list>(<argument><expr><name><name>gm_params</name><index>[<expr><name>ref</name></expr>]</index><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>num_syms</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>prec_bits</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>global_motion_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ref</name></decl>, <decl><type ref="prev"/><name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_INTRA_ONLY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name>AV1_REF_FRAME_LAST</name></expr>;</init> <condition><expr><name>ref</name> <operator>&lt;=</operator> <name>AV1_REF_FRAME_ALTREF</name></expr>;</condition> <incr><expr><name>ref</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>is_global</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>is_global</name><index>[<expr><name>ref</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>is_rot_zoom</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>is_rot_zoom</name><index>[<expr><name>ref</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV1_WARP_MODEL_ROTZOOM</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>is_translation</name><index>[<expr><name>ref</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>type</name> <operator>=</operator> <ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>is_translation</name><index>[<expr><name>ref</name></expr>]</index></name></expr> ?</condition><then> <expr><name>AV1_WARP_MODEL_TRANSLATION</name></expr>

</then><else>: <expr><name>AV1_WARP_MODEL_AFFINE</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>type</name> <operator>=</operator> <name>AV1_WARP_MODEL_IDENTITY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>AV1_WARP_MODEL_ROTZOOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>global_motion_param</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>global_motion_param</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>AV1_WARP_MODEL_AFFINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>global_motion_param</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>global_motion_param</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>AV1_WARP_MODEL_TRANSLATION</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>global_motion_param</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>global_motion_param</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>film_grain_params</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_pos_luma</name></decl>, <decl><type ref="prev"/><name>num_pos_chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>film_grain_params_present</name></name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>show_frame</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>showable_frame</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>apply_grain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>apply_grain</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>grain_seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_INTER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>update_grain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>update_grain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>update_grain</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>film_grain_params_ref_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>num_y_points</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_y_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>point_y_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>current</name><operator>-&gt;</operator><name>point_y_value</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>num_y_points</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>point_y_scaling</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>mono_chrome</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_scaling_from_luma</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>chroma_scaling_from_luma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>mono_chrome</name></name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>chroma_scaling_from_luma</name></name> <operator>||</operator>

<operator>(</operator><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_x</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_y</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>current</name><operator>-&gt;</operator><name>num_y_points</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_cb_points</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_cr_points</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>num_cb_points</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_cb_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>point_cb_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>current</name><operator>-&gt;</operator><name>point_cb_value</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>num_cb_points</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>point_cb_scaling</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>num_cr_points</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_cr_points</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fcs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>point_cr_value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>current</name><operator>-&gt;</operator><name>point_cr_value</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>num_cr_points</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>point_cr_scaling</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>grain_scaling_minus_8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ar_coeff_lag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_pos_luma</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>current</name><operator>-&gt;</operator><name>ar_coeff_lag</name></name> <operator>*</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>ar_coeff_lag</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_y_points</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_pos_chroma</name> <operator>=</operator> <name>num_pos_luma</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pos_luma</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ar_coeffs_y_plus_128</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>num_pos_chroma</name> <operator>=</operator> <name>num_pos_luma</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_scaling_from_luma</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>num_cb_points</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pos_chroma</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ar_coeffs_cb_plus_128</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_scaling_from_luma</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>num_cr_points</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_pos_chroma</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>ar_coeffs_cr_plus_128</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ar_coeff_shift_minus_6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>grain_scale_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_cb_points</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cb_mult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cb_luma_mult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>cb_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_cr_points</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cr_mult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cr_luma_mult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>cr_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>overlap_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>clip_to_restricted_range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>uncompressed_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>id_len</name></decl>, <decl><type ref="prev"/><name>diff_len</name></decl>, <decl><type ref="prev"/><name>all_frames</name></decl>, <decl><type ref="prev"/><name>frame_is_intra</name></decl>, <decl><type ref="prev"/><name>order_hint_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No sequence header available: "</literal>

<literal type="string">"unable to decode frame header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>id_len</name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>additional_frame_id_length_minus_1</name></name> <operator>+</operator>

<name><name>seq</name><operator>-&gt;</operator><name>delta_frame_id_length_minus_2</name></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>all_frames</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>AV1_NUM_REF_FRAMES</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>reduced_still_picture_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>show_existing_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>frame_type</name></expr></argument>, <argument><expr><name>AV1_FRAME_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>show_frame</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>showable_frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_is_intra</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>show_existing_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>show_existing_frame</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1ReferenceFrameState</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>frame_to_show_map_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>frame_to_show_map_idx</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>timing_info</name><operator>.</operator><name>equal_picture_interval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>decoder_model_info</name><operator>.</operator><name>frame_presentation_time_length_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>frame_presentation_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>frame_id_numbers_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name>id_len</name></expr></argument>, <argument><expr><name>display_frame_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>refresh_frame_flags</name></expr></argument>, <argument><expr><name>all_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>refresh_frame_flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>frame_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_is_intra</name> <operator>=</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_INTRA_ONLY</name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>show_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>show_frame</name></name> <operator>&amp;&amp;</operator>

<name><name>seq</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>timing_info</name><operator>.</operator><name>equal_picture_interval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>decoder_model_info</name><operator>.</operator><name>frame_presentation_time_length_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name>frame_presentation_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>show_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>showable_frame</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>!=</operator> <name>AV1_FRAME_KEY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>showable_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_SWITCH</name> <operator>||</operator>

<operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>show_frame</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>error_resilient_mode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>error_resilient_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>show_frame</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order_hint</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>disable_cdf_update</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>seq_force_screen_content_tools</name></name> <operator>==</operator>

<name>AV1_SELECT_SCREEN_CONTENT_TOOLS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>allow_screen_content_tools</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>allow_screen_content_tools</name></expr></argument>,

<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>seq_force_screen_content_tools</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>allow_screen_content_tools</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>seq_force_integer_mv</name></name> <operator>==</operator> <name>AV1_SELECT_INTEGER_MV</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>force_integer_mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>force_integer_mv</name></expr></argument>, <argument><expr><name><name>seq</name><operator>-&gt;</operator><name>seq_force_integer_mv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>force_integer_mv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>frame_id_numbers_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name>id_len</name></expr></argument>, <argument><expr><name>current_frame_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>diff_len</name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>delta_frame_id_length_minus_2</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>current_frame_id</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>diff_len</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_id</name> <operator>&gt;</operator> <name><name>current</name><operator>-&gt;</operator><name>current_frame_id</name></name> <operator>||</operator>

<name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_id</name> <operator>&lt;</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>current_frame_id</name></name> <operator>-</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>diff_len</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_id</name> <operator>&gt;</operator> <name><name>current</name><operator>-&gt;</operator><name>current_frame_id</name></name> <operator>&amp;&amp;</operator>

<name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame_id</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>id_len</name><operator>)</operator> <operator>+</operator>

<name><name>current</name><operator>-&gt;</operator><name>current_frame_id</name></name> <operator>-</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>diff_len</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>current_frame_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_SWITCH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>frame_size_override_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>reduced_still_picture_header</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>frame_size_override_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>frame_size_override_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>order_hint_bits</name> <operator>=</operator>

<ternary><condition><expr><name><name>seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr> ?</condition><then> <expr><name><name>seq</name><operator>-&gt;</operator><name>order_hint_bits_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>order_hint_bits</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name>order_hint_bits</name></expr></argument>, <argument><expr><name>order_hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>order_hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_is_intra</name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>error_resilient_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>primary_ref_frame</name></expr></argument>, <argument><expr><name>AV1_PRIMARY_REF_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>primary_ref_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>decoder_model_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>buffer_removal_time_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>buffer_removal_time_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>seq</name><operator>-&gt;</operator><name>operating_points_cnt_minus_1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>decoder_model_present_for_this_op</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>op_pt_idc</name> <init>= <expr><name><name>seq</name><operator>-&gt;</operator><name>operating_point_idc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_temporal_layer</name> <init>= <expr><operator>(</operator><name>op_pt_idc</name> <operator>&gt;&gt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>temporal_id</name></name> <operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_spatial_layer</name> <init>= <expr><operator>(</operator><name>op_pt_idc</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>priv</name><operator>-&gt;</operator><name>spatial_id</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>operating_point_idc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>

<name>in_temporal_layer</name> <operator>||</operator> <name>in_spatial_layer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>decoder_model_info</name><operator>.</operator><name>buffer_removal_time_length_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>buffer_removal_time</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_SWITCH</name> <operator>||</operator>

<operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name> <operator>&amp;&amp;</operator> <name><name>current</name><operator>-&gt;</operator><name>show_frame</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>refresh_frame_flags</name></expr></argument>, <argument><expr><name>all_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>refresh_frame_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_is_intra</name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>refresh_frame_flags</name></name> <operator>!=</operator> <name>all_frames</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>error_resilient_mode</name></name> <operator>&amp;&amp;</operator> <name><name>seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><name>order_hint_bits</name></expr></argument>, <argument><expr><name><name>ref_order_hint</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ref_order_hint</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>order_hint</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>valid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_KEY</name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name> <operator>==</operator> <name>AV1_FRAME_INTRA_ONLY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>render_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>allow_screen_content_tools</name></name> <operator>&amp;&amp;</operator>

<name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name> <operator>==</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>allow_intrabc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>allow_intrabc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>enable_order_hint</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>frame_refs_short_signaling</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>frame_refs_short_signaling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_refs_short_signaling</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>last_frame_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>golden_frame_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>set_frame_refs</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_REFS_PER_FRAME</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>frame_refs_short_signaling</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>ref_frame_idx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>frame_id_numbers_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>delta_frame_id_length_minus_2</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>,

<argument><expr><name><name>delta_frame_id_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_size_override_flag</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>error_resilient_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size_with_refs</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>render_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>force_integer_mv</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>allow_high_precision_mv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>allow_high_precision_mv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>interpolation_filter</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>is_motion_mode_switchable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>error_resilient_mode</name></name> <operator>||</operator>

<operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>enable_ref_frame_mvs</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>use_ref_frame_mvs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>use_ref_frame_mvs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>allow_intrabc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame_is_intra</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>seq</name><operator>-&gt;</operator><name>reduced_still_picture_header</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>disable_cdf_update</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>disable_frame_end_update_cdf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>disable_frame_end_update_cdf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>primary_ref_frame</name></name> <operator>==</operator> <name>AV1_PRIMARY_REF_NONE</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>use_ref_frame_mvs</name></name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>tile_info</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>quantization_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>segmentation_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>delta_q_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>delta_lf_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>coded_lossless</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_MAX_SEGMENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qindex</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>feature_enabled</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>AV1_SEG_LVL_ALT_Q</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>qindex</name> <operator>=</operator> <operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>base_q_idx</name></name> <operator>+</operator>

<name><name>current</name><operator>-&gt;</operator><name>feature_value</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>AV1_SEG_LVL_ALT_Q</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>qindex</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>base_q_idx</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>qindex</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>qindex</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>qindex</name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>delta_q_y_dc</name></name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>delta_q_u_ac</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>delta_q_u_dc</name></name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>delta_q_v_ac</name></name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>delta_q_v_dc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>coded_lossless</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>all_lossless</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>coded_lossless</name></name> <operator>&amp;&amp;</operator>

<name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name> <operator>==</operator> <name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>loop_filter_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>cdef_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>lr_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>read_tx_mode</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_reference_mode</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>skip_mode_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_is_intra</name> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>error_resilient_mode</name></name> <operator>||</operator>

<operator>!</operator><name><name>seq</name><operator>-&gt;</operator><name>enable_warped_motion</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>allow_warped_motion</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>allow_warped_motion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>reduced_tx_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>global_motion_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>film_grain_params</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>AV1_NUM_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>refresh_frame_flags</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>AV1ReferenceFrameState</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>valid</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>frame_id</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>current_frame_id</name></name></expr>,

<expr><operator>.</operator><name>upscaled_width</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name></expr>,

<expr><operator>.</operator><name>frame_width</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name></expr>,

<expr><operator>.</operator><name>frame_height</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_height</name></name></expr>,

<expr><operator>.</operator><name>render_width</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>render_width</name></name></expr>,

<expr><operator>.</operator><name>render_height</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>render_height</name></name></expr>,

<expr><operator>.</operator><name>frame_type</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>frame_type</name></name></expr>,

<expr><operator>.</operator><name>subsampling_x</name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_x</name></name></expr>,

<expr><operator>.</operator><name>subsampling_y</name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_y</name></name></expr>,

<expr><operator>.</operator><name>bit_depth</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>,

<expr><operator>.</operator><name>order_hint</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>order_hint</name></name></expr>,

}</block></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Frame %d: size %dx%d "</literal>

<literal type="string">"upscaled %d render %dx%d subsample %dx%d "</literal>

<literal type="string">"bitdepth %d tiles %dx%d.\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>order_hint</name></name></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_width</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_height</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>upscaled_width</name></name></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>render_width</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>render_height</name></name></expr></argument>,

<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>seq</name><operator>-&gt;</operator><name>color_config</name><operator>.</operator><name>subsampling_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>bit_depth</name></name></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>tile_rows</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>tile_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_header_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>redundant</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>rw_buffer_ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_pos</name></decl>, <decl><type ref="prev"/><name>fh_bits</name></decl>, <decl><type ref="prev"/><name>fh_bytes</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>fh_start</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>priv</name><operator>-&gt;</operator><name>seen_frame_header</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>redundant</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid repeated "</literal>

<literal type="string">"frame header OBU.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>fh</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Redundant Frame Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name></name> <operator>&amp;&amp;</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fh</name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_header_size</name></name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header_size</name></name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fh</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xf</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>frame_header_copy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name>val</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>redundant</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Redundant Frame Header (used as Frame Header)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Frame Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>uncompressed_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>show_existing_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>seen_frame_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>seen_frame_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>fh_bits</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fh_start</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>rw</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <name>start_pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>tmp</name> <init>= <expr><operator>*</operator><name>rw</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><name>fh_bits</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>start_pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>fh_start</name> <operator>=</operator> <name><name>rw</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name>start_pos</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>fh_bytes</name> <operator>=</operator> <operator>(</operator><name>fh_bits</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header_size</name></name> <operator>=</operator> <name>fh_bits</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rw_buffer_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name>rw_buffer_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name> <operator>=</operator> <name>fh_start</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name></name> <operator>=</operator>

<call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name>fh_bytes</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>frame_header_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_header</name></name></expr></argument>, <argument><expr><name>fh_start</name></expr></argument>, <argument><expr><name>fh_bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>tile_group_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawTileGroup</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_tiles</name></decl>, <decl><type ref="prev"/><name>tile_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Tile Group"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_tiles</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>tile_cols</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>tile_rows</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>num_tiles</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>tile_start_and_end_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>tile_start_and_end_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num_tiles</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>tile_start_and_end_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>tg_start</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>tg_end</name></expr></argument>, <argument><expr><name>num_tiles</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tile_bits</name> <operator>=</operator> <call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>tile_cols</name></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>cbs_av1_tile_log2</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>tile_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name>tile_bits</name></expr></argument>, <argument><expr><name>tg_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name>tile_bits</name></expr></argument>, <argument><expr><name>tg_end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>byte_alignment</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>tg_end</name></name> <operator>==</operator> <name>num_tiles</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>seen_frame_header</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>frame_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawFrame</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>rw_buffer_ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>frame_header_obu</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>header</name></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>rw_buffer_ref</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>byte_alignment</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>tile_group_obu</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>tile_group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>tile_list_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawTileList</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>output_frame_width_in_tiles_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>output_frame_height_in_tiles_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>tile_count_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>metadata_hdr_cll</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawMetadataHDRCLL</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>max_cll</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>max_fall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>metadata_hdr_mdcv</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawMetadataHDRMDCV</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>primary_chromaticity_x</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>primary_chromaticity_y</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>white_point_chromaticity_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>white_point_chromaticity_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>luminance_max</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>luminance_min</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>current</name><operator>-&gt;</operator><name>luminance_max</name></name> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>scalability_structure</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawMetadataScalability</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No sequence header available: "</literal>

<literal type="string">"unable to parse scalability metadata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>seq</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>spatial_layers_cnt_minus_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>spatial_layer_dimensions_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>spatial_layer_description_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>temporal_group_description_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>scalability_structure_reserved_3bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>spatial_layer_dimensions_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>spatial_layers_cnt_minus_1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>spatial_layer_max_width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>seq</name><operator>-&gt;</operator><name>max_frame_width_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fcs</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>spatial_layer_max_height</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>seq</name><operator>-&gt;</operator><name>max_frame_height_minus_1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>spatial_layer_description_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>spatial_layers_cnt_minus_1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>spatial_layer_ref_id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>temporal_group_description_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>temporal_group_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>temporal_group_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>temporal_group_temporal_id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>temporal_group_temporal_switching_up_point_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>temporal_group_spatial_switching_up_point_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name><name>temporal_group_ref_cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>temporal_group_ref_cnt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fbs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>temporal_group_ref_pic_diff</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>metadata_scalability</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawMetadataScalability</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>scalability_mode_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>scalability_mode_idc</name></name> <operator>==</operator> <name>AV1_SCALABILITY_SS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>scalability_structure</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>metadata_itut_t35</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawMetadataITUTT35</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>itu_t_t35_country_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>itu_t_t35_country_code</name></name> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>itu_t_t35_country_code_extension_byte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>=</operator> <call><name>cbs_av1_get_payload_bytes_left</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_ref</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>payload_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xf</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>itu_t_t35_payload_bytes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>metadata_timecode</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawMetadataTimecode</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>counting_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>full_timestamp_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>discontinuity_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cnt_dropped_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>n_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>full_timestamp_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>seconds_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>minutes_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>hours_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>seconds_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seconds_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>seconds_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>minutes_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>minutes_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>minutes_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>hours_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>hours_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fc</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>hours_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>time_offset_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>time_offset_length</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fb</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>time_offset_length</name></name></expr></argument>, <argument><expr><name>time_offset_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>time_offset_length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>metadata_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawMetadata</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>leb128</name><argument_list>(<argument><expr><name>metadata_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>metadata_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV1_METADATA_TYPE_HDR_CLL</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>metadata_hdr_cll</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>hdr_cll</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_METADATA_TYPE_HDR_MDCV</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>metadata_hdr_mdcv</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>hdr_mdcv</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_METADATA_TYPE_SCALABILITY</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>metadata_scalability</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>scalability</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_METADATA_TYPE_ITUT_T35</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>metadata_itut_t35</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>itut_t35</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_METADATA_TYPE_TIMECODE</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>metadata_timecode</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>metadata</name><operator>.</operator><name>timecode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>padding_obu</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>AV1RawPadding</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Padding"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>=</operator> <call><name>cbs_av1_get_payload_bytes_left</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_ref</name></name> <operator>=</operator> <call><name>av_buffer_alloc</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>payload_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xf</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>obu_padding_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
