<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\jpeglsdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpegls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpeglsdec.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_jpegls_decode_lse</name><parameter_list>(<parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tid</name></decl>, <decl><type ref="prev"/><name>wt</name></decl>, <decl><type ref="prev"/><name>maxtab</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>id</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>id</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">13</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t1</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t2</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>t3</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Coding parameters maxval:%d T1:%d T2:%d T3:%d reset:%d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>t1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>t2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>t3</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>tid</name><operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>wt</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>wt</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>wt</name></expr></argument> &gt;</argument_list></name> <name>MAX_COMPONENTS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"wt %d"</literal></expr></argument>, <argument><expr><name>wt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxtab</name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">5</literal> <operator>+</operator> <name>wt</name><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&lt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>maxtab</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>maxtab</name> <operator>=</operator> <literal type="number">65530</literal><operator>/</operator><name>wt</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"LSE palette %d tid:%d wt:%d maxtab:%d\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>tid</name></expr></argument>, <argument><expr><name>wt</name></expr></argument>, <argument><expr><name>maxtab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>maxtab</name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"&gt;8bit palette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>maxtab</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>maxtab</name></expr></argument>, <argument><expr><operator>(</operator><name>len</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator> <operator>/</operator> <name>wt</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>palette_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>palette_index</name></name> <operator>&gt;</operator> <name>maxtab</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY8</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>maxtab</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>maxtab</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>palette_index</name></name></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><name>maxtab</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>k</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <name>shift</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>wt</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pal</name><index>[<expr><name>k</name></expr>]</index></name> <operator>|=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>wt</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"oversize image"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"invalid id %d\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"ID=%i, T=%i,%i,%i\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>t1</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>t2</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>t3</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ls_get_code_regular</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>Q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JLS_BROKEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>ret</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;=</operator> <operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>ret</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_jpegls_update_state_regular</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ls_get_code_runterm</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>RItype</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>limit_add</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>, <decl><type ref="prev"/><name>map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Q</name> <init>= <expr><literal type="number">365</literal> <operator>+</operator> <name>RItype</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>RItype</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>temp</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>&lt;</operator> <name>temp</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>JLS_BROKEN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>show_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_ur_golomb_jpegls</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>limit</name></name> <operator>-</operator> <name>limit_add</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>map</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>k</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>RItype</name> <operator>||</operator> <name>ret</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>&lt;</operator> <name><name>state</name><operator>-&gt;</operator><name>N</name><index>[<expr><name>Q</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>map</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>+=</operator> <name>RItype</name> <operator>+</operator> <name>map</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>map</name> <operator>-</operator> <operator>(</operator><name>ret</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>B</name><index>[<expr><name>Q</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>ret</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">0x10000</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>A</name><index>[<expr><name>Q</name></expr>]</index></name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>RItype</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>*=</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_downscale_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>Q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ls_decode_line</name><parameter_list>(<parameter><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>last2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>comp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>Ra</name></decl>, <decl><type ref="prev"/><name>Rb</name></decl>, <decl><type ref="prev"/><name>Rc</name></decl>, <decl><type ref="prev"/><name>Rd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>D0</name></decl>, <decl><type ref="prev"/><name>D1</name></decl>, <decl><type ref="prev"/><name>D2</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>pred</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>Ra</name> <operator>=</operator> <ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><call><name>R</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>Rb</name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Rc</name> <operator>=</operator> <ternary><condition><expr><name>x</name></expr> ?</condition><then> <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name> <operator>-</operator> <name>stride</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>last2</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>Rd</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>x</name> <operator>&gt;=</operator> <name>w</name> <operator>-</operator> <name>stride</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name> <operator>+</operator> <name>stride</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>D0</name> <operator>=</operator> <name>Rd</name> <operator>-</operator> <name>Rb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>D1</name> <operator>=</operator> <name>Rb</name> <operator>-</operator> <name>Rc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>D2</name> <operator>=</operator> <name>Rc</name> <operator>-</operator> <name>Ra</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>D0</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>D1</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>D2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>RItype</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>stride</name> <operator>&gt;</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>stride</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>stride</name> <operator>&gt;</operator> <name>w</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>+</operator> <name>r</name> <operator>*</operator> <name>stride</name> <operator>&gt;</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>-</operator> <name>x</name><operator>)</operator> <operator>/</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>Ra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <name>w</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"run overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>x</name> <operator>&lt;=</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>Rb</name> <operator>=</operator> <call><name>R</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>RItype</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>Ra</name> <operator>-</operator> <name>Rb</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ls_get_code_runterm</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>RItype</name></expr></argument>,

<argument><expr><name><name>ff_log2_run</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>run_index</name><index>[<expr><name>comp</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>&amp;&amp;</operator> <name>RItype</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>Ra</name> <operator>+</operator> <name>err</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>Rb</name> <operator>&lt;</operator> <name>Ra</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>Rb</name> <operator>-</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <name>Rb</name> <operator>+</operator> <name>err</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>context</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name>context</name> <operator>=</operator> <call><name>ff_jpegls_quantize</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>D0</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">81</literal> <operator>+</operator>

<call><name>ff_jpegls_quantize</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>D1</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator>

<call><name>ff_jpegls_quantize</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>D2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>mid_pred</name><argument_list>(<argument><expr><name>Ra</name></expr></argument>, <argument><expr><name>Ra</name> <operator>+</operator> <name>Rb</name> <operator>-</operator> <name>Rc</name></expr></argument>, <argument><expr><name>Rb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>context</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>context</name> <operator>=</operator> <operator>-</operator><name>context</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sign</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>-</operator><call><name>ls_get_code_regular</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>C</name><index>[<expr><name>context</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ls_get_code_regular</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>pred</name> <operator>+=</operator> <name>err</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pred</name> <operator>&lt;</operator> <operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>+=</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>pred</name> <operator>&gt;</operator> <name><name>state</name><operator>-&gt;</operator><name>maxval</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>-=</operator> <name><name>state</name><operator>-&gt;</operator><name>range</name></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>twonear</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>pred</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pred</name> <operator>&amp;=</operator> <name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>W</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_jpegls_decode_picture</name><parameter_list>(<parameter><decl><type><name>MJpegDecodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>near</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>point_transform</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ilv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>zero</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>JLSState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>stride</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decoded_height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>zero</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>zero</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>zero</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>JLSState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>near</name></name> <operator>=</operator> <name>near</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>bpp</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>T1</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>t1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>T2</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>t2</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>T3</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>t3</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>reset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>reset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_reset_coding_parameters</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpegls_init_state</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>point_transform</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name>point_transform</name> <operator>+</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bits</name></name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"JPEG-LS params: %ix%i NEAR=%i MV=%i T(%i,%i,%i) "</literal>

<literal type="string">"RESET=%i, LIMIT=%i, qbpp=%i, RANGE=%i\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>near</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>T1</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>T2</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>T3</name></name></expr></argument>,

<argument><expr><name><name>state</name><operator>-&gt;</operator><name>reset</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>limit</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>qbpp</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"JPEG params: ILV=%i Pt=%i BPP=%i, scan = %i\n"</literal></expr></argument>,

<argument><expr><name>ilv</name></expr></argument>, <argument><expr><name>point_transform</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_scan</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ilv</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cur_scan</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>stride</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>off</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_scan</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>stride</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name>off</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ls_decode_line</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>last</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ls_decode_line</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>off</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>last</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>restart_interval</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>--</operator><name><name>s</name><operator>-&gt;</operator><name>restart_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>decoded_height</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ilv</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>Rc</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>stride</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ls_decode_line</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>last</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>cur</name> <operator>+</operator> <name>j</name></expr></argument>,

<argument><expr><name><name>Rc</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>Rc</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>last</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>restart_interval</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>--</operator><name><name>s</name><operator>-&gt;</operator><name>restart_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>decoded_height</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ilv</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Sample interleaved images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown interleaved images"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_PATCHWELCOME</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xfrm</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>xfrm</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>+=</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>+</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>g</name> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>g</name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator> <literal type="number">359</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>+</operator> <literal type="number">490</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>g</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator> <literal type="number">88</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>-</operator> <literal type="number">183</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>+</operator> <literal type="number">30</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">454</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>-</operator><literal type="number">128</literal><operator>)</operator> <operator>+</operator> <literal type="number">574</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avpriv_report_missing_feature</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"16bit xfrm"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bits</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>decoded_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>off</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <name>stride</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>decoded_height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>picture_ptr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>zero</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_jpegls_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"jpegls"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"JPEG-LS"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_JPEGLS</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MJpegDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mjpeg_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mjpeg_decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ff_mjpeg_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
