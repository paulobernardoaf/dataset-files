<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cbs_mpeg2_syntax_template.c"><function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sequence_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawSequenceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamMPEG2Context</name> <modifier>*</modifier></type><name>mpeg2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sequence_header_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>horizontal_size_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>vertical_size_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>horizontal_size</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>horizontal_size_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>vertical_size</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>vertical_size_value</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>aspect_ratio_information</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>frame_rate_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">18</literal></expr></argument>, <argument><expr><name>bit_rate_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marker_bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>vbv_buffer_size_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>constrained_parameters_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>load_intra_quantiser_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>load_intra_quantiser_matrix</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uirs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>intra_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>load_non_intra_quantiser_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>load_non_intra_quantiser_matrix</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uirs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>non_intra_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>user_data</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawUserData</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"User Data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>user_data_start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>k</name> <operator>%</operator> <literal type="number">8</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>user_data_length</name></name> <operator>=</operator> <name>k</name> <operator>/=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>user_data_ref</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>k</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>user_data_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>user_data</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>user_data_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>user_data_length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uis</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>user_data</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sequence_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawSequenceExtension</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamMPEG2Context</name> <modifier>*</modifier></type><name>mpeg2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence Extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>profile_and_level_indication</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>progressive_sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>chroma_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>horizontal_size_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>vertical_size_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>horizontal_size</name></name> <operator>=</operator> <operator>(</operator><name><name>mpeg2</name><operator>-&gt;</operator><name>horizontal_size</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>|</operator>

<name><name>current</name><operator>-&gt;</operator><name>horizontal_size_extension</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>vertical_size</name></name> <operator>=</operator> <operator>(</operator><name><name>mpeg2</name><operator>-&gt;</operator><name>vertical_size</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal><operator>)</operator> <operator>|</operator>

<name><name>current</name><operator>-&gt;</operator><name>vertical_size_extension</name></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>progressive_sequence</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>bit_rate_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marker_bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>vbv_buffer_size_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>low_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>frame_rate_extension_n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>frame_rate_extension_d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sequence_display_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawSequenceDisplayExtension</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence Display Extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>video_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>colour_description</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>colour_description</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_AND_PATCH</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { ui(8, name); if (current-&gt;name == 0) { current-&gt;name = 2; av_log(ctx-&gt;log_ctx, AV_LOG_WARNING, "%s in a sequence display " "extension had the invalid value 0. Setting it to 2 " "(meaning unknown) instead.\n", #name); } } while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>READ_AND_PATCH</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ_AND_PATCH</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>READ_AND_PATCH</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>READ_AND_PATCH</name></cpp:undef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>colour_primaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>display_horizontal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marker_bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>display_vertical_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>group_of_pictures_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawGroupOfPicturesHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Group of Pictures Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>group_start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>time_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>closed_gop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>broken_link</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>extra_information</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawExtraInformation</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>element_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>marker_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>k</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>GetBitContext</name></type> <name>start</name> <init>= <expr><operator>*</operator><name>rw</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>bit</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><call><name>nextbits</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bit</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>extra_information_length</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rw</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>extra_information_ref</name></name> <operator>=</operator>

<call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name>k</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>extra_information_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>extra_information</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>extra_information_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>extra_information_length</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>bit</name><argument_list>(<argument><expr><name>marker_name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xuia</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>element_name</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>extra_information</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bit</name><argument_list>(<argument><expr><name>marker_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>picture_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawPictureHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Picture Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>picture_start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>temporal_reference</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>picture_coding_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>vbv_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>picture_coding_type</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>picture_coding_type</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>full_pel_forward_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>forward_f_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>picture_coding_type</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>full_pel_backward_vector</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>backward_f_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>extra_information</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>extra_information_picture</name></name></expr></argument>,

<argument><expr><literal type="string">"extra_information_picture[k]"</literal></expr></argument>, <argument><expr><literal type="string">"extra_bit_picture"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>picture_coding_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawPictureCodingExtension</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamMPEG2Context</name> <modifier>*</modifier></type><name>mpeg2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Picture Coding Extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>intra_dc_precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>picture_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>top_field_first</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>frame_pred_frame_dct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>concealment_motion_vectors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>q_scale_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>intra_vlc_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alternate_scan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>repeat_first_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>chroma_420_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>progressive_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mpeg2</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>repeat_first_field</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>number_of_frame_centre_offsets</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>number_of_frame_centre_offsets</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>number_of_frame_centre_offsets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> 

<name><name>current</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>number_of_frame_centre_offsets</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>repeat_first_field</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>number_of_frame_centre_offsets</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mpeg2</name><operator>-&gt;</operator><name>number_of_frame_centre_offsets</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>composite_display_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>composite_display_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>v_axis</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>field_sequence</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sub_carrier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>burst_amplitude</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sub_carrier_phase</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>quant_matrix_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawQuantMatrixExtension</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Quant Matrix Extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>load_intra_quantiser_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>load_intra_quantiser_matrix</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uirs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>intra_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>load_non_intra_quantiser_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>load_non_intra_quantiser_matrix</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uirs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>non_intra_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>load_chroma_intra_quantiser_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>load_chroma_intra_quantiser_matrix</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uirs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>intra_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>load_chroma_non_intra_quantiser_matrix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>load_chroma_non_intra_quantiser_matrix</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>uirs</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>chroma_non_intra_quantiser_matrix</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>picture_display_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawPictureDisplayExtension</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamMPEG2Context</name> <modifier>*</modifier></type><name>mpeg2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Picture Display Extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mpeg2</name><operator>-&gt;</operator><name>number_of_frame_centre_offsets</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>sis</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>frame_centre_horizontal_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marker_bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>sis</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>frame_centre_vertical_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>marker_bit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>extension_data</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawExtensionData</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Extension Data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>extension_start_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>extension_start_code_identifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>extension_start_code_identifier</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPEG2_EXTENSION_SEQUENCE</name></expr>:</case>

<return>return <expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sequence_extension</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MPEG2_EXTENSION_SEQUENCE_DISPLAY</name></expr>:</case>

<return>return <expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sequence_display_extension</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>sequence_display</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MPEG2_EXTENSION_QUANT_MATRIX</name></expr>:</case>

<return>return <expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>quant_matrix_extension</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>quant_matrix</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MPEG2_EXTENSION_PICTURE_DISPLAY</name></expr>:</case>

<return>return <expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>picture_display_extension</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>picture_display</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MPEG2_EXTENSION_PICTURE_CODING</name></expr>:</case>

<return>return <expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>picture_coding_extension</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>picture_coding</name></name></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Extension ID %d not supported.\n"</literal></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>extension_start_code_identifier</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>slice_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamMPEG2Context</name> <modifier>*</modifier></type><name>mpeg2</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Slice Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>slice_vertical_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mpeg2</name><operator>-&gt;</operator><name>vertical_size</name></name> <operator>&gt;</operator> <literal type="number">2800</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>slice_vertical_position_extension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mpeg2</name><operator>-&gt;</operator><name>scalable</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>mpeg2</name><operator>-&gt;</operator><name>scalable_mode</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><name>priority_breakpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>uir</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>quantiser_scale_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>nextbits</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>slice_extension_flag</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>slice_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>intra_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>slice_picture_id_enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>slice_picture_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>extra_information</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>extra_information_slice</name></name></expr></argument>,

<argument><expr><literal type="string">"extra_information_slice[k]"</literal></expr></argument>, <argument><expr><literal type="string">"extra_bit_slice"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sequence_end</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>MPEG2RawSequenceEnd</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence End"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ui</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>sequence_end_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
