<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\kbdwin.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kbdwin.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BESSEL_I0_ITER</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define> 

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_kbd_window_init</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bessel</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>local_window</name><index>[<expr><name>FF_KBD_WINDOW_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>alpha2</name> <init>= <expr><operator>(</operator><name>alpha</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>n</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>alpha</name> <operator>*</operator> <name>M_PI</name> <operator>/</operator> <name>n</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <name>FF_KBD_WINDOW_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name>i</name> <operator>*</operator> <operator>(</operator><name>n</name> <operator>-</operator> <name>i</name><operator>)</operator> <operator>*</operator> <name>alpha2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bessel</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name>BESSEL_I0_ITER</name></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>bessel</name> <operator>=</operator> <name>bessel</name> <operator>*</operator> <name>tmp</name> <operator>/</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>j</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>bessel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>local_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sum</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>sqrt</name><argument_list>(<argument><expr><name><name>local_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_kbd_window_init_fixed</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>float</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>local_window</name><index>[<expr><name>FF_KBD_WINDOW_MAX</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_kbd_window_init</name><argument_list>(<argument><expr><name>local_window</name></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><call><name>floor</name><argument_list>(<argument><expr><literal type="number">2147483647.0</literal> <operator>*</operator> <name><name>local_window</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

</unit>
