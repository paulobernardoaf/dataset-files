<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\rkmppdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;drm_fourcc.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rockchip/mpp_buffer.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;rockchip/rk_mpi.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_drm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RECEIVE_FRAME_TIMEOUT</name></cpp:macro> <cpp:value>100</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAMEGROUP_MAX_FRAMES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_MAX_PACKETS</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>MppCtx</name></type> <name>ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MppApi</name> <modifier>*</modifier></type><name>mpi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MppBufferGroup</name></type> <name>frame_group</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>first_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>eos_reached</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>frames_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl>;</decl_stmt>

}</block></struct></type> <name>RKMPPDecoder</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>decoder_ref</name></decl>;</decl_stmt>

}</block></struct></type> <name>RKMPPDecodeContext</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>MppFrame</name></type> <name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>decoder_ref</name></decl>;</decl_stmt>

}</block></struct></type> <name>RKMPPFrameContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>MppCodingType</name></type> <name>rkmpp_get_codingtype</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case> <return>return <expr><name>MPP_VIDEO_CodingAVC</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case> <return>return <expr><name>MPP_VIDEO_CodingHEVC</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_VP8</name></expr>:</case> <return>return <expr><name>MPP_VIDEO_CodingVP8</name></expr>;</return>

<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case> <return>return <expr><name>MPP_VIDEO_CodingVP9</name></expr>;</return>

<default>default:</default> <return>return <expr><name>MPP_VIDEO_CodingUnused</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>rkmpp_get_frameformat</name><parameter_list>(<parameter><decl><type><name>MppFrameFormat</name></type> <name>mppformat</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>mppformat</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MPP_FMT_YUV420SP</name></expr>:</case> <return>return <expr><name>DRM_FORMAT_NV12</name></expr>;</return>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DRM_FORMAT_NV12_10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<case>case <expr><name>MPP_FMT_YUV420SP_10BIT</name></expr>:</case> <return>return <expr><name>DRM_FORMAT_NV12_10</name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rkmpp_write_data</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecodeContext</name> <modifier>*</modifier></type><name>rk_context</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPDecoder</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><operator>(</operator><name>RKMPPDecoder</name> <operator>*</operator><operator>)</operator><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MppPacket</name></type> <name>packet</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpp_packet_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to init MPP packet (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>mpp_packet_set_pts</name><argument_list>(<argument><expr><name>packet</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mpp_packet_set_eos</name><argument_list>(<argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>decode_put_packet</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MPP_ERR_BUFFER_FULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Buffer full writing %d bytes to decoder\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Wrote %d bytes to decoder\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>mpp_packet_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rkmpp_close_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecodeContext</name> <modifier>*</modifier></type><name>rk_context</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rkmpp_release_decoder</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecoder</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><operator>(</operator><name>RKMPPDecoder</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpp_destroy</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>frame_group</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>mpp_buffer_group_put</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>frame_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>frame_group</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rkmpp_init_decoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecodeContext</name> <modifier>*</modifier></type><name>rk_context</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPDecoder</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MppCodingType</name></type> <name>codectype</name> <init>= <expr><name>MPP_VIDEO_CodingUnused</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RK_S64</name></type> <name>paramS64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RK_S32</name></type> <name>paramS32</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name>decoder</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RKMPPDecoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>decoder</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>decoder</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>decoder</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rkmpp_release_decoder</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_BUFFER_FLAG_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Initializing RKMPP decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>codectype</name> <operator>=</operator> <call><name>rkmpp_get_codingtype</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>codectype</name> <operator>==</operator> <name>MPP_VIDEO_CodingUnused</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown codec type (%d).\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpp_check_support_format</name><argument_list>(<argument><expr><name>MPP_CTX_DEC</name></expr></argument>, <argument><expr><name>codectype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec type (%d) unsupported by MPP\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpp_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create MPP context (code = %d).\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpp_init</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>MPP_CTX_DEC</name></expr></argument>, <argument><expr><name>codectype</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize MPP context (code = %d).\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>paramS32</name> <operator>=</operator> <name>MPP_POLL_BLOCK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>control</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>MPP_SET_OUTPUT_BLOCK</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paramS32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set blocking mode on MPI (code = %d).\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>paramS64</name> <operator>=</operator> <name>RECEIVE_FRAME_TIMEOUT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>control</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>MPP_SET_OUTPUT_BLOCK_TIMEOUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paramS64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set block timeout on MPI (code = %d).\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpp_buffer_group_get_internal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>frame_group</name></name></expr></argument>, <argument><expr><name>MPP_BUFFER_TYPE_ION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to retrieve buffer group (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>control</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>MPP_DEC_SET_EXT_BUF_GROUP</name></expr></argument>, <argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>frame_group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to assign buffer group (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mpp_buffer_group_limit_config</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>frame_group</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>FRAMEGROUP_MAX_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to set buffer group limit (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"RKMPP decoder initialized successfully.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>device_ref</name></name> <operator>=</operator> <call><name>av_hwdevice_ctx_alloc</name><argument_list>(<argument><expr><name>AV_HWDEVICE_TYPE_DRM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decoder</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwdevice_ctx_init</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize RKMPP decoder.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>rkmpp_close_decoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rkmpp_send_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecodeContext</name> <modifier>*</modifier></type><name>rk_context</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPDecoder</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><operator>(</operator><name>RKMPPDecoder</name> <operator>*</operator><operator>)</operator><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"End of stream.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>eos_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rkmpp_write_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to send EOS to decoder (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>first_packet</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rkmpp_write_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>,

<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write extradata to decoder (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rkmpp_write_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&amp;&amp;</operator> <name>ret</name><operator>!=</operator><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write data to decoder (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rkmpp_release_frame</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><name>AVDRMFrameDescriptor</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>framecontextref</name> <init>= <expr><operator>(</operator><name>AVBufferRef</name> <operator>*</operator><operator>)</operator><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPFrameContext</name> <modifier>*</modifier></type><name>framecontext</name> <init>= <expr><operator>(</operator><name>RKMPPFrameContext</name> <operator>*</operator><operator>)</operator><name><name>framecontextref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>mpp_frame_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>framecontext</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>framecontext</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>framecontextref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rkmpp_retrieve_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecodeContext</name> <modifier>*</modifier></type><name>rk_context</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPDecoder</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><operator>(</operator><name>RKMPPDecoder</name> <operator>*</operator><operator>)</operator><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPFrameContext</name> <modifier>*</modifier></type><name>framecontext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>framecontextref</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MppFrame</name></type> <name>mppframe</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MppBuffer</name></type> <name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDRMFrameDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDRMLayerDescriptor</name> <modifier>*</modifier></type><name>layer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MppFrameFormat</name></type> <name>mppformat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>drmformat</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>decode_get_frame</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>MPP_ERR_TIMEOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get a frame from MPP (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mppframe</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>mpp_frame_get_info_change</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>hwframes</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Decoder noticed an info change (%dx%d), format=%d\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>mpp_frame_get_width</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>mpp_frame_get_height</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>mpp_frame_get_fmt</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>mpp_frame_get_width</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>mpp_frame_get_height</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>control</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>MPP_DEC_SET_INFO_CHANGE_READY</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>decoder</name><operator>-&gt;</operator><name>frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>frames_ref</name></name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decoder</name><operator>-&gt;</operator><name>frames_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>mppformat</name> <operator>=</operator> <call><name>mpp_frame_get_fmt</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drmformat</name> <operator>=</operator> <call><name>rkmpp_get_frameformat</name><argument_list>(<argument><expr><name>mppformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hwframes</name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>decoder</name><operator>-&gt;</operator><name>frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwframes</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwframes</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <ternary><condition><expr><name>drmformat</name> <operator>==</operator> <name>DRM_FORMAT_NV12</name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_NV12</name></expr> </then><else>: <expr><name>AV_PIX_FMT_NONE</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwframes</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hwframes</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mpp_frame_get_eos</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Received a EOS frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>eos_reached</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mpp_frame_get_discard</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Received a discard frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>mpp_frame_get_errinfo</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Received a errinfo frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_UNKNOWN</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Received a frame.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_DRM_PRIME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>mpp_frame_get_width</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>mpp_frame_get_height</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <call><name>mpp_frame_get_pts</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <call><name>mpp_frame_get_color_range</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <call><name>mpp_frame_get_color_primaries</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <call><name>mpp_frame_get_color_trc</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <call><name>mpp_frame_get_colorspace</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mode</name> <operator>=</operator> <call><name>mpp_frame_get_mode</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>MPP_FRAME_FLAG_FIELD_ORDER_MASK</name><operator>)</operator> <operator>==</operator> <name>MPP_FRAME_FLAG_DEINTERLACED</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>mode</name> <operator>&amp;</operator> <name>MPP_FRAME_FLAG_FIELD_ORDER_MASK</name><operator>)</operator> <operator>==</operator> <name>MPP_FRAME_FLAG_TOP_FIRST</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>mppformat</name> <operator>=</operator> <call><name>mpp_frame_get_fmt</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>drmformat</name> <operator>=</operator> <call><name>rkmpp_get_frameformat</name><argument_list>(<argument><expr><name>mppformat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>=</operator> <call><name>mpp_frame_get_buffer</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVDRMFrameDescriptor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_objects</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>fd</name> <operator>=</operator> <call><name>mpp_buffer_get_fd</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>objects</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <call><name>mpp_buffer_get_size</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>desc</name><operator>-&gt;</operator><name>nb_layers</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>layer</name> <operator>=</operator> <operator>&amp;</operator><name><name>desc</name><operator>-&gt;</operator><name>layers</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>drmformat</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>nb_planes</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>object_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>=</operator> <call><name>mpp_frame_get_hor_stride</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>object_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>*</operator> <call><name>mpp_frame_get_ver_stride</name><argument_list>(<argument><expr><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>pitch</name> <operator>=</operator> <name><name>layer</name><operator>-&gt;</operator><name>planes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>pitch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>framecontextref</name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>framecontext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>framecontextref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>framecontext</name> <operator>=</operator> <operator>(</operator><name>RKMPPFrameContext</name> <operator>*</operator><operator>)</operator><name><name>framecontextref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>framecontext</name><operator>-&gt;</operator><name>decoder_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>framecontext</name><operator>-&gt;</operator><name>frame</name></name> <operator>=</operator> <name>mppframe</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>desc</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>desc</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>rkmpp_release_frame</name></expr></argument>,

<argument><expr><name>framecontextref</name></expr></argument>, <argument><expr><name>AV_BUFFER_FLAG_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to retrieve the frame buffer, frame is dropped (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mpp_frame_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>decoder</name><operator>-&gt;</operator><name>eos_reached</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MPP_ERR_TIMEOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Timeout when trying to get a frame from MPP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>fail</name>:</label>

<if_stmt><if>if <condition>(<expr><name>mppframe</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mpp_frame_deinit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mppframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>framecontext</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>framecontext</name><operator>-&gt;</operator><name>decoder_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>framecontextref</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>framecontextref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>desc</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>rkmpp_receive_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecodeContext</name> <modifier>*</modifier></type><name>rk_context</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPDecoder</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><operator>(</operator><name>RKMPPDecoder</name> <operator>*</operator><operator>)</operator><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MPP_NOK</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RK_S32</name></type> <name>usedslots</name></decl>, <decl><type ref="prev"/><name>freeslots</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>decoder</name><operator>-&gt;</operator><name>eos_reached</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>control</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>, <argument><expr><name>MPP_DEC_GET_STREAM_COUNT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>usedslots</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to get decoder used slots (code = %d).\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>freeslots</name> <operator>=</operator> <name>INPUT_MAX_PACKETS</name> <operator>-</operator> <name>usedslots</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>freeslots</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_decode_get_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>AVERROR_EOF</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>rkmpp_send_packet</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to send packet to decoder (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>freeslots</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>rkmpp_retrieve_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>rkmpp_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>RKMPPDecodeContext</name> <modifier>*</modifier></type><name>rk_context</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>RKMPPDecoder</name> <modifier>*</modifier></type><name>decoder</name> <init>= <expr><operator>(</operator><name>RKMPPDecoder</name> <operator>*</operator><operator>)</operator><name><name>rk_context</name><operator>-&gt;</operator><name>decoder_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MPP_NOK</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Flush.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>decoder</name><operator>-&gt;</operator><name>mpi</name><operator>-&gt;</operator><name>reset</name></name><argument_list>(<argument><expr><name><name>decoder</name><operator>-&gt;</operator><name>ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>MPP_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>decoder</name><operator>-&gt;</operator><name>first_packet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to reset MPI (code = %d)\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecHWConfigInternal</name> <modifier>*</modifier></type><name><name>rkmpp_hw_configs</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>HW_CONFIG_INTERNAL</name><argument_list>(<argument><expr><name>DRM_PRIME</name></expr></argument>)</argument_list></call></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RKMPP_DEC_CLASS</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static const AVClass rkmpp_##NAME##_dec_class = { .class_name = "rkmpp_" #NAME "_dec", .version = LIBAVUTIL_VERSION_INT, };</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RKMPP_DEC</name><parameter_list>(<parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>ID</name></type></parameter>, <parameter><type><name>BSFS</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>RKMPP_DEC_CLASS(NAME) AVCodec ff_##NAME##_rkmpp_decoder = { .name = #NAME "_rkmpp", .long_name = NULL_IF_CONFIG_SMALL(#NAME " (rkmpp)"), .type = AVMEDIA_TYPE_VIDEO, .id = ID, .priv_data_size = sizeof(RKMPPDecodeContext), .init = rkmpp_init_decoder, .close = rkmpp_close_decoder, .receive_frame = rkmpp_receive_frame, .flush = rkmpp_flush, .priv_class = &amp;rkmpp_##NAME##_dec_class, .capabilities = AV_CODEC_CAP_DELAY | AV_CODEC_CAP_AVOID_PROBING | AV_CODEC_CAP_HARDWARE, .pix_fmts = (const enum AVPixelFormat[]) { AV_PIX_FMT_DRM_PRIME, AV_PIX_FMT_NONE}, .hw_configs = rkmpp_hw_configs, .bsfs = BSFS, .wrapper_name = "rkmpp", };</cpp:value></cpp:define>

<macro><name>RKMPP_DEC</name><argument_list>(<argument>h264</argument>, <argument>AV_CODEC_ID_H264</argument>, <argument><literal type="string">"h264_mp4toannexb"</literal></argument>)</argument_list></macro>

<macro><name>RKMPP_DEC</name><argument_list>(<argument>hevc</argument>, <argument>AV_CODEC_ID_HEVC</argument>, <argument><literal type="string">"hevc_mp4toannexb"</literal></argument>)</argument_list></macro>

<macro><name>RKMPP_DEC</name><argument_list>(<argument>vp8</argument>, <argument>AV_CODEC_ID_VP8</argument>, <argument>NULL</argument>)</argument_list></macro>

<macro><name>RKMPP_DEC</name><argument_list>(<argument>vp9</argument>, <argument>AV_CODEC_ID_VP9</argument>, <argument>NULL</argument>)</argument_list></macro>

</unit>
