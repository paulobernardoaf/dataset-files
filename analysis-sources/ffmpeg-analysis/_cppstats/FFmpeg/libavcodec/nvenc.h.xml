<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\nvenc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_d3d11va.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>void</name></type> <name>ID3D11Device</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ffnvcodec/nvEncodeAPI.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/cuda/dynlink_loader.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_REGISTERED_FRAMES</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RC_MODE_DEPRECATED</name></cpp:macro> <cpp:value>0x800000</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RCD</name><parameter_list>(<parameter><type><name>rc_mode</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((rc_mode) | RC_MODE_DEPRECATED)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENCAPI_CHECK_VERSION</name><parameter_list>(<parameter><type><name>major</name></type></parameter>, <parameter><type><name>minor</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((major) &lt; NVENCAPI_MAJOR_VERSION || ((major) == NVENCAPI_MAJOR_VERSION &amp;&amp; (minor) &lt;= NVENCAPI_MINOR_VERSION))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_HAVE_BFRAME_REF_MODE</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_HAVE_QP_MAP_MODE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_HAVE_HEVC_BFRAME_REF_MODE</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVENCAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_HAVE_MULTIPLE_REF_FRAMES</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_HAVE_CUSTREAM_PTR</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NVENC_HAVE_GETLASTERRORSTRING</name></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><struct>struct <name>NvencSurface</name>

<block>{

<decl_stmt><decl><type><name>NV_ENC_INPUT_PTR</name></type> <name>input_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reg_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_OUTPUT_PTR</name></type> <name>output_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_BUFFER_FORMAT</name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block></struct></type> <name>NvencSurface</name>;</typedef>

<typedef>typedef <type><struct>struct <name>NvencDynLoadFunctions</name>

<block>{

<decl_stmt><decl><type><name>CudaFunctions</name> <modifier>*</modifier></type><name>cuda_dl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencFunctions</name> <modifier>*</modifier></type><name>nvenc_dl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENCODE_API_FUNCTION_LIST</name></type> <name>nvenc_funcs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nvenc_device_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>NvencDynLoadFunctions</name>;</typedef>

<enum>enum <block>{

<decl><name>PRESET_DEFAULT</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>PRESET_SLOW</name></decl>,

<decl><name>PRESET_MEDIUM</name></decl>,

<decl><name>PRESET_FAST</name></decl>,

<decl><name>PRESET_HP</name></decl>,

<decl><name>PRESET_HQ</name></decl>,

<decl><name>PRESET_BD</name></decl> ,

<decl><name>PRESET_LOW_LATENCY_DEFAULT</name></decl> ,

<decl><name>PRESET_LOW_LATENCY_HQ</name></decl> ,

<decl><name>PRESET_LOW_LATENCY_HP</name></decl>,

<decl><name>PRESET_LOSSLESS_DEFAULT</name></decl>, 

<decl><name>PRESET_LOSSLESS_HP</name></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>NV_ENC_H264_PROFILE_BASELINE</name></decl>,

<decl><name>NV_ENC_H264_PROFILE_MAIN</name></decl>,

<decl><name>NV_ENC_H264_PROFILE_HIGH</name></decl>,

<decl><name>NV_ENC_H264_PROFILE_HIGH_444P</name></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>NV_ENC_HEVC_PROFILE_MAIN</name></decl>,

<decl><name>NV_ENC_HEVC_PROFILE_MAIN_10</name></decl>,

<decl><name>NV_ENC_HEVC_PROFILE_REXT</name></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>NVENC_LOWLATENCY</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>NVENC_LOSSLESS</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>NVENC_ONE_PASS</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>NVENC_TWO_PASSES</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <block>{

<decl><name>LIST_DEVICES</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>ANY_DEVICE</name></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>NvencContext</name>

<block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>avclass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencDynLoadFunctions</name></type> <name>nvenc_dload_funcs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_INITIALIZE_PARAMS</name></type> <name>init_encode_params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_CONFIG</name></type> <name>encode_config</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>cu_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUcontext</name></type> <name>cu_context_internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUstream</name></type> <name>cu_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Device</name> <modifier>*</modifier></type><name>d3d11_device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_surfaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NvencSurface</name> <modifier>*</modifier></type><name>surfaces</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>unused_surface_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>output_surface_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>output_surface_ready_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>timestamp_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>encoder_flushing</name></decl>;</decl_stmt>

<struct>struct <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ptr_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_REGISTERED_PTR</name></type> <name>regptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mapped</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NV_ENC_MAP_INPUT_RESOURCE</name></type> <name>in_map</name></decl>;</decl_stmt>

}</block> <decl><name><name>registered_frames</name><index>[<expr><name>MAX_REGISTERED_FRAMES</name></expr>]</index></name></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>nb_registered_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>data_pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name><name>initial_pts</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_packet_output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>support_dyn_bitrate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>nvencoder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tier</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>twopass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>async_depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_lookahead</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>no_scenecut</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>forced_idr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_adapt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temporal_aq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>zerolatency</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nonref_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>strict_gop</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aq_strength</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bluray_compat</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>init_qp_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>init_qp_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>init_qp_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cqp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>weighted_pred</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coder</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_ref_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a53_cc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dpb_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>NvencContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_nvenc_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_nvenc_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_nvenc_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_nvenc_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_nvenc_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_nvenc_encode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>ff_nvenc_pix_fmts</name><index>[]</index></name></decl>;</decl_stmt>

</unit>
