<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ac3enc_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audiodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3enc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eac3enc.h"</cpp:file></cpp:include>

<function><type><name>int</name> <name>AC3_NAME</name></type>(<name>allocate_sample_buffers</name>)<parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>, <argument><expr><name>AC3_WINDOW_SIZE</name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>FF_ALLOCZ_OR_GOTO</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name>AC3_FRAME_SIZE</name><operator>+</operator><name>AC3_BLOCK_SIZE</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>alloc_fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_input_samples</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SampleType</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>AC3_BLOCK_SIZE</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>]</index></name></expr></argument>,

<argument><expr><name>AC3_BLOCK_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>AC3_BLOCK_SIZE</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>samples</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><name>AC3_BLOCK_SIZE</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_mdct</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SampleType</name> <modifier>*</modifier></type><name>input_samples</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name> <operator>*</operator> <name>AC3_BLOCK_SIZE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3ENC_FLOAT</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>, <argument><expr><name>input_samples</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_window</name></name></expr></argument>, <argument><expr><name>AC3_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>apply_window_int16</name></name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>, <argument><expr><name>input_samples</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mdct_window</name></name></expr></argument>, <argument><expr><name>AC3_WINDOW_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fixed_point</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>coeff_shift</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>normalize_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdct</name><operator>.</operator><name>mdct_calcw</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct</name></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><name>ch</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>windowed_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_channel_coupling</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>CoefType</name></expr></argument>, <argument><expr><name>cpl_coords</name></expr></argument>, <argument><expr><index>[<expr><name>AC3_MAX_BLOCKS</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><name>AC3_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3ENC_FLOAT</name></expr></cpp:if>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>fixed_cpl_coords</name></expr></argument>, <argument><expr><index>[<expr><name>AC3_MAX_BLOCKS</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><name>AC3_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>int32_t</name> <argument_list>(<argument><expr><operator>*</operator><name>fixed_cpl_coords</name></expr></argument>)</argument_list></call><index>[<expr><name>AC3_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index> <operator>=</operator> <name>cpl_coords</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>blk</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CoefSumType</name></type> <name><name>energy</name><index>[<expr><name>AC3_MAX_BLOCKS</name></expr>]</index><index>[<expr><name>AC3_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_start</name></decl>, <decl><type ref="prev"/><name>num_cpl_coefs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cpl_coords</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AC3_MAX_BLOCKS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cpl_coords</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3ENC_FLOAT</name></expr></cpp:if>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fixed_cpl_coords</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AC3_MAX_BLOCKS</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cpl_coords</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>cpl_start</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_cpl_coefs</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>num_cpl_subbands</name></name> <operator>*</operator> <literal type="number">12</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cpl_start</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">256</literal></expr></argument>, <argument><expr><name>cpl_start</name> <operator>+</operator> <name>num_cpl_coefs</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>num_cpl_coefs</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CoefType</name> <modifier>*</modifier></type><name>cpl_coef</name> <init>= <expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><name>CPL_CH</name></expr>]</index><index>[<expr><name>cpl_start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cpl_coef</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_cpl_coefs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>cpl_coef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CoefType</name> <modifier>*</modifier></type><name>ch_coef</name> <init>= <expr><operator>&amp;</operator><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>cpl_start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_cpl_coefs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cpl_coef</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>ch_coef</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>clip_coefficients</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>, <argument><expr><name>cpl_coef</name></expr></argument>, <argument><expr><name>num_cpl_coefs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_end_freq</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>band_size</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cpl_band_sizes</name><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <name>CPL_CH</name></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name> <operator>||</operator> <operator>(</operator><name>ch</name> <operator>&gt;</operator> <name>CPL_CH</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>band_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CoefType</name></type> <name>v</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name><operator>+</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MAC_COEF</name><argument_list>(<argument><expr><name><name>energy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>band_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>bnd</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>cpl_coords</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <call><name>calc_cpl_coord</name><argument_list>(<argument><expr><name><name>energy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>energy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>CPL_CH</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block0</name> <init>= <expr><ternary><condition><expr><name>blk</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>block0</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block0</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>CoefSumType</name></type> <name>coord_diff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>coord_diff</name> <operator>+=</operator> <call><name>FFABS</name><argument_list>(<argument><expr><name><name>cpl_coords</name><index>[<expr><name>blk</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>-</operator>

<name><name>cpl_coords</name><index>[<expr><name>blk</name></expr> ]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>coord_diff</name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>coord_diff</name> <operator>&gt;</operator> <name>NEW_CPL_COORD_THRESHOLD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>av_uninit</name><argument_list>(<argument><expr><name>blk1</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>blk</name><operator>++</operator></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CoefSumType</name></type> <name>energy_ch</name></decl>, <decl><type ref="prev"/><name>energy_cpl</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>channel_in_cpl</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>energy_cpl</name> <operator>=</operator> <name><name>energy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>CPL_CH</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>energy_ch</name> <operator>=</operator> <name><name>energy</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>blk1</name> <operator>=</operator> <name>blk</name><operator>+</operator><literal type="number">1</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>blk1</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk1</name></expr>]</index></name><operator>.</operator><name><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk1</name></expr>]</index></name><operator>.</operator><name>cpl_in_use</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>energy_cpl</name> <operator>+=</operator> <name><name>energy</name><index>[<expr><name>blk1</name></expr>]</index><index>[<expr><name>CPL_CH</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>energy_ch</name> <operator>+=</operator> <name><name>energy</name><index>[<expr><name>blk1</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blk1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>cpl_coords</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <call><name>calc_cpl_coord</name><argument_list>(<argument><expr><name>energy_ch</name></expr></argument>, <argument><expr><name>energy_cpl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <name>blk1</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AC3ENC_FLOAT</name></expr></cpp:if>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>float_to_fixed24</name></name><argument_list>(<argument><expr><name><name>fixed_cpl_coords</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cpl_coords</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>ac3dsp</name><operator>.</operator><name>extract_exponents</name></name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>fixed_cpl_coords</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>fbw_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bnd</name></decl>, <decl><type ref="prev"/><name>min_exp</name></decl>, <decl><type ref="prev"/><name>max_exp</name></decl>, <decl><type ref="prev"/><name>master_exp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>block</name><operator>-&gt;</operator><name>new_cpl_coords</name><index>[<expr><name>ch</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>min_exp</name> <operator>=</operator> <name>max_exp</name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>exp</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>min_exp</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>min_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_exp</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><name>max_exp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>master_exp</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>max_exp</name> <operator>-</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>master_exp</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>master_exp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>min_exp</name> <operator>&lt;</operator> <name>master_exp</name> <operator>*</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>master_exp</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>-</operator>

<name>master_exp</name> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_master_exp</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>master_exp</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_cpl_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_exp</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_exp</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cpl_mant</name> <init>= <expr><operator>(</operator><name><name>fixed_cpl_coords</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">5</literal> <operator>+</operator> <name>cpl_exp</name> <operator>+</operator> <name>master_exp</name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cpl_exp</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cpl_mant</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cpl_mant</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>cpl_coord_mant</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <name>cpl_mant</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>CONFIG_EAC3_ENCODER</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_eac3_set_cpl_states</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_rematrixing_strategy</name><parameter_list>(<parameter><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_coefs</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>bnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AC3Block</name> <modifier>*</modifier></type><name>block</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>block0</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channel_mode</name></name> <operator>!=</operator> <name>AC3_CHMODE_STEREO</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>block</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><name>blk</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_rematrixing_strategy</name></name> <operator>=</operator> <operator>!</operator><name>blk</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>cpl_in_use</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name> <operator>-=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">61</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name> <operator>-=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>start_freq</name><index>[<expr><name>CPL_CH</name></expr>]</index></name> <operator>==</operator> <literal type="number">37</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>&amp;&amp;</operator> <name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name> <operator>!=</operator> <name><name>block0</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_rematrixing_strategy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_coefs</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>end_freq</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>rematrixing_enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block0</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>bnd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bnd</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>num_rematrixing_bands</name></name></expr>;</condition> <incr><expr><name>bnd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>ff_ac3_rematrix_band_tab</name><index>[<expr><name>bnd</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>nb_coefs</name></expr></argument>, <argument><expr><name><name>ff_ac3_rematrix_band_tab</name><index>[<expr><name>bnd</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CoefSumType</name></type> <name><name>sum</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>sum_square_butterfly</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>start</name></expr></argument>,

<argument><expr><name><name>block</name><operator>-&gt;</operator><name>mdct_coef</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>end</name> <operator>-</operator> <name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>rematrixing_flags</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>rematrixing_flags</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>blk</name> <operator>&amp;&amp;</operator>

<name><name>block</name><operator>-&gt;</operator><name>rematrixing_flags</name><index>[<expr><name>bnd</name></expr>]</index></name> <operator>!=</operator> <name><name>block0</name><operator>-&gt;</operator><name>rematrixing_flags</name><index>[<expr><name>bnd</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>block</name><operator>-&gt;</operator><name>new_rematrixing_strategy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>block0</name> <operator>=</operator> <name>block</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name> <name>AC3_NAME</name></type>(<name>encode_frame</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AC3EncodeContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>allow_per_frame_metadata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ac3_validate_metadata</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_alloc</name><operator>.</operator><name>sr_code</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>eac3</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_ac3_adjust_frame_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>copy_input_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>(</operator><name>SampleType</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>apply_mdct</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fixed_point</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scale_coefficients</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>clip_coefficients</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocks</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>mdct_coef</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>AC3_MAX_COEFS</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>num_blocks</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>cpl_enabled</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ac3_compute_coupling_strategy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cpl_on</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>apply_channel_coupling</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>compute_rematrixing_strategy</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fixed_point</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>scale_coefficients</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ac3_apply_rematrixing</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ac3_process_exponents</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_ac3_compute_bit_allocation</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bit allocation failed. Try increasing the bitrate.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ac3_group_exponents</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ac3_quantize_mantissas</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ac3_output_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
