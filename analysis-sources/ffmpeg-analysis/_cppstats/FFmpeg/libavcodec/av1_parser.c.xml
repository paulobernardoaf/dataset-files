<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\av1_parser.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"av1_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_av1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AV1ParseContext</name> <block>{

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>temporal_unit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>parsed_extradata</name></decl>;</decl_stmt>

}</block></struct></type> <name>AV1ParseContext</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_8bit</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_10bit</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts_12bit</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV422P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av1_parser_parse</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_size</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1ParseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temporal_unit</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamAV1Context</name> <modifier>*</modifier></type><name>av1</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>out_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>AV_PICTURE_STRUCTURE_UNKNOWN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name><operator>-&gt;</operator><name>log_ctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>parsed_extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>parsed_extradata</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_cbs_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse extradata.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_cbs_read</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse temporal unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>av1</name><operator>-&gt;</operator><name>sequence_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No sequence header available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>td</name><operator>-&gt;</operator><name>nb_units</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamUnit</name> <modifier>*</modifier></type><name>unit</name> <init>= <expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>units</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawOBU</name> <modifier>*</modifier></type><name>obu</name> <init>= <expr><name><name>unit</name><operator>-&gt;</operator><name>content</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawSequenceHeader</name> <modifier>*</modifier></type><name>seq</name> <init>= <expr><name><name>av1</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawColorConfig</name> <modifier>*</modifier></type><name>color</name> <init>= <expr><operator>&amp;</operator><name><name>seq</name><operator>-&gt;</operator><name>color_config</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AV1RawFrameHeader</name> <modifier>*</modifier></type><name>frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_type</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame</name><operator>.</operator><name>header</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>unit</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME_HEADER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frame</name> <operator>=</operator> <operator>&amp;</operator><name><name>obu</name><operator>-&gt;</operator><name>obu</name><operator>.</operator><name>frame_header</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>spatial_id</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>show_existing_frame</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AV1ReferenceFrameState</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>av1</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name><name>frame</name><operator>-&gt;</operator><name>frame_to_show_map_idx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ref</name><operator>-&gt;</operator><name>valid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid reference frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>frame_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>frame_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_type</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>frame</name><operator>-&gt;</operator><name>show_frame</name></name></expr>)</condition> <block>{<block_content>

<continue>continue;</continue>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>av1</name><operator>-&gt;</operator><name>frame_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>av1</name><operator>-&gt;</operator><name>frame_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_type</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>frame_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name>frame_type</name> <operator>==</operator> <name>AV1_FRAME_KEY</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>seq_profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>seq</name><operator>-&gt;</operator><name>seq_level_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>frame_type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV1_FRAME_KEY</name></expr>:</case>

<case>case <expr><name>AV1_FRAME_INTRA_ONLY</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_FRAME_INTER</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV1_FRAME_SWITCH</name></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_SP</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>AV_PICTURE_STRUCTURE_FRAME</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>av1</name><operator>-&gt;</operator><name>bit_depth</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <ternary><condition><expr><name><name>color</name><operator>-&gt;</operator><name>mono_chrome</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_GRAY8</name></expr>

</then><else>: <expr><name><name>pix_fmts_8bit</name> <index>[<expr><name><name>color</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>]</index><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <ternary><condition><expr><name><name>color</name><operator>-&gt;</operator><name>mono_chrome</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_GRAY10</name></expr>

</then><else>: <expr><name><name>pix_fmts_10bit</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>]</index><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <ternary><condition><expr><name><name>color</name><operator>-&gt;</operator><name>mono_chrome</name></name></expr> ?</condition><then> <expr><name>AV_PIX_FMT_GRAY12</name></expr>

</then><else>: <expr><name><name>pix_fmts_12bit</name><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>subsampling_x</name></name></expr>]</index><index>[<expr><name><name>color</name><operator>-&gt;</operator><name>subsampling_y</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <operator>(</operator>enum <name>AVColorSpace</name><operator>)</operator> <name><name>color</name><operator>-&gt;</operator><name>matrix_coefficients</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <operator>(</operator>enum <name>AVColorPrimaries</name><operator>)</operator> <name><name>color</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <operator>(</operator>enum <name>AVColorTransferCharacteristic</name><operator>)</operator> <name><name>color</name><operator>-&gt;</operator><name>transfer_characteristics</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>color</name><operator>-&gt;</operator><name>color_range</name></name></expr> ?</condition><then> <expr><name>AVCOL_RANGE_JPEG</name></expr> </then><else>: <expr><name>AVCOL_RANGE_MPEG</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name> <operator>=</operator> <macro><name>av_inv_q</name><argument_list>(<argument>av_mul_q(avctx-&gt;framerate, (AVRational){avctx-&gt;ticks_per_frame, <literal type="number">1</literal>})</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name><operator>-&gt;</operator><name>log_ctx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>CodedBitstreamUnitType</name></type> <name><name>decompose_unit_types</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV1_OBU_TEMPORAL_DELIMITER</name></expr>,

<expr><name>AV1_OBU_SEQUENCE_HEADER</name></expr>,

<expr><name>AV1_OBU_FRAME_HEADER</name></expr>,

<expr><name>AV1_OBU_TILE_GROUP</name></expr>,

<expr><name>AV1_OBU_FRAME</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>av1_parser_init</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1ParseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_AV1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name><operator>-&gt;</operator><name>decompose_unit_types</name></name> <operator>=</operator> <operator>(</operator><name>CodedBitstreamUnitType</name> <operator>*</operator><operator>)</operator><name>decompose_unit_types</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name><operator>-&gt;</operator><name>nb_decompose_unit_types</name></name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>decompose_unit_types</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>av1_parser_close</name><parameter_list>(<parameter><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1ParseContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temporal_unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>av1_parser_split</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AV1OBU</name></type> <name>obu</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>buf</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ptr</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>ff_av1_extract_obu</name><argument_list>(<argument><expr><operator>&amp;</operator><name>obu</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>obu</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME_HEADER</name> <operator>||</operator>

<name><name>obu</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AV1_OBU_FRAME</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ptr</name> <operator>-</operator> <name>buf</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodecParser</name></type> <name>ff_av1_parser</name> <init>= <expr><block>{

<expr><operator>.</operator><name>codec_ids</name> <operator>=</operator> <block>{ <expr><name>AV_CODEC_ID_AV1</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AV1ParseContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>parser_init</name> <operator>=</operator> <name>av1_parser_init</name></expr>,

<expr><operator>.</operator><name>parser_close</name> <operator>=</operator> <name>av1_parser_close</name></expr>,

<expr><operator>.</operator><name>parser_parse</name> <operator>=</operator> <name>av1_parser_parse</name></expr>,

<expr><operator>.</operator><name>split</name> <operator>=</operator> <name>av1_parser_split</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
