<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp9prob.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>adapt_prob</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ct0</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>ct1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_factor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ct</name> <init>= <expr><name>ct0</name> <operator>+</operator> <name>ct1</name></expr></init></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ct</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>update_factor</name> <operator>=</operator> <call><name>FASTDIV</name><argument_list>(<argument><expr><name>update_factor</name> <operator>*</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>ct</name></expr></argument>, <argument><expr><name>max_count</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>max_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator> <name>ct0</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>ct</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>ct</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>p2</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>p1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>p2</name> <operator>-</operator> <name>p1</name><operator>)</operator> <operator>*</operator> <name>update_factor</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_vp9_adapt_probs</name><parameter_list>(<parameter><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ProbContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>framectxid</name></name></expr>]</index></name><operator>.</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uf</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_keyframe</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">112</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>framectxid</name></name></expr>]</index></name><operator>.</operator><name><name>coef</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>eob</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>coef</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>l</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>m</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>e</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>uf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>uf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>, <argument><expr><name>uf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>skip</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>skip</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tx32p</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx32p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tx32p</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tx16p</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx16p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tx16p</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tx8p</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx8p</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>tx8p</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>skip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>skip</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>skip</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>intra</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>intra</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>intra</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>==</operator> <name>PRED_SWITCHABLE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>!=</operator> <name>PRED_SINGLEREF</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>comp_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>comp_ref</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>comp_ref</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>!=</operator> <name>PRED_COMPREF</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>single_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>single_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>partition</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>partition</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>==</operator> <name>TX_SWITCHABLE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c16</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>tx16p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>c32</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>tx32p</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tx8p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>tx8p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>tx8p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tx16p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c16</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tx16p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c16</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c16</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tx32p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tx32p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>tx32p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>==</operator> <name>FILTER_SWITCHABLE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>mv_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>mv_joint</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_joint</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name></decl>, <argument_list>(<argument><expr><operator>*</operator><name>c2</name></expr></argument>)</argument_list>[2], <decl><type ref="prev"/><name>sum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sign</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sign</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>sign</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>classes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>classes</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>

<name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class0</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>class0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>class0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c2</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c2</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>class0_fp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>class0_fp</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>pp</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class0_hp</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>class0_hp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>class0_hp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hp</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>hp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>hp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>y_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>y_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>DC_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>TM_VP8_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>TM_VP8_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>VERT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>VERT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>c</name><index>[<expr><name>HOR_PRED</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>VERT_RIGHT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>s2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>HOR_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>HOR_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>VERT_RIGHT_PRED</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>VERT_LEFT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>VERT_LEFT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>HOR_DOWN_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>HOR_UP_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>uv_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>uv_mode</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>sum</name></decl>, <decl><type ref="prev"/><name>s2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>DC_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>TM_VP8_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>TM_VP8_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>VERT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>VERT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>=</operator> <name><name>c</name><index>[<expr><name>HOR_PRED</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>]</index></name> <operator>+</operator> <name><name>c</name><index>[<expr><name>VERT_RIGHT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>s2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>s2</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>HOR_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>HOR_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>s2</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>DIAG_DOWN_RIGHT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>VERT_RIGHT_PRED</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>DIAG_DOWN_LEFT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name><name>c</name><index>[<expr><name>VERT_LEFT_PRED</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>VERT_LEFT_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name>sum</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>adapt_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>HOR_DOWN_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><index>[<expr><name>HOR_UP_PRED</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
