<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp9.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VP9_SYNCCODE</name></cpp:macro> <cpp:value>0x498342</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_free_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp9_alloc_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entries</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>atomic_int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>atomic_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_report_tile_progress</name><parameter_list>(<parameter><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>atomic_fetch_add_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>memory_order_release</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_await_tile_progress</name><parameter_list>(<parameter><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_acquire</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>atomic_load_explicit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><name>memory_order_relaxed</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>n</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>progress_mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_free_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp9_alloc_entries</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><literal type="number">0</literal></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_frame_unref</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP9Frame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>segmentation_map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp9_frame_alloc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP9Frame</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>sz</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sz</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sz</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><name>sz</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP9mvrefPair</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool_size</name></name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>extradata</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>extradata</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>segmentation_map</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>extradata</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>mv</name></name> <operator>=</operator> <operator>(</operator><name>VP9mvrefPair</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>extradata</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>sz</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp9_frame_ref</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>VP9Frame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>VP9Frame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>src</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>segmentation_map</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>segmentation_map</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mv</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>mv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>uses_2pass</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>uses_2pass</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_size</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWACCEL_MAX</name></cpp:macro> <cpp:value>(CONFIG_VP9_DXVA2_HWACCEL + CONFIG_VP9_D3D11VA_HWACCEL * 2 + CONFIG_VP9_NVDEC_HWACCEL + CONFIG_VP9_VAAPI_HWACCEL + CONFIG_VP9_VDPAU_HWACCEL)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[<expr><name>HWACCEL_MAX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fmtp</name> <init>= <expr><name>pix_fmts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>cols</name></decl>, <decl><type ref="prev"/><name>rows</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lflvl_len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>w</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>h</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>gf_fmt</name></name> <operator>&amp;&amp;</operator> <name>w</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>&amp;&amp;</operator> <name>h</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>h</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_VDPAU_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_DXVA2_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_D3D11VA_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_NVDEC_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_VAAPI_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P12</name></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_NVDEC_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_VAAPI_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>fmtp</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fmtp</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_format</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gf_fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cols</name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rows</name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>cols</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;&amp;</operator> <name>rows</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>last_fmt</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_fmt</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">63</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lflvl_len</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assign</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>var = (type) p; p += s-&gt;sb_cols * (n) * sizeof(*var)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <operator>(</operator><literal type="number">128</literal> <operator>+</operator> <literal type="number">192</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>+</operator>

<name>lflvl_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>lflvl</name></name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_y_nnz_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_mode_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name></name></expr></argument>, <argument><expr><call><name>VP56mv</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_uv_nnz_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_uv_nnz_ctx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_partition_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_skip_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_txfm_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_segpred_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_filter_ctx</name></name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assign</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lflvl</name></name></expr></argument>, <argument><expr><name>VP9Filter</name> <operator>*</operator></expr></argument>, <argument><expr><name>lflvl_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>assign</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>td</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_bpp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vdsp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bpp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_block_buffers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_blocks</name></decl>, <decl><type ref="prev"/><name>chroma_eobs</name></decl>, <decl><type ref="prev"/><name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>b_base</name></name> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>block_base</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>block_alloc_using_2pass</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>uses_2pass</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>b_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>block_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_blocks</name> <operator>=</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_eobs</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>uses_2pass</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sbs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>b_base</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VP9Block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>block_base</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>chroma_blocks</name><operator>)</operator> <operator>*</operator> <name>bytesperpixel</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>chroma_eobs</name><operator>)</operator> <operator>*</operator> <name>sbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>b_base</name></name> <operator>||</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>block_base</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>uvblock_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>block_base</name></name> <operator>+</operator> <name>sbs</name> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>uvblock_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>uvblock_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>sbs</name> <operator>*</operator> <name>chroma_blocks</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>eob_base</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>uvblock_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>sbs</name> <operator>*</operator> <name>chroma_blocks</name> <operator>*</operator> <name>bytesperpixel</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>uveob_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>eob_base</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <name>sbs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>uveob_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>uveob_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>chroma_eobs</name> <operator>*</operator> <name>sbs</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VP9Block</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>chroma_blocks</name><operator>)</operator> <operator>*</operator> <name>bytesperpixel</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>chroma_eobs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name> <operator>+</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>chroma_blocks</name> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eob_base</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>chroma_blocks</name> <operator>*</operator> <name>bytesperpixel</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uveob_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eob_base</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uveob_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uveob_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>chroma_eobs</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block_alloc_using_2pass</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>uses_2pass</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>get_sbits_inv</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>v</name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>inv_recenter_nonneg</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>m</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>m</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>v</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>m</name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>m</name> <operator>+</operator> <operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_prob</name><parameter_list>(<parameter><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>inv_map_table</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">33</literal></expr>, <expr><literal type="number">46</literal></expr>, <expr><literal type="number">59</literal></expr>, <expr><literal type="number">72</literal></expr>, <expr><literal type="number">85</literal></expr>, <expr><literal type="number">98</literal></expr>, <expr><literal type="number">111</literal></expr>, <expr><literal type="number">124</literal></expr>, <expr><literal type="number">137</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">163</literal></expr>, <expr><literal type="number">176</literal></expr>,

<expr><literal type="number">189</literal></expr>, <expr><literal type="number">202</literal></expr>, <expr><literal type="number">215</literal></expr>, <expr><literal type="number">228</literal></expr>, <expr><literal type="number">241</literal></expr>, <expr><literal type="number">254</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">23</literal></expr>, <expr><literal type="number">24</literal></expr>,

<expr><literal type="number">25</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">28</literal></expr>, <expr><literal type="number">29</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">32</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">35</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">37</literal></expr>, <expr><literal type="number">38</literal></expr>, <expr><literal type="number">39</literal></expr>,

<expr><literal type="number">40</literal></expr>, <expr><literal type="number">41</literal></expr>, <expr><literal type="number">42</literal></expr>, <expr><literal type="number">43</literal></expr>, <expr><literal type="number">44</literal></expr>, <expr><literal type="number">45</literal></expr>, <expr><literal type="number">47</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">49</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">51</literal></expr>, <expr><literal type="number">52</literal></expr>, <expr><literal type="number">53</literal></expr>, <expr><literal type="number">54</literal></expr>,

<expr><literal type="number">55</literal></expr>, <expr><literal type="number">56</literal></expr>, <expr><literal type="number">57</literal></expr>, <expr><literal type="number">58</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">61</literal></expr>, <expr><literal type="number">62</literal></expr>, <expr><literal type="number">63</literal></expr>, <expr><literal type="number">64</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">66</literal></expr>, <expr><literal type="number">67</literal></expr>, <expr><literal type="number">68</literal></expr>, <expr><literal type="number">69</literal></expr>,

<expr><literal type="number">70</literal></expr>, <expr><literal type="number">71</literal></expr>, <expr><literal type="number">73</literal></expr>, <expr><literal type="number">74</literal></expr>, <expr><literal type="number">75</literal></expr>, <expr><literal type="number">76</literal></expr>, <expr><literal type="number">77</literal></expr>, <expr><literal type="number">78</literal></expr>, <expr><literal type="number">79</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">81</literal></expr>, <expr><literal type="number">82</literal></expr>, <expr><literal type="number">83</literal></expr>, <expr><literal type="number">84</literal></expr>,

<expr><literal type="number">86</literal></expr>, <expr><literal type="number">87</literal></expr>, <expr><literal type="number">88</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">90</literal></expr>, <expr><literal type="number">91</literal></expr>, <expr><literal type="number">92</literal></expr>, <expr><literal type="number">93</literal></expr>, <expr><literal type="number">94</literal></expr>, <expr><literal type="number">95</literal></expr>, <expr><literal type="number">96</literal></expr>, <expr><literal type="number">97</literal></expr>, <expr><literal type="number">99</literal></expr>, <expr><literal type="number">100</literal></expr>,

<expr><literal type="number">101</literal></expr>, <expr><literal type="number">102</literal></expr>, <expr><literal type="number">103</literal></expr>, <expr><literal type="number">104</literal></expr>, <expr><literal type="number">105</literal></expr>, <expr><literal type="number">106</literal></expr>, <expr><literal type="number">107</literal></expr>, <expr><literal type="number">108</literal></expr>, <expr><literal type="number">109</literal></expr>, <expr><literal type="number">110</literal></expr>, <expr><literal type="number">112</literal></expr>, <expr><literal type="number">113</literal></expr>, <expr><literal type="number">114</literal></expr>, <expr><literal type="number">115</literal></expr>,

<expr><literal type="number">116</literal></expr>, <expr><literal type="number">117</literal></expr>, <expr><literal type="number">118</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">121</literal></expr>, <expr><literal type="number">122</literal></expr>, <expr><literal type="number">123</literal></expr>, <expr><literal type="number">125</literal></expr>, <expr><literal type="number">126</literal></expr>, <expr><literal type="number">127</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">129</literal></expr>, <expr><literal type="number">130</literal></expr>,

<expr><literal type="number">131</literal></expr>, <expr><literal type="number">132</literal></expr>, <expr><literal type="number">133</literal></expr>, <expr><literal type="number">134</literal></expr>, <expr><literal type="number">135</literal></expr>, <expr><literal type="number">136</literal></expr>, <expr><literal type="number">138</literal></expr>, <expr><literal type="number">139</literal></expr>, <expr><literal type="number">140</literal></expr>, <expr><literal type="number">141</literal></expr>, <expr><literal type="number">142</literal></expr>, <expr><literal type="number">143</literal></expr>, <expr><literal type="number">144</literal></expr>, <expr><literal type="number">145</literal></expr>,

<expr><literal type="number">146</literal></expr>, <expr><literal type="number">147</literal></expr>, <expr><literal type="number">148</literal></expr>, <expr><literal type="number">149</literal></expr>, <expr><literal type="number">151</literal></expr>, <expr><literal type="number">152</literal></expr>, <expr><literal type="number">153</literal></expr>, <expr><literal type="number">154</literal></expr>, <expr><literal type="number">155</literal></expr>, <expr><literal type="number">156</literal></expr>, <expr><literal type="number">157</literal></expr>, <expr><literal type="number">158</literal></expr>, <expr><literal type="number">159</literal></expr>, <expr><literal type="number">160</literal></expr>,

<expr><literal type="number">161</literal></expr>, <expr><literal type="number">162</literal></expr>, <expr><literal type="number">164</literal></expr>, <expr><literal type="number">165</literal></expr>, <expr><literal type="number">166</literal></expr>, <expr><literal type="number">167</literal></expr>, <expr><literal type="number">168</literal></expr>, <expr><literal type="number">169</literal></expr>, <expr><literal type="number">170</literal></expr>, <expr><literal type="number">171</literal></expr>, <expr><literal type="number">172</literal></expr>, <expr><literal type="number">173</literal></expr>, <expr><literal type="number">174</literal></expr>, <expr><literal type="number">175</literal></expr>,

<expr><literal type="number">177</literal></expr>, <expr><literal type="number">178</literal></expr>, <expr><literal type="number">179</literal></expr>, <expr><literal type="number">180</literal></expr>, <expr><literal type="number">181</literal></expr>, <expr><literal type="number">182</literal></expr>, <expr><literal type="number">183</literal></expr>, <expr><literal type="number">184</literal></expr>, <expr><literal type="number">185</literal></expr>, <expr><literal type="number">186</literal></expr>, <expr><literal type="number">187</literal></expr>, <expr><literal type="number">188</literal></expr>, <expr><literal type="number">190</literal></expr>, <expr><literal type="number">191</literal></expr>,

<expr><literal type="number">192</literal></expr>, <expr><literal type="number">193</literal></expr>, <expr><literal type="number">194</literal></expr>, <expr><literal type="number">195</literal></expr>, <expr><literal type="number">196</literal></expr>, <expr><literal type="number">197</literal></expr>, <expr><literal type="number">198</literal></expr>, <expr><literal type="number">199</literal></expr>, <expr><literal type="number">200</literal></expr>, <expr><literal type="number">201</literal></expr>, <expr><literal type="number">203</literal></expr>, <expr><literal type="number">204</literal></expr>, <expr><literal type="number">205</literal></expr>, <expr><literal type="number">206</literal></expr>,

<expr><literal type="number">207</literal></expr>, <expr><literal type="number">208</literal></expr>, <expr><literal type="number">209</literal></expr>, <expr><literal type="number">210</literal></expr>, <expr><literal type="number">211</literal></expr>, <expr><literal type="number">212</literal></expr>, <expr><literal type="number">213</literal></expr>, <expr><literal type="number">214</literal></expr>, <expr><literal type="number">216</literal></expr>, <expr><literal type="number">217</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">220</literal></expr>, <expr><literal type="number">221</literal></expr>,

<expr><literal type="number">222</literal></expr>, <expr><literal type="number">223</literal></expr>, <expr><literal type="number">224</literal></expr>, <expr><literal type="number">225</literal></expr>, <expr><literal type="number">226</literal></expr>, <expr><literal type="number">227</literal></expr>, <expr><literal type="number">229</literal></expr>, <expr><literal type="number">230</literal></expr>, <expr><literal type="number">231</literal></expr>, <expr><literal type="number">232</literal></expr>, <expr><literal type="number">233</literal></expr>, <expr><literal type="number">234</literal></expr>, <expr><literal type="number">235</literal></expr>, <expr><literal type="number">236</literal></expr>,

<expr><literal type="number">237</literal></expr>, <expr><literal type="number">238</literal></expr>, <expr><literal type="number">239</literal></expr>, <expr><literal type="number">240</literal></expr>, <expr><literal type="number">242</literal></expr>, <expr><literal type="number">243</literal></expr>, <expr><literal type="number">244</literal></expr>, <expr><literal type="number">245</literal></expr>, <expr><literal type="number">246</literal></expr>, <expr><literal type="number">247</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">249</literal></expr>, <expr><literal type="number">250</literal></expr>, <expr><literal type="number">251</literal></expr>,

<expr><literal type="number">252</literal></expr>, <expr><literal type="number">253</literal></expr>, <expr><literal type="number">253</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&gt;=</operator> <literal type="number">65</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>d</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">65</literal> <operator>+</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>d</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>d</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>inv_map_table</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><name>p</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>+</operator> <call><name>inv_recenter_nonneg</name><argument_list>(<argument><expr><name><name>inv_map_table</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr> </then><else>:

<expr><literal type="number">255</literal> <operator>-</operator> <call><name>inv_recenter_nonneg</name><argument_list>(<argument><expr><name><name>inv_map_table</name><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">255</literal> <operator>-</operator> <name>p</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_colorspace_details</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVColorSpace</name></name></type> <name><name>colorspaces</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AVCOL_SPC_UNSPECIFIED</name></expr>, <expr><name>AVCOL_SPC_BT470BG</name></expr>, <expr><name>AVCOL_SPC_BT709</name></expr>, <expr><name>AVCOL_SPC_SMPTE170M</name></expr>,

<expr><name>AVCOL_SPC_SMPTE240M</name></expr>, <expr><name>AVCOL_SPC_BT2020_NCL</name></expr>, <expr><name>AVCOL_SPC_RESERVED</name></expr>, <expr><name>AVCOL_SPC_RGB</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal> <operator>+</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp_index</name></name> <operator>=</operator> <name>bits</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>+</operator> <name>bits</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name> <operator>=</operator> <operator>(</operator><literal type="number">7</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>colorspaces</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmt_rgb</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_GBRP</name></expr>, <expr><name>AV_PIX_FMT_GBRP10</name></expr>, <expr><name>AV_PIX_FMT_GBRP12</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_JPEG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>pix_fmt_rgb</name><index>[<expr><name>bits</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Reserved bit set in RGB\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RGB not supported in profile %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmt_for_ss</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr> ]</index><index>[<expr><literal type="number">2</literal></expr> ]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><block>{ <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV440P</name></expr>, <expr><name>AV_PIX_FMT_YUV420P</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>AV_PIX_FMT_YUV444P10</name></expr>, <expr><name>AV_PIX_FMT_YUV422P10</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV440P10</name></expr>, <expr><name>AV_PIX_FMT_YUV420P10</name></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><block>{ <expr><name>AV_PIX_FMT_YUV444P12</name></expr>, <expr><name>AV_PIX_FMT_YUV422P12</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV440P12</name></expr>, <expr><name>AV_PIX_FMT_YUV420P12</name></expr> }</block></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>AVCOL_RANGE_JPEG</name></expr> </then><else>: <expr><name>AVCOL_RANGE_MPEG</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>pix_fmt_for_ss</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>]</index><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"YUV 4:2:0 not supported in profile %d\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Profile %d color details reserved bit set\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>pix_fmt_for_ss</name><index>[<expr><name>bits</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>size2</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>sharp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_invisible</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize bitstream reader\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0x2</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid frame marker\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>|=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>+=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Profile %d is not yet supported\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>profile</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ref</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_keyframe</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>=</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>last_invisible</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>invisible</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>invisible</name></name> <operator>=</operator> <operator>!</operator><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>use_last_frame_mvs</name></name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>last_invisible</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VP9_SYNCCODE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sync code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_colorspace_details</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshrefmask</name></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>invisible</name></name></expr> ?</condition><then> <expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>resetctx</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>VP9_SYNCCODE</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sync code\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_colorspace_details</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp_index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name>AVCOL_SPC_BT470BG</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <name>AVCOL_RANGE_MPEG</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshrefmask</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshrefmask</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Not all references are available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>use_last_frame_mvs</name></name> <operator>&amp;=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name>w</name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name>h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>FILTER_SWITCHABLE</name></expr> </then><else>:

<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>allowcompinter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>allowcompinter</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshctx</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>parallelmode</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>framectxid</name></name> <operator>=</operator> <name>c</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>framectxid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sharp</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>sharpness</name></name> <operator>!=</operator> <name>sharp</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>limit</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sharp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>limit</name> <operator>&gt;&gt;=</operator> <operator>(</operator><name>sharp</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>-</operator> <name>sharp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>limit</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>limit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>lim_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>limit</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_lut</name><operator>.</operator><name>mblim_lut</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <name>limit</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>sharpness</name></name> <operator>=</operator> <name>sharp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>updated</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_sbits_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_sbits_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>yac_qi</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>ydc_qdelta</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_sbits_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>uvdc_qdelta</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_sbits_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>uvac_qdelta</name></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>get_sbits_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>yac_qi</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>ydc_qdelta</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>uvdc_qdelta</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>uvac_qdelta</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>properties</name></name> <operator>|=</operator> <name>FF_CODEC_PROPERTY_LOSSLESS</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>prob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>temporal</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>pred_prob</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>

<expr><call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">255</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_enabled</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_val</name> <operator>=</operator> <call><name>get_sbits_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_enabled</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_val</name> <operator>=</operator> <call><name>get_sbits_inv</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_enabled</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ref_val</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>skip_enabled</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qyac</name></decl>, <decl><type ref="prev"/><name>qydc</name></decl>, <decl><type ref="prev"/><name>quvac</name></decl>, <decl><type ref="prev"/><name>quvdc</name></decl>, <decl><type ref="prev"/><name>lflvl</name></decl>, <decl><type ref="prev"/><name>sh</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_enabled</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>qyac</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_val</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>qyac</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>yac_qi</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>q_val</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>qyac</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>yac_qi</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>qydc</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>qyac</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>ydc_qdelta</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quvdc</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>qyac</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>uvdc_qdelta</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quvac</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>qyac</name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>uvac_qdelta</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>qyac</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>qyac</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_vp9_dc_qlookup</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bpp_index</name></name></expr>]</index><index>[<expr><name>qydc</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_vp9_ac_qlookup</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bpp_index</name></name></expr>]</index><index>[<expr><name>qyac</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_vp9_dc_qlookup</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bpp_index</name></name></expr>]</index><index>[<expr><name>quvdc</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>qmul</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_vp9_ac_qlookup</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bpp_index</name></name></expr>]</index><index>[<expr><name>quvac</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sh</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_enabled</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>lflvl</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_val</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>lflvl</name> <operator>=</operator> <call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lf_val</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>lflvl</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>lflvl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>lflvl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>lflvl</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>lflvl</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>lflvl</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>lflvl</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>av_clip_uintp2</name><argument_list>(<argument><expr><name>lflvl</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>ref</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name><operator>.</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>sh</name><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lflvl</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>lflvl</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>update_size</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialize decoder for %dx%d @ %d\n"</literal></expr></argument>,

<argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">64</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name><operator>)</operator></expr>;</condition>

<incr><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>max</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>&gt;&gt;</operator> <name>max</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>max</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>max</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<break>break;</break></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_rows</name></name> <operator>=</operator> <call><name>decode012</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_rows</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_rows</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name> <operator>!=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n_range_coders</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP56RangeCoder</name> <modifier>*</modifier></type><name>rc</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>td</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp9_free_entries</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr> ?</condition><then>

<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp9_alloc_entries</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n_range_coders</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n_range_coders</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VP9TileData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>

<name>n_range_coders</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP56RangeCoder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>td</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <operator>(</operator><name>VP56RangeCoder</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>c_b</name> <operator>=</operator> <name>rc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc</name> <operator>+=</operator> <name>n_range_coders</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refidx</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>f</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>refw</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>, <decl><type ref="prev"/><name>refh</name> <init>= <expr><name><name>ref</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ref</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Ref pixfmt (%s) did not match current frame (%s)"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>ref</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>refw</name> <operator>==</operator> <name>w</name> <operator>&amp;&amp;</operator> <name>refh</name> <operator>==</operator> <name>h</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>refw</name> <operator>||</operator> <name>h</name> <operator>*</operator> <literal type="number">2</literal> <operator>&lt;</operator> <name>refh</name> <operator>||</operator> <name>w</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>*</operator> <name>refw</name> <operator>||</operator> <name>h</name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>*</operator> <name>refh</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid ref frame dimensions %dx%d for frame size %dx%d\n"</literal></expr></argument>,

<argument><expr><name>refw</name></expr></argument>, <argument><expr><name>refh</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>refw</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>refh</name> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>/</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mvstep</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mvstep</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mvscale</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>resetctx</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>ff_vp9_default_probs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coef</name></expr></argument>, <argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>coef</name></expr></argument>, <argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>coef</name></expr></argument>, <argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>coef</name></expr></argument>, <argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>resetctx</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name>ff_vp9_default_probs</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>coef</name></expr></argument>, <argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ff_vp9_default_coef_probs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>compressed_header_size</name></name> <operator>=</operator> <name>size2</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>uncompressed_header_size</name></name> <operator>=</operator> <operator>(</operator><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>data2</name> <operator>=</operator> <call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size2</name> <operator>&gt;</operator> <name>size</name> <operator>-</operator> <operator>(</operator><name>data2</name> <operator>-</operator> <name>data</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid compressed header size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>data2</name></expr></argument>, <argument><expr><name>size2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Marker bit was set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>coef</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>coef</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>eob</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>counts</name><operator>.</operator><name>eob</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>counts</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>counts</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>=</operator> <name>TX_4X4</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>=</operator> <call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>+=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>==</operator> <name>TX_SWITCHABLE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx8p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx8p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx16p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx16p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx32p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx32p</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>ref</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>coef</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ref</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>r</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_vp9_model_pareto8</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>coef</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>ref</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&gt;</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_vp9_model_pareto8</name><index>[<expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>skip</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>skip</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>==</operator> <name>FILTER_SWITCHABLE</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>filter</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>intra</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>intra</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>allowcompinter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>+=</operator> <call><name>vp8_rac_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>==</operator> <name>PRED_SWITCHABLE</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>=</operator> <name>PRED_SINGLEREF</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>!=</operator> <name>PRED_COMPREF</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>single_ref</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>single_ref</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>single_ref</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>single_ref</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>!=</operator> <name>PRED_SINGLEREF</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>comp_ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>comp_ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>y_mode</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>y_mode</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>partition</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator>

<call><name>update_prob</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>partition</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_joint</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sign</name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>classes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class0</name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>class0_fp</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>fp</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>highprecisionmvs</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>class0_hp</name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hp</name> <operator>=</operator>

<operator>(</operator><call><name>vp8_rac_get_uint</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>data2</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>size2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_sb</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>yoff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>BlockLevel</name></name></type> <name>bl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_partition_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>bl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_partition_ctx</name><index>[<expr><name>row</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>bl</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr> ?</condition><then> <expr><name><name>ff_vp9_default_kf_partition_probs</name><index>[<expr><name>bl</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>partition</name><index>[<expr><name>bl</name></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>BlockPartition</name></name></type> <name>bp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>hbs</name> <init>= <expr><literal type="number">4</literal> <operator>&gt;&gt;</operator> <name>bl</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>y_stride</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>uv_stride</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bl</name> <operator>==</operator> <name>BL_8X8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_partition_tree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>col</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>bp</name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_partition_tree</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bp</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PARTITION_NONE</name></expr>:</case>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PARTITION_H</name></expr>:</case>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>y_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>uv_stride</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PARTITION_V</name></expr>:</case>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PARTITION_SPLIT</name></expr>:</case>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>,

<argument><expr><name>yoff</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><name>uvoff</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>y_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>uv_stride</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>,

<argument><expr><name>yoff</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><name>uvoff</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>PARTITION_SPLIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>,

<argument><expr><name>yoff</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><name>uvoff</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>PARTITION_H</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>row</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>PARTITION_SPLIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>y_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>uv_stride</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>PARTITION_V</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name></expr></argument>, <argument><expr><name>bp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>bp</name> <operator>=</operator> <name>PARTITION_SPLIT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>partition</name><index>[<expr><name>bl</name></expr>]</index><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>bp</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_sb_mem</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>, <parameter><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>yoff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>BlockLevel</name></name></type> <name>bl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>hbs</name> <init>= <expr><literal type="number">4</literal> <operator>&gt;&gt;</operator> <name>bl</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>y_stride</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>uv_stride</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bl</name> <operator>==</operator> <name>BL_8X8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>b</name><operator>-&gt;</operator><name>bl</name></name> <operator>==</operator> <name>BL_8X8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bl</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>b</name><operator>-&gt;</operator><name>bl</name></name> <operator>==</operator> <name>bl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bl</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bp</name></name> <operator>==</operator> <name>PARTITION_H</name> <operator>&amp;&amp;</operator> <name>row</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>y_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>uv_stride</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bl</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bp</name></name> <operator>==</operator> <name>PARTITION_V</name> <operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_decode_block</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bl</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>decode_sb_mem</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>col</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_sb_mem</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><name>uvoff</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>y_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>uv_stride</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb_mem</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb_mem</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>,

<argument><expr><name>yoff</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>,

<argument><expr><name>uvoff</name> <operator>+</operator> <operator>(</operator><literal type="number">8</literal> <operator>*</operator> <name>hbs</name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb_mem</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>row</name> <operator>+</operator> <name>hbs</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>y_stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>+=</operator> <name>hbs</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>uv_stride</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb_mem</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name> <operator>+</operator> <name>hbs</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>, <argument><expr><name>bl</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_tile_offset</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>start</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>end</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sb_start</name> <init>= <expr><operator>(</operator> <name>idx</name> <operator>*</operator> <name>n</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_n</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sb_end</name> <init>= <expr><operator>(</operator><operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>n</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>log2_n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>start</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sb_start</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>sb_end</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>free_buffers</name><parameter_list>(<parameter><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp9_decode_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>frame_extradata_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>free_buffers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vp9_free_entries</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_tiles</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>tile_row</name></decl>, <decl><type ref="prev"/><name>tile_col</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_row_start</name></decl>, <decl><type ref="prev"/><name>tile_row_end</name></decl>, <decl><type ref="prev"/><name>tile_col_start</name></decl>, <decl><type ref="prev"/><name>tile_col_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>yoff</name></decl>, <decl><type ref="prev"/><name>uvoff</name></decl>, <decl><type ref="prev"/><name>ls_y</name></decl>, <decl><type ref="prev"/><name>ls_uv</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_y</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_uv</name> <operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>bytesperpixel</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <name>uvoff</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tile_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_rows</name></name></expr>;</condition> <incr><expr><name>tile_row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>set_tile_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tile_row_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tile_row_end</name></expr></argument>,

<argument><expr><name>tile_row</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_rows</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tile_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr>;</condition> <incr><expr><name>tile_col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tile_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tile_col</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name>tile_row</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tile_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tile_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tile_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>c_b</name><index>[<expr><name>tile_col</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>tile_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>c_b</name><index>[<expr><name>tile_col</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>tile_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>tile_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name>tile_row_start</name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>tile_row_end</name></expr>;</condition>

<incr><expr><name>row</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>yoff</name> <operator>+=</operator> <name>ls_y</name> <operator>*</operator> <literal type="number">64</literal></expr><operator>,</operator> <expr><name>uvoff</name> <operator>+=</operator> <name>ls_uv</name> <operator>*</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl_ptr</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>lflvl</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>yoff2</name> <init>= <expr><name>yoff</name></expr></init></decl>, <decl><type ref="prev"/><name>uvoff2</name> <init>= <expr><name>uvoff</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tile_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr>;</condition> <incr><expr><name>tile_col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>set_tile_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tile_col_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tile_col_end</name></expr></argument>,

<argument><expr><name>tile_col</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>tile_col_start</name></name> <operator>=</operator> <name>tile_col_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_partition_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_skip_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name></name></expr></argument>, <argument><expr><name>DC_PRED</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name></name></expr></argument>, <argument><expr><name>NEARESTMV</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_y_nnz_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_uv_nnz_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_segpred_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>c_b</name><index>[<expr><name>tile_col</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name>tile_col_start</name></expr>;</init>

<condition><expr><name>col</name> <operator>&lt;</operator> <name>tile_col_end</name></expr>;</condition>

<incr><expr><name>col</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>yoff2</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator>

<expr><name>uvoff2</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr><operator>,</operator> <expr><name>lflvl_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>lflvl_ptr</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>lflvl_ptr</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_sb_mem</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl_ptr</name></expr></argument>,

<argument><expr><name>yoff2</name></expr></argument>, <argument><expr><name>uvoff2</name></expr></argument>, <argument><expr><name>BL_64X64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>vpX_rac_is_end</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl_ptr</name></expr></argument>,

<argument><expr><name>yoff2</name></expr></argument>, <argument><expr><name>uvoff2</name></expr></argument>, <argument><expr><name>BL_64X64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>yoff</name> <operator>+</operator> <literal type="number">63</literal> <operator>*</operator> <name>ls_y</name></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ls_uv</name></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ls_uv</name></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yoff2</name> <operator>=</operator> <name>yoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff2</name> <operator>=</operator> <name>uvoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lflvl_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lflvl</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition>

<incr><expr><name>col</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>yoff2</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator>

<expr><name>uvoff2</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr><operator>,</operator> <expr><name>lflvl_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_loopfilter_sb</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>lflvl_ptr</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>,

<argument><expr><name>yoff2</name></expr></argument>, <argument><expr><name>uvoff2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>, <argument><expr><name>row</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>int</name></type> <name>decode_tiles_mt</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tdata</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>jobnr</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>, <decl><type ref="prev"/><name>ls_y</name></decl>, <decl><type ref="prev"/><name>ls_uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>, <decl><type ref="prev"/><name>row</name></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>tile_row</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>tile_cols_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_row_start</name></decl>, <decl><type ref="prev"/><name>tile_row_end</name></decl>, <decl><type ref="prev"/><name>tile_col_start</name></decl>, <decl><type ref="prev"/><name>tile_col_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl_ptr_base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_y</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_uv</name> <operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_tile_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tile_col_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tile_col_end</name></expr></argument>,

<argument><expr><name>jobnr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_cols</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>tile_col_start</name></name> <operator>=</operator> <name>tile_col_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>=</operator> <operator>(</operator><literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name>tile_col_start</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <operator>(</operator><literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name><operator>)</operator><operator>*</operator><operator>(</operator><name>tile_col_start</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lflvl_ptr_base</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lflvl</name></name><operator>+</operator><operator>(</operator><name>tile_col_start</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tile_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_rows</name></name></expr>;</condition> <incr><expr><name>tile_row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>set_tile_offset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tile_row_start</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tile_row_end</name></expr></argument>,

<argument><expr><name>tile_row</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>log2_tile_rows</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>c_b</name><index>[<expr><name>tile_row</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>row</name> <operator>=</operator> <name>tile_row_start</name></expr>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>tile_row_end</name></expr>;</condition>

<incr><expr><name>row</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>yoff</name> <operator>+=</operator> <name>ls_y</name> <operator>*</operator> <literal type="number">64</literal></expr><operator>,</operator> <expr><name>uvoff</name> <operator>+=</operator> <name>ls_uv</name> <operator>*</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>yoff2</name> <init>= <expr><name>yoff</name></expr></init></decl>, <decl><type ref="prev"/><name>uvoff2</name> <init>= <expr><name>uvoff</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl_ptr</name> <init>= <expr><name>lflvl_ptr_base</name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name><operator>*</operator><operator>(</operator><name>row</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_partition_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_skip_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name></name></expr></argument>, <argument><expr><name>DC_PRED</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name></name></expr></argument>, <argument><expr><name>NEARESTMV</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_y_nnz_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_uv_nnz_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left_segpred_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <name>tile_col_start</name></expr>;</init>

<condition><expr><name>col</name> <operator>&lt;</operator> <name>tile_col_end</name></expr>;</condition>

<incr><expr><name>col</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>yoff2</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator>

<expr><name>uvoff2</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr><operator>,</operator> <expr><name>lflvl_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>lflvl_ptr</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>lflvl_ptr</name><operator>-&gt;</operator><name>mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_sb</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name>lflvl_ptr</name></expr></argument>,

<argument><expr><name>yoff2</name></expr></argument>, <argument><expr><name>uvoff2</name></expr></argument>, <argument><expr><name>BL_64X64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tile_cols_len</name> <operator>=</operator> <name>tile_col_end</name> <operator>-</operator> <name>tile_col_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>row</name> <operator>+</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>tile_col_start</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name><operator>)</operator></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>yoff</name> <operator>+</operator> <literal type="number">63</literal> <operator>*</operator> <name>ls_y</name></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name>tile_cols_len</name> <operator>*</operator> <name>bytesperpixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>tile_col_start</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ls_uv</name></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name>tile_cols_len</name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>intra_pred_data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>tile_col_start</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>ls_uv</name></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name>tile_cols_len</name> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>vp9_report_tile_progress</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>row</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name>

<name>int</name></type> <name>loopfilter_proc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl>, <decl><type ref="prev"/><name>yoff</name></decl>, <decl><type ref="prev"/><name>ls_y</name></decl>, <decl><type ref="prev"/><name>ls_uv</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>, <decl><type ref="prev"/><name>col</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_y</name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ls_uv</name> <operator>=</operator><name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_await_tile_progress</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>yoff</name> <operator>=</operator> <operator>(</operator><name>ls_y</name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator><operator>*</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvoff</name> <operator>=</operator> <operator>(</operator><name>ls_uv</name> <operator>*</operator> <literal type="number">64</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator><operator>*</operator><name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lflvl_ptr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>lflvl</name></name><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name><operator>*</operator><name>i</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr>;</condition>

<incr><expr><name>col</name> <operator>+=</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>yoff</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr><operator>,</operator>

<expr><name>uvoff</name> <operator>+=</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr><operator>,</operator> <expr><name>lflvl_ptr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_loopfilter_sb</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>lflvl_ptr</name></expr></argument>, <argument><expr><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>,

<argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp9_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>retain_segmap_ref</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name><operator>.</operator><name>segmentation_map</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>decode_frame_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ref</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Requested reference %d not available\n"</literal></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>ref</name></expr>]</index></name><operator>.</operator><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator><name>frame</name><operator>)</operator><operator>-&gt;</operator><name>pts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_PKT_PTS</name></expr></cpp:if>

<expr_stmt><expr><call><name>FF_DISABLE_DEPRECATION_WARNINGS</name>

<argument_list>(<argument><expr><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator><name>frame</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pkt_pts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ENABLE_DEPRECATION_WARNINGS</name>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<argument_list>(<argument><expr><operator>(</operator><name>AVFrame</name> <operator>*</operator><operator>)</operator><name>frame</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pkt_dts</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>retain_segmap_ref</name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp9_frame_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp9_frame_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp9_frame_alloc</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>AV_PICTURE_TYPE_I</name></expr> </then><else>: <expr><name>AV_PICTURE_TYPE_P</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_MVPAIR</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshrefmask</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>start_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>decode_slice</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name><operator>-&gt;</operator><name>end_frame</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<goto>goto <name>finish</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_partition_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_skip_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_mode_ctx</name></name></expr></argument>, <argument><expr><name>DC_PRED</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_mode_ctx</name></name></expr></argument>, <argument><expr><name>NEARESTMV</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_y_nnz_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_uv_nnz_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_uv_nnz_ctx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above_segpred_ctx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>uses_2pass</name> <operator>=</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_FRAME</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshctx</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>parallelmode</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>update_block_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Failed to allocate block buffers\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshctx</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>parallelmode</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>framectxid</name></name></expr>]</index></name><operator>.</operator><name><name>coef</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>coef</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>==</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>framectxid</name></name></expr>]</index></name><operator>.</operator><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>atomic_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>entries</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<do>do <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>active_tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>b_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>block_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uvblock_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eob</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>eob_base</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uveob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uveob_base</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uveob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>uveob_base</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tile_row</name></decl>, <decl><type ref="prev"/><name>tile_col</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pass</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>tile_row</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_row</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_rows</name></name></expr>;</condition> <incr><expr><name>tile_row</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>tile_col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tile_col</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr>;</condition> <incr><expr><name>tile_col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>tile_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tile_col</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name>tile_row</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tile_size</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>tile_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tile_size</name> <operator>&gt;</operator> <name>size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vp56_init_range_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>tile_col</name></expr>]</index></name><operator>.</operator><name><name>c_b</name><index>[<expr><name>tile_row</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>tile_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>tile_col</name></expr>]</index></name><operator>.</operator><name><name>c_b</name><index>[<expr><name>tile_row</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <name>tile_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name>tile_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_slice_thread_execute_with_mainfunc</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decode_tiles_mt</name></expr></argument>, <argument><expr><name>loopfilter_proc</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_tiles</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>==</operator> <name>FF_THREAD_SLICE</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>tiling</name><operator>.</operator><name>tile_cols</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>counts</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>unsigned</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>counts</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>counts</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>refreshctx</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>parallelmode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_adapt_probs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_finish_setup</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name><operator>++</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>;</do>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>finish</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>invisible</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name><name>pkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vp9_decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_decode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate frame buffer %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vp9_decode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to allocate frame buffer %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp9_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>allocate_progress</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_bpp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>sharpness</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>init_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_THREADS</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vp9_decode_init_thread_copy</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>init_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vp9_decode_update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ssrc</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vp9_frame_unref</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>vp9_frame_ref</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_release_buffer</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ssrc</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_ref_frame</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssrc</name><operator>-&gt;</operator><name>next_refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>invisible</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>invisible</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>absolute_vals</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>gf_fmt</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>gf_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>w</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>w</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bpp_index</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>bpp_index</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>ssrc</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssrc</name><operator>-&gt;</operator><name>prob_ctx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lf_delta</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ssrc</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_vp9_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vp9"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Google VP9"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VP9</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VP9Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>vp9_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>vp9_decode_free</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>vp9_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_SLICE_THREAD_HAS_MF</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>vp9_decode_flush</name></expr>,

<expr><operator>.</operator><name>init_thread_copy</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>vp9_decode_init_thread_copy</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>update_thread_context</name> <operator>=</operator> <call><name>ONLY_IF_THREADS_ENABLED</name><argument_list>(<argument><expr><name>vp9_decode_update_thread_context</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_vp9_profiles</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bsfs</name> <operator>=</operator> <literal type="string">"vp9_superframe_split"</literal></expr>,

<expr><operator>.</operator><name>hw_configs</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVCodecHWConfigInternal</name><operator>*</operator><index>[]</index><operator>)</operator> <block>{

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_DXVA2_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_DXVA2</name><argument_list>(<argument><expr><name>vp9</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_D3D11VA_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_D3D11VA</name><argument_list>(<argument><expr><name>vp9</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_D3D11VA2_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_D3D11VA2</name><argument_list>(<argument><expr><name>vp9</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_NVDEC_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_NVDEC</name><argument_list>(<argument><expr><name>vp9</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_VAAPI_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_VAAPI</name><argument_list>(<argument><expr><name>vp9</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_VP9_VDPAU_HWACCEL</name></expr></cpp:if>

<expr><call><name>HWACCEL_VDPAU</name><argument_list>(<argument><expr><name>vp9</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>NULL</name></expr>

}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
