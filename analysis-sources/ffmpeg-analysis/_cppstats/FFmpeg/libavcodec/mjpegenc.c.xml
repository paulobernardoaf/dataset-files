<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mjpegenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpegtables.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc_common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpeg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mjpegenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_huffman</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>num_mbs</name></decl>, <decl><type ref="prev"/><name>num_blocks</name></decl>, <decl><type ref="prev"/><name>num_codes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocks_per_mb</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">15</literal><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>CHROMA_420</name></expr>:</case> <expr_stmt><expr><name>blocks_per_mb</name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CHROMA_422</name></expr>:</case> <expr_stmt><expr><name>blocks_per_mb</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>CHROMA_444</name></expr>:</case> <expr_stmt><expr><name>blocks_per_mb</name> <operator>=</operator> <literal type="number">12</literal></expr>;</expr_stmt> <break>break;</break>

<default>default:</default> <expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>num_mbs</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_blocks</name> <operator>=</operator> <name>num_mbs</name> <operator>*</operator> <name>blocks_per_mb</name></expr>;</expr_stmt>

<expr_stmt><expr><name>num_codes</name> <operator>=</operator> <name>num_blocks</name> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>num_codes</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MJpegHuffmanCode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>m</name><operator>-&gt;</operator><name>huff_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_mjpeg_encode_init</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>m</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>slice_context_count</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;</operator> <literal type="number">65500</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <literal type="number">65500</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"JPEG does not support resolutions above 65500x65500\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MJpegContext</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>m</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>min_qcoeff</name></name><operator>=</operator><operator>-</operator><literal type="number">1023</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_qcoeff</name></name><operator>=</operator> <literal type="number">1023</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_luminance</name></name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_bits_dc_luminance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_chrominance</name></name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_bits_dc_chrominance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_luminance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_luminance</name></name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_bits_ac_luminance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_ac_luminance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_build_huffman_codes</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_chrominance</name></name></expr></argument>,

<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_chrominance</name></name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_bits_ac_chrominance</name></expr></argument>,

<argument><expr><name>avpriv_mjpeg_val_ac_chrominance</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_uni_ac_vlc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_luminance</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>uni_ac_vlc_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_uni_ac_vlc</name><argument_list>(<argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_chrominance</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>uni_chroma_ac_vlc_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_length</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>intra_ac_vlc_last_length</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>uni_ac_vlc_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_length</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>intra_chroma_ac_vlc_last_length</name></name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>uni_chroma_ac_vlc_len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>m</name><operator>-&gt;</operator><name>huff_ncode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name></name> <operator>=</operator> <name>m</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>huffman</name></name> <operator>==</operator> <name>HUFFMAN_TABLE_OPTIMAL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>alloc_huffman</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_mjpeg_encode_close</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name><operator>-&gt;</operator><name>huff_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_mjpeg_encode_code</name><parameter_list>(<parameter><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>table_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MJpegHuffmanCode</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>huff_ncode</name></name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>table_id</name></name> <operator>=</operator> <name>table_id</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ff_mjpeg_encode_coef</name><parameter_list>(<parameter><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>table_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>run</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mant</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>run</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_code</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>table_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mant</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mant</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>run</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><call><name>av_log2_16bit</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>huff_buffer</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>huff_ncode</name></name></expr>]</index></name><operator>.</operator><name>mant</name> <operator>=</operator> <name>mant</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_code</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>table_id</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>record_block</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>table_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>component</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>, <decl><type ref="prev"/><name>last_index</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>component</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>n</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>table_id</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>dc</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mjpeg_encode_coef</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>table_id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_index</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>table_id</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>last_index</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>run</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_code</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>table_id</name></expr></argument>, <argument><expr><literal type="number">0xf0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>ff_mjpeg_encode_coef</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>table_id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>run</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_index</name> <operator>&lt;</operator> <literal type="number">63</literal> <operator>||</operator> <name>run</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_code</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>table_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_block</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mant</name></decl>, <decl><type ref="prev"/><name>nbits</name></decl>, <decl><type ref="prev"/><name>code</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>component</name></decl>, <decl><type ref="prev"/><name>dc</name></decl>, <decl><type ref="prev"/><name>run</name></decl>, <decl><type ref="prev"/><name>last_index</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MJpegContext</name> <modifier>*</modifier></type><name>m</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>mjpeg_ctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>huff_size_ac</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>huff_code_ac</name></decl>;</decl_stmt>

<expr_stmt><expr><name>component</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>n</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dc</name> <operator>=</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> 

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>dc</name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_dc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_luminance</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_luminance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>huff_size_ac</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_luminance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>huff_code_ac</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_luminance</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_mjpeg_encode_dc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_size_dc_chrominance</name></name></expr></argument>, <argument><expr><name><name>m</name><operator>-&gt;</operator><name>huff_code_dc_chrominance</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>huff_size_ac</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_size_ac_chrominance</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>huff_code_ac</name> <operator>=</operator> <name><name>m</name><operator>-&gt;</operator><name>huff_code_ac_chrominance</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_dc</name><index>[<expr><name>component</name></expr>]</index></name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>last_index</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>block_last_index</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;=</operator><name>last_index</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>intra_scantable</name><operator>.</operator><name>permutated</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>block</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>run</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>run</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>huff_size_ac</name><index>[<expr><literal type="number">0xf0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>huff_code_ac</name><index>[<expr><literal type="number">0xf0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>mant</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>-</operator><name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mant</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nbits</name><operator>=</operator> <call><name>av_log2_16bit</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <operator>(</operator><name>run</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>nbits</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>huff_size_ac</name><index>[<expr><name>code</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>huff_code_ac</name><index>[<expr><name>code</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_sbits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>nbits</name></expr></argument>, <argument><expr><name>mant</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>last_index</name> <operator>&lt;</operator> <literal type="number">63</literal> <operator>||</operator> <name>run</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>huff_size_ac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>huff_code_ac</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_mjpeg_encode_mb</name><parameter_list>(<parameter><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>huffman</name></name> <operator>==</operator> <name>HUFFMAN_TABLE_OPTIMAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_444</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>+</operator><literal type="number">8</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_420</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>record_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_444</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">16</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mb_x</name></name><operator>+</operator><literal type="number">8</literal> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">5</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>==</operator> <name>CHROMA_420</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_block</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>i_tex_bits</name></name> <operator>+=</operator> <call><name>get_bits_diff</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AMV_ENCODER</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>V_MAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amv_encode_picture</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>pic_arg</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_h_shift</name></decl>, <decl><type ref="prev"/><name>chroma_v_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma_h_shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>chroma_v_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_UNOFFICIAL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Heights which are not a multiple of 16 might fail with some decoders, "</literal>

<literal type="string">"use vstrict=-1 / -strict -1 to use %d anyway.\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"If you have a device that plays AMV videos, please test if videos "</literal>

<literal type="string">"with such heights work with it and report your findings to ffmpeg-devel@ffmpeg.org\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXPERIMENTAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>pic_arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>vsample</name> <init>= <expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>&gt;&gt;</operator> <name>chroma_v_shift</name></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>vsample</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <name>V_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_mpv_encode_picture</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>got_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(MpegEncContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VE</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>FF_MPV_COMMON_OPTS</name>

<block>{ <expr><literal type="string">"pred"</literal></expr>, <expr><literal type="string">"Prediction method"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pred</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"left"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"plane"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">2</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"median"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">3</literal></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"pred"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"huffman"</literal></expr>, <expr><literal type="string">"Huffman table strategy"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>huffman</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HUFFMAN_TABLE_OPTIMAL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NB_HUFFMAN_TABLE_OPTION</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"huffman"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"default"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HUFFMAN_TABLE_DEFAULT</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"huffman"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"optimal"</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>HUFFMAN_TABLE_OPTIMAL</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>VE</name></expr>, <expr><literal type="string">"huffman"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_MJPEG_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>mjpeg_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"mjpeg encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_mjpeg_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mjpeg"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MJPEG (Motion JPEG)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MJPEG</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mpv_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>ff_mpv_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mpv_encode_end</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_INTRA_ONLY</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>, <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>mjpeg_class</name></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><name>ff_mjpeg_profiles</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_AMV_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>amv_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"amv encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_amv_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"amv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AMV Video"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AMV</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>MpegEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ff_mpv_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>amv_encode_picture</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ff_mpv_encode_end</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_YUVJ420P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>amv_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
