<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\nvdec_hevc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nvdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcdec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevc_data.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dpb_add</name><parameter_list>(<parameter><decl><type><name>CUVIDHEVCPICPARAMS</name> <modifier>*</modifier></type><name>pp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name> <init>= <expr><operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name><name>src</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>NVDECFrame</name> <modifier>*</modifier></type><name>cf</name> <init>= <expr><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>RefPicIdx</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>cf</name></expr> ?</condition><then> <expr><name><name>cf</name><operator>-&gt;</operator><name>idx</name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>PicOrderCntVal</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pp</name><operator>-&gt;</operator><name>IsLongTerm</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>src</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>HEVC_FRAME_FLAG_LONG_REF</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_scaling_lists</name><parameter_list>(<parameter><decl><type><name>CUVIDHEVCPICPARAMS</name> <modifier>*</modifier></type><name>ppc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ScalingList</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>scaling_list_data_present_flag</name></name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr> </then><else>: <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>scaling_list</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>pos</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan4x4_y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>ff_hevc_diag_scan4x4_x</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>ScalingList4x4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>pos</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>ff_hevc_diag_scan8x8_y</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name><name>ff_hevc_diag_scan8x8_x</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>ScalingList8x8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>ScalingList16x16</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>ScalingList32x32</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index><index>[<expr><name>pos</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>ScalingListDCCoeff16x16</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>ScalingListDCCoeff32x32</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>sl_dc</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_hevc_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCPPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVDECContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDPICPARAMS</name> <modifier>*</modifier></type><name>pp</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CUVIDHEVCPICPARAMS</name> <modifier>*</modifier></type><name>ppc</name> <init>= <expr><operator>&amp;</operator><name><name>pp</name><operator>-&gt;</operator><name>CodecSpecific</name><operator>.</operator><name>hevc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FrameDecodeData</name> <modifier>*</modifier></type><name>fdd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>NVDECFrame</name> <modifier>*</modifier></type><name>cf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>dpb_size</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_nvdec_start_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>fdd</name> <operator>=</operator> <operator>(</operator><name>FrameDecodeData</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>private_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <operator>(</operator><name>NVDECFrame</name><operator>*</operator><operator>)</operator><name><name>fdd</name><operator>-&gt;</operator><name>hwaccel_priv</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <operator>(</operator><name>CUVIDPICPARAMS</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>PicWidthInMbs</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>/</operator> <literal type="number">16</literal></expr>,

<expr><operator>.</operator><name>FrameHeightInMbs</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>/</operator> <literal type="number">16</literal></expr>,

<expr><operator>.</operator><name>CurrPicIdx</name> <operator>=</operator> <name><name>cf</name><operator>-&gt;</operator><name>idx</name></name></expr>,

<expr><operator>.</operator><name>ref_pic_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>intra_pic_flag</name> <operator>=</operator> <call><name>IS_IRAP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name><name>CodecSpecific</name><operator>.</operator><name>hevc</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>pic_width_in_luma_samples</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>pic_height_in_luma_samples</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr>,

<expr><operator>.</operator><name>log2_min_luma_coding_block_size_minus3</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal></expr>,

<expr><operator>.</operator><name>log2_diff_max_min_luma_coding_block_size</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_diff_max_min_coding_block_size</name></name></expr>,

<expr><operator>.</operator><name>log2_min_transform_block_size_minus2</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>log2_diff_max_min_transform_block_size</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_trafo_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr>,

<expr><operator>.</operator><name>pcm_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>log2_min_pcm_luma_coding_block_size_minus3</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>?</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name> <operator>-</operator> <literal type="number">3</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>log2_diff_max_min_pcm_luma_coding_block_size</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_max_pcm_cb_size</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>log2_min_pcm_cb_size</name></name></expr>,

<expr><operator>.</operator><name>pcm_sample_bit_depth_luma_minus1</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>?</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>pcm_sample_bit_depth_chroma_minus1</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm_enabled_flag</name></name> <operator>?</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>bit_depth_chroma</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>:</operator> <literal type="number">0</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVDECAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">8</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>log2_max_transform_skip_block_size_minus2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_max_transform_skip_block_size</name></name> <operator>-</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>log2_sao_offset_scale_luma</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_luma</name></name></expr>,

<expr><operator>.</operator><name>log2_sao_offset_scale_chroma</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_sao_offset_scale_chroma</name></name></expr>,

<expr><operator>.</operator><name>high_precision_offsets_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>high_precision_offsets_enabled_flag</name></name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>pcm_loop_filter_disabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>pcm</name><operator>.</operator><name>loop_filter_disable_flag</name></name></expr>,

<expr><operator>.</operator><name>strong_intra_smoothing_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_strong_intra_smoothing_enable_flag</name></name></expr>,

<expr><operator>.</operator><name>max_transform_hierarchy_depth_intra</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_intra</name></name></expr>,

<expr><operator>.</operator><name>max_transform_hierarchy_depth_inter</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>max_transform_hierarchy_depth_inter</name></name></expr>,

<expr><operator>.</operator><name>amp_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>amp_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>separate_colour_plane_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>,

<expr><operator>.</operator><name>log2_max_pic_order_cnt_lsb_minus4</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name> <operator>-</operator> <literal type="number">4</literal></expr>,

<expr><operator>.</operator><name>num_short_term_ref_pic_sets</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>nb_st_rps</name></name></expr>,

<expr><operator>.</operator><name>long_term_ref_pics_present_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>long_term_ref_pics_present_flag</name></name></expr>,

<expr><operator>.</operator><name>num_long_term_ref_pics_sps</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_long_term_ref_pics_sps</name></name></expr>,

<expr><operator>.</operator><name>sps_temporal_mvp_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_temporal_mvp_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>sample_adaptive_offset_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sao_enabled</name></name></expr>,

<expr><operator>.</operator><name>scaling_list_enable_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>scaling_list_enable_flag</name></name></expr>,

<expr><operator>.</operator><name>IrapPicFlag</name> <operator>=</operator> <call><name>IS_IRAP</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>IdrPicFlag</name> <operator>=</operator> <call><name>IS_IDR</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bit_depth_luma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<expr><operator>.</operator><name>bit_depth_chroma_minus8</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth</name></name> <operator>-</operator> <literal type="number">8</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVDECAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>sps_range_extension_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>sps_range_extension_flag</name></name></expr>,

<expr><operator>.</operator><name>transform_skip_rotation_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_skip_rotation_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>transform_skip_context_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>transform_skip_context_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>implicit_rdpcm_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>implicit_rdpcm_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>explicit_rdpcm_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>explicit_rdpcm_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>extended_precision_processing_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>extended_precision_processing_flag</name></name></expr>,

<expr><operator>.</operator><name>intra_smoothing_disabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>intra_smoothing_disabled_flag</name></name></expr>,

<expr><operator>.</operator><name>persistent_rice_adaptation_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>persistent_rice_adaptation_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>cabac_bypass_alignment_enabled_flag</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>cabac_bypass_alignment_enabled_flag</name></name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>dependent_slice_segments_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>dependent_slice_segments_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>slice_segment_header_extension_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>slice_header_extension_present_flag</name></name></expr>,

<expr><operator>.</operator><name>sign_data_hiding_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>sign_data_hiding_flag</name></name></expr>,

<expr><operator>.</operator><name>cu_qp_delta_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cu_qp_delta_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>diff_cu_qp_delta_depth</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_qp_delta_depth</name></name></expr>,

<expr><operator>.</operator><name>init_qp_minus26</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_init_qp_minus26</name></name></expr>,

<expr><operator>.</operator><name>pps_cb_qp_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>pps_cr_qp_offset</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset</name></name></expr>,

<expr><operator>.</operator><name>constrained_intra_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name></expr>,

<expr><operator>.</operator><name>weighted_pred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name></expr>,

<expr><operator>.</operator><name>weighted_bipred_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_flag</name></name></expr>,

<expr><operator>.</operator><name>transform_skip_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_skip_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>transquant_bypass_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transquant_bypass_enable_flag</name></name></expr>,

<expr><operator>.</operator><name>entropy_coding_sync_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_sync_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>log2_parallel_merge_level_minus2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>log2_parallel_merge_level</name></name> <operator>-</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>num_extra_slice_header_bits</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_extra_slice_header_bits</name></name></expr>,

<expr><operator>.</operator><name>loop_filter_across_tiles_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>loop_filter_across_tiles_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>loop_filter_across_slices_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>seq_loop_filter_across_slices_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>output_flag_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>output_flag_present_flag</name></name></expr>,

<expr><operator>.</operator><name>num_ref_idx_l0_default_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>num_ref_idx_l1_default_active_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>lists_modification_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>lists_modification_present_flag</name></name></expr>,

<expr><operator>.</operator><name>cabac_init_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac_init_present_flag</name></name></expr>,

<expr><operator>.</operator><name>pps_slice_chroma_qp_offsets_present_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pic_slice_level_chroma_qp_offsets_present_flag</name></name></expr>,

<expr><operator>.</operator><name>deblocking_filter_override_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_override_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>pps_deblocking_filter_disabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>disable_dbf</name></name></expr>,

<expr><operator>.</operator><name>pps_beta_offset_div2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>beta_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>pps_tc_offset_div2</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tc_offset</name></name> <operator>/</operator> <literal type="number">2</literal></expr>,

<expr><operator>.</operator><name>tiles_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>tiles_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>uniform_spacing_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>uniform_spacing_flag</name></name></expr>,

<expr><operator>.</operator><name>num_tile_columns_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>num_tile_rows_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>-</operator> <literal type="number">1</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVDECAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>pps_range_extension_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>pps_range_extensions_flag</name></name></expr>,

<expr><operator>.</operator><name>cross_component_prediction_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cross_component_prediction_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>chroma_qp_offset_list_enabled_flag</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_enabled_flag</name></name></expr>,

<expr><operator>.</operator><name>diff_cu_chroma_qp_offset_depth</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>diff_cu_chroma_qp_offset_depth</name></name></expr>,

<expr><operator>.</operator><name>chroma_qp_offset_list_len_minus1</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name>NumBitsForShortTermRPSInSlice</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_rps</name></name> <operator>?</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_ref_pic_set_size</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>NumDeltaPocsOfRefRpsIdx</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_rps</name></name> <operator>?</operator> <name><name>s</name><operator>-&gt;</operator><name>sh</name><operator>.</operator><name>short_term_rps</name><operator>-&gt;</operator><name>rps_idx_num_delta_pocs</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>NumPocTotalCurr</name> <operator>=</operator> <call><name>ff_hevc_frame_nb_refs</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>NumPocStCurrBefore</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>,

<expr><operator>.</operator><name>NumPocStCurrAfter</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>,

<expr><operator>.</operator><name>NumPocLtCurr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>,

<expr><operator>.</operator><name>CurrPicOrderCntVal</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ref</name><operator>-&gt;</operator><name>poc</name></name></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>column_width_minus1</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>row_height_minus1</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many tiles\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_columns</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>column_width_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>column_width</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pps</name><operator>-&gt;</operator><name>num_tile_rows</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>row_height_minus1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>row_height</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>NVDECAPI_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">9</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>cb_qp_offset_list</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>cr_qp_offset_list</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many chroma_qp_offsets\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>pps</name><operator>-&gt;</operator><name>chroma_qp_offset_list_len_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cb_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>cr_qp_offset_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name>nb_refs</name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicSetLtCurr</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name>nb_refs</name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicSetStCurrBefore</name></name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name>nb_refs</name> <operator>&gt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicSetStCurrAfter</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many reference frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dpb_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>DPB</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCFrame</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ref</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <operator>(</operator><name>HEVC_FRAME_FLAG_SHORT_REF</name> <operator>|</operator> <name>HEVC_FRAME_FLAG_LONG_REF</name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dpb_size</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many reference frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>dpb_add</name><argument_list>(<argument><expr><name>ppc</name></expr></argument>, <argument><expr><name>dpb_size</name><operator>++</operator></expr></argument>, <argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>dpb_size</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicIdx</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicIdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dpb_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ppc</name><operator>-&gt;</operator><name>PicOrderCntVal</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_BEF</name></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicSetStCurrBefore</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dpb_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ppc</name><operator>-&gt;</operator><name>PicOrderCntVal</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>ST_CURR_AFT</name></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicSetStCurrAfter</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name>nb_refs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dpb_size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ppc</name><operator>-&gt;</operator><name>PicOrderCntVal</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>rps</name><index>[<expr><name>LT_CURR</name></expr>]</index></name><operator>.</operator><name><name>list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ppc</name><operator>-&gt;</operator><name>RefPicSetLtCurr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fill_scaling_lists</name><argument_list>(<argument><expr><name>ppc</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_hevc_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>NVDECContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>bitstream_allocated</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name> <operator>+</operator> <name>size</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets_allocated</name></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB24</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_offsets</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>]</index></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bitstream_len</name></name> <operator>+=</operator> <name>size</name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_hevc_frame_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>HEVCSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_nvdec_frame_params</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>hw_frames_ctx</name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>temporal_layer</name><index>[<expr><name><name>sps</name><operator>-&gt;</operator><name>max_sub_layers</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>max_dec_pic_buffering</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>nvdec_hevc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>NVDECContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>internal</name><operator>-&gt;</operator><name>hwaccel_priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>supports_444</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>ff_nvdec_decode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_hevc_nvdec_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"hevc_nvdec"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_HEVC</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <name>nvdec_hevc_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <name>ff_nvdec_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <name>nvdec_hevc_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <name>nvdec_hevc_frame_params</name></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>nvdec_hevc_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <name>ff_nvdec_decode_uninit</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>NVDECContext</name></expr></argument>)</argument_list></sizeof></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
