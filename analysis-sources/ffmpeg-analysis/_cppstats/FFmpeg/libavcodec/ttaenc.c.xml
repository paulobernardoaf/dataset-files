<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ttaenc.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_WRITER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttadata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ttaencdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TTAEncContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVCRC</name> <modifier>*</modifier></type><name>crc_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TTAChannel</name> <modifier>*</modifier></type><name>ch_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TTAEncDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

}</block></struct></type> <name>TTAEncContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tta_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TTAEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>crc_table</name></name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_32_IEEE_LE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"encoding as 24 bits-per-sample\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">256</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <literal type="number">245</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ttaencdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>get_sample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>format</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_U8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sample</name></expr>]</index></name> <operator>-</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>format</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>sample</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>ptr</name><index>[<expr><name>sample</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tta_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TTAEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>out_bytes</name></decl>, <decl><type ref="prev"/><name>cur_chan</name></decl>, <decl><type ref="prev"/><name>res</name></decl>, <decl><type ref="prev"/><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pkt_size</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <literal type="number">2LL</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr></init></decl>;</decl_stmt>

<label><name>pkt_alloc</name>:</label>

<expr_stmt><expr><name>cur_chan</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>res</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>samples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>pkt_size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>predictor</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tta_filter_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>filter</name></expr></argument>, <argument><expr><name><name>ff_tta_filter_configs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_tta_rice_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rice</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>TTAChannel</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name><index>[<expr><name>cur_chan</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TTAFilter</name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>filter</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TTARice</name> <modifier>*</modifier></type><name>rice</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>rice</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>unary</name></decl>, <decl><type ref="prev"/><name>outval</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>value</name></decl>, <decl><type ref="prev"/><name>temp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>get_sample</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>samples</name><operator>++</operator></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cur_chan</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>=</operator> <name>res</name> <operator>=</operator> <call><name>get_sample</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>value</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>value</name> <operator>-=</operator> <name>res</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRED</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>k</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(int32_t)((((uint64_t)(x) &lt;&lt; (k)) - (x)) &gt;&gt; (k))</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>value</name> <operator>-=</operator> <call><name>PRED</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal></expr>:</case> <expr_stmt><expr><name>value</name> <operator>-=</operator> <call><name>PRED</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>predictor</name></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>filter_process</name></name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>qm</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>dx</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>dl</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>filter</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>,

<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>shift</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>round</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>outval</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>value</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></then><else>: <expr><operator>-</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rice</name><operator>-&gt;</operator><name>k0</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>+=</operator> <name>outval</name> <operator>-</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>&lt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>sum0</name></name> <operator>&gt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k0</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>outval</name> <operator>&gt;=</operator> <name><name>ff_tta_shift_1</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>outval</name> <operator>-=</operator> <name><name>ff_tta_shift_1</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>rice</name><operator>-&gt;</operator><name>k1</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>+=</operator> <name>outval</name> <operator>-</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>&lt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>sum1</name></name> <operator>&gt;</operator> <name><name>ff_tta_shift_16</name><index>[<expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k1</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>unary</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><name>outval</name> <operator>&gt;&gt;</operator> <name>k</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unary</name> <operator>+</operator> <literal type="number">100LL</literal> <operator>&gt;</operator> <call><name>put_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pkt_size</name> <operator>&lt;</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pkt_size</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>pkt_alloc</name>;</goto>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unary</name> <operator>&gt;</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0x7FFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unary</name> <operator>-=</operator> <literal type="number">31</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>unary</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>unary</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>unary</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><name>unary</name></expr>)</condition>;</do>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>, <argument><expr><name>outval</name> <operator>&amp;</operator> <operator>(</operator><name><name>ff_tta_shift_1</name><index>[<expr><name>k</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cur_chan</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_chan</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>cur_chan</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_bytes</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><call><name>av_crc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>crc_table</name></name></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>out_bytes</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>out_bytes</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name> <operator>=</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>tta_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TTAEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ch_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_tta_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"tta"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"TTA (True Audio)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TTA</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TTAEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>tta_encode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>tta_encode_close</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>tta_encode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name> <operator>|</operator> <name>AV_CODEC_CAP_LOSSLESS</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_U8</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
