<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vaapi_vc1.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwaccel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_decode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vc1data.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_VAMvModeVC1</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>MVModes</name></name></type> <name>mv_mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>mv_mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>MV_PMODE_1MV_HPEL_BILIN</name></expr>:</case> <return>return <expr><name>VAMvMode1MvHalfPelBilinear</name></expr>;</return>

<case>case <expr><name>MV_PMODE_1MV</name></expr>:</case> <return>return <expr><name>VAMvMode1Mv</name></expr>;</return>

<case>case <expr><name>MV_PMODE_1MV_HPEL</name></expr>:</case> <return>return <expr><name>VAMvMode1MvHalfPel</name></expr>;</return>

<case>case <expr><name>MV_PMODE_MIXED_MV</name></expr>:</case> <return>return <expr><name>VAMvModeMixedMv</name></expr>;</return>

<case>case <expr><name>MV_PMODE_INTENSITY_COMP</name></expr>:</case> <return>return <expr><name>VAMvModeIntensityCompensation</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_has_MVTYPEMB_bitplane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_is_raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name> <operator>==</operator> <name>MV_PMODE_MIXED_MV</name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_has_SKIPMB_bitplane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_has_DIRECTMB_bitplane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>dmb_is_raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_has_ACPRED_bitplane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>acpred_is_raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_has_OVERFLAGS_bitplane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>overflg_is_raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>PROFILE_ADVANCED</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>overlap</name></name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>pq</name></name> <operator>&lt;=</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>condover</name></name> <operator>==</operator> <name>CONDOVER_SELECT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_has_FIELDTX_bitplane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fieldtx_is_raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_has_FORWARDMB_bitplane</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fmb_is_raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vc1_get_PTYPE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vc1_get_FPTYPE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case> <return>return <expr><ternary><condition><expr><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VAMvModeVC1</name></type> <name>vc1_get_MVMODE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_VAMvModeVC1</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>VAMvModeVC1</name></type> <name>vc1_get_MVMODE2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>||</operator> <name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_VAMvModeVC1</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>mv_mode2</name></name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_unused</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_get_INTCOMPFIELD</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_get_LUMSCALE</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>intcomp</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumscale</name></name></expr>;</return>

</block_content>}</block></switch></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_get_LUMSHIFT</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FRAME</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>intcomp</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr>;</return></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name></expr>)</condition><block type="pseudo"><block_content>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr>;</return>

<case>case <expr><literal type="number">2</literal></expr>:</case> <return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name></expr>;</return>

<case>case <expr><literal type="number">3</literal></expr>:</case> <return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumshift</name></name></expr>;</return>

</block_content>}</block></switch></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_unused</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_get_LUMSCALE2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumscale2</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_unused</name> <specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_get_LUMSHIFT2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>p_frame_skipped</name></name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>mv_mode</name></name> <operator>==</operator> <name>MV_PMODE_INTENSITY_COMP</name> <operator>&amp;&amp;</operator>

<name><name>v</name><operator>-&gt;</operator><name>intcompfield</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>v</name><operator>-&gt;</operator><name>lumshift2</name></name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>vc1_get_TTFRM</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>ttfrm</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TT_8X8</name></expr>:</case> <return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>TT_8X4</name></expr>:</case> <return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>TT_4X8</name></expr>:</case> <return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>TT_4X4</name></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vc1_pack_bitplanes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitplane</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>ff_bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bitplane_index</name> <init>= <expr><name>n</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>ff_bp_index</name> <init>= <expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ff_bp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ff_bp_index</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>ff_bp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ff_bp_index</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>|=</operator> <name><name>ff_bp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>ff_bp_index</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>bitplane</name><index>[<expr><name>bitplane_index</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>bitplane</name><index>[<expr><name>bitplane_index</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vc1_start_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>av_unused</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>av_unused</name> <name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAPictureParameterBufferVC1</name></type> <name>pic_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_surface</name></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pic_param</name> <operator>=</operator> <operator>(</operator><name>VAPictureParameterBufferVC1</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>forward_reference_picture</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>backward_reference_picture</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>inloop_decoded_picture</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name><name>sequence_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>pulldown</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>broadcast</name></name></expr>,

<expr><operator>.</operator><name>interlace</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>interlace</name></name></expr>,

<expr><operator>.</operator><name>tfcntrflag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>tfcntrflag</name></name></expr>,

<expr><operator>.</operator><name>finterpflag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>finterpflag</name></name></expr>,

<expr><operator>.</operator><name>psf</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>psf</name></name></expr>,

<expr><operator>.</operator><name>multires</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>multires</name></name></expr>,

<expr><operator>.</operator><name>overlap</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>overlap</name></name></expr>,

<expr><operator>.</operator><name>syncmarker</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>resync_marker</name></name></expr>,

<expr><operator>.</operator><name>rangered</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>rangered</name></name></expr>,

<expr><operator>.</operator><name>max_b_frames</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>,

<expr><operator>.</operator><name>profile</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>profile</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>coded_width</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>,

<expr><operator>.</operator><name>coded_height</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>,

<expr><operator>.</operator><name><name>entrypoint_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>broken_link</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>broken_link</name></name></expr>,

<expr><operator>.</operator><name>closed_entry</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>closed_entry</name></name></expr>,

<expr><operator>.</operator><name>panscan_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>panscanflag</name></name></expr>,

<expr><operator>.</operator><name>loopfilter</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>loop_filter</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>conditional_overlap_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>condover</name></name></expr>,

<expr><operator>.</operator><name>fast_uvmc_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fastuvmc</name></name></expr>,

<expr><operator>.</operator><name><name>range_mapping_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>luma_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>range_mapy_flag</name></name></expr>,

<expr><operator>.</operator><name>luma</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>range_mapy</name></name></expr>,

<expr><operator>.</operator><name>chroma_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>range_mapuv_flag</name></name></expr>,

<expr><operator>.</operator><name>chroma</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>range_mapuv</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>b_picture_fraction</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>bfraction_lut_index</name></name></expr>,

<expr><operator>.</operator><name>cbp_table</name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>?</operator> <name><name>v</name><operator>-&gt;</operator><name>cbptab</name></name> <operator>:</operator> <name><name>v</name><operator>-&gt;</operator><name>icbptab</name></name><operator>)</operator></expr>,

<expr><operator>.</operator><name>mb_mode_table</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mbmodetab</name></name></expr>,

<expr><operator>.</operator><name>range_reduction_frame</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>rangeredfrm</name></name></expr>,

<expr><operator>.</operator><name>rounding_control</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>rnd</name></name></expr>,

<expr><operator>.</operator><name>post_processing</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>postproc</name></name></expr>,

<expr><operator>.</operator><name>picture_resolution_index</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>respic</name></name></expr>,

<expr><operator>.</operator><name><name>picture_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>picture_type</name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name> <operator>?</operator> <call><name>vc1_get_FPTYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>vc1_get_PTYPE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call><operator>)</operator></expr>,

<expr><operator>.</operator><name>frame_coding_mode</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fcm</name></name></expr>,

<expr><operator>.</operator><name>top_field_first</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>tff</name></name></expr>,

<expr><operator>.</operator><name>is_first_field</name> <operator>=</operator> <operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>second_field</name></name></expr>,

<expr><operator>.</operator><name>intensity_compensation</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>intcomp</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>luma_scale</name> <operator>=</operator> <call><name>vc1_get_LUMSCALE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>luma_shift</name> <operator>=</operator> <call><name>vc1_get_LUMSHIFT</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>luma_scale2</name> <operator>=</operator> <call><name>vc1_get_LUMSCALE2</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>luma_shift2</name> <operator>=</operator> <call><name>vc1_get_LUMSHIFT2</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>intensity_compensation_field</name> <operator>=</operator> <call><name>vc1_get_INTCOMPFIELD</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><operator>.</operator><name><name>raw_coding</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>mv_type_mb</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mv_type_is_raw</name></name></expr>,

<expr><operator>.</operator><name>direct_mb</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dmb_is_raw</name></name></expr>,

<expr><operator>.</operator><name>skip_mb</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>skip_is_raw</name></name></expr>,

<expr><operator>.</operator><name>field_tx</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fieldtx_is_raw</name></name></expr>,

<expr><operator>.</operator><name>forward_mb</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fmb_is_raw</name></name></expr>,

<expr><operator>.</operator><name>ac_pred</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>acpred_is_raw</name></name></expr>,

<expr><operator>.</operator><name>overflags</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>overflg_is_raw</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name><name>bitplane_present</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>bp_mv_type_mb</name> <operator>=</operator> <call><name>vc1_has_MVTYPEMB_bitplane</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bp_direct_mb</name> <operator>=</operator> <call><name>vc1_has_DIRECTMB_bitplane</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bp_skip_mb</name> <operator>=</operator> <call><name>vc1_has_SKIPMB_bitplane</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bp_field_tx</name> <operator>=</operator> <call><name>vc1_has_FIELDTX_bitplane</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bp_forward_mb</name> <operator>=</operator> <call><name>vc1_has_FORWARDMB_bitplane</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bp_ac_pred</name> <operator>=</operator> <call><name>vc1_has_ACPRED_bitplane</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>bp_overflags</name> <operator>=</operator> <call><name>vc1_has_OVERFLAGS_bitplane</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>,

<expr><operator>.</operator><name><name>reference_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>reference_distance_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>refdist_flag</name></name></expr>,

<expr><operator>.</operator><name>reference_distance</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>refdist</name></name></expr>,

<expr><operator>.</operator><name>num_reference_pictures</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>numref</name></name></expr>,

<expr><operator>.</operator><name>reference_field_pic_indicator</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>reffield</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name><name>mv_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>mv_mode</name> <operator>=</operator> <call><name>vc1_get_MVMODE</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mv_mode2</name> <operator>=</operator> <call><name>vc1_get_MVMODE2</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>mv_table</name> <operator>=</operator> <operator>(</operator><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>PROGRESSIVE</name> <operator>?</operator> <name><name>s</name><operator>-&gt;</operator><name>mv_table_index</name></name> <operator>:</operator> <name><name>v</name><operator>-&gt;</operator><name>imvtab</name></name><operator>)</operator></expr>,

<expr><operator>.</operator><name>two_mv_block_pattern_table</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>twomvbptab</name></name></expr>,

<expr><operator>.</operator><name>four_mv_switch</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fourmvswitch</name></name></expr>,

<expr><operator>.</operator><name>four_mv_block_pattern_table</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>fourmvbptab</name></name></expr>,

<expr><operator>.</operator><name>extended_mv_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>extended_mv</name></name></expr>,

<expr><operator>.</operator><name>extended_mv_range</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>mvrange</name></name></expr>,

<expr><operator>.</operator><name>extended_dmv_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>extended_dmv</name></name></expr>,

<expr><operator>.</operator><name>extended_dmv_range</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dmvrange</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name><name>pic_quantizer_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>dquant</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dquant</name></name></expr>,

<expr><operator>.</operator><name>quantizer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>quantizer_mode</name></name></expr>,

<expr><operator>.</operator><name>half_qp</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>halfpq</name></name></expr>,

<expr><operator>.</operator><name>pic_quantizer_scale</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>pq</name></name></expr>,

<expr><operator>.</operator><name>pic_quantizer_type</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>pquantizer</name></name></expr>,

<expr><operator>.</operator><name>dq_frame</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dquantfrm</name></name></expr>,

<expr><operator>.</operator><name>dq_profile</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dqprofile</name></name></expr>,

<expr><operator>.</operator><name>dq_sb_edge</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dqprofile</name></name> <operator>==</operator> <name>DQPROFILE_SINGLE_EDGE</name> <operator>?</operator> <name><name>v</name><operator>-&gt;</operator><name>dqsbedge</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>dq_db_edge</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dqprofile</name></name> <operator>==</operator> <name>DQPROFILE_DOUBLE_EDGES</name> <operator>?</operator> <name><name>v</name><operator>-&gt;</operator><name>dqsbedge</name></name> <operator>:</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>dq_binary_level</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>dqbilevel</name></name></expr>,

<expr><operator>.</operator><name>alt_pic_quantizer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>altpq</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name><name>transform_fields</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>variable_sized_transform_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>vstransform</name></name></expr>,

<expr><operator>.</operator><name>mb_level_transform_type_flag</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ttmbf</name></name></expr>,

<expr><operator>.</operator><name>frame_level_transform_type</name> <operator>=</operator> <call><name>vc1_get_TTFRM</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>transform_ac_codingset_idx1</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>c_ac_table_index</name></name></expr>,

<expr><operator>.</operator><name>transform_ac_codingset_idx2</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>y_ac_table_index</name></name></expr>,

<expr><operator>.</operator><name>intra_transform_dc_table</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>dc_table_index</name></name></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>

<expr_stmt><expr><name><name>pic_param</name><operator>.</operator><name>backward_reference_picture</name></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>next_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name><name>pic_param</name><operator>.</operator><name>forward_reference_picture</name></name> <operator>=</operator> <call><name>ff_vaapi_get_surface_id</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAPictureParameterBufferType</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>pic_param</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pic_param</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bitplane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>ff_bp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>bitplane</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bitplane</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pict_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_direct_mb</name></name></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_skip_mb</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_mv_type_mb</name></name></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>mv_type_mb_plane</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>v</name><operator>-&gt;</operator><name>bi_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_direct_mb</name></name></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>direct_mb_plane</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_skip_mb</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>mbskip_table</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_forward_mb</name></name></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>forward_mb_plane</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_field_tx</name></name></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>fieldtx_plane</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_ac_pred</name></name></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>acpred_plane</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name><name>pic_param</name><operator>.</operator><name>bitplane_present</name><operator>.</operator><name>flags</name><operator>.</operator><name>bp_overflags</name></name></expr> ?</condition><then> <expr><name><name>v</name><operator>-&gt;</operator><name>over_flags_plane</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_bp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vc1_pack_bitplanes</name><argument_list>(<argument><expr><name>bitplane</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>ff_bp</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name><name>bitplane</name><index>[<expr><name>n</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VABitPlaneBufferType</name></expr></argument>,

<argument><expr><name>bitplane</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>bitplane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vc1_end_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vaapi_decode_issue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg_draw_horiz_band</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_vc1_decode_slice</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VC1Context</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>MpegEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIDecodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>current_picture_ptr</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VASliceParameterBufferVC1</name></type> <name>slice_param</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_VC1</name> <operator>&amp;&amp;</operator> <call><name>IS_MARKER</name><argument_list>(<argument><expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name><operator>-&gt;</operator><name>fcm</name></name> <operator>==</operator> <name>ILACE_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>+</operator> <literal type="number">31</literal> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>mb_height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>+</operator> <literal type="number">15</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>slice_param</name> <operator>=</operator> <operator>(</operator><name>VASliceParameterBufferVC1</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>slice_data_size</name> <operator>=</operator> <name>size</name></expr>,

<expr><operator>.</operator><name>slice_data_offset</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>slice_data_flag</name> <operator>=</operator> <name>VA_SLICE_DATA_FLAG_ALL</name></expr>,

<expr><operator>.</operator><name>macroblock_offset</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>slice_vertical_position</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>%</operator> <name>mb_height</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_vaapi_decode_make_slice_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>slice_param</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>slice_param</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vaapi_decode_cancel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_WMV3_VAAPI_HWACCEL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_wmv3_vaapi_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"wmv3_vaapi"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_WMV3</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodePicture</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_uninit</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_common_frame_params</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name></type> <name>ff_vc1_vaapi_hwaccel</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"vc1_vaapi"</literal></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_VC1</name></expr>,

<expr><operator>.</operator><name>pix_fmt</name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>,

<expr><operator>.</operator><name>start_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vc1_start_frame</name></expr>,

<expr><operator>.</operator><name>end_frame</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vc1_end_frame</name></expr>,

<expr><operator>.</operator><name>decode_slice</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_vc1_decode_slice</name></expr>,

<expr><operator>.</operator><name>frame_priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodePicture</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_init</name></expr>,

<expr><operator>.</operator><name>uninit</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_decode_uninit</name></expr>,

<expr><operator>.</operator><name>frame_params</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_common_frame_params</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIDecodeContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>HWACCEL_CAP_ASYNC_SAFE</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
