<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mlp_parse.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlp_parse.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mlp.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mlp_quants</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">16</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">24</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>mlp_channels</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>,

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>mlp_layout</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><name>AV_CH_LAYOUT_MONO</name></expr>,

<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,

<expr><name>AV_CH_LAYOUT_2_1</name></expr>,

<expr><name>AV_CH_LAYOUT_QUAD</name></expr>,

<expr><name>AV_CH_LAYOUT_STEREO</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_2_1</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_QUAD</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_SURROUND</name></expr>,

<expr><name>AV_CH_LAYOUT_4POINT0</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>,

<expr><name>AV_CH_LAYOUT_SURROUND</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_4POINT0</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>,

<expr><name>AV_CH_LAYOUT_4POINT0</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>,

<expr><name>AV_CH_LAYOUT_SURROUND</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_4POINT0</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>,

<expr><name>AV_CH_LAYOUT_QUAD</name><operator>|</operator><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>mlp_get_major_sync_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>has_extension</name></decl>, <decl><type ref="prev"/><name>extensions</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">28</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bufsize</name> <operator>&lt;</operator> <literal type="number">28</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>AV_RB32</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xf8726fba</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_extension</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>has_extension</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>extensions</name> <operator>=</operator> <name><name>buf</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>+=</operator> <literal type="number">2</literal> <operator>+</operator> <name>extensions</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_mlp_read_major_sync</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log</name></decl></parameter>, <parameter><decl><type><name>MLPHeaderInfo</name> <modifier>*</modifier></type><name>mh</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ratebits</name></decl>, <decl><type ref="prev"/><name>channel_arrangement</name></decl>, <decl><type ref="prev"/><name>header_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>checksum</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>header_size</name> <operator>=</operator> <call><name>mlp_get_major_sync_size</name><argument_list>(<argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>gb</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header_size</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>gb</name><operator>-&gt;</operator><name>size_in_bits</name></name> <operator>&lt;</operator> <name>header_size</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"packet too short, unable to read major sync\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>checksum</name> <operator>=</operator> <call><name>ff_mlp_checksum16</name><argument_list>(<argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>header_size</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>checksum</name> <operator>!=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name><operator>+</operator><name>header_size</name><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"major sync info header checksum error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xf8726f</literal></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>header_size</name></name> <operator>=</operator> <name>header_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>mh</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0xbb</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group1_bits</name></name> <operator>=</operator> <name><name>mlp_quants</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group2_bits</name></name> <operator>=</operator> <name><name>mlp_quants</name><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ratebits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group1_samplerate</name></name> <operator>=</operator> <call><name>mlp_samplerate</name><argument_list>(<argument><expr><name>ratebits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group2_samplerate</name></name> <operator>=</operator> <call><name>mlp_samplerate</name><argument_list>(<argument><expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_arrangement</name></name><operator>=</operator>

<name>channel_arrangement</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channels_mlp</name></name> <operator>=</operator> <name><name>mlp_channels</name><index>[<expr><name>channel_arrangement</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_layout_mlp</name></name> <operator>=</operator> <name><name>mlp_layout</name><index>[<expr><name>channel_arrangement</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mh</name><operator>-&gt;</operator><name>stream_type</name></name> <operator>==</operator> <literal type="number">0xba</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group1_bits</name></name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group2_bits</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ratebits</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group1_samplerate</name></name> <operator>=</operator> <call><name>mlp_samplerate</name><argument_list>(<argument><expr><name>ratebits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>group2_samplerate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_modifier_thd_stream0</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_modifier_thd_stream1</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_arrangement</name></name><operator>=</operator>

<name>channel_arrangement</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channels_thd_stream1</name></name> <operator>=</operator> <call><name>truehd_channels</name><argument_list>(<argument><expr><name>channel_arrangement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_layout_thd_stream1</name></name> <operator>=</operator> <call><name>truehd_layout</name><argument_list>(<argument><expr><name>channel_arrangement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_modifier_thd_stream2</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>channel_arrangement</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channels_thd_stream2</name></name> <operator>=</operator> <call><name>truehd_channels</name><argument_list>(<argument><expr><name>channel_arrangement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>channel_layout_thd_stream2</name></name> <operator>=</operator> <call><name>truehd_layout</name><argument_list>(<argument><expr><name>channel_arrangement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>access_unit_size</name></name> <operator>=</operator> <literal type="number">40</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ratebits</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>access_unit_size_pow2</name></name> <operator>=</operator> <literal type="number">64</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>ratebits</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>is_vbr</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>peak_bitrate</name></name> <operator>=</operator> <operator>(</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name><name>mh</name><operator>-&gt;</operator><name>group1_samplerate</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mh</name><operator>-&gt;</operator><name>num_substreams</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>header_size</name> <operator>-</operator> <literal type="number">17</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
