<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\mpegaudioenc_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRAC_BITS</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WFRAC_BITS</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiodata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegaudiotab.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUL</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((int64_t)(a) * (int64_t)(b)) &gt;&gt; FRAC_BITS)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLES_BUF_SIZE</name></cpp:macro> <cpp:value>4096</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>MpegAudioContext</name> <block>{

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lsf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bitrate_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>freq_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_frac</name></decl>, <name>frame_frac_incr</name>, <name>do_padding</name>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name><name>samples_buf</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SAMPLES_BUF_SIZE</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>samples_offset</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>sb_samples</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scale_factors</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scale_code</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sblimit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>alloc_table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>filter_bank</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>scale_factor_table</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scale_diff_table</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>

<decl_stmt><decl><type><name>float</name></type> <name><name>scale_factor_inv_table</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>scale_factor_shift</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>scale_factor_mult</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>unsigned</name> <name>short</name></type> <name><name>total_quant_bits</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>MpegAudioContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>MPA_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegAudioContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>freq</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bitrate</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>table</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>channels</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>channels</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"encoding %d channel(s) is not allowed in mp2\n"</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <name>bitrate</name> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <name>MPA_FRAME_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <literal type="number">512</literal> <operator>-</operator> <literal type="number">32</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avpriv_mpa_freq_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>freq</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avpriv_mpa_freq_tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <name>freq</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Sampling rate %d is not allowed in mp2\n"</literal></expr></argument>, <argument><expr><name>freq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>freq_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">15</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avpriv_mpa_bitrate_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>bitrate</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">15</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">14</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bitrate</name> <operator>=</operator> <name><name>avpriv_mpa_bitrate_tab</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name>bitrate</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bitrate %d is not allowed in mp2\n"</literal></expr></argument>, <argument><expr><name>bitrate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bitrate_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>bitrate</name> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <name>MPA_FRAME_SIZE</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>freq</name> <operator>*</operator> <literal type="number">8.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><name>a</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_frac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_frac_incr</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>-</operator> <call><name>floor</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">65536.0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>table</name> <operator>=</operator> <call><name>ff_mpa_l2_select_table</name><argument_list>(<argument><expr><name>bitrate</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name> <operator>=</operator> <name><name>ff_mpa_sblimit_table</name><index>[<expr><name>table</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alloc_table</name></name> <operator>=</operator> <name><name>ff_mpa_alloc_tables</name><index>[<expr><name>table</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="string">"%d kb/s, %d Hz, frame_size=%d bits, table=%d, padincr=%x\n"</literal></expr></argument>,

<argument><expr><name>bitrate</name></expr></argument>, <argument><expr><name>freq</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>frame_frac_incr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">257</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ff_mpa_enwindow</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>WFRAC_BITS</name> <operator>!=</operator> <literal type="number">16</literal></expr></cpp:if>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>WFRAC_BITS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">16</literal> <operator>-</operator> <name>WFRAC_BITS</name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_bank</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_bank</name><index>[<expr><literal type="number">512</literal> <operator>-</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>exp2</name><argument_list>(<argument><expr><operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_factor_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_factor_inv_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>exp2</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><literal type="number">3</literal> <operator>-</operator> <name>i</name><operator>)</operator> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_factor_shift</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">21</literal> <operator>-</operator> <name>P</name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_factor_mult</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>P</name><operator>)</operator> <operator>*</operator> <call><name>exp2</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">128</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>i</name> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale_diff_table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">17</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>ff_mpa_quant_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>-</operator><name>v</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name>v</name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>total_quant_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">12</literal> <operator>*</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>idct32</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tab</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>t</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>t1</name></decl>, <decl><type ref="prev"/><name>xr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>xp</name> <init>= <expr><name>costab32</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">31</literal></expr>;</init><condition><expr><name>j</name><operator>&gt;=</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>j</name><operator>-=</operator><literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tab</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name><name>tab</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>t</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>t</name> <operator>!=</operator> <name>t1</name></expr>)</condition>;</do>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>t</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>t</name><index>[<expr><literal type="number">1</literal><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>t</name><index>[<expr><literal type="number">2</literal><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>t</name><index>[<expr><literal type="number">3</literal><operator>-</operator><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>t</name> <operator>!=</operator> <name>t1</name></expr>)</condition>;</do>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>t</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>t</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>t</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>t</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>t</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>t</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>t</name> <operator>!=</operator> <name>t1</name></expr>)</condition>;</do>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x1</name></decl>, <decl><type ref="prev"/><name>x2</name></decl>, <decl><type ref="prev"/><name>x3</name></decl>, <decl><type ref="prev"/><name>x4</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>FIX</name><argument_list>(<argument><expr><name>M_SQRT2</name><operator>*</operator><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x4</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>x3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x3</name> <operator>=</operator> <name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>x3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><operator>-</operator><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><call><name>FIX</name><argument_list>(<argument><expr><name>M_SQRT2</name><operator>*</operator><literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x1</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name>x2</name><operator>)</operator></expr></argument>, <argument><expr><name><name>xp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x2</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><operator>(</operator><name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name>x2</name><operator>)</operator></expr></argument>, <argument><expr><name><name>xp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x3</name> <operator>+</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>x4</name> <operator>-</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name>x4</name> <operator>+</operator> <name>x2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>x3</name> <operator>-</operator> <name>x1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>t</name> <operator>!=</operator> <name>t1</name></expr>)</condition>;</do>

<expr_stmt><expr><name>xp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tab</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">28</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>t</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>t</name> <operator>!=</operator> <name>t1</name></expr>)</condition>;</do>

<expr_stmt><expr><name>xp</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">30</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[<expr><literal type="number">30</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[ <expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>tab</name><index>[ <expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[ <expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><literal type="number">28</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[<expr><literal type="number">28</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><literal type="number">28</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><literal type="number">31</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[<expr><literal type="number">31</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[ <expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>tab</name><index>[ <expr><literal type="number">3</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>,<argument><expr><name><name>xp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[ <expr><literal type="number">3</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><literal type="number">29</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tab</name><index>[<expr><literal type="number">29</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tab</name><index>[<expr><literal type="number">29</literal><operator>-</operator><name>i</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>xp</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>=</operator> <name>tab</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>xr</name> <operator>=</operator> <call><name>MUL</name><argument_list>(<argument><expr><name><name>t1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>xp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>xr</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xp</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>t</name> <operator>&gt;=</operator> <name>tab</name></expr>)</condition>;</do>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><name><name>bitinv32</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WSHIFT</name></cpp:macro> <cpp:value>(WFRAC_BITS + 15 - FRAC_BITS)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>filter</name><parameter_list>(<parameter><decl><type><name>MpegAudioContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>incr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>short</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tmp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>tmp1</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_offset</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">36</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">32</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_buf</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>offset</name> <operator>+</operator> <operator>(</operator><literal type="number">31</literal> <operator>-</operator> <name>i</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples_buf</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>offset</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_bank</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">64</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>=</operator> <name><name>p</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">0</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">3</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">5</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">5</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">6</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">6</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>p</name><index>[<expr><literal type="number">7</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">7</literal><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>tmp1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <name>WSHIFT</name></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">16</literal></expr>]</index></name><operator>+</operator><name><name>tmp</name><index>[<expr><literal type="number">16</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>WSHIFT</name></expr>;</expr_stmt></block_content></block></for>

<for>for<control>( <init><expr><name>i</name><operator>=</operator><literal type="number">17</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;=</operator><literal type="number">31</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>tmp1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>tmp</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">16</literal></expr>]</index></name><operator>-</operator><name><name>tmp</name><index>[<expr><literal type="number">80</literal><operator>-</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <name>WSHIFT</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>idct32</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>tmp1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>-=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_buf</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>SAMPLES_BUF_SIZE</name> <operator>-</operator> <operator>(</operator><literal type="number">512</literal> <operator>-</operator> <literal type="number">32</literal><operator>)</operator></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples_buf</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">512</literal> <operator>-</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <name>SAMPLES_BUF_SIZE</name> <operator>-</operator> <literal type="number">512</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples_offset</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_scale_factors</name><parameter_list>(<parameter><decl><type><name>MpegAudioContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scale_code</name><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scale_factors</name><index>[<expr><name>SBLIMIT</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>sb_samples</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">12</literal></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>sblimit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"/><name>vmax</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>index</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sf</name> <init>= <expr><operator>&amp;</operator><name><name>scale_factors</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>sblimit</name></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>&amp;</operator><name><name>sb_samples</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vmax</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">1</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <name>SBLIMIT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>abs</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name>vmax</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>vmax</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>vmax</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>vmax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>=</operator> <operator>(</operator><literal type="number">21</literal> <operator>-</operator> <name>n</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal> <operator>-</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>vmax</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale_factor_table</name><index>[<expr><name>index</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>=</operator> <literal type="number">62</literal></expr>;</expr_stmt> 

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%2d:%d in=%x %x %d\n"</literal></expr></argument>,

<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>vmax</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scale_factor_table</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>index</name> <operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;=</operator> <literal type="number">63</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale_diff_table</name><index>[<expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale_diff_table</name><index>[<expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>d1</name> <operator>*</operator> <literal type="number">5</literal> <operator>+</operator> <name>d2</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">0</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">0</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">4</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">0</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">1</literal></expr>:</case>

<case>case <expr><literal type="number">3</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>+</operator><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>code</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> 

</block_content>}</block></switch>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"%d: %2d %2d %2d %d %d -&gt; %d\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>,

<argument><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>d1</name></expr></argument>, <argument><expr><name>d2</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scale_code</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sf</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>psycho_acoustic_model</name><parameter_list>(<parameter><decl><type><name>MpegAudioContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>short</name></type> <name><name>smr</name><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>smr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>fixed_smr</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_NOTALLOCATED</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_ALLOCATED</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SB_NOMORE</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>compute_bit_allocation</name><parameter_list>(<parameter><decl><type><name>MpegAudioContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>short</name></type> <name><name>smr1</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bit_alloc</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>padding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>max_smr</name></decl>, <decl><type ref="prev"/><name>max_ch</name></decl>, <decl><type ref="prev"/><name>max_sb</name></decl>, <decl><type ref="prev"/><name>current_frame_size</name></decl>, <decl><type ref="prev"/><name>max_frame_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name><name>smr</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>subband_status</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>alloc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>smr</name></expr></argument>, <argument><expr><name>smr1</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>short</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>SBLIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>subband_status</name></expr></argument>, <argument><expr><name>SB_NOTALLOCATED</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name>SBLIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bit_alloc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>*</operator> <name>SBLIMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max_frame_size</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_frac</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>frame_frac_incr</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>frame_frac</name></name> <operator>&gt;=</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_frac</name></name> <operator>-=</operator> <literal type="number">65536</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_padding</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_frame_size</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>do_padding</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>current_frame_size</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alloc_table</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <name><name>alloc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_frame_size</name> <operator>+=</operator> <name>incr</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>alloc</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>max_sb</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_ch</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max_smr</name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>ch</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>smr</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>max_smr</name> <operator>&amp;&amp;</operator> <name><name>subband_status</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>SB_NOMORE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>max_smr</name> <operator>=</operator> <name><name>smr</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_sb</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_ch</name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>max_sb</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_dlog</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"current=%d max=%d max_sb=%d max_ch=%d alloc=%d\n"</literal></expr></argument>,

<argument><expr><name>current_frame_size</name></expr></argument>, <argument><expr><name>max_frame_size</name></expr></argument>, <argument><expr><name>max_sb</name></expr></argument>, <argument><expr><name>max_ch</name></expr></argument>,

<argument><expr><name><name>bit_alloc</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>alloc</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alloc_table</name></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>max_sb</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>alloc</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>alloc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>subband_status</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name> <operator>==</operator> <name>SB_NOTALLOCATED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>nb_scale_factors</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>scale_code</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name></expr>]</index></name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>incr</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>total_quant_bits</name><index>[<expr><name><name>alloc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>bit_alloc</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>incr</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>total_quant_bits</name><index>[<expr><name><name>alloc</name><index>[<expr><name>b</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>-</operator>

<name><name>s</name><operator>-&gt;</operator><name>total_quant_bits</name><index>[<expr><name><name>alloc</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_frame_size</name> <operator>+</operator> <name>incr</name> <operator>&lt;=</operator> <name>max_frame_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>++</operator><name><name>bit_alloc</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>current_frame_size</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>smr</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name> <operator>=</operator> <name><name>smr1</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name> <operator>-</operator> <name><name>quant_snr</name><index>[<expr><name><name>alloc</name><index>[<expr><name>b</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>alloc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subband_status</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name> <operator>=</operator> <name>SB_NOMORE</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>subband_status</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name> <operator>=</operator> <name>SB_ALLOCATED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>subband_status</name><index>[<expr><name>max_ch</name></expr>]</index><index>[<expr><name>max_sb</name></expr>]</index></name> <operator>=</operator> <name>SB_NOMORE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>padding</name> <operator>=</operator> <name>max_frame_size</name> <operator>-</operator> <name>current_frame_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>*</operator><name>padding</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>MpegAudioContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bit_alloc</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>padding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>bit_alloc_bits</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>q</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">0xfff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>lsf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">4</literal><operator>-</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bitrate_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>freq_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>do_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name>MPA_STEREO</name></expr> </then><else>: <expr><name>MPA_MONO</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bit_alloc_bits</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alloc_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>ch</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bit_alloc_bits</name></expr></argument>, <argument><expr><name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit_alloc_bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>ch</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scale_code</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>ch</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sf</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>scale_code</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>sf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>k</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>l</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>l</name><operator>&lt;</operator><literal type="number">12</literal></expr>;</condition><incr><expr><name>l</name><operator>+=</operator><literal type="number">3</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bit_alloc_bits</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alloc_table</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ch</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>ch</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>bit_alloc</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qindex</name></decl>, <decl><type ref="prev"/><name>steps</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>sample</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>qindex</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>alloc_table</name><index>[<expr><name>j</name><operator>+</operator><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>steps</name> <operator>=</operator> <name><name>ff_mpa_quant_steps</name><index>[<expr><name>qindex</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>m</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>m</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition><incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sample</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>l</name> <operator>+</operator> <name>m</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FLOATS</name></expr></cpp:if>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>a</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>sample</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>scale_factor_inv_table</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>+</operator> <literal type="number">1.0</literal><operator>)</operator> <operator>*</operator> <name>steps</name> <operator>*</operator> <literal type="number">0.5</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>q1</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>, <decl><type ref="prev"/><name>mult</name></decl>;</decl_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale_factor_shift</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mult</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>scale_factor_mult</name><index>[<expr><name>e</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>shift</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>sample</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>-</operator><name>shift</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <name>sample</name> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <operator>(</operator><name>q1</name> <operator>*</operator> <name>mult</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>P</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q1</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>P</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q1</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>q</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>q1</name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>steps</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>P</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&gt;=</operator> <name>steps</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>steps</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>q</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>q</name><index>[<expr><name>m</name></expr>]</index></name> <operator>&lt;</operator> <name>steps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>ff_mpa_quant_bits</name><index>[<expr><name>qindex</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>-</operator><name>bits</name></expr></argument>,

<argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>steps</name> <operator>*</operator> <operator>(</operator><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>steps</name> <operator>*</operator> <name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name><name>q</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bit_alloc_bits</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name>padding</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>MPA_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>MpegAudioContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>short</name></type> <name><name>smr</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>bit_alloc</name><index>[<expr><name>MPA_MAX_CHANNELS</name></expr>]</index><index>[<expr><name>SBLIMIT</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>padding</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>filter</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>samples</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>compute_scale_factors</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scale_code</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scale_factors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sb_samples</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>sblimit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>nb_channels</name></name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>psycho_acoustic_model</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>smr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>compute_bit_allocation</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>smr</name></expr></argument>, <argument><expr><name>bit_alloc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>MPA_MAX_CODED_FRAME_SIZE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_frame</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>bit_alloc</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <call><name>ff_samples_to_time_base</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>mp2_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
