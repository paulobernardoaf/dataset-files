<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\apedec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lossless_audiodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswapdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"unary.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BYTESPERSAMPLE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APE_FRAMECODE_MONO_SILENCE</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APE_FRAMECODE_STEREO_SILENCE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APE_FRAMECODE_PSEUDO_STEREO</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HISTORY_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICTOR_ORDER</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PREDICTOR_SIZE</name></cpp:macro> <cpp:value>50</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YDELAYA</name></cpp:macro> <cpp:value>(18 + PREDICTOR_ORDER*4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YDELAYB</name></cpp:macro> <cpp:value>(18 + PREDICTOR_ORDER*3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDELAYA</name></cpp:macro> <cpp:value>(18 + PREDICTOR_ORDER*2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XDELAYB</name></cpp:macro> <cpp:value>(18 + PREDICTOR_ORDER)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YADAPTCOEFFSA</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XADAPTCOEFFSA</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YADAPTCOEFFSB</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XADAPTCOEFFSB</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<enum>enum <name>APECompressionLevel</name> <block>{

<decl><name>COMPRESSION_LEVEL_FAST</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>,

<decl><name>COMPRESSION_LEVEL_NORMAL</name> <init>= <expr><literal type="number">2000</literal></expr></init></decl>,

<decl><name>COMPRESSION_LEVEL_HIGH</name> <init>= <expr><literal type="number">3000</literal></expr></init></decl>,

<decl><name>COMPRESSION_LEVEL_EXTRA_HIGH</name> <init>= <expr><literal type="number">4000</literal></expr></init></decl>,

<decl><name>COMPRESSION_LEVEL_INSANE</name> <init>= <expr><literal type="number">5000</literal></expr></init></decl>

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APE_FILTER_LEVELS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>ape_filter_orders</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>APE_FILTER_LEVELS</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">64</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">32</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">16</literal></expr>, <expr><literal type="number">256</literal></expr>, <expr><literal type="number">1280</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ape_filter_fracbits</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>APE_FILTER_LEVELS</name></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>APEFilter</name> <block>{

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coeffs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>adaptcoeffs</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>historybuffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>delay</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>avg</name></decl>;</decl_stmt>

}</block></struct></type> <name>APEFilter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>APERice</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ksum</name></decl>;</decl_stmt>

}</block></struct></type> <name>APERice</name>;</typedef>

<typedef>typedef <type><struct>struct <name>APERangecoder</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>low</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>range</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>help</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>buffer</name></decl>;</decl_stmt> 

}</block></struct></type> <name>APERangecoder</name>;</typedef>

<typedef>typedef <type><struct>struct <name>APEPredictor</name> <block>{

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>lastA</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>filterA</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>filterB</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>coeffsA</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>coeffsB</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>historybuffer</name><index>[<expr><name>HISTORY_SIZE</name> <operator>+</operator> <name>PREDICTOR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sample_pos</name></decl>;</decl_stmt>

}</block></struct></type> <name>APEPredictor</name>;</typedef>

<typedef>typedef <type><struct>struct <name>APEContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BswapDSPContext</name></type> <name>bdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LLAudDSPContext</name></type> <name>adsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fileversion</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>compression_level</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>fset</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name>CRC</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frameflags</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>APEPredictor</name></type> <name>predictor</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>decoded_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>decoded</name><index>[<expr><name>MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>blocks_per_loop</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name><name>filterbuf</name><index>[<expr><name>APE_FILTER_LEVELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>APERangecoder</name></type> <name>rc</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>APERice</name></type> <name>riceX</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>APERice</name></type> <name>riceY</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>APEFilter</name></type> <name><name>filters</name><index>[<expr><name>APE_FILTER_LEVELS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data_end</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>error</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>entropy_decode_mono</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>APEContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>entropy_decode_stereo</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>APEContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>predictor_decode_mono</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>APEContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>predictor_decode_stereo</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>APEContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>APEContext</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ape_apply_filters</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_0000</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_0000</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_3860</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3860</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_3900</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3900</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3930</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_3990</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3990</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_mono_3800</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_stereo_3800</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_mono_3930</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_stereo_3930</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_mono_3950</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_stereo_3950</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ape_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>APE_FILTER_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>filterbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decoded_size</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ape_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>!=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect extradata\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only mono and stereo is supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_U8P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><literal type="string">"%d bits per coded sample"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>AV_RL16</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Compression Level: %d - Flags: %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>%</operator> <literal type="number">1000</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;</operator> <name>COMPRESSION_LEVEL_INSANE</name> <operator>||</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3930</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_INSANE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect compression level %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fset</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>/</operator> <literal type="number">1000</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>APE_FILTER_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ape_filter_orders</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fset</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filterbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><name><name>ape_filter_orders</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>fset</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>HISTORY_SIZE</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></argument>,

<argument><expr><name>filter_alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3860</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_mono</name></name> <operator>=</operator> <name>entropy_decode_mono_0000</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_stereo</name></name> <operator>=</operator> <name>entropy_decode_stereo_0000</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3900</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_mono</name></name> <operator>=</operator> <name>entropy_decode_mono_3860</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_stereo</name></name> <operator>=</operator> <name>entropy_decode_stereo_3860</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3930</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_mono</name></name> <operator>=</operator> <name>entropy_decode_mono_3900</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_stereo</name></name> <operator>=</operator> <name>entropy_decode_stereo_3900</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3990</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_mono</name></name> <operator>=</operator> <name>entropy_decode_mono_3900</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_stereo</name></name> <operator>=</operator> <name>entropy_decode_stereo_3930</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_mono</name></name> <operator>=</operator> <name>entropy_decode_mono_3990</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>entropy_decode_stereo</name></name> <operator>=</operator> <name>entropy_decode_stereo_3990</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3930</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor_decode_mono</name></name> <operator>=</operator> <name>predictor_decode_mono_3800</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor_decode_stereo</name></name> <operator>=</operator> <name>predictor_decode_stereo_3800</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3950</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor_decode_mono</name></name> <operator>=</operator> <name>predictor_decode_mono_3930</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor_decode_stereo</name></name> <operator>=</operator> <name>predictor_decode_stereo_3930</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor_decode_mono</name></name> <operator>=</operator> <name>predictor_decode_mono_3950</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>predictor_decode_stereo</name></name> <operator>=</operator> <name>predictor_decode_stereo_3950</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_bswapdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>bdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_llauddsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>adsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name><operator>==</operator><literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><name>AV_CH_LAYOUT_STEREO</name></expr> </then><else>: <expr><name>AV_CH_LAYOUT_MONO</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>filter_alloc_fail</name>:</label>

<expr_stmt><expr><call><name>ape_decode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CODE_BITS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_VALUE</name></cpp:macro> <cpp:value>((unsigned int)1 &lt;&lt; (CODE_BITS-1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHIFT_BITS</name></cpp:macro> <cpp:value>(CODE_BITS - 9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTRA_BITS</name></cpp:macro> <cpp:value>((CODE_BITS-2) % 8 + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BOTTOM_VALUE</name></cpp:macro> <cpp:value>(TOP_VALUE &gt;&gt; 8)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>range_start_decoding</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <call><name>bytestream_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>low</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>buffer</name></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">8</literal> <operator>-</operator> <name>EXTRA_BITS</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>range</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>EXTRA_BITS</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>range_dec_normalize</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>range</name></name> <operator>&lt;=</operator> <name>BOTTOM_VALUE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>buffer</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>data_end</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>buffer</name></name> <operator>+=</operator> <operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>low</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>low</name></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>buffer</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>range</name></name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>range_decode_culfreq</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tot_f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>range_dec_normalize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>help</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>range</name></name> <operator>/</operator> <name>tot_f</name></expr>;</expr_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>low</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>help</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>range_decode_culshift</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>range_dec_normalize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>help</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>range</name></name> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>low</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>help</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>range_decode_update</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy_f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lt_f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>low</name></name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>help</name></name> <operator>*</operator> <name>lt_f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>range</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>rc</name><operator>.</operator><name>help</name></name> <operator>*</operator> <name>sy_f</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>range_decode_bits</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sym</name> <init>= <expr><call><name>range_decode_culshift</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>range_decode_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>sym</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>sym</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MODEL_ELEMENTS</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>counts_3970</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">14824</literal></expr>, <expr><literal type="number">28224</literal></expr>, <expr><literal type="number">39348</literal></expr>, <expr><literal type="number">47855</literal></expr>, <expr><literal type="number">53994</literal></expr>, <expr><literal type="number">58171</literal></expr>, <expr><literal type="number">60926</literal></expr>,

<expr><literal type="number">62682</literal></expr>, <expr><literal type="number">63786</literal></expr>, <expr><literal type="number">64463</literal></expr>, <expr><literal type="number">64878</literal></expr>, <expr><literal type="number">65126</literal></expr>, <expr><literal type="number">65276</literal></expr>, <expr><literal type="number">65365</literal></expr>, <expr><literal type="number">65419</literal></expr>,

<expr><literal type="number">65450</literal></expr>, <expr><literal type="number">65469</literal></expr>, <expr><literal type="number">65480</literal></expr>, <expr><literal type="number">65487</literal></expr>, <expr><literal type="number">65491</literal></expr>, <expr><literal type="number">65493</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>counts_diff_3970</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">14824</literal></expr>, <expr><literal type="number">13400</literal></expr>, <expr><literal type="number">11124</literal></expr>, <expr><literal type="number">8507</literal></expr>, <expr><literal type="number">6139</literal></expr>, <expr><literal type="number">4177</literal></expr>, <expr><literal type="number">2755</literal></expr>, <expr><literal type="number">1756</literal></expr>,

<expr><literal type="number">1104</literal></expr>, <expr><literal type="number">677</literal></expr>, <expr><literal type="number">415</literal></expr>, <expr><literal type="number">248</literal></expr>, <expr><literal type="number">150</literal></expr>, <expr><literal type="number">89</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">31</literal></expr>,

<expr><literal type="number">19</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">2</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>counts_3980</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">19578</literal></expr>, <expr><literal type="number">36160</literal></expr>, <expr><literal type="number">48417</literal></expr>, <expr><literal type="number">56323</literal></expr>, <expr><literal type="number">60899</literal></expr>, <expr><literal type="number">63265</literal></expr>, <expr><literal type="number">64435</literal></expr>,

<expr><literal type="number">64971</literal></expr>, <expr><literal type="number">65232</literal></expr>, <expr><literal type="number">65351</literal></expr>, <expr><literal type="number">65416</literal></expr>, <expr><literal type="number">65447</literal></expr>, <expr><literal type="number">65466</literal></expr>, <expr><literal type="number">65476</literal></expr>, <expr><literal type="number">65482</literal></expr>,

<expr><literal type="number">65485</literal></expr>, <expr><literal type="number">65488</literal></expr>, <expr><literal type="number">65490</literal></expr>, <expr><literal type="number">65491</literal></expr>, <expr><literal type="number">65492</literal></expr>, <expr><literal type="number">65493</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>counts_diff_3980</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">19578</literal></expr>, <expr><literal type="number">16582</literal></expr>, <expr><literal type="number">12257</literal></expr>, <expr><literal type="number">7906</literal></expr>, <expr><literal type="number">4576</literal></expr>, <expr><literal type="number">2366</literal></expr>, <expr><literal type="number">1170</literal></expr>, <expr><literal type="number">536</literal></expr>,

<expr><literal type="number">261</literal></expr>, <expr><literal type="number">119</literal></expr>, <expr><literal type="number">65</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">3</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>range_get_symbol</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>counts</name><index>[]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint16_t</name></type> <name><name>counts_diff</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>symbol</name></decl>, <decl><type ref="prev"/><name>cf</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cf</name> <operator>=</operator> <call><name>range_decode_culshift</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cf</name> <operator>&gt;</operator> <literal type="number">65492</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>symbol</name><operator>=</operator> <name>cf</name> <operator>-</operator> <literal type="number">65535</literal> <operator>+</operator> <literal type="number">63</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_decode_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>cf</name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>symbol</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>symbol</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>counts</name><index>[<expr><name>symbol</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>cf</name></expr>;</condition> <incr><expr><name>symbol</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><call><name>range_decode_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>counts_diff</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>counts</name><index>[<expr><name>symbol</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>symbol</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>update_rice</name><parameter_list>(<parameter><decl><type><name>APERice</name> <modifier>*</modifier></type><name>rice</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lim</name> <init>= <expr><ternary><condition><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&lt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_rice_ook</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <name>k</name><operator>)</operator> <operator>|</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ape_decode_value_3860</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>APERice</name> <modifier>*</modifier></type><name>rice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>overflow</name></decl>;</decl_stmt>

<expr_stmt><expr><name>overflow</name> <operator>=</operator> <call><name>get_unary</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;</operator> <literal type="number">3880</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>overflow</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>overflow</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>overflow</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>&lt;=</operator> <name>MIN_CACHE_BITS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>overflow</name> <operator>&lt;&lt;</operator> <name><name>rice</name><operator>-&gt;</operator><name>k</name></name><operator>)</operator> <operator>+</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many bits: %"</literal><name>PRIu32</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>+=</operator> <name>x</name> <operator>-</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name><operator>--</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&gt;=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>+</operator> <literal type="number">5</literal><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>&lt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ape_decode_value_3900</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>APERice</name> <modifier>*</modifier></type><name>rice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tmpk</name></decl>;</decl_stmt>

<expr_stmt><expr><name>overflow</name> <operator>=</operator> <call><name>range_get_symbol</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>counts_3970</name></expr></argument>, <argument><expr><name>counts_diff_3970</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>==</operator> <operator>(</operator><name>MODEL_ELEMENTS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmpk</name> <operator>=</operator> <call><name>range_decode_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>overflow</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tmpk</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tmpk</name> <operator>&lt;=</operator> <literal type="number">16</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3910</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>tmpk</name> <operator>&gt;</operator> <literal type="number">23</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many bits: %d\n"</literal></expr></argument>, <argument><expr><name>tmpk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>range_decode_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmpk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tmpk</name> <operator>&lt;=</operator> <literal type="number">31</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>range_decode_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>|=</operator> <operator>(</operator><call><name>range_decode_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmpk</name> <operator>-</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many bits: %d\n"</literal></expr></argument>, <argument><expr><name>tmpk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>overflow</name> <operator>&lt;&lt;</operator> <name>tmpk</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_rice</name><argument_list>(<argument><expr><name>rice</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ape_decode_value_3990</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>APERice</name> <modifier>*</modifier></type><name>rice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>, <decl><type ref="prev"/><name>pivot</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pivot</name> <operator>=</operator> <name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pivot</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pivot</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>overflow</name> <operator>=</operator> <call><name>range_get_symbol</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>counts_3980</name></expr></argument>, <argument><expr><name>counts_diff_3980</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>overflow</name> <operator>==</operator> <operator>(</operator><name>MODEL_ELEMENTS</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>overflow</name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>range_decode_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>overflow</name> <operator>|=</operator> <call><name>range_decode_bits</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pivot</name> <operator>&lt;</operator> <literal type="number">0x10000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <call><name>range_decode_culfreq</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>pivot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_decode_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>base_hi</name> <init>= <expr><name>pivot</name></expr></init></decl>, <decl><type ref="prev"/><name>base_lo</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bbits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>base_hi</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">0xFFFF</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base_hi</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bbits</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name>base_hi</name> <operator>=</operator> <call><name>range_decode_culfreq</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>base_hi</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_decode_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>base_hi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base_lo</name> <operator>=</operator> <call><name>range_decode_culfreq</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>bbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_decode_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>base_lo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <operator>(</operator><name>base_hi</name> <operator>&lt;&lt;</operator> <name>bbits</name><operator>)</operator> <operator>+</operator> <name>base_lo</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>base</name> <operator>+</operator> <name>overflow</name> <operator>*</operator> <name>pivot</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>update_rice</name><argument_list>(<argument><expr><name>rice</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_k</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>ksum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_log2</name><argument_list>(<argument><expr><name>ksum</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>!</operator><operator>!</operator><name>ksum</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_array_0000</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>APERice</name> <modifier>*</modifier></type><name>rice</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>ksummax</name></decl>, <decl><type ref="prev"/><name>ksummin</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>blockstodecode</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_rice_ook</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>+=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>blockstodecode</name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <call><name>get_k</name><argument_list>(<argument><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>/</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>blockstodecode</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_rice_ook</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>+=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <call><name>get_k</name><argument_list>(<argument><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>/</operator> <operator>(</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;=</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>blockstodecode</name> <operator>&lt;=</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>=</operator> <call><name>get_k</name><argument_list>(<argument><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ksummax</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ksummin</name> <operator>=</operator> <ternary><condition><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>+</operator> <literal type="number">6</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockstodecode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>get_rice_ook</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>+=</operator> <name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>out</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">64</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&lt;</operator> <name>ksummin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ksummin</name> <operator>=</operator> <ternary><condition><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name></expr> ?</condition><then> <expr><name>ksummin</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>ksummax</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<while>while <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>ksum</name></name> <operator>&gt;=</operator> <name>ksummax</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rice</name><operator>-&gt;</operator><name>k</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ksummax</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ksummin</name> <operator>=</operator> <ternary><condition><expr><name>ksummin</name></expr> ?</condition><then> <expr><name>ksummin</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">128</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></for>

<label><name>end</name>:</label>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockstodecode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_0000</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>decode_array_0000</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>,

<argument><expr><name>blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_0000</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>decode_array_0000</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>,

<argument><expr><name>blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_array_0000</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceX</name></name></expr></argument>,

<argument><expr><name>blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_3860</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blockstodecode</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3860</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3860</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocks</name> <init>= <expr><name>blockstodecode</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blockstodecode</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3860</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>blocks</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decoded1</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3860</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_3900</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blockstodecode</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3900</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3900</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocks</name> <init>= <expr><name>blockstodecode</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blockstodecode</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3900</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>range_dec_normalize</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_start_decoding</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>blocks</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decoded1</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3900</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3930</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blockstodecode</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3900</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded1</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3900</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_mono_3990</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blockstodecode</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3990</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>entropy_decode_stereo_3990</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockstodecode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>blockstodecode</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3990</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded1</name><operator>++</operator> <operator>=</operator> <call><name>ape_decode_value_3990</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>riceX</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_entropy_decoder</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3900</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>CRC</name></name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>CRC</name></name> <operator>=</operator> <call><name>get_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frameflags</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;</operator> <literal type="number">3820</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>CRC</name></name> <operator>&amp;</operator> <literal type="number">0x80000000</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>CRC</name></name> <operator>&amp;=</operator> <operator>~</operator><literal type="number">0x80000000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>frameflags</name></name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>riceX</name><operator>.</operator><name>k</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>riceX</name><operator>.</operator><name>ksum</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>riceX</name><operator>.</operator><name>k</name></name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name><operator>.</operator><name>k</name></name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>riceY</name><operator>.</operator><name>ksum</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>riceY</name><operator>.</operator><name>k</name></name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3900</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ptr</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>range_start_decoding</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>initial_coeffs_fast_3320</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">375</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>initial_coeffs_a_3800</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">64</literal></expr>, <expr><literal type="number">115</literal></expr>, <expr><literal type="number">64</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>initial_coeffs_b_3800</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">740</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int32_t</name></type> <name><name>initial_coeffs_3930</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">360</literal></expr>, <expr><literal type="number">317</literal></expr>, <expr><operator>-</operator><literal type="number">109</literal></expr>, <expr><literal type="number">98</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_predictor_decoder</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PREDICTOR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3930</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_FAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_fast_3320</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_fast_3320</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_fast_3320</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_fast_3320</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_a_3800</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_a_3800</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_a_3800</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_a_3800</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_3930</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_3930</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_3930</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_3930</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3930</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_b_3800</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_b_3800</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>initial_coeffs_b_3800</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>initial_coeffs_b_3800</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sample_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>APESIGN</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><operator>(</operator><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>x</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>filter_fast_3320</name><parameter_list>(<parameter><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>decoded</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>delayA</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>predictionA</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sample_pos</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name></expr>;</expr_stmt>

<return>return <expr><name>decoded</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>predictionA</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>*</operator> <literal type="number">2U</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>predictionA</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>decoded</name> <operator>^</operator> <name>predictionA</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>--</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>filter_3800</name><parameter_list>(<parameter><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>decoded</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>delayA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>delayB</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>predictionA</name></decl>, <decl><type ref="prev"/><name>predictionB</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>, <decl><type ref="prev"/><name>d4</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sample_pos</name></name> <operator>&lt;</operator> <name>start</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>predictionA</name> <operator>=</operator> <name>decoded</name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>predictionA</name></expr>;</expr_stmt>

<return>return <expr><name>predictionA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">2U</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">8U</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name></expr>]</index></name> <operator>*</operator> <literal type="number">2U</literal> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d4</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>predictionA</name> <operator>=</operator> <name>d0</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name>d1</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name>d2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>d0</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>d1</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>d2</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name>predictionB</name> <operator>=</operator> <name>d3</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator>

<name>d4</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name> <operator>+</operator> <operator>(</operator><name>predictionA</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>d3</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>d4</name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>predictionB</name> <operator>&gt;&gt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>*</operator> <literal type="number">31U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>long_filter_high_3800</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>dotprod</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>coeffs</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>delay</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>order</name> <operator>&gt;=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>coeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>order</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>coeffs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>delay</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dotprod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dotprod</name> <operator>+=</operator> <name><name>delay</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>delay</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>dotprod</name> <operator>&gt;&gt;</operator> <name>shift</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>order</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>delay</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>delay</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>delay</name><index>[<expr><name>order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>long_filter_ehigh_3830</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>dotprod</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>delay</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>coeffs</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dotprod</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dotprod</name> <operator>+=</operator> <name><name>delay</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>delay</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">7</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>delay</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>delay</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>delay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-=</operator> <name>dotprod</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_stereo_3800</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>shift</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_HIGH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_high_3800</name><argument_list>(<argument><expr><name>decoded0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_high_3800</name><argument_list>(<argument><expr><name>decoded1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_EXTRA_HIGH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>, <decl><type ref="prev"/><name>shift2</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3830</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>order</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>shift2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_ehigh_3830</name><argument_list>(<argument><expr><name>decoded0</name> <operator>+</operator> <name>order</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_ehigh_3830</name><argument_list>(<argument><expr><name>decoded1</name> <operator>+</operator> <name>order</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_high_3800</name><argument_list>(<argument><expr><name>decoded0</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_high_3800</name><argument_list>(<argument><expr><name>decoded1</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>X</name> <init>= <expr><operator>*</operator><name>decoded0</name></expr></init></decl>, <decl><type ref="prev"/><name>Y</name> <init>= <expr><operator>*</operator><name>decoded1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_FAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name> <operator>=</operator> <call><name>filter_fast_3320</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YDELAYA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded0</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded1</name> <operator>=</operator> <call><name>filter_fast_3320</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XDELAYA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name> <operator>=</operator> <call><name>filter_3800</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YDELAYA</name></expr></argument>, <argument><expr><name>YDELAYB</name></expr></argument>,

<argument><expr><name>start</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded0</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded1</name> <operator>=</operator> <call><name>filter_3800</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XDELAYA</name></expr></argument>, <argument><expr><name>XDELAYB</name></expr></argument>,

<argument><expr><name>start</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sample_pos</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>HISTORY_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>PREDICTOR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_mono_3800</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>, <decl><type ref="prev"/><name>shift</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_HIGH</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_high_3800</name><argument_list>(<argument><expr><name>decoded0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_EXTRA_HIGH</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>order</name> <init>= <expr><literal type="number">128</literal></expr></init></decl>, <decl><type ref="prev"/><name>shift2</name> <init>= <expr><literal type="number">11</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3830</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>order</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>shift</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>shift2</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_ehigh_3830</name><argument_list>(<argument><expr><name>decoded0</name> <operator>+</operator> <name>order</name></expr></argument>, <argument><expr><name>count</name> <operator>-</operator> <name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>long_filter_high_3800</name><argument_list>(<argument><expr><name>decoded0</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>shift2</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>==</operator> <name>COMPRESSION_LEVEL_FAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name> <operator>=</operator> <call><name>filter_fast_3320</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>decoded0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YDELAYA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded0</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name> <operator>=</operator> <call><name>filter_3800</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>decoded0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YDELAYA</name></expr></argument>, <argument><expr><name>YDELAYB</name></expr></argument>,

<argument><expr><name>start</name></expr></argument>, <argument><expr><name>shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded0</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>sample_pos</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>HISTORY_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>PREDICTOR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>predictor_update_3930</name><parameter_list>(<parameter><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>decoded</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>delayA</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>predictionA</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>d0</name></decl>, <decl><type ref="prev"/><name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d0</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr> ]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr> ]</index></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d3</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>predictionA</name> <operator>=</operator> <name>d0</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name>d1</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name>d2</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name>d3</name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name> <operator>+</operator> <operator>(</operator><name>predictionA</name> <operator>&gt;&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>*</operator> <literal type="number">31U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>d0</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>d1</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>d2</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>d3</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_stereo_3930</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ape_apply_filters</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>Y</name> <init>= <expr><operator>*</operator><name>decoded1</name></expr></init></decl>, <decl><type ref="prev"/><name>X</name> <init>= <expr><operator>*</operator><name>decoded0</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded0</name> <operator>=</operator> <call><name>predictor_update_3930</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>Y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YDELAYA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded0</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded1</name> <operator>=</operator> <call><name>predictor_update_3930</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>X</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XDELAYA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>HISTORY_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>PREDICTOR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_mono_3930</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ape_apply_filters</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name> <operator>=</operator> <call><name>predictor_update_3930</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>decoded0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YDELAYA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded0</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>HISTORY_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>PREDICTOR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>predictor_update_filter</name><parameter_list>(<parameter><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>decoded</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>filter</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>delayA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>delayB</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>adaptA</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>adaptB</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name></type> <name>predictionA</name></decl>, <decl><type ref="prev"/><name>predictionB</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptA</name></expr>]</index></name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>predictionA</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name></expr> ]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayA</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>*</operator> <literal type="number">31U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptB</name></expr>]</index></name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterB</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name> <operator>^</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>predictionB</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name></expr> ]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>delayB</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name>decoded</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>predictionA</name> <operator>+</operator> <operator>(</operator><name>predictionB</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name> <operator>*</operator> <literal type="number">31U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name>decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptA</name></expr> ]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptA</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptA</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptB</name></expr> ]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptB</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptB</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptB</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsB</name><index>[<expr><name>filter</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>adaptB</name> <operator>-</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<return>return <expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><name>filter</name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_stereo_3950</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ape_apply_filters</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>decoded0</name> <operator>=</operator> <call><name>predictor_update_filter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>decoded0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>YDELAYA</name></expr></argument>, <argument><expr><name>YDELAYB</name></expr></argument>,

<argument><expr><name>YADAPTCOEFFSA</name></expr></argument>, <argument><expr><name>YADAPTCOEFFSB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded0</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>decoded1</name> <operator>=</operator> <call><name>predictor_update_filter</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>*</operator><name>decoded1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>XDELAYA</name></expr></argument>, <argument><expr><name>XDELAYB</name></expr></argument>,

<argument><expr><name>XADAPTCOEFFSA</name></expr></argument>, <argument><expr><name>XADAPTCOEFFSB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>decoded1</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>HISTORY_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>PREDICTOR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predictor_decode_mono_3950</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEPredictor</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>predictor</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>predictionA</name></decl>, <decl><type ref="prev"/><name>currentA</name></decl>, <decl><type ref="prev"/><name>A</name></decl>, <decl><type ref="prev"/><name>sign</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ape_apply_filters</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>currentA</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>A</name> <operator>=</operator> <operator>*</operator><name>decoded0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name></expr>]</index></name> <operator>=</operator> <name>currentA</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>predictionA</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name></expr> ]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>currentA</name> <operator>=</operator> <name>A</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>predictionA</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YADAPTCOEFFSA</name></expr>]</index></name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name></expr> ]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YADAPTCOEFFSA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YDELAYA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YADAPTCOEFFSA</name></expr> ]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YADAPTCOEFFSA</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YADAPTCOEFFSA</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>coeffsA</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>YADAPTCOEFFSA</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name>sign</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>==</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>HISTORY_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,

<argument><expr><name>PREDICTOR_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>historybuffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>currentA</name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <literal type="number">31U</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>decoded0</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>filterA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>lastA</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>currentA</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_init_filter</name><parameter_list>(<parameter><decl><type><name>APEFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>coeffs</name></name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>=</operator> <name>buf</name> <operator>+</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>order</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>order</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>order</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>order</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avg</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_filter</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>APEFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_init_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>do_init_filter</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <name>order</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>HISTORY_SIZE</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_apply_filter</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>APEFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fracbits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>absres</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>adsp</name><operator>.</operator><name>scalarproduct_and_madd_int16</name></name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>delay</name></name> <operator>-</operator> <name>order</name></expr></argument>,

<argument><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name></name> <operator>-</operator> <name>order</name></expr></argument>,

<argument><expr><name>order</name></expr></argument>, <argument><expr><call><name>APESIGN</name><argument_list>(<argument><expr><operator>*</operator><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>res</name> <operator>+</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>fracbits</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>fracbits</name></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>+=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>*</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data</name><operator>++</operator> <operator>=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>delay</name></name><operator>++</operator> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">3980</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>res</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><operator>(</operator><name>res</name> <operator>&gt;&gt;</operator> <literal type="number">28</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">8</literal><operator>)</operator> <operator>-</operator> <literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name><index>[<expr><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>absres</name> <operator>=</operator> <ternary><condition><expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>res</name></expr> </then><else>: <expr><name>res</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>absres</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name></name> <operator>=</operator> <call><name>APESIGN</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>*</operator>

<operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <operator>(</operator><operator>(</operator><name>absres</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>avg</name></name> <operator>*</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>absres</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>avg</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>/</operator> <literal type="number">3</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>avg</name></name> <operator>+=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>absres</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>f</name><operator>-&gt;</operator><name>avg</name></name><operator>)</operator> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name><index>[<expr><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name><index>[<expr><operator>-</operator><literal type="number">8</literal></expr>]</index></name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>delay</name></name> <operator>==</operator> <name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>HISTORY_SIZE</name> <operator>+</operator> <operator>(</operator><name>order</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>delay</name></name> <operator>-</operator> <operator>(</operator><name>order</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>order</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>delay</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>order</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>adaptcoeffs</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>historybuffer</name></name> <operator>+</operator> <name>order</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_filter</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>APEFilter</name> <modifier>*</modifier></type><name>f</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>data0</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>data1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fracbits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>do_apply_filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data0</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>fracbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>do_apply_filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fileversion</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>f</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>data1</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>order</name></expr></argument>, <argument><expr><name>fracbits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ape_apply_filters</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>APE_FILTER_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ape_filter_orders</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>fset</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>apply_filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>decoded0</name></expr></argument>, <argument><expr><name>decoded1</name></expr></argument>, <argument><expr><name>count</name></expr></argument>,

<argument><expr><name><name>ape_filter_orders</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>fset</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ape_filter_fracbits</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>fset</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_frame_decoder</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_entropy_decoder</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_predictor_decoder</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>APE_FILTER_LEVELS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ape_filter_orders</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>fset</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_filter</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filters</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>filterbuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ape_filter_orders</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>fset</name></name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ape_unpack_mono</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>frameflags</name></name> <operator>&amp;</operator> <name>APE_FRAMECODE_STEREO_SILENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pure silence mono\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>entropy_decode_mono</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>predictor_decode_mono</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ape_unpack_stereo</name><parameter_list>(<parameter><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>left</name></decl>, <decl><type ref="prev"/><name>right</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded0</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded1</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>frameflags</name></name> <operator>&amp;</operator> <name>APE_FRAMECODE_STEREO_SILENCE</name><operator>)</operator> <operator>==</operator> <name>APE_FRAMECODE_STEREO_SILENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"pure silence stereo\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>entropy_decode_stereo</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>predictor_decode_stereo</name></name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>left</name> <operator>=</operator> <operator>*</operator><name>decoded1</name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>*</operator><name>decoded0</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>right</name> <operator>=</operator> <name>left</name> <operator>+</operator> <operator>*</operator><name>decoded0</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>decoded0</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>decoded1</name><operator>++</operator><operator>)</operator> <operator>=</operator> <name>right</name></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ape_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>sample8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>sample16</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>sample24</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blockstodecode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>decoded_buffer_size</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>nblocks</name></decl>, <decl><type ref="prev"/><name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>!=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"packet size is not a multiple of 4. "</literal>

<literal type="string">"extra bytes at the end will be skipped.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3950</literal></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>buf_size</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_padded_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>bdsp</name><operator>.</operator><name>bswap_buf</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator> <name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>,

<argument><expr><name>buf_size</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <operator>(</operator><name>buf_size</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">3</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buf_size</name> <operator>&amp;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <call><name>bytestream_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;=</operator> <literal type="number">3900</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>offset</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect offset passed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>&lt;</operator> <name>offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>data_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&gt;</operator> <literal type="number">3800</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>offset</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nblocks</name> <operator>||</operator> <name>nblocks</name> <operator>&gt;</operator> <name>INT_MAX</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample count: %"</literal><name>PRIu32</name><literal type="string">".\n"</literal></expr></argument>,

<argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>init_frame_decoder</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error reading frame header\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <name>nblocks</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>blockstodecode</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>blocks_per_loop</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>fileversion</name></name> <operator>&lt;</operator> <literal type="number">3930</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>blockstodecode</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>decoded_buffer_size</name> <operator>=</operator> <literal type="number">2LL</literal> <operator>*</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>blockstodecode</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>decoded_buffer_size</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>blockstodecode</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>decoded_size</name></name></expr></argument>, <argument><expr><name>decoded_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>decoded_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decoded_buffer</name></name> <operator>+</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>blockstodecode</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>frameflags</name></name> <operator>&amp;</operator> <name>APE_FRAMECODE_PSEUDO_STEREO</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ape_unpack_mono</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ape_unpack_stereo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>blockstodecode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>error</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error decoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sample8</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockstodecode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sample8</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x80</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sample16</name> <operator>=</operator> <operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockstodecode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sample16</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><literal type="number">24</literal></expr>:</case>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sample24</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>blockstodecode</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>sample24</name><operator>++</operator> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>decoded</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>-=</operator> <name>blockstodecode</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>samples</name></name></expr> ?</condition><then> <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ape_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>APEContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(APEContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PAR</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_DECODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"max_samples"</literal></expr>, <expr><literal type="string">"maximum number of samples decoded per call"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>blocks_per_loop</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4608</literal></expr> }</block></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>PAR</name></expr>, <expr><literal type="string">"max_samples"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><literal type="string">"no maximum. decode all samples for each packet at once"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>INT_MAX</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>PAR</name></expr>, <expr><literal type="string">"max_samples"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr>}</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>ape_decoder_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"APE decoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ape_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ape"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Monkey's Audio"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_APE</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>APEContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>ape_decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>ape_decode_close</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>ape_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SUBFRAMES</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator>

<name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>ape_flush</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_U8P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>ape_decoder_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
