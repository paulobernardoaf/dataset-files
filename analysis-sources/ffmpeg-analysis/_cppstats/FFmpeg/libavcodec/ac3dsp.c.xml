<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\ac3dsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ac3dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_exponent_min_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_reuse_blocks</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_coefs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_reuse_blocks</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_coefs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>min_exp</name> <init>= <expr><operator>*</operator><name>exp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp1</name> <init>= <expr><name>exp</name> <operator>+</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>num_reuse_blocks</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>next_exp</name> <init>= <expr><operator>*</operator><name>exp1</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>next_exp</name> <operator>&lt;</operator> <name>min_exp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>min_exp</name> <operator>=</operator> <name>next_exp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>exp1</name> <operator>+=</operator> <literal type="number">256</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>exp</name><operator>++</operator> <operator>=</operator> <name>min_exp</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ac3_max_msb_abs_int16_c</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>v</name> <operator>|=</operator> <call><name>abs</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_lshift_int16_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>src32</name> <init>= <expr><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>mask</name> <init>= <expr><operator>~</operator><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>len</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src32</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>&amp;</operator> <name>mask</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_rshift_int32_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>shift</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>float_to_fixed24_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>scale</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><operator>*</operator><name>src</name><operator>++</operator> <operator>*</operator> <name>scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_bit_alloc_calc_bap_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>mask</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>psd</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>snr_offset</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>floor</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>bap_tab</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bin</name></decl>, <decl><type ref="prev"/><name>band</name></decl>, <decl><type ref="prev"/><name>band_end</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>snr_offset</name> <operator>==</operator> <operator>-</operator><literal type="number">960</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>bap</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AC3_MAX_COEFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>

<expr_stmt><expr><name>band</name> <operator>=</operator> <name><name>ff_ac3_bin_to_band_tab</name><index>[<expr><name>start</name></expr>]</index></name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name> <init>= <expr><operator>(</operator><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>mask</name><index>[<expr><name>band</name></expr>]</index></name> <operator>-</operator> <name>snr_offset</name> <operator>-</operator> <name>floor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x1FE0</literal><operator>)</operator> <operator>+</operator> <name>floor</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>band_end</name> <operator>=</operator> <name><name>ff_ac3_band_start_tab</name><index>[<expr><operator>++</operator><name>band</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>band_end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>band_end</name></expr></argument>, <argument><expr><name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>bin</name> <operator>&lt;</operator> <name>band_end</name></expr>;</condition> <incr><expr><name>bin</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>address</name> <init>= <expr><call><name>av_clip_uintp2</name><argument_list>(<argument><expr><operator>(</operator><name><name>psd</name><index>[<expr><name>bin</name></expr>]</index></name> <operator>-</operator> <name>m</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>bap</name><index>[<expr><name>bin</name></expr>]</index></name> <operator>=</operator> <name><name>bap_tab</name><index>[<expr><name>address</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block> while <condition>(<expr><name>end</name> <operator>&gt;</operator> <name>band_end</name></expr>)</condition>;</do>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_update_bap_counts_c</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>mant_cnt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bap</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mant_cnt</name><index>[<expr><name><name>bap</name><index>[<expr><name>len</name></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></function>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint16_t</name></expr></argument>, <argument><expr><name>ff_ac3_bap_bits</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">16</literal></expr>]</index> <operator>=</operator> <block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">16</literal></expr>

}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ac3_compute_mantissa_size_c</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name><name>mant_cnt</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blk</name></decl>, <decl><type ref="prev"/><name>bap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name>AC3_MAX_BLOCKS</name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <operator>(</operator><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bap</name> <operator>=</operator> <literal type="number">5</literal></expr>;</init> <condition><expr><name>bap</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>bap</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>bits</name> <operator>+=</operator> <name><name>mant_cnt</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>bap</name></expr>]</index></name> <operator>*</operator> <name><name>ff_ac3_bap_bits</name><index>[<expr><name>bap</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<return>return <expr><name>bits</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_extract_exponents_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_coefs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_coefs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><call><name>abs</name><argument_list>(<argument><expr><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>exp</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><name>v</name></expr> ?</condition><then> <expr><literal type="number">23</literal> <operator>-</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">24</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_sum_square_butterfly_int32_c</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name><name>sum</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coef0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>coef1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>lt</name> <init>= <expr><name><name>coef0</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rt</name> <init>= <expr><name><name>coef1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>md</name> <init>= <expr><name>lt</name> <operator>+</operator> <name>rt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sd</name> <init>= <expr><name>lt</name> <operator>-</operator> <name>rt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>MAC64</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>lt</name></expr></argument>, <argument><expr><name>lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAC64</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rt</name></expr></argument>, <argument><expr><name>rt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAC64</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>md</name></expr></argument>, <argument><expr><name>md</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>MAC64</name><argument_list>(<argument><expr><name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>sd</name></expr></argument>, <argument><expr><name>sd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_sum_square_butterfly_float_c</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name><name>sum</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coef0</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>coef1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>lt</name> <init>= <expr><name><name>coef0</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>rt</name> <init>= <expr><name><name>coef1</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>md</name> <init>= <expr><name>lt</name> <operator>+</operator> <name>rt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sd</name> <init>= <expr><name>lt</name> <operator>-</operator> <name>rt</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>lt</name> <operator>*</operator> <name>lt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>rt</name> <operator>*</operator> <name>rt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>md</name> <operator>*</operator> <name>md</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sum</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>sd</name> <operator>*</operator> <name>sd</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_downmix_5_to_2_symmetric_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>front_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>center_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>surround_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>center_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>center_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_downmix_5_to_1_symmetric_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>front_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>center_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>surround_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>center_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name> <operator>+</operator>

<name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_downmix_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out_ch</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <name>v1</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>in_ch</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>+=</operator> <name><name>samples</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>+=</operator> <name><name>samples</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_ch</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>in_ch</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>v0</name> <operator>+=</operator> <name><name>samples</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_downmix_5_to_2_symmetric_c_fixed</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>front_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>center_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>surround_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>center_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>center_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v0</name><operator>+</operator><literal type="number">2048</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v1</name><operator>+</operator><literal type="number">2048</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_downmix_5_to_1_symmetric_c_fixed</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>v0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>front_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>center_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name>surround_mix</name> <init>= <expr><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>center_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>front_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name> <operator>+</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>surround_mix</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v0</name><operator>+</operator><literal type="number">2048</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ac3_downmix_c_fixed</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out_ch</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <name>v1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>in_ch</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v0</name><operator>+</operator><literal type="number">2048</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v1</name><operator>+</operator><literal type="number">2048</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_ch</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>in_ch</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>v0</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>samples</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v0</name><operator>+</operator><literal type="number">2048</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ac3dsp_downmix_fixed</name><parameter_list>(<parameter><decl><type><name>AC3DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>!=</operator> <name>in_ch</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>!=</operator> <name>out_ch</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>=</operator> <name>in_ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <name>out_ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix_fixed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_ch</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>out_ch</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator>

<name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator>

<operator>(</operator><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>matrix</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix_fixed</name></name> <operator>=</operator> <name>ac3_downmix_5_to_2_symmetric_c_fixed</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>in_ch</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>out_ch</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>matrix</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix_fixed</name></name> <operator>=</operator> <name>ac3_downmix_5_to_1_symmetric_c_fixed</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>downmix_fixed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>downmix_fixed</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ac3_downmix_c_fixed</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>out_ch</name></expr></argument>, <argument><expr><name>in_ch</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_window_int16_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>window</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len2</name> <init>= <expr><name>len</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len2</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int16_t</name></type> <name>w</name> <init>= <expr><name><name>window</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>MUL16</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>len</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>MUL16</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>len</name><operator>-</operator><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ac3dsp_downmix</name><parameter_list>(<parameter><decl><type><name>AC3DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>out_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>!=</operator> <name>in_ch</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>!=</operator> <name>out_ch</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier><modifier>*</modifier></type><name>matrix_cmp</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>matrix</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>=</operator> <name>in_ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <name>out_ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_ch</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>out_ch</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>matrix_cmp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|</operator> <name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|</operator>

<name><name>matrix_cmp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|</operator> <name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>|</operator>

<operator>(</operator><name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>matrix_cmp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>matrix_cmp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix</name></name> <operator>=</operator> <name>ac3_downmix_5_to_2_symmetric_c</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>in_ch</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <name>out_ch</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>==</operator> <name><name>matrix_cmp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix</name></name> <operator>=</operator> <name>ac3_downmix_5_to_1_symmetric_c</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_ac3dsp_set_downmix_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>downmix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>downmix</name></name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ac3_downmix_c</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>out_ch</name></expr></argument>, <argument><expr><name>in_ch</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_ac3dsp_init</name><parameter_list>(<parameter><decl><type><name>AC3DSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bit_exact</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_exponent_min</name></name> <operator>=</operator> <name>ac3_exponent_min_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_max_msb_abs_int16</name></name> <operator>=</operator> <name>ac3_max_msb_abs_int16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_lshift_int16</name></name> <operator>=</operator> <name>ac3_lshift_int16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac3_rshift_int32</name></name> <operator>=</operator> <name>ac3_rshift_int32_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>float_to_fixed24</name></name> <operator>=</operator> <name>float_to_fixed24_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>bit_alloc_calc_bap</name></name> <operator>=</operator> <name>ac3_bit_alloc_calc_bap_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update_bap_counts</name></name> <operator>=</operator> <name>ac3_update_bap_counts_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compute_mantissa_size</name></name> <operator>=</operator> <name>ac3_compute_mantissa_size_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>extract_exponents</name></name> <operator>=</operator> <name>ac3_extract_exponents_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sum_square_butterfly_int32</name></name> <operator>=</operator> <name>ac3_sum_square_butterfly_int32_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sum_square_butterfly_float</name></name> <operator>=</operator> <name>ac3_sum_square_butterfly_float_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>downmix_fixed</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_window_int16</name></name> <operator>=</operator> <name>apply_window_int16_c</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_ac3dsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_exact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_ac3dsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_exact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_MIPS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_ac3dsp_init_mips</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>bit_exact</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
