<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\libtheoraenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/base64.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;theora/theoraenc.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TheoraContext</name> <block>{

<decl_stmt><decl><type><name>th_enc_ctx</name> <modifier>*</modifier></type><name>t_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>stats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stats_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stats_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_hshift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_vshift</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keyframe_mask</name></decl>;</decl_stmt>

}</block></struct></type> <name>TheoraContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>concatenate_packet</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name><modifier>*</modifier></type> <name>offset</name></decl></parameter>,

<parameter><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avc_context</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ogg_packet</name><modifier>*</modifier></type> <name>packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>newsize</name> <init>= <expr><name><name>avc_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>AVERROR_INVALIDDATA</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"ogg_packet has negative size"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <literal type="number">0xffff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"ogg_packet is larger than 65535 bytes"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>newsize</name> <operator>&lt;</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"extradata_size would overflow"</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>av_reallocp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avc_context</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>newsize</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avc_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"av_realloc failed"</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>message</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"concatenate_packet failed: %s\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avc_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB16</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>offset</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>offset</name><operator>)</operator> <operator>+=</operator> <name><name>packet</name><operator>-&gt;</operator><name>bytes</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_stats</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>eos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TH_ENCCTL_2PASS_OUT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>TheoraContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>th_encode_ctl</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>, <argument><expr><name>TH_ENCCTL_2PASS_OUT</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error getting first pass stats\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>eos</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><call><name>av_fast_realloc</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name> <operator>+</operator> <name>bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b64_size</name> <init>= <expr><call><name>AV_BASE64_SIZE</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>b64_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_base64_encode</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>, <argument><expr><name>b64_size</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"libtheora too old to support 2pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSUP</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>submit_stats</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TH_ENCCTL_2PASS_IN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>TheoraContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>stats</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No statsfile for second pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">3</literal><operator>/</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>stats</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name> <operator>=</operator> <call><name>av_base64_decode</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>stats_in</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytes</name> <operator>=</operator> <call><name>th_encode_ctl</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>, <argument><expr><name>TH_ENCCTL_2PASS_IN</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>stats_size</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error submitting stats\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>stats_offset</name></name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"libtheora too old to support 2pass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSUP</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avc_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>th_info</name></type> <name>t_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>th_comment</name></type> <name>t_comment</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>o_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TheoraContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avc_context</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>gop_size</name> <init>= <expr><name><name>avc_context</name><operator>-&gt;</operator><name>gop_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>th_info_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>frame_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>frame_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>pic_width</name></name> <operator>=</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>pic_height</name></name> <operator>=</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>pic_x</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>pic_y</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>fps_numerator</name></name> <operator>=</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>fps_denominator</name></name> <operator>=</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>aspect_numerator</name></name> <operator>=</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>aspect_denominator</name></name> <operator>=</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>aspect_numerator</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>aspect_denominator</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <name>AVCOL_PRI_BT470M</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>colorspace</name></name> <operator>=</operator> <name>TH_CS_ITU_REC_470M</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>==</operator> <name>AVCOL_PRI_BT470BG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>colorspace</name></name> <operator>=</operator> <name>TH_CS_ITU_REC_470BG</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>colorspace</name></name> <operator>=</operator> <name>TH_CS_UNSPECIFIED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV420P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>pixel_fmt</name></name> <operator>=</operator> <name>TH_PF_420</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV422P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>pixel_fmt</name></name> <operator>=</operator> <name>TH_PF_422</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_YUV444P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>pixel_fmt</name></name> <operator>=</operator> <name>TH_PF_444</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported pix_fmt\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>uv_hshift</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>uv_vshift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>quality</name></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>/</operator> <operator>(</operator><name>float</name><operator>)</operator><name>FF_QP2LAMBDA</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">6.3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>target_bitrate</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>target_bitrate</name></name> <operator>=</operator> <name><name>avc_context</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_info</name><operator>.</operator><name>quality</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name> <operator>=</operator> <call><name>th_encode_alloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"theora_encode_init failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>keyframe_mask</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>t_info</name><operator>.</operator><name>keyframe_granule_shift</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>th_info_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>th_encode_ctl</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>, <argument><expr><name>TH_ENCCTL_SET_KEYFRAME_FREQUENCY_FORCE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>gop_size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>gop_size</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting GOP size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_stats</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>submit_stats</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>th_comment_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>th_encode_flushheader</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t_comment</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_packet</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>concatenate_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><name>avc_context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_packet</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<expr_stmt><expr><call><name>th_comment_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>t_comment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avc_context</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>th_ycbcr_buffer</name></type> <name>t_yuv_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TheoraContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avc_context</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ogg_packet</name></type> <name>o_packet</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>th_encode_packetout</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_stats</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>t_yuv_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>uv_hshift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_yuv_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avc_context</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <operator>(</operator><name>i</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>uv_vshift</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_yuv_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stride</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t_yuv_buffer</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS2</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>submit_stats</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>th_encode_ycbcr_in</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>, <argument><expr><name>t_yuv_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>message</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"differing frame sizes"</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TH_EINVAL</name></expr>:</case>

<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"encoder is not ready or is finished"</literal></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>message</name> <operator>=</operator> <literal type="string">"unknown reason"</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"theora_encode_YUVin failed (%s) [%d]\n"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avc_context</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_PASS1</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_stats</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>th_encode_packetout</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>o_packet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"theora_encode_packetout failed [%d]\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avc_context</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>, <argument><expr><name><name>o_packet</name><operator>.</operator><name>bytes</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>o_packet</name><operator>.</operator><name>packet</name></name></expr></argument>, <argument><expr><name><name>o_packet</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CODED_FRAME</name></expr></cpp:if>

<decl_stmt><decl><type><name>FF_DISABLE_DEPRECATION_WARNINGS</name></type>

<name><name>avc_context</name><operator>-&gt;</operator><name>coded_frame</name><operator>-&gt;</operator><name>key_frame</name></name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>o_packet</name><operator>.</operator><name>granulepos</name></name> <operator>&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>keyframe_mask</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<macro><name>FF_ENABLE_DEPRECATION_WARNINGS</name></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>o_packet</name><operator>.</operator><name>granulepos</name></name> <operator>&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>keyframe_mask</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>avc_context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>TheoraContext</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>avc_context</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>th_encode_free</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>t_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avc_context</name><operator>-&gt;</operator><name>stats_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avc_context</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avc_context</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_libtheora_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"libtheora"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"libtheora Theora"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_THEORA</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TheoraContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>encode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>encode_close</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>encode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name></expr>, 

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator><block>{

<expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AV_PIX_FMT_YUV422P</name></expr>, <expr><name>AV_PIX_FMT_YUV444P</name></expr>, <expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"libtheora"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
