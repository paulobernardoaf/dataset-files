

























#include "libavutil/channel_layout.h"
#include "libavutil/common.h"
#include "libavutil/float_dsp.h"
#include "libavutil/lfg.h"

#include "avcodec.h"
#include "lsp.h"
#include "celp_filters.h"
#include "celp_math.h"
#include "acelp_filters.h"
#include "acelp_vectors.h"
#include "acelp_pitch_delay.h"
#include "internal.h"

#define AMR_USE_16BIT_TABLES
#include "amr.h"

#include "amrwbdata.h"
#include "mips/amrwbdec_mips.h"

typedef struct AMRWBContext {
AMRWBFrame frame; 
enum Mode fr_cur_mode; 
uint8_t fr_quality; 
float isf_cur[LP_ORDER]; 
float isf_q_past[LP_ORDER]; 
float isf_past_final[LP_ORDER]; 
double isp[4][LP_ORDER]; 
double isp_sub4_past[LP_ORDER]; 

float lp_coef[4][LP_ORDER]; 

uint8_t base_pitch_lag; 
uint8_t pitch_lag_int; 

float excitation_buf[AMRWB_P_DELAY_MAX + LP_ORDER + 2 + AMRWB_SFR_SIZE]; 
float *excitation; 

float pitch_vector[AMRWB_SFR_SIZE]; 
float fixed_vector[AMRWB_SFR_SIZE]; 

float prediction_error[4]; 
float pitch_gain[6]; 
float fixed_gain[2]; 

float tilt_coef; 

float prev_sparse_fixed_gain; 
uint8_t prev_ir_filter_nr; 
float prev_tr_gain; 

float samples_az[LP_ORDER + AMRWB_SFR_SIZE]; 
float samples_up[UPS_MEM_SIZE + AMRWB_SFR_SIZE]; 
float samples_hb[LP_ORDER_16k + AMRWB_SFR_SIZE_16k]; 

float hpf_31_mem[2], hpf_400_mem[2]; 
float demph_mem[1]; 
float bpf_6_7_mem[HB_FIR_SIZE]; 
float lpf_7_mem[HB_FIR_SIZE]; 

AVLFG prng; 
uint8_t first_frame; 
ACELPFContext acelpf_ctx; 
ACELPVContext acelpv_ctx; 
CELPFContext celpf_ctx; 
CELPMContext celpm_ctx; 

} AMRWBContext;

static av_cold int amrwb_decode_init(AVCodecContext *avctx)
{
AMRWBContext *ctx = avctx->priv_data;
int i;

if (avctx->channels > 1) {
avpriv_report_missing_feature(avctx, "multi-channel AMR");
return AVERROR_PATCHWELCOME;
}

avctx->channels = 1;
avctx->channel_layout = AV_CH_LAYOUT_MONO;
if (!avctx->sample_rate)
avctx->sample_rate = 16000;
avctx->sample_fmt = AV_SAMPLE_FMT_FLT;

av_lfg_init(&ctx->prng, 1);

ctx->excitation = &ctx->excitation_buf[AMRWB_P_DELAY_MAX + LP_ORDER + 1];
ctx->first_frame = 1;

for (i = 0; i < LP_ORDER; i++)
ctx->isf_past_final[i] = isf_init[i] * (1.0f / (1 << 15));

for (i = 0; i < 4; i++)
ctx->prediction_error[i] = MIN_ENERGY;

ff_acelp_filter_init(&ctx->acelpf_ctx);
ff_acelp_vectors_init(&ctx->acelpv_ctx);
ff_celp_filter_init(&ctx->celpf_ctx);
ff_celp_math_init(&ctx->celpm_ctx);

return 0;
}










static int decode_mime_header(AMRWBContext *ctx, const uint8_t *buf)
{

ctx->fr_cur_mode = buf[0] >> 3 & 0x0F;
ctx->fr_quality = (buf[0] & 0x4) == 0x4;

return 1;
}







static void decode_isf_indices_36b(uint16_t *ind, float *isf_q)
{
int i;

for (i = 0; i < 9; i++)
isf_q[i] = dico1_isf[ind[0]][i] * (1.0f / (1 << 15));

for (i = 0; i < 7; i++)
isf_q[i + 9] = dico2_isf[ind[1]][i] * (1.0f / (1 << 15));

for (i = 0; i < 5; i++)
isf_q[i] += dico21_isf_36b[ind[2]][i] * (1.0f / (1 << 15));

for (i = 0; i < 4; i++)
isf_q[i + 5] += dico22_isf_36b[ind[3]][i] * (1.0f / (1 << 15));

for (i = 0; i < 7; i++)
isf_q[i + 9] += dico23_isf_36b[ind[4]][i] * (1.0f / (1 << 15));
}







static void decode_isf_indices_46b(uint16_t *ind, float *isf_q)
{
int i;

for (i = 0; i < 9; i++)
isf_q[i] = dico1_isf[ind[0]][i] * (1.0f / (1 << 15));

for (i = 0; i < 7; i++)
isf_q[i + 9] = dico2_isf[ind[1]][i] * (1.0f / (1 << 15));

for (i = 0; i < 3; i++)
isf_q[i] += dico21_isf[ind[2]][i] * (1.0f / (1 << 15));

for (i = 0; i < 3; i++)
isf_q[i + 3] += dico22_isf[ind[3]][i] * (1.0f / (1 << 15));

for (i = 0; i < 3; i++)
isf_q[i + 6] += dico23_isf[ind[4]][i] * (1.0f / (1 << 15));

for (i = 0; i < 3; i++)
isf_q[i + 9] += dico24_isf[ind[5]][i] * (1.0f / (1 << 15));

for (i = 0; i < 4; i++)
isf_q[i + 12] += dico25_isf[ind[6]][i] * (1.0f / (1 << 15));
}








static void isf_add_mean_and_past(float *isf_q, float *isf_past)
{
int i;
float tmp;

for (i = 0; i < LP_ORDER; i++) {
tmp = isf_q[i];
isf_q[i] += isf_mean[i] * (1.0f / (1 << 15));
isf_q[i] += PRED_FACTOR * isf_past[i];
isf_past[i] = tmp;
}
}








static void interpolate_isp(double isp_q[4][LP_ORDER], const double *isp4_past)
{
int i, k;

for (k = 0; k < 3; k++) {
float c = isfp_inter[k];
for (i = 0; i < LP_ORDER; i++)
isp_q[k][i] = (1.0 - c) * isp4_past[i] + c * isp_q[3][i];
}
}












static void decode_pitch_lag_high(int *lag_int, int *lag_frac, int pitch_index,
uint8_t *base_lag_int, int subframe)
{
if (subframe == 0 || subframe == 2) {
if (pitch_index < 376) {
*lag_int = (pitch_index + 137) >> 2;
*lag_frac = pitch_index - (*lag_int << 2) + 136;
} else if (pitch_index < 440) {
*lag_int = (pitch_index + 257 - 376) >> 1;
*lag_frac = (pitch_index - (*lag_int << 1) + 256 - 376) * 2;

} else {
*lag_int = pitch_index - 280;
*lag_frac = 0;
}

*base_lag_int = av_clip(*lag_int - 8 - (*lag_frac < 0),
AMRWB_P_DELAY_MIN, AMRWB_P_DELAY_MAX - 15);



} else {
*lag_int = (pitch_index + 1) >> 2;
*lag_frac = pitch_index - (*lag_int << 2);
*lag_int += *base_lag_int;
}
}






static void decode_pitch_lag_low(int *lag_int, int *lag_frac, int pitch_index,
uint8_t *base_lag_int, int subframe, enum Mode mode)
{
if (subframe == 0 || (subframe == 2 && mode != MODE_6k60)) {
if (pitch_index < 116) {
*lag_int = (pitch_index + 69) >> 1;
*lag_frac = (pitch_index - (*lag_int << 1) + 68) * 2;
} else {
*lag_int = pitch_index - 24;
*lag_frac = 0;
}

*base_lag_int = av_clip(*lag_int - 8 - (*lag_frac < 0),
AMRWB_P_DELAY_MIN, AMRWB_P_DELAY_MAX - 15);
} else {
*lag_int = (pitch_index + 1) >> 1;
*lag_frac = (pitch_index - (*lag_int << 1)) * 2;
*lag_int += *base_lag_int;
}
}









static void decode_pitch_vector(AMRWBContext *ctx,
const AMRWBSubFrame *amr_subframe,
const int subframe)
{
int pitch_lag_int, pitch_lag_frac;
int i;
float *exc = ctx->excitation;
enum Mode mode = ctx->fr_cur_mode;

if (mode <= MODE_8k85) {
decode_pitch_lag_low(&pitch_lag_int, &pitch_lag_frac, amr_subframe->adap,
&ctx->base_pitch_lag, subframe, mode);
} else
decode_pitch_lag_high(&pitch_lag_int, &pitch_lag_frac, amr_subframe->adap,
&ctx->base_pitch_lag, subframe);

ctx->pitch_lag_int = pitch_lag_int;
pitch_lag_int += pitch_lag_frac > 0;



ctx->acelpf_ctx.acelp_interpolatef(exc,
exc + 1 - pitch_lag_int,
ac_inter, 4,
pitch_lag_frac + (pitch_lag_frac > 0 ? 0 : 4),
LP_ORDER, AMRWB_SFR_SIZE + 1);



if (amr_subframe->ltp) {
memcpy(ctx->pitch_vector, exc, AMRWB_SFR_SIZE * sizeof(float));
} else {
for (i = 0; i < AMRWB_SFR_SIZE; i++)
ctx->pitch_vector[i] = 0.18 * exc[i - 1] + 0.64 * exc[i] +
0.18 * exc[i + 1];
memcpy(exc, ctx->pitch_vector, AMRWB_SFR_SIZE * sizeof(float));
}
}


#define BIT_STR(x,lsb,len) av_mod_uintp2((x) >> (lsb), (len))


#define BIT_POS(x, p) (((x) >> (p)) & 1)














static inline void decode_1p_track(int *out, int code, int m, int off)
{
int pos = BIT_STR(code, 0, m) + off; 

out[0] = BIT_POS(code, m) ? -pos : pos;
}

static inline void decode_2p_track(int *out, int code, int m, int off) 
{
int pos0 = BIT_STR(code, m, m) + off;
int pos1 = BIT_STR(code, 0, m) + off;

out[0] = BIT_POS(code, 2*m) ? -pos0 : pos0;
out[1] = BIT_POS(code, 2*m) ? -pos1 : pos1;
out[1] = pos0 > pos1 ? -out[1] : out[1];
}

static void decode_3p_track(int *out, int code, int m, int off) 
{
int half_2p = BIT_POS(code, 2*m - 1) << (m - 1);

decode_2p_track(out, BIT_STR(code, 0, 2*m - 1),
m - 1, off + half_2p);
decode_1p_track(out + 2, BIT_STR(code, 2*m, m + 1), m, off);
}

static void decode_4p_track(int *out, int code, int m, int off) 
{
int half_4p, subhalf_2p;
int b_offset = 1 << (m - 1);

switch (BIT_STR(code, 4*m - 2, 2)) { 
case 0: 
half_4p = BIT_POS(code, 4*m - 3) << (m - 1); 
subhalf_2p = BIT_POS(code, 2*m - 3) << (m - 2);

decode_2p_track(out, BIT_STR(code, 0, 2*m - 3),
m - 2, off + half_4p + subhalf_2p);
decode_2p_track(out + 2, BIT_STR(code, 2*m - 2, 2*m - 1),
m - 1, off + half_4p);
break;
case 1: 
decode_1p_track(out, BIT_STR(code, 3*m - 2, m),
m - 1, off);
decode_3p_track(out + 1, BIT_STR(code, 0, 3*m - 2),
m - 1, off + b_offset);
break;
case 2: 
decode_2p_track(out, BIT_STR(code, 2*m - 1, 2*m - 1),
m - 1, off);
decode_2p_track(out + 2, BIT_STR(code, 0, 2*m - 1),
m - 1, off + b_offset);
break;
case 3: 
decode_3p_track(out, BIT_STR(code, m, 3*m - 2),
m - 1, off);
decode_1p_track(out + 3, BIT_STR(code, 0, m),
m - 1, off + b_offset);
break;
}
}

static void decode_5p_track(int *out, int code, int m, int off) 
{
int half_3p = BIT_POS(code, 5*m - 1) << (m - 1);

decode_3p_track(out, BIT_STR(code, 2*m + 1, 3*m - 2),
m - 1, off + half_3p);

decode_2p_track(out + 3, BIT_STR(code, 0, 2*m + 1), m, off);
}

static void decode_6p_track(int *out, int code, int m, int off) 
{
int b_offset = 1 << (m - 1);

int half_more = BIT_POS(code, 6*m - 5) << (m - 1);
int half_other = b_offset - half_more;

switch (BIT_STR(code, 6*m - 4, 2)) { 
case 0: 
decode_1p_track(out, BIT_STR(code, 0, m),
m - 1, off + half_more);
decode_5p_track(out + 1, BIT_STR(code, m, 5*m - 5),
m - 1, off + half_more);
break;
case 1: 
decode_1p_track(out, BIT_STR(code, 0, m),
m - 1, off + half_other);
decode_5p_track(out + 1, BIT_STR(code, m, 5*m - 5),
m - 1, off + half_more);
break;
case 2: 
decode_2p_track(out, BIT_STR(code, 0, 2*m - 1),
m - 1, off + half_other);
decode_4p_track(out + 2, BIT_STR(code, 2*m - 1, 4*m - 4),
m - 1, off + half_more);
break;
case 3: 
decode_3p_track(out, BIT_STR(code, 3*m - 2, 3*m - 2),
m - 1, off);
decode_3p_track(out + 3, BIT_STR(code, 0, 3*m - 2),
m - 1, off + b_offset);
break;
}
}










static void decode_fixed_vector(float *fixed_vector, const uint16_t *pulse_hi,
const uint16_t *pulse_lo, const enum Mode mode)
{


int sig_pos[4][6];
int spacing = (mode == MODE_6k60) ? 2 : 4;
int i, j;

switch (mode) {
case MODE_6k60:
for (i = 0; i < 2; i++)
decode_1p_track(sig_pos[i], pulse_lo[i], 5, 1);
break;
case MODE_8k85:
for (i = 0; i < 4; i++)
decode_1p_track(sig_pos[i], pulse_lo[i], 4, 1);
break;
case MODE_12k65:
for (i = 0; i < 4; i++)
decode_2p_track(sig_pos[i], pulse_lo[i], 4, 1);
break;
case MODE_14k25:
for (i = 0; i < 2; i++)
decode_3p_track(sig_pos[i], pulse_lo[i], 4, 1);
for (i = 2; i < 4; i++)
decode_2p_track(sig_pos[i], pulse_lo[i], 4, 1);
break;
case MODE_15k85:
for (i = 0; i < 4; i++)
decode_3p_track(sig_pos[i], pulse_lo[i], 4, 1);
break;
case MODE_18k25:
for (i = 0; i < 4; i++)
decode_4p_track(sig_pos[i], (int) pulse_lo[i] +
((int) pulse_hi[i] << 14), 4, 1);
break;
case MODE_19k85:
for (i = 0; i < 2; i++)
decode_5p_track(sig_pos[i], (int) pulse_lo[i] +
((int) pulse_hi[i] << 10), 4, 1);
for (i = 2; i < 4; i++)
decode_4p_track(sig_pos[i], (int) pulse_lo[i] +
((int) pulse_hi[i] << 14), 4, 1);
break;
case MODE_23k05:
case MODE_23k85:
for (i = 0; i < 4; i++)
decode_6p_track(sig_pos[i], (int) pulse_lo[i] +
((int) pulse_hi[i] << 11), 4, 1);
break;
}

memset(fixed_vector, 0, sizeof(float) * AMRWB_SFR_SIZE);

for (i = 0; i < 4; i++)
for (j = 0; j < pulses_nb_per_mode_tr[mode][i]; j++) {
int pos = (FFABS(sig_pos[i][j]) - 1) * spacing + i;

fixed_vector[pos] += sig_pos[i][j] < 0 ? -1.0 : 1.0;
}
}









static void decode_gains(const uint8_t vq_gain, const enum Mode mode,
float *fixed_gain_factor, float *pitch_gain)
{
const int16_t *gains = (mode <= MODE_8k85 ? qua_gain_6b[vq_gain] :
qua_gain_7b[vq_gain]);

*pitch_gain = gains[0] * (1.0f / (1 << 14));
*fixed_gain_factor = gains[1] * (1.0f / (1 << 11));
}









static void pitch_sharpening(AMRWBContext *ctx, float *fixed_vector)
{
int i;


for (i = AMRWB_SFR_SIZE - 1; i != 0; i--)
fixed_vector[i] -= fixed_vector[i - 1] * ctx->tilt_coef;


for (i = ctx->pitch_lag_int; i < AMRWB_SFR_SIZE; i++)
fixed_vector[i] += fixed_vector[i - ctx->pitch_lag_int] * 0.85;
}










static float voice_factor(float *p_vector, float p_gain,
float *f_vector, float f_gain,
CELPMContext *ctx)
{
double p_ener = (double) ctx->dot_productf(p_vector, p_vector,
AMRWB_SFR_SIZE) *
p_gain * p_gain;
double f_ener = (double) ctx->dot_productf(f_vector, f_vector,
AMRWB_SFR_SIZE) *
f_gain * f_gain;

return (p_ener - f_ener) / (p_ener + f_ener + 0.01);
}











static float *anti_sparseness(AMRWBContext *ctx,
float *fixed_vector, float *buf)
{
int ir_filter_nr;

if (ctx->fr_cur_mode > MODE_8k85) 
return fixed_vector;

if (ctx->pitch_gain[0] < 0.6) {
ir_filter_nr = 0; 
} else if (ctx->pitch_gain[0] < 0.9) {
ir_filter_nr = 1; 
} else
ir_filter_nr = 2; 


if (ctx->fixed_gain[0] > 3.0 * ctx->fixed_gain[1]) {
if (ir_filter_nr < 2)
ir_filter_nr++;
} else {
int i, count = 0;

for (i = 0; i < 6; i++)
if (ctx->pitch_gain[i] < 0.6)
count++;

if (count > 2)
ir_filter_nr = 0;

if (ir_filter_nr > ctx->prev_ir_filter_nr + 1)
ir_filter_nr--;
}


ctx->prev_ir_filter_nr = ir_filter_nr;

ir_filter_nr += (ctx->fr_cur_mode == MODE_8k85);

if (ir_filter_nr < 2) {
int i;
const float *coef = ir_filters_lookup[ir_filter_nr];








memset(buf, 0, sizeof(float) * AMRWB_SFR_SIZE);
for (i = 0; i < AMRWB_SFR_SIZE; i++)
if (fixed_vector[i])
ff_celp_circ_addf(buf, buf, coef, i, fixed_vector[i],
AMRWB_SFR_SIZE);
fixed_vector = buf;
}

return fixed_vector;
}





static float stability_factor(const float *isf, const float *isf_past)
{
int i;
float acc = 0.0;

for (i = 0; i < LP_ORDER - 1; i++)
acc += (isf[i] - isf_past[i]) * (isf[i] - isf_past[i]);



return FFMAX(0.0, 1.25 - acc * 0.8 * 512);
}












static float noise_enhancer(float fixed_gain, float *prev_tr_gain,
float voice_fac, float stab_fac)
{
float sm_fac = 0.5 * (1 - voice_fac) * stab_fac;
float g0;




if (fixed_gain < *prev_tr_gain) {
g0 = FFMIN(*prev_tr_gain, fixed_gain + fixed_gain *
(6226 * (1.0f / (1 << 15)))); 
} else
g0 = FFMAX(*prev_tr_gain, fixed_gain *
(27536 * (1.0f / (1 << 15)))); 

*prev_tr_gain = g0; 

return sm_fac * g0 + (1 - sm_fac) * fixed_gain;
}







static void pitch_enhancer(float *fixed_vector, float voice_fac)
{
int i;
float cpe = 0.125 * (1 + voice_fac);
float last = fixed_vector[0]; 

fixed_vector[0] -= cpe * fixed_vector[1];

for (i = 1; i < AMRWB_SFR_SIZE - 1; i++) {
float cur = fixed_vector[i];

fixed_vector[i] -= cpe * (last + fixed_vector[i + 1]);
last = cur;
}

fixed_vector[AMRWB_SFR_SIZE - 1] -= cpe * last;
}











static void synthesis(AMRWBContext *ctx, float *lpc, float *excitation,
float fixed_gain, const float *fixed_vector,
float *samples)
{
ctx->acelpv_ctx.weighted_vector_sumf(excitation, ctx->pitch_vector, fixed_vector,
ctx->pitch_gain[0], fixed_gain, AMRWB_SFR_SIZE);


if (ctx->pitch_gain[0] > 0.5 && ctx->fr_cur_mode <= MODE_8k85) {
int i;
float energy = ctx->celpm_ctx.dot_productf(excitation, excitation,
AMRWB_SFR_SIZE);



float pitch_factor = 0.25 * ctx->pitch_gain[0] * ctx->pitch_gain[0];

for (i = 0; i < AMRWB_SFR_SIZE; i++)
excitation[i] += pitch_factor * ctx->pitch_vector[i];

ff_scale_vector_to_given_sum_of_squares(excitation, excitation,
energy, AMRWB_SFR_SIZE);
}

ctx->celpf_ctx.celp_lp_synthesis_filterf(samples, lpc, excitation,
AMRWB_SFR_SIZE, LP_ORDER);
}










static void de_emphasis(float *out, float *in, float m, float mem[1])
{
int i;

out[0] = in[0] + m * mem[0];

for (i = 1; i < AMRWB_SFR_SIZE; i++)
out[i] = in[i] + out[i - 1] * m;

mem[0] = out[AMRWB_SFR_SIZE - 1];
}










static void upsample_5_4(float *out, const float *in, int o_size, CELPMContext *ctx)
{
const float *in0 = in - UPS_FIR_SIZE + 1;
int i, j, k;
int int_part = 0, frac_part;

i = 0;
for (j = 0; j < o_size / 5; j++) {
out[i] = in[int_part];
frac_part = 4;
i++;

for (k = 1; k < 5; k++) {
out[i] = ctx->dot_productf(in0 + int_part,
upsample_fir[4 - frac_part],
UPS_MEM_SIZE);
int_part++;
frac_part--;
i++;
}
}
}










static float find_hb_gain(AMRWBContext *ctx, const float *synth,
uint16_t hb_idx, uint8_t vad)
{
int wsp = (vad > 0);
float tilt;
float tmp;

if (ctx->fr_cur_mode == MODE_23k85)
return qua_hb_gain[hb_idx] * (1.0f / (1 << 14));

tmp = ctx->celpm_ctx.dot_productf(synth, synth + 1, AMRWB_SFR_SIZE - 1);

if (tmp > 0) {
tilt = tmp / ctx->celpm_ctx.dot_productf(synth, synth, AMRWB_SFR_SIZE);
} else
tilt = 0;


return av_clipf((1.0 - tilt) * (1.25 - 0.25 * wsp), 0.1, 1.0);
}










static void scaled_hb_excitation(AMRWBContext *ctx, float *hb_exc,
const float *synth_exc, float hb_gain)
{
int i;
float energy = ctx->celpm_ctx.dot_productf(synth_exc, synth_exc,
AMRWB_SFR_SIZE);


for (i = 0; i < AMRWB_SFR_SIZE_16k; i++)
hb_exc[i] = 32768.0 - (uint16_t) av_lfg_get(&ctx->prng);

ff_scale_vector_to_given_sum_of_squares(hb_exc, hb_exc,
energy * hb_gain * hb_gain,
AMRWB_SFR_SIZE_16k);
}




static float auto_correlation(float *diff_isf, float mean, int lag)
{
int i;
float sum = 0.0;

for (i = 7; i < LP_ORDER - 2; i++) {
float prod = (diff_isf[i] - mean) * (diff_isf[i - lag] - mean);
sum += prod * prod;
}
return sum;
}








static void extrapolate_isf(float isf[LP_ORDER_16k])
{
float diff_isf[LP_ORDER - 2], diff_mean;
float corr_lag[3];
float est, scale;
int i, j, i_max_corr;

isf[LP_ORDER_16k - 1] = isf[LP_ORDER - 1];


for (i = 0; i < LP_ORDER - 2; i++)
diff_isf[i] = isf[i + 1] - isf[i];

diff_mean = 0.0;
for (i = 2; i < LP_ORDER - 2; i++)
diff_mean += diff_isf[i] * (1.0f / (LP_ORDER - 4));


i_max_corr = 0;
for (i = 0; i < 3; i++) {
corr_lag[i] = auto_correlation(diff_isf, diff_mean, i + 2);

if (corr_lag[i] > corr_lag[i_max_corr])
i_max_corr = i;
}
i_max_corr++;

for (i = LP_ORDER - 1; i < LP_ORDER_16k - 1; i++)
isf[i] = isf[i - 1] + isf[i - 1 - i_max_corr]
- isf[i - 2 - i_max_corr];


est = 7965 + (isf[2] - isf[3] - isf[4]) / 6.0;
scale = 0.5 * (FFMIN(est, 7600) - isf[LP_ORDER - 2]) /
(isf[LP_ORDER_16k - 2] - isf[LP_ORDER - 2]);

for (i = LP_ORDER - 1, j = 0; i < LP_ORDER_16k - 1; i++, j++)
diff_isf[j] = scale * (isf[i] - isf[i - 1]);


for (i = 1; i < LP_ORDER_16k - LP_ORDER; i++)
if (diff_isf[i] + diff_isf[i - 1] < 5.0) {
if (diff_isf[i] > diff_isf[i - 1]) {
diff_isf[i - 1] = 5.0 - diff_isf[i];
} else
diff_isf[i] = 5.0 - diff_isf[i - 1];
}

for (i = LP_ORDER - 1, j = 0; i < LP_ORDER_16k - 1; i++, j++)
isf[i] = isf[i - 1] + diff_isf[j] * (1.0f / (1 << 15));


for (i = 0; i < LP_ORDER_16k - 1; i++)
isf[i] *= 0.8;
}










static void lpc_weighting(float *out, const float *lpc, float gamma, int size)
{
int i;
float fac = gamma;

for (i = 0; i < size; i++) {
out[i] = lpc[i] * fac;
fac *= gamma;
}
}












static void hb_synthesis(AMRWBContext *ctx, int subframe, float *samples,
const float *exc, const float *isf, const float *isf_past)
{
float hb_lpc[LP_ORDER_16k];
enum Mode mode = ctx->fr_cur_mode;

if (mode == MODE_6k60) {
float e_isf[LP_ORDER_16k]; 
double e_isp[LP_ORDER_16k];

ctx->acelpv_ctx.weighted_vector_sumf(e_isf, isf_past, isf, isfp_inter[subframe],
1.0 - isfp_inter[subframe], LP_ORDER);

extrapolate_isf(e_isf);

e_isf[LP_ORDER_16k - 1] *= 2.0;
ff_acelp_lsf2lspd(e_isp, e_isf, LP_ORDER_16k);
ff_amrwb_lsp2lpc(e_isp, hb_lpc, LP_ORDER_16k);

lpc_weighting(hb_lpc, hb_lpc, 0.9, LP_ORDER_16k);
} else {
lpc_weighting(hb_lpc, ctx->lp_coef[subframe], 0.6, LP_ORDER);
}

ctx->celpf_ctx.celp_lp_synthesis_filterf(samples, hb_lpc, exc, AMRWB_SFR_SIZE_16k,
(mode == MODE_6k60) ? LP_ORDER_16k : LP_ORDER);
}













#ifndef hb_fir_filter
static void hb_fir_filter(float *out, const float fir_coef[HB_FIR_SIZE + 1],
float mem[HB_FIR_SIZE], const float *in)
{
int i, j;
float data[AMRWB_SFR_SIZE_16k + HB_FIR_SIZE]; 

memcpy(data, mem, HB_FIR_SIZE * sizeof(float));
memcpy(data + HB_FIR_SIZE, in, AMRWB_SFR_SIZE_16k * sizeof(float));

for (i = 0; i < AMRWB_SFR_SIZE_16k; i++) {
out[i] = 0.0;
for (j = 0; j <= HB_FIR_SIZE; j++)
out[i] += data[i + j] * fir_coef[j];
}

memcpy(mem, data + AMRWB_SFR_SIZE_16k, HB_FIR_SIZE * sizeof(float));
}
#endif 




static void update_sub_state(AMRWBContext *ctx)
{
memmove(&ctx->excitation_buf[0], &ctx->excitation_buf[AMRWB_SFR_SIZE],
(AMRWB_P_DELAY_MAX + LP_ORDER + 1) * sizeof(float));

memmove(&ctx->pitch_gain[1], &ctx->pitch_gain[0], 5 * sizeof(float));
memmove(&ctx->fixed_gain[1], &ctx->fixed_gain[0], 1 * sizeof(float));

memmove(&ctx->samples_az[0], &ctx->samples_az[AMRWB_SFR_SIZE],
LP_ORDER * sizeof(float));
memmove(&ctx->samples_up[0], &ctx->samples_up[AMRWB_SFR_SIZE],
UPS_MEM_SIZE * sizeof(float));
memmove(&ctx->samples_hb[0], &ctx->samples_hb[AMRWB_SFR_SIZE_16k],
LP_ORDER_16k * sizeof(float));
}

static int amrwb_decode_frame(AVCodecContext *avctx, void *data,
int *got_frame_ptr, AVPacket *avpkt)
{
AMRWBContext *ctx = avctx->priv_data;
AVFrame *frame = data;
AMRWBFrame *cf = &ctx->frame;
const uint8_t *buf = avpkt->data;
int buf_size = avpkt->size;
int expected_fr_size, header_size;
float *buf_out;
float spare_vector[AMRWB_SFR_SIZE]; 
float fixed_gain_factor; 
float *synth_fixed_vector; 
float synth_fixed_gain; 
float voice_fac, stab_fac; 
float synth_exc[AMRWB_SFR_SIZE]; 
float hb_exc[AMRWB_SFR_SIZE_16k]; 
float hb_samples[AMRWB_SFR_SIZE_16k]; 
float hb_gain;
int sub, i, ret;


frame->nb_samples = 4 * AMRWB_SFR_SIZE_16k;
if ((ret = ff_get_buffer(avctx, frame, 0)) < 0)
return ret;
buf_out = (float *)frame->data[0];

header_size = decode_mime_header(ctx, buf);
if (ctx->fr_cur_mode > MODE_SID) {
av_log(avctx, AV_LOG_ERROR,
"Invalid mode %d\n", ctx->fr_cur_mode);
return AVERROR_INVALIDDATA;
}
expected_fr_size = ((cf_sizes_wb[ctx->fr_cur_mode] + 7) >> 3) + 1;

if (buf_size < expected_fr_size) {
av_log(avctx, AV_LOG_ERROR,
"Frame too small (%d bytes). Truncated file?\n", buf_size);
*got_frame_ptr = 0;
return AVERROR_INVALIDDATA;
}

if (!ctx->fr_quality || ctx->fr_cur_mode > MODE_SID)
av_log(avctx, AV_LOG_ERROR, "Encountered a bad or corrupted frame\n");

if (ctx->fr_cur_mode == MODE_SID) { 
avpriv_request_sample(avctx, "SID mode");
return AVERROR_PATCHWELCOME;
}

ff_amr_bit_reorder((uint16_t *) &ctx->frame, sizeof(AMRWBFrame),
buf + header_size, amr_bit_orderings_by_mode[ctx->fr_cur_mode]);


if (ctx->fr_cur_mode == MODE_6k60) {
decode_isf_indices_36b(cf->isp_id, ctx->isf_cur);
} else {
decode_isf_indices_46b(cf->isp_id, ctx->isf_cur);
}

isf_add_mean_and_past(ctx->isf_cur, ctx->isf_q_past);
ff_set_min_dist_lsf(ctx->isf_cur, MIN_ISF_SPACING, LP_ORDER - 1);

stab_fac = stability_factor(ctx->isf_cur, ctx->isf_past_final);

ctx->isf_cur[LP_ORDER - 1] *= 2.0;
ff_acelp_lsf2lspd(ctx->isp[3], ctx->isf_cur, LP_ORDER);


if (ctx->first_frame) {
ctx->first_frame = 0;
memcpy(ctx->isp_sub4_past, ctx->isp[3], LP_ORDER * sizeof(double));
}
interpolate_isp(ctx->isp, ctx->isp_sub4_past);

for (sub = 0; sub < 4; sub++)
ff_amrwb_lsp2lpc(ctx->isp[sub], ctx->lp_coef[sub], LP_ORDER);

for (sub = 0; sub < 4; sub++) {
const AMRWBSubFrame *cur_subframe = &cf->subframe[sub];
float *sub_buf = buf_out + sub * AMRWB_SFR_SIZE_16k;


decode_pitch_vector(ctx, cur_subframe, sub);

decode_fixed_vector(ctx->fixed_vector, cur_subframe->pul_ih,
cur_subframe->pul_il, ctx->fr_cur_mode);

pitch_sharpening(ctx, ctx->fixed_vector);

decode_gains(cur_subframe->vq_gain, ctx->fr_cur_mode,
&fixed_gain_factor, &ctx->pitch_gain[0]);

ctx->fixed_gain[0] =
ff_amr_set_fixed_gain(fixed_gain_factor,
ctx->celpm_ctx.dot_productf(ctx->fixed_vector,
ctx->fixed_vector,
AMRWB_SFR_SIZE) /
AMRWB_SFR_SIZE,
ctx->prediction_error,
ENERGY_MEAN, energy_pred_fac);


voice_fac = voice_factor(ctx->pitch_vector, ctx->pitch_gain[0],
ctx->fixed_vector, ctx->fixed_gain[0],
&ctx->celpm_ctx);
ctx->tilt_coef = voice_fac * 0.25 + 0.25;


for (i = 0; i < AMRWB_SFR_SIZE; i++) {
ctx->excitation[i] *= ctx->pitch_gain[0];
ctx->excitation[i] += ctx->fixed_gain[0] * ctx->fixed_vector[i];
ctx->excitation[i] = truncf(ctx->excitation[i]);
}


synth_fixed_gain = noise_enhancer(ctx->fixed_gain[0], &ctx->prev_tr_gain,
voice_fac, stab_fac);

synth_fixed_vector = anti_sparseness(ctx, ctx->fixed_vector,
spare_vector);

pitch_enhancer(synth_fixed_vector, voice_fac);

synthesis(ctx, ctx->lp_coef[sub], synth_exc, synth_fixed_gain,
synth_fixed_vector, &ctx->samples_az[LP_ORDER]);


de_emphasis(&ctx->samples_up[UPS_MEM_SIZE],
&ctx->samples_az[LP_ORDER], PREEMPH_FAC, ctx->demph_mem);

ctx->acelpf_ctx.acelp_apply_order_2_transfer_function(&ctx->samples_up[UPS_MEM_SIZE],
&ctx->samples_up[UPS_MEM_SIZE], hpf_zeros, hpf_31_poles,
hpf_31_gain, ctx->hpf_31_mem, AMRWB_SFR_SIZE);

upsample_5_4(sub_buf, &ctx->samples_up[UPS_FIR_SIZE],
AMRWB_SFR_SIZE_16k, &ctx->celpm_ctx);


ctx->acelpf_ctx.acelp_apply_order_2_transfer_function(hb_samples,
&ctx->samples_up[UPS_MEM_SIZE], hpf_zeros, hpf_400_poles,
hpf_400_gain, ctx->hpf_400_mem, AMRWB_SFR_SIZE);

hb_gain = find_hb_gain(ctx, hb_samples,
cur_subframe->hb_gain, cf->vad);

scaled_hb_excitation(ctx, hb_exc, synth_exc, hb_gain);

hb_synthesis(ctx, sub, &ctx->samples_hb[LP_ORDER_16k],
hb_exc, ctx->isf_cur, ctx->isf_past_final);


hb_fir_filter(hb_samples, bpf_6_7_coef, ctx->bpf_6_7_mem,
&ctx->samples_hb[LP_ORDER_16k]);

if (ctx->fr_cur_mode == MODE_23k85)
hb_fir_filter(hb_samples, lpf_7_coef, ctx->lpf_7_mem,
hb_samples);


for (i = 0; i < AMRWB_SFR_SIZE_16k; i++)
sub_buf[i] = (sub_buf[i] + hb_samples[i]) * (1.0f / (1 << 15));


update_sub_state(ctx);
}


memcpy(ctx->isp_sub4_past, ctx->isp[3], LP_ORDER * sizeof(ctx->isp[3][0]));
memcpy(ctx->isf_past_final, ctx->isf_cur, LP_ORDER * sizeof(float));

*got_frame_ptr = 1;

return expected_fr_size;
}

AVCodec ff_amrwb_decoder = {
.name = "amrwb",
.long_name = NULL_IF_CONFIG_SMALL("AMR-WB (Adaptive Multi-Rate WideBand)"),
.type = AVMEDIA_TYPE_AUDIO,
.id = AV_CODEC_ID_AMR_WB,
.priv_data_size = sizeof(AMRWBContext),
.init = amrwb_decode_init,
.decode = amrwb_decode_frame,
.capabilities = AV_CODEC_CAP_DR1,
.sample_fmts = (const enum AVSampleFormat[]){ AV_SAMPLE_FMT_FLT,
AV_SAMPLE_FMT_NONE },
};
