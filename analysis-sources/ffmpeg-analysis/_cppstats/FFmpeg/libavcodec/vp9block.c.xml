<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vp9block.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"videodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp56.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vp9dec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>setctx_2d</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>w</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<do>do <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v16</name> <init>= <expr><name>v</name> <operator>*</operator> <literal type="number">0x0101</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN16A</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>v16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="number">4</literal></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v32</name> <init>= <expr><name>v</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>v32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<break>break;</break>

</block_content>}</block>

<case>case <expr><literal type="number">8</literal></expr>:</case> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>v64</name> <init>= <expr><name>v</name> <operator>*</operator> <literal type="number">0x0101010101010101ULL</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64A</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>v64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v32</name> <init>= <expr><name>v</name> <operator>*</operator> <literal type="number">0x01010101</literal></expr></init></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>v32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><name>ptr</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>v32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<break>break;</break>

</block_content>}</block>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_mode</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>left_ctx</name><index>[<expr><name>N_BS_SIZES</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xf</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>above_ctx</name><index>[<expr><name>N_BS_SIZES</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x0</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0x8</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xc</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xe</literal></expr>, <expr><literal type="number">0xf</literal></expr>, <expr><literal type="number">0xf</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>max_tx_for_bl_bp</name><index>[<expr><name>N_BS_SIZES</name></expr>]</index></name> <init>= <expr><block>{

<expr><name>TX_32X32</name></expr>, <expr><name>TX_32X32</name></expr>, <expr><name>TX_32X32</name></expr>, <expr><name>TX_32X32</name></expr>, <expr><name>TX_16X16</name></expr>, <expr><name>TX_16X16</name></expr>,

<expr><name>TX_16X16</name></expr>, <expr><name>TX_8X8</name></expr>, <expr><name>TX_8X8</name></expr>, <expr><name>TX_8X8</name></expr>, <expr><name>TX_4X4</name></expr>, <expr><name>TX_4X4</name></expr>, <expr><name>TX_4X4</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row</name></name></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name></expr></init></decl>, <decl><type ref="prev"/><name>row7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row7</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>TxfmMode</name></name></type> <name>max_tx</name> <init>= <expr><name><name>max_tx_for_bl_bp</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bw4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>w4</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>bw4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bh4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>h4</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name></expr></argument>, <argument><expr><name>bh4</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>have_a</name> <init>= <expr><name>row</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>have_l</name> <init>= <expr><name>col</name> <operator>&gt;</operator> <name><name>td</name><operator>-&gt;</operator><name>tile_col_start</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vref</name></decl>, <decl><type ref="prev"/><name>filter_id</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <ternary><condition><expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>:

<expr><call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_segmentation_tree</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>prob</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>temporal</name></name> <operator>&amp;&amp;</operator>

<call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>pred_prob</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_segpred_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>+</operator>

<name><name>td</name><operator>-&gt;</operator><name>left_segpred_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>errorres</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name><operator>.</operator><name>segmentation_map</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>pred</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>refsegmap</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name><operator>.</operator><name>segmentation_map</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name><operator>.</operator><name>uses_2pass</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>REF_FRAME_SEGMAP</name></expr>]</index></name><operator>.</operator><name>tf</name></expr></argument>, <argument><expr><name>row</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h4</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx_base</name> <init>= <expr><operator>(</operator><name>y</name> <operator>+</operator> <name>row</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w4</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>pred</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>pred</name></expr></argument>, <argument><expr><name><name>refsegmap</name><index>[<expr><name>idx_base</name> <operator>+</operator> <name>x</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>pred</name> <operator>&lt;</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <name>pred</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_segpred_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_segpred_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_segmentation_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>prob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_segpred_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_segpred_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>update_map</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>setctx_2d</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>segmentation_map</name><index>[<expr><name>row</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>+</operator> <name>col</name></expr>]</index></name></expr></argument>,

<argument><expr><name>bw4</name></expr></argument>, <argument><expr><name>bh4</name></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>skip_enabled</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>left_skip_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>above_skip_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>skip</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>skip</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>skip</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>intra</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>ref_enabled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>intra</name></name> <operator>=</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>ref_val</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>have_a</name> <operator>&amp;&amp;</operator> <name>have_l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>+</operator> <name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name>have_a</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr> </then><else>:

<expr><ternary><condition><expr><name>have_l</name></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>*</operator> <name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>intra</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>intra</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>intra</name></name> <operator>=</operator> <operator>!</operator><name>bit</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name> <operator>||</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>skip</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name> <operator>==</operator> <name>TX_SWITCHABLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>have_a</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>above_skip_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr> ?</condition><then> <expr><name>max_tx</name></expr> </then><else>:

<expr><name><name>s</name><operator>-&gt;</operator><name>above_txfm_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>+</operator>

<operator>(</operator><ternary><condition><expr><name><name>td</name><operator>-&gt;</operator><name>left_skip_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr> ?</condition><then> <expr><name>max_tx</name></expr> </then><else>:

<expr><name><name>td</name><operator>-&gt;</operator><name>left_txfm_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr></else></ternary><operator>)</operator> <operator>&gt;</operator> <name>max_tx</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>above_skip_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:

<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_txfm_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>max_tx</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>td</name><operator>-&gt;</operator><name>left_skip_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>:

<expr><operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_txfm_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>*</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>max_tx</name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name>max_tx</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TX_32X32</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx32p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx32p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx32p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>tx32p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_16X16</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx16p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx16p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>tx16p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_8X8</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>tx8p</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>tx8p</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_4X4</name></expr>:</case>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <name>TX_4X4</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>max_tx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>txfmmode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_mode_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name><index>[<expr><operator>(</operator><name>row7</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&gt;</operator> <name>BS_8x8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>ff_vp9_default_kf_ymode_probs</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_8x4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>ff_vp9_default_kf_ymode_probs</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_4x8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>ff_vp9_default_kf_ymode_probs</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_8x4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>ff_vp9_default_kf_ymode_probs</name><index>[<expr><name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>a</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>ff_vp9_default_kf_ymode_probs</name><index>[<expr><operator>*</operator><name>a</name></expr>]</index><index>[<expr><operator>*</operator><name>l</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>uvmode</name></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>ff_vp9_default_kf_uvmode_probs</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&gt;</operator> <name>BS_8x8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_8x4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_4x8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_8x4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>y_mode</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>size_group</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sz</name> <init>= <expr><name><name>size_group</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>y_mode</name><index>[<expr><name>sz</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>y_mode</name><index>[<expr><name>sz</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>uvmode</name></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_intramode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>uv_mode</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>uv_mode</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvmode</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>inter_mode_ctx_lut</name><index>[<expr><literal type="number">14</literal></expr>]</index><index>[<expr><literal type="number">14</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>ref_enabled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>ref_val</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>ref_val</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>!=</operator> <name>PRED_SWITCHABLE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>comppredmode</name></name> <operator>==</operator> <name>PRED_COMPREF</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>have_a</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>||</operator>

<name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name><operator>)</operator> <operator>^</operator>

<operator>(</operator><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:

<expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>:

<expr><operator>(</operator><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>comp</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>comp</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>fix_idx</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>var_idx</name> <init>= <expr><operator>!</operator><name>fix_idx</name></expr></init></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>fix_idx</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>have_a</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>refl</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>refa</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>refl</name> <operator>==</operator> <name>refa</name> <operator>&amp;&amp;</operator> <name>refa</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>refa</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>&amp;&amp;</operator> <name>refl</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>refl</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>&amp;&amp;</operator> <name>refa</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>refa</name> <operator>==</operator> <name>refl</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>refa</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>refl</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>refl</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name>refa</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>refl</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name>refa</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>refa</name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<name>refl</name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>refl</name> <operator>==</operator> <name>refa</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>comp_ref</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><name>var_idx</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><name>bit</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>comp_ref</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bit</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>have_a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_l</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>||</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>||</operator>

<operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>||</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name><operator>)</operator> <operator>+</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>have_l</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>||</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>single_ref</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>single_ref</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bit</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_a</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator>

<literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_intra_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>above_comp_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>above_ref_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>have_l</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_intra_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>td</name><operator>-&gt;</operator><name>left_comp_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>fixcompref</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name><name>td</name><operator>-&gt;</operator><name>left_ref_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>bit</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>single_ref</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>single_ref</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bit</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <name>bit</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&lt;=</operator> <name>BS_8x8</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>enabled</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>skip_enabled</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>ZEROMV</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>off</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>inter_mode_ctx_lut</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_mode_ctx</name><index>[<expr><name>col</name> <operator>+</operator> <name><name>off</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index></name></expr>]</index></name></expr>]</index>

<index>[<expr><name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name><index>[<expr><name>row7</name> <operator>+</operator> <name><name>off</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_inter_mode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator>

<name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filtermode</name></name> <operator>==</operator> <name>FILTER_SWITCHABLE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>have_a</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>above_mode_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>&gt;=</operator> <name>NEARESTMV</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>have_l</name> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>&gt;=</operator> <name>NEARESTMV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>above_filter_ctx</name><index>[<expr><name>col</name></expr>]</index></name> <operator>==</operator> <name><name>td</name><operator>-&gt;</operator><name>left_filter_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr> ?</condition><then>

<expr><name><name>td</name><operator>-&gt;</operator><name>left_filter_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>above_filter_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>have_l</name> <operator>&amp;&amp;</operator> <name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name><index>[<expr><name>row7</name></expr>]</index></name> <operator>&gt;=</operator> <name>NEARESTMV</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>left_filter_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>filter_id</name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_filter_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>filter</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>filter</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name>filter_id</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name><name>ff_vp9_filter_lut</name><index>[<expr><name>filter_id</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filtermode</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&gt;</operator> <name>BS_8x8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>inter_mode_ctx_lut</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>above_mode_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr>]</index><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>left_mode_ctx</name><index>[<expr><name>row7</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_inter_mode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_fill_mv</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_8x4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_inter_mode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_fill_mv</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_4x8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_inter_mode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_fill_mv</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>!=</operator> <name>BS_8x4</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>vp8_rac_get_tree</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>ff_vp9_inter_mode_tree</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>p</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>mv_mode</name><index>[<expr><name>c</name></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp9_fill_mv</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_fill_mv</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>vref</name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>signbias</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>varcompref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_64BIT</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLAT_CTX</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (n) { case 1: var = val; break; case 2: AV_WN16A(&amp;var, val * 0x0101); break; case 4: AV_WN32A(&amp;var, val * 0x01010101); break; case 8: AV_WN64A(&amp;var, val * 0x0101010101010101ULL); break; case 16: { uint64_t v64 = val * 0x0101010101010101ULL; AV_WN64A( &amp;var, v64); AV_WN64A(&amp;((uint8_t *) &amp;var)[8], v64); break; } }</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLAT_CTX</name><parameter_list>(<parameter><type><name>var</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (n) { case 1: var = val; break; case 2: AV_WN16A(&amp;var, val * 0x0101); break; case 4: AV_WN32A(&amp;var, val * 0x01010101); break; case 8: { uint32_t v32 = val * 0x01010101; AV_WN32A( &amp;var, v32); AV_WN32A(&amp;((uint8_t *) &amp;var)[4], v32); break; } case 16: { uint32_t v32 = val * 0x01010101; AV_WN32A( &amp;var, v32); AV_WN32A(&amp;((uint8_t *) &amp;var)[4], v32); AV_WN32A(&amp;((uint8_t *) &amp;var)[8], v32); AV_WN32A(&amp;((uint8_t *) &amp;var)[12], v32); break; } }</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SET_CTXS</name><parameter_list>(<parameter><type><name>perf</name></type></parameter>, <parameter><type><name>dir</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SPLAT_CTX(perf-&gt;dir##_skip_ctx[off], b-&gt;skip, n); SPLAT_CTX(perf-&gt;dir##_txfm_ctx[off], b-&gt;tx, n); SPLAT_CTX(perf-&gt;dir##_partition_ctx[off], dir##_ctx[b-&gt;bs], n); if (!s-&gt;s.h.keyframe &amp;&amp; !s-&gt;s.h.intraonly) { SPLAT_CTX(perf-&gt;dir##_intra_ctx[off], b-&gt;intra, n); SPLAT_CTX(perf-&gt;dir##_comp_ctx[off], b-&gt;comp, n); SPLAT_CTX(perf-&gt;dir##_mode_ctx[off], b-&gt;mode[3], n); if (!b-&gt;intra) { SPLAT_CTX(perf-&gt;dir##_ref_ctx[off], vref, n); if (s-&gt;s.h.filtermode == FILTER_SWITCHABLE) { SPLAT_CTX(perf-&gt;dir##_filter_ctx[off], filter_id, n); } } } } while (0)</cpp:value></cpp:define>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>above</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>above</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>above</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>above</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>SET_CTXS</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SPLAT_CTX</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SET_CTXS</name></cpp:undef>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>keyframe</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>intraonly</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&gt;</operator> <name>BS_8x8</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mv0</name> <init>= <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>mv1</name> <init>= <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><name>row7</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><name>row7</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><name>row7</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><name>row7</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>mv0</name> <init>= <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>mv1</name> <init>= <expr><call><name>AV_RN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>w4</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_mv_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>h4</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><name>row7</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_mv_ctx</name><index>[<expr><name>row7</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mv1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h4</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><operator>(</operator><name>row</name> <operator>+</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>sb_cols</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9mvrefPair</name> <modifier>*</modifier></type><name>mv</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><name>o</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w4</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w4</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w4</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mv</name><index>[<expr><name>x</name></expr>]</index></name><operator>.</operator><name><name>mv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>mv</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type>

<name>decode_coeffs_b_generic</name><argument_list>(<argument><expr><name>VP56RangeCoder</name> <operator>*</operator><name>c</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>coef</name></expr></argument>, <argument><expr><name>int</name> <name>n_coeffs</name></expr></argument>,

<argument><expr><name>int</name> <name>is_tx32x32</name></expr></argument>, <argument><expr><name>int</name> <name>is8bitsperpixel</name></expr></argument>, <argument><expr><name>int</name> <name>bpp</name></expr></argument>, <argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>cnt</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>eob</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></expr></argument>,

<argument><expr><name>int</name> <name>nnz</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>scan</name></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>nb</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>band_counts</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>qmul</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>band</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>band_left</name> <init>= <expr><name><name>band_counts</name><index>[<expr><name>band</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tp</name> <init>= <expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>nnz</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cache</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>, <decl><type ref="prev"/><name>rc</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>eob</name><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>nnz</name></expr>]</index><index>[<expr><name>val</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<label><name>skip_eob</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>nnz</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>band_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>band_left</name> <operator>=</operator> <name><name>band_counts</name><index>[<expr><operator>++</operator><name>band</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cache</name><index>[<expr><name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>cache</name><index>[<expr><name><name>nb</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>cache</name><index>[<expr><name><name>nb</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>nnz</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>i</name> <operator>==</operator> <name>n_coeffs</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt> 

<goto>goto <name>skip_eob</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc</name> <operator>=</operator> <name><name>scan</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>nnz</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cnt</name><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>nnz</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cache</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <name>val</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">3</literal> <operator>+</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cache</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>cache</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">159</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">165</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">145</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>cache</name><index>[<expr><name>rc</name></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">11</literal> <operator>+</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">173</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">148</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">19</literal> <operator>+</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">176</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">155</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">135</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>vp56_rac_get_prob_branchy</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>tp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">180</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <literal type="number">35</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">157</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">141</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">134</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">67</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>is8bitsperpixel</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpp</name> <operator>==</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">17</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">13</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">11</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">252</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">249</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">243</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">230</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">196</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">177</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">5</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">153</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">140</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">133</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <operator>(</operator><call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">130</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <call><name>vp56_rac_get_prob</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">129</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORE_COEF</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>i</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { if (is8bitsperpixel) { c[i] = v; } else { AV_WN32A(&amp;c[i * 2], v); } } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>--</operator><name>band_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>band_left</name> <operator>=</operator> <name><name>band_counts</name><index>[<expr><operator>++</operator><name>band</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_tx32x32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STORE_COEF</name><argument_list>(<argument><expr><name>coef</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>val</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>qmul</name><index>[<expr><operator>!</operator><operator>!</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>STORE_COEF</name><argument_list>(<argument><expr><name>coef</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><call><name>vp8_rac_get</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>val</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>qmul</name><index>[<expr><operator>!</operator><operator>!</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>cache</name><index>[<expr><name><name>nb</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>+</operator> <name><name>cache</name><index>[<expr><name><name>nb</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>p</name><index>[<expr><name>band</name></expr>]</index><index>[<expr><name>nnz</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>++</operator><name>i</name> <operator>&lt;</operator> <name>n_coeffs</name></expr>)</condition>;</do>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_coeffs_b_8bpp</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>coef</name></expr></argument>, <argument><expr><name>int</name> <name>n_coeffs</name></expr></argument>,

<argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>cnt</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>eob</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>nnz</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>scan</name></expr></argument>,

<argument><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>nb</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>band_counts</name></expr></argument>,

<argument><expr><name>int16_t</name> <operator>*</operator><name>qmul</name></expr></argument>)</argument_list>

<block>{<block_content>

<return>return <expr><call><name>decode_coeffs_b_generic</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><name>n_coeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><name>nnz</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>band_counts</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_coeffs_b32_8bpp</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>coef</name></expr></argument>, <argument><expr><name>int</name> <name>n_coeffs</name></expr></argument>,

<argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>cnt</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>eob</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>nnz</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>scan</name></expr></argument>,

<argument><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>nb</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>band_counts</name></expr></argument>,

<argument><expr><name>int16_t</name> <operator>*</operator><name>qmul</name></expr></argument>)</argument_list>

<block>{<block_content>

<return>return <expr><call><name>decode_coeffs_b_generic</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><name>n_coeffs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><name>nnz</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>band_counts</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_coeffs_b_16bpp</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>coef</name></expr></argument>, <argument><expr><name>int</name> <name>n_coeffs</name></expr></argument>,

<argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>cnt</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>eob</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>nnz</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>scan</name></expr></argument>,

<argument><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>nb</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>band_counts</name></expr></argument>,

<argument><expr><name>int16_t</name> <operator>*</operator><name>qmul</name></expr></argument>)</argument_list>

<block>{<block_content>

<return>return <expr><call><name>decode_coeffs_b_generic</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><name>n_coeffs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><name>nnz</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>band_counts</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>decode_coeffs_b32_16bpp</name><argument_list>(<argument><expr><name>VP9TileData</name> <operator>*</operator><name>td</name></expr></argument>, <argument><expr><name>int16_t</name> <operator>*</operator><name>coef</name></expr></argument>, <argument><expr><name>int</name> <name>n_coeffs</name></expr></argument>,

<argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>cnt</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>eob</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>nnz</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>scan</name></expr></argument>,

<argument><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>nb</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>int16_t</name> <operator>*</operator><name>band_counts</name></expr></argument>,

<argument><expr><name>int16_t</name> <operator>*</operator><name>qmul</name></expr></argument>)</argument_list>

<block>{<block_content>

<return>return <expr><call><name>decode_coeffs_b_generic</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>c</name></name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><name>n_coeffs</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>td</name><operator>-&gt;</operator><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name>eob</name></expr></argument>, <argument><expr><name>p</name></expr></argument>,

<argument><expr><name>nnz</name></expr></argument>, <argument><expr><name>scan</name></expr></argument>, <argument><expr><name>nb</name></expr></argument>, <argument><expr><name>band_counts</name></expr></argument>, <argument><expr><name>qmul</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>decode_coeffs</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is8bitsperpixel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>row</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row</name></name></expr></init></decl>, <decl><type ref="prev"/><name>col</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">11</literal></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>coef</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr> ]</index><index>[<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>coef</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr> ]</index><index>[<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>unsigned</name> <argument_list>(<argument><expr><operator>*</operator><name>e</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>eob</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr> ]</index><index>[<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>h4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_x</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name><operator>)</operator></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_y</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name><operator>)</operator></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>pl</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>qmul</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name>qmul</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>lossless</name></name> <operator>+</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>yscans</name> <init>= <expr><name><name>ff_vp9_scans</name><index>[<expr><name>tx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator> <specifier>const</specifier> <operator>*</operator> <name>ynbs</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>ff_vp9_scans_nb</name><index>[<expr><name>tx</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>uvscan</name> <init>= <expr><name><name>ff_vp9_scans</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>const</specifier> <call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>uvnb</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>ff_vp9_scans_nb</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>]</index><index>[<expr><name>DCT_DCT</name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_y_nnz_ctx</name><index>[<expr><name>col</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>l</name> <init>= <expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_y_nnz_ctx</name><index>[<expr><operator>(</operator><name>row</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int16_t</name></type> <name><name>band_counts</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">16</literal> <operator>-</operator> <literal type="number">13</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">64</literal> <operator>-</operator> <literal type="number">21</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">256</literal> <operator>-</operator> <literal type="number">21</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">1024</literal> <operator>-</operator> <literal type="number">21</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>y_band_counts</name> <init>= <expr><name><name>band_counts</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>uv_band_counts</name> <init>= <expr><name><name>band_counts</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name> <init>= <expr><ternary><condition><expr><name>is8bitsperpixel</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_coeff</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE</name><parameter_list>(<parameter><type><name>la</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>step</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (n = 0; n &lt; end; n += step) la[n] = !!rd(&amp;la[n])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MERGE_CTX</name><parameter_list>(<parameter><type><name>step</name></type></parameter>, <parameter><type><name>rd</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { MERGE(l, end_y, step, rd); MERGE(a, end_x, step, rd); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_Y_COEF_LOOP</name><parameter_list>(<parameter><type><name>step</name></type></parameter>, <parameter><type><name>mode_index</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (n = 0, y = 0; y &lt; end_y; y += step) { for (x = 0; x &lt; end_x; x += step, n += step * step) { enum TxfmType txtp = ff_vp9_intra_txfm_type[b-&gt;mode[mode_index]]; ret = (is8bitsperpixel ? decode_coeffs_b##v##_8bpp : decode_coeffs_b##v##_16bpp) (td, td-&gt;block + 16 * n * bytesperpixel, 16 * step * step, c, e, p, a[x] + l[y], yscans[txtp], ynbs[txtp], y_band_counts, qmul[0]); a[x] = l[y] = !!ret; total_coeff |= !!ret; if (step &gt;= 4) { AV_WN16A(&amp;td-&gt;eob[n], ret); } else { td-&gt;eob[n] = ret; } } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLAT</name><parameter_list>(<parameter><type><name>la</name></type></parameter>, <parameter><type><name>end</name></type></parameter>, <parameter><type><name>step</name></type></parameter>, <parameter><type><name>cond</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (step == 2) { for (n = 1; n &lt; end; n += step) la[n] = la[n - 1]; } else if (step == 4) { if (cond) { for (n = 0; n &lt; end; n += step) AV_WN32A(&amp;la[n], la[n] * 0x01010101); } else { for (n = 0; n &lt; end; n += step) memset(&amp;la[n + 1], la[n], FFMIN(end - n - 1, 3)); } } else { if (cond) { if (HAVE_FAST_64BIT) { for (n = 0; n &lt; end; n += step) AV_WN64A(&amp;la[n], la[n] * 0x0101010101010101ULL); } else { for (n = 0; n &lt; end; n += step) { uint32_t v32 = la[n] * 0x01010101; AV_WN32A(&amp;la[n], v32); AV_WN32A(&amp;la[n + 4], v32); } } } else { for (n = 0; n &lt; end; n += step) memset(&amp;la[n + 1], la[n], FFMIN(end - n - 1, 7)); } }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLAT_CTX</name><parameter_list>(<parameter><type><name>step</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SPLAT(a, end_x, step, end_x == w4); SPLAT(l, end_y, step, end_y == h4); } while (0)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TX_4X4</name></expr>:</case>

<expr_stmt><expr><call><name>DECODE_Y_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&gt;</operator> <name>BS_8x8</name></expr> ?</condition><then> <expr><name>n</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_8X8</name></expr>:</case>

<expr_stmt><expr><call><name>MERGE_CTX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AV_RN16A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECODE_Y_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLAT_CTX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_16X16</name></expr>:</case>

<expr_stmt><expr><call><name>MERGE_CTX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>AV_RN32A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECODE_Y_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLAT_CTX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_32X32</name></expr>:</case>

<expr_stmt><expr><call><name>MERGE_CTX</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>AV_RN64A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECODE_Y_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLAT_CTX</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_UV_COEF_LOOP</name><parameter_list>(<parameter><type><name>step</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (n = 0, y = 0; y &lt; end_y; y += step) { for (x = 0; x &lt; end_x; x += step, n += step * step) { ret = (is8bitsperpixel ? decode_coeffs_b##v##_8bpp : decode_coeffs_b##v##_16bpp) (td, td-&gt;uvblock[pl] + 16 * n * bytesperpixel, 16 * step * step, c, e, p, a[x] + l[y], uvscan, uvnb, uv_band_counts, qmul[1]); a[x] = l[y] = !!ret; total_coeff |= !!ret; if (step &gt;= 4) { AV_WN16A(&amp;td-&gt;uveob[pl][n], ret); } else { td-&gt;uveob[pl][n] = ret; } } }</cpp:value></cpp:define>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>prob</name><operator>.</operator><name>coef</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr> ]</index><index>[<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>coef</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr> ]</index><index>[<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>counts</name><operator>.</operator><name>eob</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr> ]</index><index>[<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>w4</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_x</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h4</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>end_y</name> <operator>&gt;&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>pl</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>pl</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_uv_nnz_ctx</name><index>[<expr><name>pl</name></expr>]</index><index>[<expr><name>col</name> <operator>&lt;&lt;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_uv_nnz_ctx</name><index>[<expr><name>pl</name></expr>]</index><index>[<expr><operator>(</operator><name>row</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>TX_4X4</name></expr>:</case>

<expr_stmt><expr><call><name>DECODE_UV_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_8X8</name></expr>:</case>

<expr_stmt><expr><call><name>MERGE_CTX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>AV_RN16A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECODE_UV_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLAT_CTX</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_16X16</name></expr>:</case>

<expr_stmt><expr><call><name>MERGE_CTX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>AV_RN32A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECODE_UV_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>,)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLAT_CTX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>TX_32X32</name></expr>:</case>

<expr_stmt><expr><call><name>MERGE_CTX</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>AV_RN64A</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECODE_UV_COEF_LOOP</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>SPLAT_CTX</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

<return>return <expr><name>total_coeff</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_coeffs_8bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>decode_coeffs</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_coeffs_16bpp</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>decode_coeffs</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>mask_edges</name><argument_list>(<argument><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>mask</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>ss_h</name></expr></argument>, <argument><expr><name>int</name> <name>ss_v</name></expr></argument>,

<argument><expr><name>int</name> <name>row_and_7</name></expr></argument>, <argument><expr><name>int</name> <name>col_and_7</name></expr></argument>,

<argument><expr><name>int</name> <name>w</name></expr></argument>, <argument><expr><name>int</name> <name>h</name></expr></argument>, <argument><expr><name>int</name> <name>col_end</name></expr></argument>, <argument><expr><name>int</name> <name>row_end</name></expr></argument>,

<argument><expr>enum <name>TxfmMode</name> <name>tx</name></expr></argument>, <argument><expr><name>int</name> <name>skip_inter</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>wide_filter_col_mask</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>wide_filter_row_mask</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x03</literal></expr>, <expr><literal type="number">0x07</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tx</name> <operator>==</operator> <name>TX_4X4</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>ss_v</name> <operator>|</operator> <name>ss_h</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>ss_v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>row_and_7</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>row_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>==</operator> <name>ss_h</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>col_and_7</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>col_end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tx</name> <operator>==</operator> <name>TX_4X4</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>skip_inter</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>col_and_7</name></expr></init></decl>, <decl><type ref="prev"/><name>m_col</name> <init>= <expr><operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <name>w</name><operator>)</operator> <operator>-</operator> <name>t</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_row_8</name> <init>= <expr><name>m_col</name> <operator>&amp;</operator> <name><name>wide_filter_col_mask</name><index>[<expr><name>ss_h</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>m_row_4</name> <init>= <expr><name>m_col</name> <operator>-</operator> <name>m_row_8</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>row_and_7</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>row_and_7</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>col_mask_id</name> <init>= <expr><literal type="number">2</literal> <operator>-</operator> <operator>!</operator><operator>(</operator><name>y</name> <operator>&amp;</operator> <name><name>wide_filter_row_mask</name><index>[<expr><name>ss_v</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>m_row_8</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>m_row_4</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ss_h</name> <operator>&amp;</operator> <name>ss_v</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>col_end</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>y</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>col_mask_id</name></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>col_mask_id</name></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss_h</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ss_v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ss_h</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>col_end</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>t</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>t</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>col_and_7</name></expr></init></decl>, <decl><type ref="prev"/><name>m_col</name> <init>= <expr><operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <name>w</name><operator>)</operator> <operator>-</operator> <name>t</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>skip_inter</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask_id</name> <init>= <expr><operator>(</operator><name>tx</name> <operator>==</operator> <name>TX_8X8</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>l2</name> <init>= <expr><name>tx</name> <operator>+</operator> <name>ss_h</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>step1d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>masks</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_row</name> <init>= <expr><name>m_col</name> <operator>&amp;</operator> <name><name>masks</name><index>[<expr><name>l2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ss_h</name> <operator>&amp;&amp;</operator> <name>tx</name> <operator>&gt;</operator> <name>TX_8X8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>w</name> <operator>^</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m_row_16</name> <init>= <expr><operator>(</operator><operator>(</operator><name>t</name> <operator>&lt;&lt;</operator> <operator>(</operator><name>w</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>-</operator> <name>t</name><operator>)</operator> <operator>&amp;</operator> <name><name>masks</name><index>[<expr><name>l2</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>m_row_8</name> <init>= <expr><name>m_row</name> <operator>-</operator> <name>m_row_16</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>row_and_7</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>row_and_7</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>m_row_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>m_row_8</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>row_and_7</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>row_and_7</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>mask_id</name></expr>]</index></name> <operator>|=</operator> <name>m_row</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>l2</name> <operator>=</operator> <name>tx</name> <operator>+</operator> <name>ss_v</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step1d</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>l2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ss_v</name> <operator>&amp;&amp;</operator> <name>tx</name> <operator>&gt;</operator> <name>TX_8X8</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>h</name> <operator>^</operator> <operator>(</operator><name>h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>row_and_7</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>row_and_7</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step1d</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>y</name> <operator>-</operator> <name>row_and_7</name> <operator>==</operator> <name>h</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>row_and_7</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>row_and_7</name></expr>;</condition> <incr><expr><name>y</name> <operator>+=</operator> <name>step1d</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>mask_id</name></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>tx</name> <operator>!=</operator> <name>TX_4X4</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mask_id</name> <operator>=</operator> <operator>(</operator><name>tx</name> <operator>==</operator> <name>TX_8X8</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>h</name> <operator>==</operator> <name>ss_v</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>row_and_7</name></expr>]</index><index>[<expr><name>mask_id</name></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt>

<expr_stmt><expr><name>mask_id</name> <operator>=</operator> <operator>(</operator><name>tx</name> <operator>==</operator> <name>TX_8X8</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>w</name> <operator>==</operator> <name>ss_h</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>row_and_7</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>row_and_7</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><name>mask_id</name></expr>]</index></name> <operator>|=</operator> <name>t</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t8</name> <init>= <expr><name>t</name> <operator>&amp;</operator> <name><name>wide_filter_col_mask</name><index>[<expr><name>ss_h</name></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>t4</name> <init>= <expr><name>t</name> <operator>-</operator> <name>t8</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>row_and_7</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name> <operator>+</operator> <name>row_and_7</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>|=</operator> <name>t4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>t8</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>row_and_7</name></expr>]</index><index>[<expr><literal type="number">2</literal> <operator>-</operator> <operator>!</operator><operator>(</operator><name>row_and_7</name> <operator>&amp;</operator> <name><name>wide_filter_row_mask</name><index>[<expr><name>ss_v</name></expr>]</index></name><operator>)</operator></expr>]</index></name> <operator>|=</operator> <name>m_col</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>ff_vp9_decode_block</name><parameter_list>(<parameter><decl><type><name>VP9TileData</name> <modifier>*</modifier></type><name>td</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>col</name></decl></parameter>,

<parameter><decl><type><name>VP9Filter</name> <modifier>*</modifier></type><name>lflvl</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>yoff</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>uvoff</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>BlockLevel</name></name></type> <name>bl</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>BlockPartition</name></name></type> <name>bp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VP9Context</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>s</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VP9Block</name> <modifier>*</modifier></type><name>b</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>b</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>BlockSize</name></name></type> <name>bs</name> <init>= <expr><name>bl</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>bp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytesperpixel</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>bytesperpixel</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bs</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>h4</name> <init>= <expr><name><name>ff_vp9_bwh_tab</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>bs</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>lvl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>emu</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>frames</name><index>[<expr><name>CUR_FRAME</name></expr>]</index></name><operator>.</operator><name><name>tf</name><operator>.</operator><name>f</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <name>row</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>row7</name></name> <operator>=</operator> <name>row</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>col</name></name> <operator>=</operator> <name>col</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>col7</name></name> <operator>=</operator> <name>col</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>min_mv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>+</operator> <name>col</name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>min_mv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">128</literal> <operator>+</operator> <name>row</name> <operator>*</operator> <literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>max_mv</name><operator>.</operator><name>x</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name> <operator>-</operator> <name>w4</name><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>max_mv</name><operator>.</operator><name>y</name></name> <operator>=</operator> <literal type="number">128</literal> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name> <operator>-</operator> <name>h4</name><operator>)</operator> <operator>*</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>=</operator> <name>bs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bl</name></name> <operator>=</operator> <name>bl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>bp</name></name> <operator>=</operator> <name>bp</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_mode</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>&amp;&amp;</operator> <name>w4</name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>&amp;&amp;</operator> <name>h4</name> <operator>*</operator> <literal type="number">2</literal> <operator>==</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>b</name><operator>-&gt;</operator><name>tx</name></name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>skip</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>has_coeffs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>bytesperpixel</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>has_coeffs</name> <operator>=</operator> <call><name>decode_coeffs_8bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>has_coeffs</name> <operator>=</operator> <call><name>decode_coeffs_16bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>has_coeffs</name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>bs</name></name> <operator>&lt;=</operator> <name>BS_8x8</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>skip</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>above_skip_ctx</name><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>td</name><operator>-&gt;</operator><name>left_skip_ctx</name><index>[<expr><name><name>td</name><operator>-&gt;</operator><name>row7</name></name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>row7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row7</name></name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLAT_ZERO_CTX</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>n</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>switch (n) { case 1: v = 0; break; case 2: AV_ZERO16(&amp;v); break; case 4: AV_ZERO32(&amp;v); break; case 8: AV_ZERO64(&amp;v); break; case 16: AV_ZERO128(&amp;v); break; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPLAT_ZERO_YUV</name><parameter_list>(<parameter><type><name>dir</name></type></parameter>, <parameter><type><name>var</name></type></parameter>, <parameter><type><name>off</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>dir2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { SPLAT_ZERO_CTX(dir##_y_##var[off * 2], n * 2); if (s-&gt;ss_##dir2) { SPLAT_ZERO_CTX(dir##_uv_##var[0][off], n); SPLAT_ZERO_CTX(dir##_uv_##var[1][off], n); } else { SPLAT_ZERO_CTX(dir##_uv_##var[0][off * 2], n * 2); SPLAT_ZERO_CTX(dir##_uv_##var[1][off * 2], n * 2); } } while (0)</cpp:value></cpp:define>

<switch>switch <condition>(<expr><name>w4</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>above</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name>h4</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">4</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> <expr_stmt><expr><call><name>SPLAT_ZERO_YUV</name><argument_list>(<argument><expr><name><name>td</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name>nnz_ctx</name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>block</name> <operator>+=</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uvblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uvblock</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eob</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uveob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uveob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name><operator>)</operator></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>emu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>col</name> <operator>+</operator> <name>w4</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator>

<operator>(</operator><name>row</name> <operator>+</operator> <name>h4</name><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>emu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>col</name> <operator>+</operator> <name>w4</name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<operator>(</operator><name>row</name> <operator>+</operator> <name>h4</name><operator>)</operator> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>tmp_y</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>yoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>y_stride</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>tmp_uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>td</name><operator>-&gt;</operator><name>tmp_uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>dst</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>td</name><operator>-&gt;</operator><name>uv_stride</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_intra_recon_16bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_intra_recon_8bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>, <argument><expr><name>yoff</name></expr></argument>, <argument><expr><name>uvoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>bpp</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_inter_recon_16bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_vp9_inter_recon_8bpp</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emu</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>h</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name> <init>= <expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&amp;</operator> <name>bw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mc</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>yoff</name> <operator>+</operator> <name>o</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator>

<name><name>td</name><operator>-&gt;</operator><name>tmp_y</name></name> <operator>+</operator> <name>o</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <literal type="number">128</literal><operator>,</operator> <name>h</name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>+=</operator> <name>bw</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>emu</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">8</literal> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr></init></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>o</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bw</name> <init>= <expr><literal type="number">64</literal> <operator>&gt;&gt;</operator> <name>n</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name> <operator>&amp;</operator> <name>bw</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mc</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name> <operator>+</operator> <name>o</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator>

<name><name>td</name><operator>-&gt;</operator><name>tmp_uv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>o</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <literal type="number">128</literal><operator>,</operator> <name>h</name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mc</name><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>uvoff</name> <operator>+</operator> <name>o</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <name><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator>

<name><name>td</name><operator>-&gt;</operator><name>tmp_uv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>o</name> <operator>*</operator> <name>bytesperpixel</name><operator>,</operator> <literal type="number">128</literal><operator>,</operator> <name>h</name><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>o</name> <operator>+=</operator> <name>bw</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>filter</name><operator>.</operator><name>level</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>lvl</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>s</name><operator>.</operator><name>h</name><operator>.</operator><name>segmentation</name><operator>.</operator><name>feat</name><index>[<expr><name><name>b</name><operator>-&gt;</operator><name>seg_id</name></name></expr>]</index></name><operator>.</operator><name><name>lflvl</name><index>[<expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>intra</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>b</name><operator>-&gt;</operator><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>]</index>

<index>[<expr><name><name>b</name><operator>-&gt;</operator><name>mode</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <name>ZEROMV</name></expr>]</index></name><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>-</operator> <name>col</name></expr></argument>, <argument><expr><name>w4</name></expr></argument>)</argument_list></call></expr></init></decl>, <decl><type ref="prev"/><name>y_end</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>-</operator> <name>row</name></expr></argument>, <argument><expr><name>h4</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_inter</name> <init>= <expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>intra</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>-&gt;</operator><name>skip</name></name></expr></init></decl>, <decl><type ref="prev"/><name>col7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>col7</name></name></expr></init></decl>, <decl><type ref="prev"/><name>row7</name> <init>= <expr><name><name>td</name><operator>-&gt;</operator><name>row7</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setctx_2d</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lflvl</name><operator>-&gt;</operator><name>level</name><index>[<expr><name>row7</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>col7</name></expr>]</index></name></expr></argument>, <argument><expr><name>w4</name></expr></argument>, <argument><expr><name>h4</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>lvl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mask_edges</name><argument_list>(<argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>mask</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><name>col7</name></expr></argument>, <argument><expr><name>x_end</name></expr></argument>, <argument><expr><name>y_end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>tx</name></name></expr></argument>, <argument><expr><name>skip_inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mask_edges</name><argument_list>(<argument><expr><name><name>lflvl</name><operator>-&gt;</operator><name>mask</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name></expr></argument>, <argument><expr><name>row7</name></expr></argument>, <argument><expr><name>col7</name></expr></argument>, <argument><expr><name>x_end</name></expr></argument>, <argument><expr><name>y_end</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>col</name> <operator>+</operator> <name>w4</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>cols</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cols</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>&amp;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>row</name> <operator>+</operator> <name>h4</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>rows</name></name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>rows</name></name> <operator>&amp;</operator> <literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>b</name><operator>-&gt;</operator><name>uvtx</name></name></expr></argument>, <argument><expr><name>skip_inter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>pass</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>b</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>block</name> <operator>+=</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uvblock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uvblock</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <name>bytesperpixel</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>eob</name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uveob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>td</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>uveob</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">4</literal> <operator>*</operator> <name>w4</name> <operator>*</operator> <name>h4</name> <operator>&gt;&gt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ss_v</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>ss_h</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
