<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\tak.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/crc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BITSTREAM_READER_LE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tak.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int64_t</name></type> <name><name>tak_channel_layouts</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>,

<expr><name>AV_CH_FRONT_LEFT</name></expr>,

<expr><name>AV_CH_FRONT_RIGHT</name></expr>,

<expr><name>AV_CH_FRONT_CENTER</name></expr>,

<expr><name>AV_CH_LOW_FREQUENCY</name></expr>,

<expr><name>AV_CH_BACK_LEFT</name></expr>,

<expr><name>AV_CH_BACK_RIGHT</name></expr>,

<expr><name>AV_CH_FRONT_LEFT_OF_CENTER</name></expr>,

<expr><name>AV_CH_FRONT_RIGHT_OF_CENTER</name></expr>,

<expr><name>AV_CH_BACK_CENTER</name></expr>,

<expr><name>AV_CH_SIDE_LEFT</name></expr>,

<expr><name>AV_CH_SIDE_RIGHT</name></expr>,

<expr><name>AV_CH_TOP_CENTER</name></expr>,

<expr><name>AV_CH_TOP_FRONT_LEFT</name></expr>,

<expr><name>AV_CH_TOP_FRONT_CENTER</name></expr>,

<expr><name>AV_CH_TOP_FRONT_RIGHT</name></expr>,

<expr><name>AV_CH_TOP_BACK_LEFT</name></expr>,

<expr><name>AV_CH_TOP_BACK_CENTER</name></expr>,

<expr><name>AV_CH_TOP_BACK_RIGHT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint16_t</name></type> <name><name>frame_duration_type_quants</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">4096</literal></expr>, <expr><literal type="number">8192</literal></expr>, <expr><literal type="number">16384</literal></expr>, <expr><literal type="number">512</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">2048</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tak_get_nb_samples</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>TAKFrameSizeType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name></decl>, <decl><type ref="prev"/><name>max_nb_samples</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>&lt;=</operator> <name>TAK_FST_250ms</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name>sample_rate</name> <operator>*</operator> <name><name>frame_duration_type_quants</name><index>[<expr><name>type</name></expr>]</index></name> <operator>&gt;&gt;</operator>

<name>TAK_FRAME_DURATION_QUANT_SHIFT</name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_nb_samples</name> <operator>=</operator> <literal type="number">16384</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>type</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>frame_duration_type_quants</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nb_samples</name> <operator>=</operator> <name><name>frame_duration_type_quants</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>max_nb_samples</name> <operator>=</operator> <name>sample_rate</name> <operator>*</operator>

<name><name>frame_duration_type_quants</name><index>[<expr><name>TAK_FST_250ms</name></expr>]</index></name> <operator>&gt;&gt;</operator>

<name>TAK_FRAME_DURATION_QUANT_SHIFT</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nb_samples</name> <operator>&gt;</operator> <name>max_nb_samples</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>nb_samples</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_tak_check_crc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>buf_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>crc</name></decl>, <decl><type ref="prev"/><name>CRC</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>CRC</name> <operator>=</operator> <call><name>AV_RB24</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>crc</name> <operator>=</operator> <call><name>av_crc</name><argument_list>(<argument><expr><call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_24_IEEE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0xCE04B7U</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CRC</name> <operator>!=</operator> <name>crc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_tak_parse_streaminfo</name><parameter_list>(<parameter><decl><type><name>TAKStreamInfo</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>channel_mask</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frame_type</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_ENCODER_CODEC_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_ENCODER_PROFILE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_type</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_SIZE_FRAME_DURATION_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <call><name>get_bits64</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_SIZE_SAMPLES_NUM_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data_type</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FORMAT_DATA_TYPE_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FORMAT_SAMPLE_RATE_BITS</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name>TAK_SAMPLE_RATE_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bps</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FORMAT_BPS_BITS</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name>TAK_BPS_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FORMAT_CHANNEL_BITS</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name>TAK_CHANNELS_MIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FORMAT_VALID_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>value</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FORMAT_CH_LAYOUT_BITS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>value</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>tak_channel_layouts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>channel_mask</name> <operator>|=</operator> <name><name>tak_channel_layouts</name><index>[<expr><name>value</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ch_layout</name></name> <operator>=</operator> <name>channel_mask</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>frame_samples</name></name> <operator>=</operator> <call><name>tak_get_nb_samples</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>, <argument><expr><name>frame_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avpriv_tak_parse_streaminfo</name><parameter_list>(<parameter><decl><type><name>TAKStreamInfo</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>init_get_bits8</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_tak_parse_streaminfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_tak_decode_frame_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>,

<parameter><decl><type><name>TAKStreamInfo</name> <modifier>*</modifier></type><name>ti</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log_level_offset</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FRAME_HEADER_SYNC_ID_BITS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TAK_FRAME_HEADER_SYNC_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name> <operator>+</operator> <name>log_level_offset</name></expr></argument>, <argument><expr><literal type="string">"missing sync id\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ti</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FRAME_HEADER_FLAGS_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ti</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FRAME_HEADER_NO_BITS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TAK_FRAME_FLAG_IS_LAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ti</name><operator>-&gt;</operator><name>last_frame_samples</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>TAK_FRAME_HEADER_SAMPLE_COUNT_BITS</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ti</name><operator>-&gt;</operator><name>last_frame_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TAK_FRAME_FLAG_HAS_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_tak_parse_streaminfo</name><argument_list>(<argument><expr><name>ti</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ti</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TAK_FRAME_FLAG_HAS_METADATA</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
