<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"kbdwin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sinewin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aactab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenctab.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacenc_utils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"psymodel.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>aac_table_init</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_pce</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACPCEInfo</name> <modifier>*</modifier></type><name>pce</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pce</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>bitexact</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>aux_data</name> <init>= <expr><ternary><condition><expr><name>bitexact</name></expr> ?</condition><then> <expr><literal type="string">"Lavc"</literal></expr> </then><else>: <expr><name>LIBAVCODEC_IDENT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>pce</name><operator>-&gt;</operator><name>num_ele</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>pce</name><operator>-&gt;</operator><name>num_ele</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>pce</name><operator>-&gt;</operator><name>num_ele</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pce</name><operator>-&gt;</operator><name>num_ele</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pce</name><operator>-&gt;</operator><name>num_ele</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>pce</name><operator>-&gt;</operator><name>pairing</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>pce</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>aux_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_put_string</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><name>aux_data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>put_audio_specific_config</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>needs_pce</name></name><operator>)</operator><operator>*</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <operator>(</operator><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>max_size</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>needs_pce</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_pce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0x2b7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>AOT_SBR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_quantize_band_cost_cache_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AACEncContext</name></name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache_generation</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache_generation</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quantize_band_cost_cache_generation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WINDOW_FUNC</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void apply_ ##type ##_window(AVFloatDSPContext *fdsp, SingleChannelElement *sce, const float *audio)</cpp:value></cpp:define>

<macro><name>WINDOW_FUNC</name><argument_list>(<argument>only_long</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lwindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_long_1024</name></expr> </then><else>: <expr><name>ff_sine_1024</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>pwindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_long_1024</name></expr> </then><else>: <expr><name>ff_sine_1024</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>, <argument><expr><name>lwindow</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>audio</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>pwindow</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>WINDOW_FUNC</name><argument_list>(<argument>long_start</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lwindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_long_1024</name></expr> </then><else>: <expr><name>ff_sine_1024</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_short_128</name></expr> </then><else>: <expr><name>ff_sine_128</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>audio</name></expr></argument>, <argument><expr><name>lwindow</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>audio</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>audio</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1024</literal> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>WINDOW_FUNC</name><argument_list>(<argument>long_stop</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>lwindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_long_1024</name></expr> </then><else>: <expr><name>ff_sine_1024</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_short_128</name></expr> </then><else>: <expr><name>ff_sine_128</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>audio</name> <operator>+</operator> <literal type="number">448</literal></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><name>audio</name> <operator>+</operator> <literal type="number">576</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">448</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>audio</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>lwindow</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<macro><name>WINDOW_FUNC</name><argument_list>(<argument>eight_short</argument>)</argument_list></macro>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>swindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_short_128</name></expr> </then><else>: <expr><name>ff_sine_128</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>pwindow</name> <init>= <expr><ternary><condition><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> ?</condition><then> <expr><name>ff_aac_kbd_short_128</name></expr> </then><else>: <expr><name>ff_sine_128</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><name>audio</name> <operator>+</operator> <literal type="number">448</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret_buf</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name> <argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><ternary><condition><expr><name>w</name></expr> ?</condition><then> <expr><name>pwindow</name></expr> </then><else>: <expr><name>swindow</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>in</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>swindow</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out</name> <operator>+=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<expr_stmt><expr><specifier>static</specifier> <call><call><name>void</name> <argument_list>(<argument><expr><operator>*</operator><specifier>const</specifier> <name><name>apply_window</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVFloatDSPContext</name> <operator>*</operator><name>fdsp</name></expr></argument>,

<argument><expr><name>SingleChannelElement</name> <operator>*</operator><name>sce</name></expr></argument>,

<argument><expr><specifier>const</specifier> <name>float</name> <operator>*</operator><name>audio</name></expr></argument>)</argument_list></call> <operator>=</operator> <block>{

<expr><index>[<expr><name>ONLY_LONG_SEQUENCE</name></expr>]</index> <operator>=</operator> <name>apply_only_long_window</name></expr>,

<expr><index>[<expr><name>LONG_START_SEQUENCE</name></expr>]</index> <operator>=</operator> <name>apply_long_start_window</name></expr>,

<expr><index>[<expr><name>EIGHT_SHORT_SEQUENCE</name></expr>]</index> <operator>=</operator> <name>apply_eight_short_window</name></expr>,

<expr><index>[<expr><name>LONG_STOP_SEQUENCE</name></expr>]</index> <operator>=</operator> <name>apply_long_stop_window</name></expr>

}</block></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_window_and_mdct</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>audio</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>ret_buf</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>apply_window</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name><operator>,</operator> <name>sce</name><operator>,</operator> <name>audio</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdct1024</name><operator>.</operator><name>mdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct1024</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">128</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdct128</name><operator>.</operator><name>mdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct128</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>output</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>audio</name></expr></argument>, <argument><expr><name>audio</name> <operator>+</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>audio</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>pcoeffs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>pcoeffs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_ics_info</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>predictor_present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_ms_info</name><parameter_list>(<parameter><decl><type><name>PutBitContext</name> <modifier>*</modifier></type><name>pb</name></decl></parameter>, <parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mode</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><name>pb</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>adjust_frame_information</name><parameter_list>(<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chans</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxsfb</name></decl>, <decl><type ref="prev"/><name>cmaxsfb</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>maxsfb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>pulse</name><operator>.</operator><name>num_pulse</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>cmaxsfb</name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr>;</init> <condition><expr><name>cmaxsfb</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>cmaxsfb</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>cmaxsfb</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>maxsfb</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxsfb</name></expr></argument>, <argument><expr><name>cmaxsfb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>=</operator> <name>maxsfb</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <name>w</name></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name>w</name> <operator>+</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>zeroes</name><index>[<expr><name>w2</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>chans</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics0</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics1</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>msc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ics0</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>ics0</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ics1</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics1</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>=</operator> <name><name>ics0</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics0</name><operator>-&gt;</operator><name>num_windows</name></name><operator>*</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <literal type="number">16</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics0</name><operator>-&gt;</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>+</operator><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>msc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>msc</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ics0</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mode</name></name> <operator>=</operator> <ternary><condition><expr><name>msc</name> <operator>&lt;</operator> <name><name>ics0</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>*</operator> <name><name>ics0</name><operator>-&gt;</operator><name>num_windows</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_intensity_stereo</name><parameter_list>(<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name> <init>= <expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name> <operator>-</operator> <literal type="number">14</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name> <init>= <expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>is_ener</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><name>g</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name> <operator>*=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>sum</name> <init>= <expr><operator>(</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name>p</name><operator>*</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator><operator>*</operator><name>scale</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>sum</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>apply_mid_side_stereo</name><parameter_list>(<parameter><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name> <init>= <expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><operator>(</operator><name>w</name><operator>+</operator><name>w2</name><operator>)</operator> <operator>*</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>g</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>g</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr>;</condition> <incr><expr><name>g</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name> <operator>||</operator> <name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name>

<operator>||</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name> <operator>&gt;=</operator> <name>NOISE_BT</name>

<operator>||</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>g</name></expr>]</index></name> <operator>&gt;=</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>L</name> <init>= <expr><operator>(</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>R</name> <init>= <expr><name>L</name> <operator>-</operator> <name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>L</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>start</name><operator>+</operator><name>i</name></expr>]</index></name> <operator>=</operator> <name>R</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>ics</name><operator>-&gt;</operator><name>swb_sizes</name><index>[<expr><name>g</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_band_info</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>set_special_band_scalefactors</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>set_special_band_scalefactors</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_window_bands_info</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_scale_factors</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>diff</name></decl>, <decl><type ref="prev"/><name>off_sf</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>, <decl><type ref="prev"/><name>off_pns</name> <init>= <expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name>NOISE_OFFSET</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off_is</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>noise_flag</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>NOISE_BT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name>off_pns</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off_pns</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>noise_flag</name><operator>--</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>NOISE_PRE_BITS</name></expr></argument>, <argument><expr><name>diff</name> <operator>+</operator> <name>NOISE_PRE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT</name> <operator>||</operator>

<name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>==</operator> <name>INTENSITY_BT2</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name>off_is</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off_is</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>diff</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>-</operator> <name>off_sf</name></expr>;</expr_stmt>

<expr_stmt><expr><name>off_sf</name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>diff</name> <operator>+=</operator> <name>SCALE_DIFF_ZERO</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>diff</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>diff</name> <operator>&lt;=</operator> <literal type="number">120</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>ff_aac_scalefactor_bits</name><index>[<expr><name>diff</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ff_aac_scalefactor_code</name><index>[<expr><name>diff</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_pulses</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Pulse</name> <modifier>*</modifier></type><name>pulse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>pulse</name><operator>-&gt;</operator><name>num_pulse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pulse</name><operator>-&gt;</operator><name>num_pulse</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>pulse</name><operator>-&gt;</operator><name>num_pulse</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name><name>pulse</name><operator>-&gt;</operator><name>start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pulse</name><operator>-&gt;</operator><name>num_pulse</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name><name>pulse</name><operator>-&gt;</operator><name>pos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>pulse</name><operator>-&gt;</operator><name>amp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>encode_spectral_coeffs</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>w2</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>zeroes</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>w2</name> <operator>=</operator> <name>w</name></expr>;</init> <condition><expr><name>w2</name> <operator>&lt;</operator> <name>w</name> <operator>+</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</condition> <incr><expr><name>w2</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>quantize_and_encode_band</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <name>w2</name><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>,

<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_clipping</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>avoid_clipping</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>clip_avoidance_factor</name></name> <operator>&lt;</operator> <literal type="number">1.0f</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>max_sfb</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>swb_coeffs</name> <init>= <expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>coeffs</name><index>[<expr><name>start</name> <operator>+</operator> <name>w</name><operator>*</operator><literal type="number">128</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>swb_coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>clip_avoidance_factor</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>start</name> <operator>+=</operator> <name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>swb_sizes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_individual_channel</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>common_window</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>sf_idx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>common_window</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_ics_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_main_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_main_pred</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_ltp_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_ltp_info</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>encode_band_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_scale_factors</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_pulses</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>pulse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>present</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_tns_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_tns_info</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>encode_spectral_coeffs</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_bitstream_info</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>namelen</name></decl>, <decl><type ref="prev"/><name>padbits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>namelen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>TYPE_FIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>namelen</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>namelen</name> <operator>&gt;=</operator> <literal type="number">15</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>namelen</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>padbits</name> <operator>=</operator> <operator>-</operator><call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avpriv_align_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>namelen</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">12</literal> <operator>-</operator> <name>padbits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_input_samples</name><parameter_list>(<parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end</name> <init>= <expr><literal type="number">2048</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>frame</name></expr> ?</condition><then> <expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>channel_map</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>reorder_map</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1024</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2048</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2048</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>end</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><operator>(</operator><literal type="number">3072</literal> <operator>-</operator> <name>end</name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>aac_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier><modifier>*</modifier></type><name>samples</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>samples2</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>la</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>overlap</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelElement</name> <modifier>*</modifier></type><name>cpe</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SingleChannelElement</name> <modifier>*</modifier></type><name>sce</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IndividualChannelStream</name> <modifier>*</modifier></type><name>ics</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>its</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>chans</name></decl>, <decl><type ref="prev"/><name>tag</name></decl>, <decl><type ref="prev"/><name>start_ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>frame_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>target_bits</name></decl>, <decl><type ref="prev"/><name>rate_bits</name></decl>, <decl><type ref="prev"/><name>too_many_bits</name></decl>, <decl><type ref="prev"/><name>too_few_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ms_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tns_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>pred_mode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>chan_el_counter</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFPsyWindowInfo</name></type> <name><name>windows</name><index>[<expr><name>AAC_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_af_queue_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name><operator>.</operator><name>remaining_samples</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name><operator>.</operator><name>frame_alloc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name><operator>.</operator><name>frame_count</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>copy_input_samples</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>psypp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_psy_preprocess</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>psypp</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyWindowInfo</name><modifier>*</modifier></type> <name>wi</name> <init>= <expr><name>windows</name> <operator>+</operator> <name>start_ch</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <ternary><condition><expr><name>tag</name> <operator>==</operator> <name>TYPE_CPE</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpe</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>clip_avoidance_factor</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ics</name> <operator>=</operator> <operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ics</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name>overlap</name> <operator>=</operator> <operator>&amp;</operator><name><name>samples</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples2</name> <operator>=</operator> <name>overlap</name> <operator>+</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>la</name> <operator>=</operator> <name>samples2</name> <operator>+</operator> <operator>(</operator><literal type="number">448</literal><operator>+</operator><literal type="number">64</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>la</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>TYPE_LFE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>window_type</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>ONLY_LONG_SEQUENCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>window_shape</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>num_windows</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>grouping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>clipping</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name> <operator>&gt;=</operator> <literal type="number">8</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">3</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <call><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>model</name><operator>-&gt;</operator><name>window</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name></name></expr></argument>, <argument><expr><name>samples2</name></expr></argument>, <argument><expr><name>la</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name></expr></argument>,

<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>use_kb_window</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>window_shape</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>=</operator> <name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>num_windows</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_sizes</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bands</name> <index>[<expr><name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name> <operator>=</operator> <ternary><condition><expr><name>tag</name> <operator>==</operator> <name>TYPE_LFE</name></expr> ?</condition><then> <expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>num_bands</name><index>[<expr><name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name> <operator>==</operator> <literal type="number">8</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ics</name><operator>-&gt;</operator><name>max_sfb</name></name></expr></argument>, <argument><expr><name><name>ics</name><operator>-&gt;</operator><name>num_swb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>swb_offset</name></name> <operator>=</operator> <ternary><condition><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr> ?</condition><then>

<expr><name><name>ff_swb_offset_128</name> <index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></then><else>:

<expr><name><name>ff_swb_offset_1024</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>tns_max_bands</name></name> <operator>=</operator> <ternary><condition><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>EIGHT_SHORT_SEQUENCE</name></expr> ?</condition><then>

<expr><name><name>ff_tns_max_bands_128</name> <index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></then><else>:

<expr><name><name>ff_tns_max_bands_1024</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>group_len</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>grouping</name><index>[<expr><name>w</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>clip_avoidance_factor</name> <operator>=</operator> <literal type="number">0.0f</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>wbuf</name> <init>= <expr><name>overlap</name> <operator>+</operator> <name>w</name> <operator>*</operator> <literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>wlen</name> <init>= <expr><literal type="number">2048</literal> <operator>/</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>max</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>wlen</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>max</name></expr></argument>, <argument><expr><call><name>fabsf</name><argument_list>(<argument><expr><name><name>wbuf</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>clipping</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <name>max</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>ics</name><operator>-&gt;</operator><name>num_windows</name></name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>clipping</name><index>[<expr><name>w</name></expr>]</index></name> <operator>&gt;</operator> <name>CLIP_AVOIDANCE_FACTOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>window_clipping</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>clip_avoidance_factor</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>clip_avoidance_factor</name></expr></argument>, <argument><expr><name><name>wi</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>clipping</name><index>[<expr><name>w</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>window_clipping</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>clip_avoidance_factor</name> <operator>&gt;</operator> <name>CLIP_AVOIDANCE_FACTOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>clip_avoidance_factor</name></name> <operator>=</operator> <name>CLIP_AVOIDANCE_FACTOR</name> <operator>/</operator> <name>clip_avoidance_factor</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ics</name><operator>-&gt;</operator><name>clip_avoidance_factor</name></name> <operator>=</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>apply_window_and_mdct</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>, <argument><expr><name>overlap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>update_ltp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>update_ltp</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>apply_window</name><index>[<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>window_sequence</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name><operator>,</operator> <name>sce</name><operator>,</operator> <operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>ltp_state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>mdct1024</name><operator>.</operator><name>mdct_calc</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct1024</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>lcoeffs</name></name></expr></argument>, <argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ret_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>fabs</name><argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>coeffs</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1E16</literal><operator>)</operator></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Input contains (near) NaN/+-Inf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>avoid_clipping</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start_ch</name> <operator>+=</operator> <name>chans</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><literal type="number">8192</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_bits</name> <operator>=</operator> <name>its</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bitstream_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>LIBAVCODEC_IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>start_ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>target_bits</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>chan_el_counter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>chan_el_counter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>FFPsyWindowInfo</name><modifier>*</modifier></type> <name>wi</name> <init>= <expr><name>windows</name> <operator>+</operator> <name>start_ch</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name><name>coeffs</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>tag</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <ternary><condition><expr><name>tag</name> <operator>==</operator> <name>TYPE_CPE</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpe</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>is_mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>chan_el_counter</name><index>[<expr><name>tag</name></expr>]</index></name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeffs</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>sce</name><operator>-&gt;</operator><name>coeffs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>predictor_present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>used</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>used</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>prediction_used</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sce</name><operator>-&gt;</operator><name>tns</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TemporalNoiseShaping</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <literal type="number">128</literal></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name></expr>]</index></name> <operator>&gt;</operator> <name>RESERVED_BT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sce</name><operator>-&gt;</operator><name>band_type</name><index>[<expr><name>w</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bitres</name><operator>.</operator><name>alloc</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bitres</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_frame_pb_count</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>model</name><operator>-&gt;</operator><name>analyze</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name></name></expr></argument>, <argument><expr><name>start_ch</name></expr></argument>, <argument><expr><name>coeffs</name></expr></argument>, <argument><expr><name>wi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bitres</name><operator>.</operator><name>alloc</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>target_bits</name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bitres</name><operator>.</operator><name>alloc</name></name>

<operator>*</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>/</operator> <operator>(</operator><ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> </then><else>: <expr><literal type="number">120</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psy</name><operator>.</operator><name>bitres</name><operator>.</operator><name>alloc</name></name> <operator>/=</operator> <name>chans</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_type</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pns</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mark_pns</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>mark_pns</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_quantizers</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>chans</name> <operator>&gt;</operator> <literal type="number">1</literal>

<operator>&amp;&amp;</operator> <name><name>wi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>wi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>window_type</name><index>[<expr><literal type="number">0</literal></expr>]</index></name>

<operator>&amp;&amp;</operator> <name><name>wi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>window_shape</name> <operator>==</operator> <name><name>wi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>window_shape</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name><name>wi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num_windows</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>wi</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>grouping</name><index>[<expr><name>w</name></expr>]</index></name> <operator>!=</operator> <name><name>wi</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>grouping</name><index>[<expr><name>w</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<expr_stmt><expr><name>sce</name> <operator>=</operator> <operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>tns</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_tns</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_tns</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>tns</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>apply_tns_filt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>apply_tns_filt</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>tns</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tns_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pns</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_pns</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_pns</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>intensity_stereo</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_is</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_is</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>is_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>is_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>apply_intensity_stereo</name><argument_list>(<argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_pred</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name><name>ics</name><operator>.</operator><name>predictor_present</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pred_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>adjust_common_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>adjust_common_pred</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>apply_main_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>apply_main_pred</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>mid_side</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>mid_side</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_ms</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_ms</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mask</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>apply_mid_side_stereo</name><argument_list>(<argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>adjust_frame_information</name><argument_list>(<argument><expr><name>cpe</name></expr></argument>, <argument><expr><name>chans</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name></expr>)</condition> <block>{<block_content> 

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sce</name> <operator>=</operator> <operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_ltp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>search_for_ltp</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>sce</name></expr></argument>, <argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sce</name><operator>-&gt;</operator><name>ics</name><operator>.</operator><name>ltp</name><operator>.</operator><name>present</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pred_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>adjust_common_ltp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>adjust_common_ltp</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chans</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>put_ics_info</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>ics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_main_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_main_pred</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_ltp_info</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>encode_ltp_info</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>encode_ms_info</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><name>cpe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cpe</name><operator>-&gt;</operator><name>ms_mode</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ms_mode</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cur_channel</name></name> <operator>=</operator> <name>start_ch</name> <operator>+</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>encode_individual_channel</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>common_window</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>start_ch</name> <operator>+=</operator> <name>chans</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>frame_bits</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>rate_bits</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rate_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>rate_bits</name></expr></argument>, <argument><expr><literal type="number">6144</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>too_many_bits</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>target_bits</name></expr></argument>, <argument><expr><name>rate_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>too_many_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>too_many_bits</name></expr></argument>, <argument><expr><literal type="number">6144</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>too_few_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>rate_bits</name> <operator>-</operator> <name>rate_bits</name><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>target_bits</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>too_many_bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>too_few_bits</name> <operator>=</operator> <name>too_few_bits</name> <operator>-</operator> <name>too_few_bits</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>too_many_bits</name> <operator>=</operator> <name>too_many_bits</name> <operator>+</operator> <name>too_many_bits</name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>its</name> <operator>==</operator> <literal type="number">0</literal> 

<operator>||</operator> <operator>(</operator><name>its</name> <operator>&lt;</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>frame_bits</name> <argument_list type="generic">&lt; <argument><expr><name>too_few_bits</name> <operator>||</operator> <name>frame_bits</name></expr></argument> &gt;</argument_list></name> <name>too_many_bits</name><operator>)</operator><operator>)</operator>

<operator>||</operator> <name>frame_bits</name> <operator>&gt;=</operator> <literal type="number">6144</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">3</literal></expr> )</condition>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>ratio</name> <init>= <expr><operator>(</operator><operator>(</operator><name>float</name><operator>)</operator><name>rate_bits</name><operator>)</operator> <operator>/</operator> <name>frame_bits</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_bits</name> <operator>&gt;=</operator> <name>too_few_bits</name> <operator>&amp;&amp;</operator> <name>frame_bits</name> <operator>&lt;=</operator> <name>too_many_bits</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ratio</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><call><name>sqrtf</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ratio</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>, <argument><expr><literal type="number">0.9f</literal></expr></argument>, <argument><expr><literal type="number">1.1f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ratio</name> <operator>=</operator> <call><name>sqrtf</name><argument_list>(<argument><expr><name>ratio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>*</operator> <name>ratio</name></expr></argument>, <argument><expr><literal type="number">65536.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ratio</name> <operator>&gt;</operator> <literal type="number">0.9f</literal> <operator>&amp;&amp;</operator> <name>ratio</name> <operator>&lt;</operator> <literal type="number">1.1f</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>is_mode</name> <operator>||</operator> <name>ms_mode</name> <operator>||</operator> <name>tns_mode</name> <operator>||</operator> <name>pred_mode</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>chans</name> <operator>=</operator> <ternary><condition><expr><name>tag</name> <operator>==</operator> <name>TYPE_CPE</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>cpe</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpe</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>chans</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>, <argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>pcoeffs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cpe</name><operator>-&gt;</operator><name>ch</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>coeffs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>its</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<break>break;</break>

</block_content>}</block></else></if_stmt>

</block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>ltp_insert_new_frame</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>coder</name><operator>-&gt;</operator><name>ltp_insert_new_frame</name></name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>TYPE_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_pb_count</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_sum</name></name> <operator>+=</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_af_queue_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>-&gt;</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>pb</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aac_encode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Qavg: %.3f\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>lambda_sum</name></name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>lambda_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct1024</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mdct_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct128</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_psy_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lpc_end</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lpc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>psypp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_psy_preprocess_end</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>psypp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>cpe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_af_queue_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>dsp_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_kbd_window_init</name><argument_list>(<argument><expr><name>ff_aac_kbd_long_1024</name></expr></argument>, <argument><expr><literal type="number">4.0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_kbd_window_init</name><argument_list>(<argument><expr><name>ff_aac_kbd_short_128</name></expr></argument>, <argument><expr><literal type="number">6.0</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_ff_sine_windows</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_init_ff_sine_windows</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct1024</name></name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32768.0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_mdct_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mdct128</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">32768.0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>alloc_buffers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>samples</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>samples</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cpe</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ChannelElement</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>alloc_fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>planar_samples</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>samples</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <name>ch</name></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>alloc_fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>aac_encode_init_tables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_aac_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>aac_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AACEncContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>sizes</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>grouping</name><index>[<expr><name>AAC_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>lengths</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_frame_pb_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>initial_padding</name></name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>lambda</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr> </then><else>: <expr><literal type="number">120</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>needs_pce</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aac_normal_chan_layouts</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>==</operator> <name><name>aac_normal_chan_layouts</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>needs_pce</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pce</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>needs_pce</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aac_pce_configs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>==</operator> <name><name>aac_pce_configs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>layout</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_get_channel_layout_string</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aac_pce_configs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Unsupported channel layout \"%s\"\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Using a PCE to encode channel layout \"%s\"\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pce</name></name> <operator>=</operator> <name><name>aac_pce_configs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_map</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pce</name><operator>.</operator><name>reorder_map</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chan_map</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>pce</name><operator>.</operator><name>config_map</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reorder_map</name></name> <operator>=</operator> <name><name>aac_chan_maps</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>chan_map</name></name> <operator>=</operator> <name><name>aac_chan_configs</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>+=</operator> <ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TYPE_CPE</name></expr> ?</condition><then> <expr><literal type="number">128000</literal></expr> </then><else>: 

<expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>TYPE_LFE</name></expr> ?</condition><then> <expr><literal type="number">16000</literal></expr> </then><else>: 

<expr><literal type="number">69000</literal></expr></else></ternary></expr></else></ternary></expr> ;</expr_stmt> 

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>==</operator> <name><name>avpriv_mpeg4audio_sample_rates</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name> <operator>==</operator> <literal type="number">16</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name> <operator>&gt;=</operator> <name>ff_aac_swb_size_1024_len</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name> <operator>&gt;=</operator> <name>ff_aac_swb_size_128_len</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported sample rate %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WARN_IF</name><argument_list>(<argument><expr><literal type="number">1024.0</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>&gt;</operator> <literal type="number">6144</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><literal type="string">"Too many bits %f &gt; %d per frame requested, clamping to max\n"</literal></expr></argument>,

<argument><expr><literal type="number">1024.0</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><literal type="number">6144</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">6144</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr> ?</condition><then> <expr><name>FF_PROFILE_AAC_LOW</name></expr> </then><else>:

<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>aacenc_profiles</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name><name>aacenc_profiles</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_MPEG2_AAC_LOW</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_LOW</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name></expr></argument>,

<argument><expr><literal type="string">"Main prediction unavailable in the \"mpeg2_aac_low\" profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name></expr></argument>,

<argument><expr><literal type="string">"LTP prediction unavailable in the \"mpeg2_aac_low\" profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WARN_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pns</name></name></expr></argument>,

<argument><expr><literal type="string">"PNS unavailable in the \"mpeg2_aac_low\" profile, turning off\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_AAC_LTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name></expr></argument>,

<argument><expr><literal type="string">"Main prediction unavailable in the \"aac_ltp\" profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_AAC_MAIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name></expr></argument>,

<argument><expr><literal type="string">"LTP prediction unavailable in the \"aac_main\" profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_LTP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WARN_IF</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"Chainging profile to \"aac_ltp\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name></expr></argument>,

<argument><expr><literal type="string">"Main prediction unavailable in the \"aac_ltp\" profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pred</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>FF_PROFILE_AAC_MAIN</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>WARN_IF</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><literal type="string">"Chainging profile to \"aac_main\"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name></expr></argument>,

<argument><expr><literal type="string">"LTP prediction unavailable in the \"aac_main\" profile\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>coder</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ff_aac_coders</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>coder</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>coder</name></name> <operator>==</operator> <name>AAC_CODER_ANMR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>,

<argument><expr><literal type="string">"The ANMR coder is considered experimental, add -strict -2 to enable!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>intensity_stereo</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>pns</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ERROR_IF</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>ltp</name></name> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr></argument>,

<argument><expr><literal type="string">"The LPT profile requires experimental compliance, add -strict -2 to enable!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>channels</name></name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>options</name><operator>.</operator><name>mid_side</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dsp_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>alloc_buffers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>put_audio_specific_config</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sizes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_aac_swb_size_1024</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sizes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_aac_swb_size_128</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_aac_num_swb_1024</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lengths</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>ff_aac_num_swb_128</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>samplerate_index</name></name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>grouping</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name>TYPE_CPE</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_psy_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>psy</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sizes</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chan_map</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>grouping</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>psypp</name></name> <operator>=</operator> <call><name>ff_psy_preprocess_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_lpc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>lpc</name></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name></expr></argument>, <argument><expr><name>TNS_MAX_ORDER</name></expr></argument>, <argument><expr><name>FF_LPC_TYPE_LEVINSON</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>random_state</name></name> <operator>=</operator> <literal type="number">0x1f2e3d4c</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>abs_pow34</name></name> <operator>=</operator> <name>abs_pow34_v</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>quant_bands</name></name> <operator>=</operator> <name>quantize_bands</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_aac_dsp_init_x86</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>HAVE_MIPSDSP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_aac_coder_init_mips</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>aac_table_init</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>aac_encode_init_tables</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_UNKNOWN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_af_queue_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>afq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>aac_encode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AACENC_FLAGS</name></cpp:macro> <cpp:value>AV_OPT_FLAG_ENCODING_PARAM | AV_OPT_FLAG_AUDIO_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>aacenc_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="string">"aac_coder"</literal></expr>, <expr><literal type="string">"Coding algorithm"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AAC_CODER_FAST</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AAC_CODER_NB</name><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"anmr"</literal></expr>, <expr><literal type="string">"ANMR method"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AAC_CODER_ANMR</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AACENC_FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"twoloop"</literal></expr>, <expr><literal type="string">"Two loop searching method"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AAC_CODER_TWOLOOP</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AACENC_FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"fast"</literal></expr>, <expr><literal type="string">"Default fast search"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AAC_CODER_FAST</name></expr>}</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><name>AACENC_FLAGS</name></expr>, <expr><literal type="string">"coder"</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aac_ms"</literal></expr>, <expr><literal type="string">"Force M/S stereo coding"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>mid_side</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aac_is"</literal></expr>, <expr><literal type="string">"Intensity stereo coding"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>intensity_stereo</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aac_pns"</literal></expr>, <expr><literal type="string">"Perceptual noise substitution"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>pns</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aac_tns"</literal></expr>, <expr><literal type="string">"Temporal noise shaping"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>tns</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aac_ltp"</literal></expr>, <expr><literal type="string">"Long term prediction"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>ltp</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aac_pred"</literal></expr>, <expr><literal type="string">"AAC-Main prediction"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>pred</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><literal type="string">"aac_pce"</literal></expr>, <expr><literal type="string">"Forces the use of PCEs"</literal></expr>, <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>, <argument><expr><name><name>options</name><operator>.</operator><name>pce</name></name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{<expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AACENC_FLAGS</name></expr>}</block></expr>,

<expr><block>{<expr><name>NULL</name></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>aacenc_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"AAC encoder"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>aacenc_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>aac_encode_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_aac_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"aac"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"AAC (Advanced Audio Coding)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_AAC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>AACEncContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>aac_encode_init</name></expr>,

<expr><operator>.</operator><name>encode2</name> <operator>=</operator> <name>aac_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>aac_encode_end</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>aac_encode_defaults</name></expr>,

<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <name>mpeg4audio_sample_rates</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SMALL_LAST_FRAME</name> <operator>|</operator> <name>AV_CODEC_CAP_DELAY</name></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator><block>{ <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>aacenc_class</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
