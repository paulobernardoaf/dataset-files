<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\alpha\me_cmp_alpha.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/me_cmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"asm.h"</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>pix_abs16x16_mvi_asm</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>avg2</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>a</name> <operator>|</operator> <name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>a</name> <operator>^</operator> <name>b</name><operator>)</operator> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0xfe</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>avg4</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>l1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>l2</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>l3</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>l4</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r1</name> <init>= <expr><operator>(</operator><operator>(</operator><name>l1</name> <operator>&amp;</operator> <operator>~</operator><call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>l2</name> <operator>&amp;</operator> <operator>~</operator><call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>l3</name> <operator>&amp;</operator> <operator>~</operator><call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator>

<operator>+</operator> <operator>(</operator><operator>(</operator><name>l4</name> <operator>&amp;</operator> <operator>~</operator><call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r2</name> <init>= <expr><operator>(</operator><operator>(</operator> <operator>(</operator><name>l1</name> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>l2</name> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>l3</name> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>+</operator> <operator>(</operator><name>l4</name> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call><operator>)</operator>

<operator>+</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x02</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <call><name>BYTE_VEC</name><argument_list>(<argument><expr><literal type="number">0x03</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>r1</name> <operator>+</operator> <name>r2</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs8x8_mvi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pix2</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>

<do>do <block>{<block_content> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>uldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1</name></decl>, <decl><type ref="prev"/><name>p2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if> 

int pix_abs16x16_mvi(uint8_t *pix1, uint8_t *pix2, int line_size)

{

int result = 0;

int h = 16;

if ((size_t) pix2 &amp; 0x7) {

do { 

uint64_t p1_l, p1_r, p2_l, p2_r;

uint64_t t;

p1_l = ldq(pix1);

p1_r = ldq(pix1 + 8);

t = ldq_u(pix2 + 8);

p2_l = extql(ldq_u(pix2), pix2) | extqh(t, pix2);

p2_r = extql(t, pix2) | extqh(ldq_u(pix2 + 16), pix2);

pix1 += line_size;

pix2 += line_size;

result += perr(p1_l, p2_l)

+ perr(p1_r, p2_r);

} while (--h);

} else {

do {

uint64_t p1_l, p1_r, p2_l, p2_r;

p1_l = ldq(pix1);

p1_r = ldq(pix1 + 8);

p2_l = ldq(pix2);

p2_r = ldq(pix2 + 8);

pix1 += line_size;

pix2 += line_size;

result += perr(p1_l, p2_l)

+ perr(p1_r, p2_r);

} while (--h);

}

return result;

}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs16x16_x2_mvi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>disalign</name> <init>= <expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pix2</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>disalign</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1_l</name></decl>, <decl><type ref="prev"/><name>p1_r</name></decl>, <decl><type ref="prev"/><name>p2_l</name></decl>, <decl><type ref="prev"/><name>p2_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><operator>(</operator><name>l</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><operator>(</operator><name>r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>pix2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_l</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<break>break;</break>

<case>case <expr><literal type="number">7</literal></expr>:</case>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1_l</name></decl>, <decl><type ref="prev"/><name>p1_r</name></decl>, <decl><type ref="prev"/><name>p2_l</name></decl>, <decl><type ref="prev"/><name>p2_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><call><name>extql</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>m</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><call><name>extql</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_l</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<break>break;</break>

<default>default:</default>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>disalign1</name> <init>= <expr><name>disalign</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1_l</name></decl>, <decl><type ref="prev"/><name>p1_r</name></decl>, <decl><type ref="prev"/><name>p2_l</name></decl>, <decl><type ref="prev"/><name>p2_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><call><name>extql</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>extql</name><argument_list>(<argument><expr><name>l</name></expr></argument>, <argument><expr><name>disalign1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>disalign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <call><name>avg2</name><argument_list>(<argument><expr><call><name>extql</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>disalign</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>extql</name><argument_list>(<argument><expr><name>m</name></expr></argument>, <argument><expr><name>disalign1</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>disalign1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_l</name></expr></argument>, <argument><expr><name>p2_l</name></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_r</name></expr></argument>, <argument><expr><name>p2_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs16x16_y2_mvi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pix2</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>p2_l</name></decl>, <decl><type ref="prev"/><name>p2_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <call><name>extql</name><argument_list>(<argument><expr><call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <call><name>extql</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1_l</name></decl>, <decl><type ref="prev"/><name>p1_r</name></decl>, <decl><type ref="prev"/><name>np2_l</name></decl>, <decl><type ref="prev"/><name>np2_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_l</name> <operator>=</operator> <call><name>extql</name><argument_list>(<argument><expr><call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_r</name> <operator>=</operator> <call><name>extql</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call> <operator>|</operator> <call><name>extqh</name><argument_list>(<argument><expr><call><name>ldq_u</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_l</name></expr></argument>, <argument><expr><call><name>avg2</name><argument_list>(<argument><expr><name>p2_l</name></expr></argument>, <argument><expr><name>np2_l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_r</name></expr></argument>, <argument><expr><call><name>avg2</name><argument_list>(<argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>np2_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <name>np2_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <name>np2_r</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p2_l</name></decl>, <decl><type ref="prev"/><name>p2_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1_l</name></decl>, <decl><type ref="prev"/><name>p1_r</name></decl>, <decl><type ref="prev"/><name>np2_l</name></decl>, <decl><type ref="prev"/><name>np2_r</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_l</name></expr></argument>, <argument><expr><call><name>avg2</name><argument_list>(<argument><expr><name>p2_l</name></expr></argument>, <argument><expr><name>np2_l</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_r</name></expr></argument>, <argument><expr><call><name>avg2</name><argument_list>(<argument><expr><name>p2_r</name></expr></argument>, <argument><expr><name>np2_r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <name>np2_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <name>np2_r</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_abs16x16_xy2_mvi</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>v</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix1</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>line_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p1_l</name></decl>, <decl><type ref="prev"/><name>p1_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>p2_l</name></decl>, <decl><type ref="prev"/><name>p2_r</name></decl>, <decl><type ref="prev"/><name>p2_x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p1_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pix2</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <call><name>uldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <call><name>uldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_x</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>pix2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_x</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>np1_l</name></decl>, <decl><type ref="prev"/><name>np1_r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>np2_l</name></decl>, <decl><type ref="prev"/><name>np2_r</name></decl>, <decl><type ref="prev"/><name>np2_x</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pix1</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pix2</name> <operator>+=</operator> <name>line_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>np1_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np1_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix1</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>pix2</name> <operator>&amp;</operator> <literal type="number">0x7</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>np2_l</name> <operator>=</operator> <call><name>uldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_r</name> <operator>=</operator> <call><name>uldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_x</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator> <name><name>pix2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>np2_l</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_r</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>np2_x</name> <operator>=</operator> <call><name>ldq</name><argument_list>(<argument><expr><name>pix2</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">56</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>result</name> <operator>+=</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_l</name></expr></argument>,

<argument><expr><call><name>avg4</name><argument_list>( <argument><expr><name>p2_l</name></expr></argument>, <argument><expr><operator>(</operator> <name>p2_l</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>p2_r</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>,

<argument><expr><name>np2_l</name></expr></argument>, <argument><expr><operator>(</operator><name>np2_l</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>np2_r</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call>

<operator>+</operator> <call><name>perr</name><argument_list>(<argument><expr><name>p1_r</name></expr></argument>,

<argument><expr><call><name>avg4</name><argument_list>( <argument><expr><name>p2_r</name></expr></argument>, <argument><expr><operator>(</operator> <name>p2_r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>p2_x</name><operator>)</operator></expr></argument>,

<argument><expr><name>np2_r</name></expr></argument>, <argument><expr><operator>(</operator><name>np2_r</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>np2_x</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_l</name> <operator>=</operator> <name>np1_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p1_r</name> <operator>=</operator> <name>np1_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_l</name> <operator>=</operator> <name>np2_l</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_r</name> <operator>=</operator> <name>np2_r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>p2_x</name> <operator>=</operator> <name>np2_x</name></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><operator>--</operator><name>h</name></expr>)</condition>;</do>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_me_cmp_init_alpha</name><parameter_list>(<parameter><decl><type><name>MECmpContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>amask</name><argument_list>(<argument><expr><name>AMASK_MVI</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16x16_mvi_asm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>sad</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs8x8_mvi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16x16_mvi_asm</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs8x8_mvi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16x16_x2_mvi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16x16_y2_mvi</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>pix_abs</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>pix_abs16x16_xy2_mvi</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

</unit>
