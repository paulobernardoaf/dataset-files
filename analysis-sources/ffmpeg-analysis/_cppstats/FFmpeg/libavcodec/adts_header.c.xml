<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\adts_header.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac_ac3_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adts_header.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"adts_parser.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg4audio.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>ff_adts_header_parse</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gbc</name></decl></parameter>, <parameter><decl><type><name>AACADTSHeaderInfo</name> <modifier>*</modifier></type><name>hdr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>, <decl><type ref="prev"/><name>rdb</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>sr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aot</name></decl>, <decl><type ref="prev"/><name>crc_abs</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xfff</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AAC_AC3_PARSE_ERROR_SYNC</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>crc_abs</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>aot</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>sr</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpriv_mpeg4audio_sample_rates</name><index>[<expr><name>sr</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AAC_AC3_PARSE_ERROR_SAMPLE_RATE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ch</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>AV_AAC_ADTS_HEADER_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AAC_AC3_PARSE_ERROR_FRAME_SIZE</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>rdb</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gbc</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>object_type</name></name> <operator>=</operator> <name>aot</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>chan_config</name></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>crc_absent</name></name> <operator>=</operator> <name>crc_abs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>num_aac_frames</name></name> <operator>=</operator> <name>rdb</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sampling_index</name></name> <operator>=</operator> <name>sr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <name><name>avpriv_mpeg4audio_sample_rates</name><index>[<expr><name>sr</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>samples</name></name> <operator>=</operator> <operator>(</operator><name>rdb</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hdr</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name>size</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>hdr</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>/</operator> <name><name>hdr</name><operator>-&gt;</operator><name>samples</name></name></expr>;</expr_stmt>

<return>return <expr><name>size</name></expr>;</return>

</block_content>}</block></function>

</unit>
