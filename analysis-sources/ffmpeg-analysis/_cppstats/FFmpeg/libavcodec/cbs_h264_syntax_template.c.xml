<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cbs_h264_syntax_template.c"><function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>rbsp_trailing_bits</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rbsp_stop_one_bit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rbsp_alignment_zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>nal_unit_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawNALUnitHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name>valid_type_mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>forbidden_zero_bit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>nal_ref_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>nal_unit_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>&amp;</operator> <name>valid_type_mask</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid NAL unit type %d.\n"</literal></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>==</operator> <literal type="number">14</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>==</operator> <literal type="number">20</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>==</operator> <literal type="number">21</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>!=</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>svc_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>avc_3d_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>svc_extension_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SVC not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>avc_3d_extension_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"3DAVC not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MVC not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>scaling_list</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawScalingList</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size_of_scaling_list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>scale</name></decl>;</decl_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size_of_scaling_list</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>delta_scale</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>scale</name> <operator>=</operator> <operator>(</operator><name>scale</name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>delta_scale</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">256</literal><operator>)</operator> <operator>%</operator> <literal type="number">256</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>scale</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>hrd_parameters</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawHRD</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>cpb_cnt_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>bit_rate_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>cpb_size_scale</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>cpb_cnt_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>bit_rate_value_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>cpb_size_value_minus1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>cbr_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>initial_cpb_removal_delay_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>cpb_removal_delay_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>dpb_output_delay_length_minus1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>time_offset_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>vui_parameters</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawVUI</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>aspect_ratio_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>aspect_ratio_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>aspect_ratio_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>aspect_ratio_idc</name></name> <operator>==</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sar_width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>sar_height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>aspect_ratio_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>overscan_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>overscan_info_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>overscan_appropriate_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>video_signal_type_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>video_format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>colour_description_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>colour_primaries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>matrix_coefficients</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>video_format</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>chroma_loc_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_loc_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_top_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_bottom_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_top_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_bottom_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>timing_info_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>num_units_in_tick</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>time_scale</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>fixed_frame_rate_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>fixed_frame_rate_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>nal_hrd_parameters_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hrd_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_hrd_parameters</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vcl_hrd_parameters_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>hrd_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>vcl_hrd_parameters</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>low_delay_hrd_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>low_delay_hrd_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>-</operator> <name><name>current</name><operator>-&gt;</operator><name>fixed_frame_rate_flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pic_struct_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>bitstream_restriction_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>motion_vectors_over_pic_boundaries_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_bytes_per_pic_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_bits_per_mb_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_mv_length_horizontal</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_mv_length_vertical</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_num_reorder_frames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_DPB_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_dec_frame_buffering</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_DPB_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>motion_vectors_over_pic_boundaries_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_bytes_per_pic_denom</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_bits_per_mb_denom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>log2_max_mv_length_horizontal</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>log2_max_mv_length_vertical</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">44</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">86</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">100</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">110</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">122</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>sps</name><operator>-&gt;</operator><name>constraint_set3_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_num_reorder_frames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_dec_frame_buffering</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_num_reorder_frames</name></expr></argument>, <argument><expr><name>H264_MAX_DPB_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_dec_frame_buffering</name></expr></argument>, <argument><expr><name>H264_MAX_DPB_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>vui_parameters_default</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>, <parameter><decl><type><name>H264RawVUI</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>aspect_ratio_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>video_format</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>video_full_range_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>colour_primaries</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transfer_characteristics</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>matrix_coefficients</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_top_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_sample_loc_type_bottom_field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>fixed_frame_rate_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>low_delay_hrd_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pic_struct_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>motion_vectors_over_pic_boundaries_flag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_bytes_per_pic_denom</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_bits_per_mb_denom</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>log2_max_mv_length_horizontal</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>log2_max_mv_length_vertical</name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">44</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">86</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">100</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">110</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">122</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>sps</name><operator>-&gt;</operator><name>constraint_set3_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_num_reorder_frames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_dec_frame_buffering</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_num_reorder_frames</name></expr></argument>, <argument><expr><name>H264_MAX_DPB_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>max_dec_frame_buffering</name></expr></argument>, <argument><expr><name>H264_MAX_DPB_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sps</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence Parameter Set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_SPS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>profile_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constraint_set0_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constraint_set1_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constraint_set2_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constraint_set3_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constraint_set4_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constraint_set5_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>reserved_zero_2bits</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>level_idc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>seq_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">100</literal> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">110</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">122</literal> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">244</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">44</literal> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">83</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">86</literal> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">118</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">128</literal> <operator>||</operator> <name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">138</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_format_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>separate_colour_plane_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>separate_colour_plane_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>bit_depth_luma_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>bit_depth_chroma_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>qpprime_y_zero_transform_bypass_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>seq_scaling_matrix_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seq_scaling_matrix_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>current</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">12</literal></expr></else></ternary><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>seq_scaling_list_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seq_scaling_list_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>scaling_list</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>scaling_list_4x4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>scaling_list</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>scaling_list_8x8</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>chroma_format_idc</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>current</name><operator>-&gt;</operator><name>profile_idc</name></name> <operator>==</operator> <literal type="number">183</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>separate_colour_plane_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>bit_depth_luma_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>bit_depth_chroma_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_frame_num_minus4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_order_cnt_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>log2_max_pic_order_cnt_lsb_minus4</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>delta_pic_order_always_zero_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>offset_for_non_ref_pic</name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>offset_for_top_to_bottom_field</name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_frames_in_pic_order_cnt_cycle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_frames_in_pic_order_cnt_cycle</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>offset_for_ref_frame</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>max_num_ref_frames</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_DPB_FRAMES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>gaps_in_frame_num_allowed_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_width_in_mbs_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_MB_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_height_in_map_units_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_MB_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>frame_mbs_only_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>mb_adaptive_frame_field_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>direct_8x8_inference_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>frame_cropping_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>frame_cropping_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>frame_crop_left_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>frame_crop_right_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>frame_crop_top_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>frame_crop_bottom_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>vui_parameters_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>vui_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>vui_parameters</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>vui</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>vui_parameters_default</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>vui</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sps_extension</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSPSExtension</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Sequence Parameter Set Extension"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_SPS_EXT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>seq_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>aux_format_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>aux_format_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>bit_depth_aux_minus8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>alpha_incr_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>bit_depth_aux_minus8</name></name> <operator>+</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>alpha_opaque_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>alpha_transparent_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>additional_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>pps</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawPPS</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Picture Parameter Set"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_PPS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>seq_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h264</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id %d not available.\n"</literal></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>entropy_coding_mode_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>bottom_field_pic_order_in_frame_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_slice_groups_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_slice_groups_minus1</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pic_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>iGroup</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pic_size</name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>slice_group_map_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>iGroup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iGroup</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_slice_groups_minus1</name></name></expr>;</condition> <incr><expr><name>iGroup</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>run_length_minus1</name><index>[<expr><name>iGroup</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pic_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>iGroup</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>iGroup</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>num_slice_groups_minus1</name></name></expr>;</condition> <incr><expr><name>iGroup</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>top_left</name><index>[<expr><name>iGroup</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pic_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ues</name><argument_list>(<argument><expr><name><name>bottom_right</name><index>[<expr><name>iGroup</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>top_left</name><index>[<expr><name>iGroup</name></expr>]</index></name></expr></argument>, <argument><expr><name>pic_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>iGroup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>==</operator> <literal type="number">4</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>slice_group_change_direction_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>slice_group_change_rate_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pic_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_size_in_map_units_minus1</name></expr></argument>, <argument><expr><name>pic_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>pic_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>slice_group_id</name></name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_size_in_map_units_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>pic_size_in_map_units_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name><name>current</name><operator>-&gt;</operator><name>num_slice_groups_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>slice_group_id</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>num_slice_groups_minus1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l0_default_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l1_default_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>weighted_pred_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>weighted_bipred_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pic_init_qp_minus26</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">26</literal> <operator>-</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name></expr></argument>, <argument><expr><operator>+</operator><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>pic_init_qs_minus26</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">26</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>chroma_qp_index_offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>deblocking_filter_control_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>constrained_intra_pred_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>redundant_pic_cnt_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>more_rbsp_data</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>more_rbsp_data</name></name></expr></argument>)</argument_list></call></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>transform_8x8_mode_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pic_scaling_matrix_present_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pic_scaling_matrix_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">6</literal></expr></else></ternary><operator>)</operator> <operator>*</operator>

<name><name>current</name><operator>-&gt;</operator><name>transform_8x8_mode_flag</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>pic_scaling_list_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pic_scaling_list_present_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>scaling_list</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>scaling_list_4x4</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>scaling_list</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>scaling_list_8x8</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">6</literal></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>second_chroma_qp_index_offset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">12</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>transform_8x8_mode_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>pic_scaling_matrix_present_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>second_chroma_qp_index_offset</name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_buffering_period</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIBufferingPeriod</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>length</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Buffering Period"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>seq_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h264</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id %d not available.\n"</literal></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>active_sps</name></name> <operator>=</operator> <name>sps</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters</name><operator>.</operator><name>cpb_cnt_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters</name><operator>.</operator><name>initial_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>initial_cpb_removal_delay</name><index>[<expr><name>SchedSelIdx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>nal</name><operator>.</operator><name>initial_cpb_removal_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>initial_cpb_removal_delay_offset</name><index>[<expr><name>SchedSelIdx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>nal</name><operator>.</operator><name>initial_cpb_removal_delay_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters</name><operator>.</operator><name>cpb_cnt_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>length</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters</name><operator>.</operator><name>initial_cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>initial_cpb_removal_delay</name><index>[<expr><name>SchedSelIdx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>vcl</name><operator>.</operator><name>initial_cpb_removal_delay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><name>length</name></expr></argument>, <argument><expr><name><name>initial_cpb_removal_delay_offset</name><index>[<expr><name>SchedSelIdx</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>vcl</name><operator>.</operator><name>initial_cpb_removal_delay_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_pic_timestamp</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIPicTimestamp</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>time_offset_length</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ct_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>nuit_field_based_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>counting_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>full_timestamp_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>discontinuity_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>cnt_dropped_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>n_frames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>full_timestamp_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>seconds_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>minutes_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>hours_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>seconds_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>seconds_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>seconds_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>minutes_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>minutes_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>minutes_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>hours_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>hours_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>hours_value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>time_offset_length</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters</name><operator>.</operator><name>time_offset_length</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>time_offset_length</name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters</name><operator>.</operator><name>time_offset_length</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>time_offset_length</name> <operator>=</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>time_offset_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ib</name><argument_list>(<argument><expr><name>time_offset_length</name></expr></argument>, <argument><expr><name>time_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>time_offset</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_pic_timing</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIPicTiming</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Picture Timing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h264</name><operator>-&gt;</operator><name>active_sps</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_MAX_SPS_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h264</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h264</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No active SPS for pic_timing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters_present_flag</name></name> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawHRD</name> <modifier>*</modifier></type><name>hrd</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hrd</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>nal_hrd_parameters</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hrd</name> <operator>=</operator> <operator>&amp;</operator><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>vcl_hrd_parameters</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"No HRD parameters for pic_timing.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name><name>hrd</name><operator>-&gt;</operator><name>cpb_removal_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>cpb_removal_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name><name>hrd</name><operator>-&gt;</operator><name>dpb_output_delay_length_minus1</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>dpb_output_delay</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>vui</name><operator>.</operator><name>pic_struct_present_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>num_clock_ts</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pic_struct</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>pic_struct</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>num_clock_ts</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>pic_struct</name></name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>clock_timestamp_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>clock_timestamp_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_pic_timestamp</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>timestamp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_pan_scan_rect</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIPanScanRect</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Pan-Scan Rectangle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pan_scan_rect_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>UINT32_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>pan_scan_rect_cancel_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>pan_scan_rect_cancel_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pan_scan_cnt_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>pan_scan_cnt_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_left_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_right_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_top_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>pan_scan_rect_bottom_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pan_scan_rect_repetition_period</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_user_data_registered</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIUserDataRegistered</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>payload_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"User Data Registered ITU-T T.35"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>itu_t_t35_country_code</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>itu_t_t35_country_code</name></name> <operator>!=</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>itu_t_t35_country_code_extension_byte</name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>payload_size</name> <operator>&lt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid SEI user data registered payload.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <operator>*</operator><name>payload_size</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>payload_size</name> <operator>=</operator> <name>i</name> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>itu_t_t35_payload_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_user_data_unregistered</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIUserDataUnregistered</name> <modifier>*</modifier></type><name>current</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>payload_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"User Data Unregistered"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<if_stmt><if>if <condition>(<expr><operator>*</operator><name>payload_size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid SEI user data unregistered payload.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name> <operator>=</operator> <operator>*</operator><name>payload_size</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><operator>*</operator><name>payload_size</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>uuid_iso_iec_11578</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>data_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>user_data_payload_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x00</literal></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_recovery_point</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIRecoveryPoint</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Recovery Point"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>recovery_frame_cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>exact_match_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>broken_link_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>changing_slice_group_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_display_orientation</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIDisplayOrientation</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Display Orientation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>display_orientation_cancel_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>display_orientation_cancel_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>hor_flip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>ver_flip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>anticlockwise_rotation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>display_orientation_repetition_period</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16384</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>display_orientation_extension_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_mastering_display_colour_volume</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIMasteringDisplayColourVolume</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Mastering Display Colour Volume"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>display_primaries_x</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>us</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>display_primaries_y</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>white_point_x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>white_point_y</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">50000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>max_display_mastering_luminance</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>MAX_UINT_BITS</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>min_display_mastering_luminance</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>max_display_mastering_luminance</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_alternative_transfer_characteristics</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,

<parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIAlternativeTransferCharacteristics</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Alternative Transfer Characteristics"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>preferred_transfer_characteristics</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei_payload</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEIPayload</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start_position</name></decl>, <decl><type ref="prev"/><name>end_position</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>start_position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>start_position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<switch>switch <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>payload_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_SEI_TYPE_BUFFERING_PERIOD</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_buffering_period</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>buffering_period</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_PIC_TIMING</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_pic_timing</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>pic_timing</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_PAN_SCAN_RECT</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_pan_scan_rect</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>pan_scan_rect</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_FILLER_PAYLOAD</name></expr>:</case>

<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_USER_DATA_REGISTERED</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_user_data_registered</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>user_data_registered</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_USER_DATA_UNREGISTERED</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_user_data_unregistered</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>user_data_unregistered</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_RECOVERY_POINT</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_recovery_point</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>recovery_point</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_DISPLAY_ORIENTATION</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_display_orientation</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>display_orientation</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_MASTERING_DISPLAY_COLOUR_VOLUME</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_mastering_display_colour_volume</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>mastering_display_colour_volume</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_TYPE_ALTERNATIVE_TRANSFER</name></expr>:</case>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_alternative_transfer_characteristics</name></expr></argument>)</argument_list></call>

<argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>alternative_transfer_characteristics</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data_length</name></name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>allocate</name><argument_list>(<argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data_length</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data_length</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name><name>payload_byte</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><operator>.</operator><name>other</name><operator>.</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bit_equal_to_one</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>bit_equal_to_zero</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><name>end_position</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>end_position</name> <operator>&lt;</operator> <name>start_position</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect SEI payload length: "</literal>

<literal type="string">"header %"</literal><name>PRIu32</name><literal type="string">" bits, actually %d bits.\n"</literal></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name></expr></argument>,

<argument><expr><name>end_position</name> <operator>-</operator> <name>start_position</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>end_position</name> <operator>=</operator> <call><name>put_bits_count</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_size</name></name> <operator>=</operator> <operator>(</operator><name>end_position</name> <operator>-</operator> <name>start_position</name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>sei</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSEI</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Supplemental Enhancement Information"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_SEI</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>H264_MAX_SEI_PAYLOADS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>payload_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>payload_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<while>while <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_type</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_type_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_type</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_size</name> <operator>+=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_size_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>payload_size</name> <operator>+=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_type</name> <operator>=</operator> <name>payload_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_size</name> <operator>=</operator> <name>payload_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>payload_count</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_payload</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cbs_h2645_read_more_rbsp_data</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&gt;=</operator> <name>H264_MAX_SEI_PAYLOADS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many payloads in "</literal>

<literal type="string">"SEI message: found %d.\n"</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>payload_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>start_state</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>start_state</name> <operator>=</operator> <operator>*</operator><name>rw</name></expr>;</expr_stmt>

<expr_stmt><expr><name>need_size</name> <operator>=</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>+</operator> <name>need_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rw</name> <operator>=</operator> <name>start_state</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_type</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_type_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>payload_size</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name>tmp</name> <operator>&gt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>-=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>xu</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>last_payload_size_byte</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">254</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>sei_payload</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>payload</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>aud</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawAUD</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Access Unit Delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_AUD</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>primary_pic_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>ref_pic_list_modification</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h264</name><operator>-&gt;</operator><name>active_sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>mopn</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>ref_pic_list_modification_flag_l0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ref_pic_list_modification_flag_l0</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_MAX_RPLM_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>modification_of_pic_nums_idc</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mopn</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mopn</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mopn</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mopn</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>abs_diff_pic_num_minus1</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>field_pic_flag</name></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mopn</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>long_term_pic_num</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>rplm_l0</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_term_pic_num</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_num_ref_frames</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>ref_pic_list_modification_flag_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>ref_pic_list_modification_flag_l1</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_MAX_RPLM_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>modification_of_pic_nums_idc</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mopn</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>modification_of_pic_nums_idc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mopn</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mopn</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>mopn</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>abs_diff_pic_num_minus1</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>abs_diff_pic_num_minus1</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>current</name><operator>-&gt;</operator><name>field_pic_flag</name></name><operator>)</operator> <operator>*</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>mopn</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>long_term_pic_num</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>rplm_l1</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_term_pic_num</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_num_ref_frames</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>pred_weight_table</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h264</name><operator>-&gt;</operator><name>active_sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>luma_log2_weight_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma</name> <operator>=</operator> <operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name> <operator>&amp;&amp;</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>chroma_log2_weight_denom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l0_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>luma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>luma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>luma_weight_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>luma_offset_l0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>chroma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_weight_l0_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>chroma_weight_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>chroma_offset_l0</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_l1_active_minus1</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>luma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>luma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>luma_weight_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>luma_offset_l1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>chroma</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flags</name><argument_list>(<argument><expr><name><name>chroma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>chroma_weight_l1_flag</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>chroma_weight_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ses</name><argument_list>(<argument><expr><name><name>chroma_offset_l1</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">128</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">127</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>dec_ref_pic_marking</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>idr_pic_flag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h264</name><operator>-&gt;</operator><name>active_sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mmco</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>idr_pic_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>no_output_of_prior_pics_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>long_term_reference_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>adaptive_ref_pic_marking_mode_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>adaptive_ref_pic_marking_mode_flag</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_MAX_MMCO_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>memory_management_control_operation</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memory_management_control_operation</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>mmco</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>memory_management_control_operation</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mmco</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mmco</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>mmco</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>difference_of_pic_nums_minus1</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>difference_of_pic_nums_minus1</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mmco</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>long_term_pic_num</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_term_pic_num</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_num_ref_frames</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mmco</name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name>mmco</name> <operator>==</operator> <literal type="number">6</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>long_term_frame_idx</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>long_term_frame_idx</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_num_ref_frames</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>mmco</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>xue</name><argument_list>(<argument><expr><name>max_long_term_frame_idx_plus1</name></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>mmco</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_long_term_frame_idx_plus1</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>max_num_ref_frames</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>H264_MAX_MMCO_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many "</literal>

<literal type="string">"memory management control operations.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>slice_header</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawSliceHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>CodedBitstreamH264Context</name> <modifier>*</modifier></type><name>h264</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawSPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264RawPPS</name> <modifier>*</modifier></type><name>pps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idr_pic_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_type_i</name></decl>, <decl><type ref="prev"/><name>slice_type_p</name></decl>, <decl><type ref="prev"/><name>slice_type_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_type_si</name></decl>, <decl><type ref="prev"/><name>slice_type_sp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Slice Header"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_SLICE</name> <operator>|</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_IDR_SLICE</name> <operator>|</operator>

<literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_AUXILIARY_SLICE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>==</operator> <name>H264_NAL_AUXILIARY_SLICE</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h264</name><operator>-&gt;</operator><name>last_slice_nal_unit_type</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Auxiliary slice "</literal>

<literal type="string">"is not decodable without the main picture "</literal>

<literal type="string">"in the same access unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>idr_pic_flag</name> <operator>=</operator> <name><name>h264</name><operator>-&gt;</operator><name>last_slice_nal_unit_type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>idr_pic_flag</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>first_mb_in_slice</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>H264_MAX_MB_PIC_SIZE</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>slice_type</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_type_i</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_type_p</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_type_b</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_type_si</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_type_sp</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>%</operator> <literal type="number">5</literal> <operator>==</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>idr_pic_flag</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>slice_type_i</name> <operator>||</operator> <name>slice_type_si</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid slice type %d "</literal>

<literal type="string">"for IDR picture.\n"</literal></expr></argument>, <argument><expr><name><name>current</name><operator>-&gt;</operator><name>slice_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>pic_parameter_set_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pps</name> <operator>=</operator> <name><name>h264</name><operator>-&gt;</operator><name>pps</name><index>[<expr><name><name>current</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PPS id %d not available.\n"</literal></expr></argument>,

<argument><expr><name><name>current</name><operator>-&gt;</operator><name>pic_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>active_pps</name></name> <operator>=</operator> <name>pps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h264</name><operator>-&gt;</operator><name>sps</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sps</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SPS id %d not available.\n"</literal></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>seq_parameter_set_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>active_sps</name></name> <operator>=</operator> <name>sps</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>separate_colour_plane_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>colour_plane_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num_minus4</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>frame_num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>field_pic_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>field_pic_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>bottom_field_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>bottom_field_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>field_pic_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>bottom_field_flag</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>idr_pic_flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>idr_pic_id</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ub</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_pic_order_cnt_lsb_minus4</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>pic_order_cnt_lsb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>bottom_field_pic_order_in_frame_present_flag</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>field_pic_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>delta_pic_order_cnt_bottom</name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>pic_order_cnt_type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name><name>delta_pic_order_cnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>bottom_field_pic_order_in_frame_present_flag</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>field_pic_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name><name>delta_pic_order_cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>INT32_MIN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_pic_order_cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_pic_order_cnt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name><name>delta_pic_order_cnt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>redundant_pic_cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">127</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>redundant_pic_cnt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>!=</operator> <name>H264_NAL_AUXILIARY_SLICE</name>

<operator>&amp;&amp;</operator> <operator>!</operator><name><name>current</name><operator>-&gt;</operator><name>redundant_pic_cnt</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h264</name><operator>-&gt;</operator><name>last_slice_nal_unit_type</name></name> <operator>=</operator>

<name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type_b</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>direct_spatial_mv_pred_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type_p</name> <operator>||</operator> <name>slice_type_sp</name> <operator>||</operator> <name>slice_type_b</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>num_ref_idx_active_override_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>num_ref_idx_active_override_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l0_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type_b</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>num_ref_idx_l1_active_minus1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_ref_idx_l0_active_minus1</name></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l0_default_active_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>num_ref_idx_l1_active_minus1</name></expr></argument>,

<argument><expr><name><name>pps</name><operator>-&gt;</operator><name>num_ref_idx_l1_default_active_minus1</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>==</operator> <literal type="number">20</literal> <operator>||</operator>

<name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_unit_type</name></name> <operator>==</operator> <literal type="number">21</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_ctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MVC / 3DAVC not supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>ref_pic_list_modification</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred_flag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>slice_type_p</name> <operator>||</operator> <name>slice_type_sp</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>slice_type_b</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pred_weight_table</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name><operator>.</operator><name>nal_ref_idc</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>dec_ref_pic_marking</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>idr_pic_flag</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name>slice_type_i</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>slice_type_si</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>cabac_init_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_qp_delta</name></expr></argument>, <argument><expr><operator>-</operator> <literal type="number">51</literal> <operator>-</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name></expr></argument>,

<argument><expr><operator>+</operator> <literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma_minus8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type_sp</name> <operator>||</operator> <name>slice_type_si</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>slice_type_sp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flag</name><argument_list>(<argument><expr><name>sp_for_switch_flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_qs_delta</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">51</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_control_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ue</name><argument_list>(<argument><expr><name>disable_deblocking_filter_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>current</name><operator>-&gt;</operator><name>disable_deblocking_filter_idc</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_alpha_c0_offset_div2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>se</name><argument_list>(<argument><expr><name>slice_beta_offset_div2</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">6</literal></expr></argument>, <argument><expr><operator>+</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_alpha_c0_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_beta_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>disable_deblocking_filter_idc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_alpha_c0_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>infer</name><argument_list>(<argument><expr><name>slice_beta_offset_div2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>num_slice_groups_minus1</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>pps</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator>

<name><name>pps</name><operator>-&gt;</operator><name>slice_group_map_type</name></name> <operator>&lt;=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pic_size</name></decl>, <decl><type ref="prev"/><name>max</name></decl>, <decl><type ref="prev"/><name>bits</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pic_size</name> <operator>=</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_width_in_mbs_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>

<operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>pic_height_in_map_units_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <operator>(</operator><name>pic_size</name> <operator>+</operator> <name><name>pps</name><operator>-&gt;</operator><name>slice_group_change_rate_minus1</name></name><operator>)</operator> <operator>/</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>slice_group_change_rate_minus1</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>max</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>u</name><argument_list>(<argument><expr><name>bits</name></expr></argument>, <argument><expr><name>slice_group_change_cycle</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>entropy_coding_mode_flag</name></name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>byte_alignment</name><argument_list>(<argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>cabac_alignment_one_bit</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>filler</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawFiller</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"Filler Data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>current</name><operator>-&gt;</operator><name>nal_unit_header</name></name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_FILLER_DATA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>READ</name></expr></argument>)</argument_list></call></expr></cpp:if>
<while>while <condition>(<expr><call><name>show_bits</name><argument_list>(<argument><expr><name>rw</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>current</name><operator>-&gt;</operator><name>filler_size</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>current</name><operator>-&gt;</operator><name>filler_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fixed</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ff_byte</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>rbsp_trailing_bits</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>end_of_sequence</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawNALUnitHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"End of Sequence"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_END_SEQUENCE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name> <name>FUNC</name></type>(<name>end_of_stream</name>)<parameter_list>(<parameter><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>RWContext</name> <modifier>*</modifier></type><name>rw</name></decl></parameter>,

<parameter><decl><type><name>H264RawNALUnitHeader</name> <modifier>*</modifier></type><name>current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>HEADER</name><argument_list>(<argument><expr><literal type="string">"End of Stream"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>nal_unit_header</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>rw</name></expr></argument>, <argument><expr><name>current</name></expr></argument>,

<argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>H264_NAL_END_STREAM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
