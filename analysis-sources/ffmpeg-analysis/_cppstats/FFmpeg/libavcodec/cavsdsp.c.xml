<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\cavsdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"idctdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cavsdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P2</name></cpp:macro> <cpp:value>p0_p[-3*stride]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P1</name></cpp:macro> <cpp:value>p0_p[-2*stride]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>P0</name></cpp:macro> <cpp:value>p0_p[-1*stride]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q0</name></cpp:macro> <cpp:value>p0_p[ 0*stride]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q1</name></cpp:macro> <cpp:value>p0_p[ 1*stride]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>Q2</name></cpp:macro> <cpp:value>p0_p[ 2*stride]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>loop_filter_l2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0_p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><name>P0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q0</name> <init>= <expr><name>Q0</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>p0</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>alpha</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>P1</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>Q1</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>alpha</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>P2</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>p0</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>alpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>P0</name> <operator>=</operator> <operator>(</operator><name>P1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>P1</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P1</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>P0</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P1</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>Q2</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>q0</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>alpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Q0</name> <operator>=</operator> <operator>(</operator><name>Q1</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Q1</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>Q1</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>Q0</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>Q1</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>loop_filter_l1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0_p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><name>P0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q0</name> <init>= <expr><name>Q0</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>p0</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>alpha</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>P1</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>Q1</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>q0</name><operator>-</operator><name>p0</name><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>P1</name><operator>-</operator><name>Q1</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>,<argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>P0</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>p0</name><operator>+</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Q0</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>q0</name><operator>-</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>P2</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>P0</name><operator>-</operator><name>P1</name><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>P2</name><operator>-</operator><name>Q0</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>P1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>P1</name><operator>+</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>Q2</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Q1</name><operator>-</operator><name>Q0</name><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>P0</name><operator>-</operator><name>Q2</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Q1</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Q1</name><operator>-</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>loop_filter_c2</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0_p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p0</name> <init>= <expr><name>P0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>q0</name> <init>= <expr><name>Q0</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>p0</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>alpha</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>P1</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>Q1</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name> <init>= <expr><name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <operator>(</operator><name>alpha</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>P2</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>p0</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>alpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>P0</name> <operator>=</operator> <operator>(</operator><name>P1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>P0</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>P1</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>Q2</name><operator>-</operator><name>q0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>q0</name><operator>-</operator><name>p0</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>alpha</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>Q0</name> <operator>=</operator> <operator>(</operator><name>Q1</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>Q0</name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name>Q1</name> <operator>+</operator> <name>s</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>loop_filter_c1</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p0_p</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>abs</name><argument_list>(<argument><expr><name>P0</name><operator>-</operator><name>Q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>alpha</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>P1</name><operator>-</operator><name>P0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name> <operator>&amp;&amp;</operator> <call><name>abs</name><argument_list>(<argument><expr><name>Q1</name><operator>-</operator><name>Q0</name></expr></argument>)</argument_list></call><operator>&lt;</operator><name>beta</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>Q0</name><operator>-</operator><name>P0</name><operator>)</operator><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>P1</name><operator>-</operator><name>Q1</name><operator>+</operator><literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>P0</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>P0</name><operator>+</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>Q0</name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>(<argument><expr><name>Q0</name><operator>-</operator><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P0</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>P2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Q0</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Q1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>Q2</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cavs_filter_lv_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bs1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bs2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bs1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_l2</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bs1</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_l1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bs2</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">8</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_l1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cavs_filter_lh_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bs1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bs2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bs1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_l2</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name></expr></argument>,<argument><expr><name>stride</name></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bs1</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_l1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name></expr></argument>,<argument><expr><name>stride</name></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bs2</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">8</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_l1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name></expr></argument>,<argument><expr><name>stride</name></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cavs_filter_cv_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bs1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bs2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bs1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_c2</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bs1</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_c1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bs2</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_c1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name><operator>*</operator><name>stride</name></expr></argument>,<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cavs_filter_ch_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bs1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bs2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>bs1</name><operator>==</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_c2</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name></expr></argument>,<argument><expr><name>stride</name></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>bs1</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_c1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name></expr></argument>,<argument><expr><name>stride</name></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bs2</name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">4</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter_c1</name><argument_list>(<argument><expr><name>d</name> <operator>+</operator> <name>i</name></expr></argument>,<argument><expr><name>stride</name></expr></argument>,<argument><expr><name>alpha</name></expr></argument>,<argument><expr><name>beta</name></expr></argument>,<argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cavs_idct8_add_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <operator>(</operator><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><operator>)</operator><name>block</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a0</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a3</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b4</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>+</operator> <name>a3</name><operator>)</operator> <operator>+</operator> <name>a1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b5</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>a1</name> <operator>+</operator> <name>a2</name><operator>)</operator> <operator>+</operator> <name>a0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b6</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>a2</name> <operator>-</operator> <name>a1</name><operator>)</operator> <operator>+</operator> <name>a3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b7</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>a2</name> <operator>-</operator> <name>a3</name><operator>)</operator> <operator>-</operator> <name>a2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a7</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a6</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a5</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a4</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b0</name> <init>= <expr><name>a4</name> <operator>+</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b1</name> <init>= <expr><name>a5</name> <operator>+</operator> <name>a7</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b2</name> <init>= <expr><name>a5</name> <operator>-</operator> <name>a7</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b3</name> <init>= <expr><name>a4</name> <operator>-</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>+</operator> <name>b4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b1</name> <operator>+</operator> <name>b5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b2</name> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b3</name> <operator>+</operator> <name>b7</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b3</name> <operator>-</operator> <name>b7</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b2</name> <operator>-</operator> <name>b6</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b1</name> <operator>-</operator> <name>b5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>b0</name> <operator>-</operator> <name>b4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a0</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a2</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a3</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b4</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a0</name> <operator>+</operator> <name>a1</name> <operator>+</operator> <name>a3</name><operator>)</operator> <operator>+</operator> <name>a1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b5</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>a1</name> <operator>+</operator> <name>a2</name><operator>)</operator> <operator>+</operator> <name>a0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b6</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a3</name> <operator>-</operator> <name>a2</name> <operator>-</operator> <name>a1</name><operator>)</operator> <operator>+</operator> <name>a3</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b7</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>a0</name> <operator>-</operator> <name>a2</name> <operator>-</operator> <name>a3</name><operator>)</operator> <operator>-</operator> <name>a2</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a7</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a6</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">10</literal> <operator>*</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a5</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a4</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b0</name> <init>= <expr><name>a4</name> <operator>+</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b1</name> <init>= <expr><name>a5</name> <operator>+</operator> <name>a7</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b2</name> <init>= <expr><name>a5</name> <operator>-</operator> <name>a7</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b3</name> <init>= <expr><name>a4</name> <operator>-</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b0</name> <operator>+</operator> <name>b4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b1</name> <operator>+</operator> <name>b5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b2</name> <operator>+</operator> <name>b6</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>+</operator> <name>b7</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b3</name> <operator>-</operator> <name>b7</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b2</name> <operator>-</operator> <name>b6</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b1</name> <operator>-</operator> <name>b5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_uint8</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>b0</name> <operator>-</operator> <name>b4</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAVS_SUBPIX</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>A</name></type></parameter>, <parameter><type><name>B</name></type></parameter>, <parameter><type><name>C</name></type></parameter>, <parameter><type><name>D</name></type></parameter>, <parameter><type><name>E</name></type></parameter>, <parameter><type><name>F</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##cavs_filt8_h_ ##NAME(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ const int h=8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i;for(i=0; i&lt;h; i++){OP(dst[0], A*src[-2] + B*src[-1] + C*src[0] + D*src[1] + E*src[2] + F*src[3]);OP(dst[1], A*src[-1] + B*src[ 0] + C*src[1] + D*src[2] + E*src[3] + F*src[4]);OP(dst[2], A*src[ 0] + B*src[ 1] + C*src[2] + D*src[3] + E*src[4] + F*src[5]);OP(dst[3], A*src[ 1] + B*src[ 2] + C*src[3] + D*src[4] + E*src[5] + F*src[6]);OP(dst[4], A*src[ 2] + B*src[ 3] + C*src[4] + D*src[5] + E*src[6] + F*src[7]);OP(dst[5], A*src[ 3] + B*src[ 4] + C*src[5] + D*src[6] + E*src[7] + F*src[8]);OP(dst[6], A*src[ 4] + B*src[ 5] + C*src[6] + D*src[7] + E*src[8] + F*src[9]);OP(dst[7], A*src[ 5] + B*src[ 6] + C*src[7] + D*src[8] + E*src[9] + F*src[10]);dst+=dstStride;src+=srcStride;}}static void OPNAME ##cavs_filt8_v_ ##NAME(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ const int w=8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i;for(i=0; i&lt;w; i++){const int srcB= src[-2*srcStride];const int srcA= src[-1*srcStride];const int src0= src[0 *srcStride];const int src1= src[1 *srcStride];const int src2= src[2 *srcStride];const int src3= src[3 *srcStride];const int src4= src[4 *srcStride];const int src5= src[5 *srcStride];const int src6= src[6 *srcStride];const int src7= src[7 *srcStride];const int src8= src[8 *srcStride];const int src9= src[9 *srcStride];const int src10= src[10 *srcStride];OP(dst[0*dstStride], A*srcB + B*srcA + C*src0 + D*src1 + E*src2 + F*src3);OP(dst[1*dstStride], A*srcA + B*src0 + C*src1 + D*src2 + E*src3 + F*src4);OP(dst[2*dstStride], A*src0 + B*src1 + C*src2 + D*src3 + E*src4 + F*src5);OP(dst[3*dstStride], A*src1 + B*src2 + C*src3 + D*src4 + E*src5 + F*src6);OP(dst[4*dstStride], A*src2 + B*src3 + C*src4 + D*src5 + E*src6 + F*src7);OP(dst[5*dstStride], A*src3 + B*src4 + C*src5 + D*src6 + E*src7 + F*src8);OP(dst[6*dstStride], A*src4 + B*src5 + C*src6 + D*src7 + E*src8 + F*src9);OP(dst[7*dstStride], A*src5 + B*src6 + C*src7 + D*src8 + E*src9 + F*src10);dst++;src++;}}static void OPNAME ##cavs_filt16_v_ ##NAME(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_filt8_v_ ##NAME(dst , src , dstStride, srcStride);OPNAME ##cavs_filt8_v_ ##NAME(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;OPNAME ##cavs_filt8_v_ ##NAME(dst , src , dstStride, srcStride);OPNAME ##cavs_filt8_v_ ##NAME(dst+8, src+8, dstStride, srcStride);}static void OPNAME ##cavs_filt16_h_ ##NAME(uint8_t *dst, const uint8_t *src, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_filt8_h_ ##NAME(dst , src , dstStride, srcStride);OPNAME ##cavs_filt8_h_ ##NAME(dst+8, src+8, dstStride, srcStride);src += 8*srcStride;dst += 8*dstStride;OPNAME ##cavs_filt8_h_ ##NAME(dst , src , dstStride, srcStride);OPNAME ##cavs_filt8_h_ ##NAME(dst+8, src+8, dstStride, srcStride);}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAVS_SUBPIX_HV</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>OP</name></type></parameter>, <parameter><type><name>NAME</name></type></parameter>, <parameter><type><name>AH</name></type></parameter>, <parameter><type><name>BH</name></type></parameter>, <parameter><type><name>CH</name></type></parameter>, <parameter><type><name>DH</name></type></parameter>, <parameter><type><name>EH</name></type></parameter>, <parameter><type><name>FH</name></type></parameter>, <parameter><type><name>AV</name></type></parameter>, <parameter><type><name>BV</name></type></parameter>, <parameter><type><name>CV</name></type></parameter>, <parameter><type><name>DV</name></type></parameter>, <parameter><type><name>EV</name></type></parameter>, <parameter><type><name>FV</name></type></parameter>, <parameter><type><name>FULL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##cavs_filt8_hv_ ##NAME(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, ptrdiff_t dstStride, ptrdiff_t srcStride){ int16_t temp[8*(8+5)];int16_t *tmp = temp;const int h=8;const int w=8;const uint8_t *cm = ff_crop_tab + MAX_NEG_CROP;int i;src1 -= 2*srcStride;for(i=0; i&lt;h+5; i++){tmp[0]= AH*src1[-2] + BH*src1[-1] + CH*src1[0] + DH*src1[1] + EH*src1[2] + FH*src1[3];tmp[1]= AH*src1[-1] + BH*src1[ 0] + CH*src1[1] + DH*src1[2] + EH*src1[3] + FH*src1[4];tmp[2]= AH*src1[ 0] + BH*src1[ 1] + CH*src1[2] + DH*src1[3] + EH*src1[4] + FH*src1[5];tmp[3]= AH*src1[ 1] + BH*src1[ 2] + CH*src1[3] + DH*src1[4] + EH*src1[5] + FH*src1[6];tmp[4]= AH*src1[ 2] + BH*src1[ 3] + CH*src1[4] + DH*src1[5] + EH*src1[6] + FH*src1[7];tmp[5]= AH*src1[ 3] + BH*src1[ 4] + CH*src1[5] + DH*src1[6] + EH*src1[7] + FH*src1[8];tmp[6]= AH*src1[ 4] + BH*src1[ 5] + CH*src1[6] + DH*src1[7] + EH*src1[8] + FH*src1[9];tmp[7]= AH*src1[ 5] + BH*src1[ 6] + CH*src1[7] + DH*src1[8] + EH*src1[9] + FH*src1[10];tmp+=8;src1+=srcStride;}if(FULL) {tmp = temp+8*2; for(i=0; i&lt;w; i++) { const int tmpB= tmp[-2*8]; const int tmpA= tmp[-1*8]; const int tmp0= tmp[0 *8]; const int tmp1= tmp[1 *8]; const int tmp2= tmp[2 *8]; const int tmp3= tmp[3 *8]; const int tmp4= tmp[4 *8]; const int tmp5= tmp[5 *8]; const int tmp6= tmp[6 *8]; const int tmp7= tmp[7 *8]; const int tmp8= tmp[8 *8]; const int tmp9= tmp[9 *8]; const int tmp10=tmp[10*8]; OP(dst[0*dstStride], AV*tmpB + BV*tmpA + CV*tmp0 + DV*tmp1 + EV*tmp2 + FV*tmp3 + 64*src2[0*srcStride]); OP(dst[1*dstStride], AV*tmpA + BV*tmp0 + CV*tmp1 + DV*tmp2 + EV*tmp3 + FV*tmp4 + 64*src2[1*srcStride]); OP(dst[2*dstStride], AV*tmp0 + BV*tmp1 + CV*tmp2 + DV*tmp3 + EV*tmp4 + FV*tmp5 + 64*src2[2*srcStride]); OP(dst[3*dstStride], AV*tmp1 + BV*tmp2 + CV*tmp3 + DV*tmp4 + EV*tmp5 + FV*tmp6 + 64*src2[3*srcStride]); OP(dst[4*dstStride], AV*tmp2 + BV*tmp3 + CV*tmp4 + DV*tmp5 + EV*tmp6 + FV*tmp7 + 64*src2[4*srcStride]); OP(dst[5*dstStride], AV*tmp3 + BV*tmp4 + CV*tmp5 + DV*tmp6 + EV*tmp7 + FV*tmp8 + 64*src2[5*srcStride]); OP(dst[6*dstStride], AV*tmp4 + BV*tmp5 + CV*tmp6 + DV*tmp7 + EV*tmp8 + FV*tmp9 + 64*src2[6*srcStride]); OP(dst[7*dstStride], AV*tmp5 + BV*tmp6 + CV*tmp7 + DV*tmp8 + EV*tmp9 + FV*tmp10 + 64*src2[7*srcStride]); dst++; tmp++; src2++; } } else {tmp = temp+8*2; for(i=0; i&lt;w; i++) { const int tmpB= tmp[-2*8]; const int tmpA= tmp[-1*8]; const int tmp0= tmp[0 *8]; const int tmp1= tmp[1 *8]; const int tmp2= tmp[2 *8]; const int tmp3= tmp[3 *8]; const int tmp4= tmp[4 *8]; const int tmp5= tmp[5 *8]; const int tmp6= tmp[6 *8]; const int tmp7= tmp[7 *8]; const int tmp8= tmp[8 *8]; const int tmp9= tmp[9 *8]; const int tmp10=tmp[10*8]; OP(dst[0*dstStride], AV*tmpB + BV*tmpA + CV*tmp0 + DV*tmp1 + EV*tmp2 + FV*tmp3); OP(dst[1*dstStride], AV*tmpA + BV*tmp0 + CV*tmp1 + DV*tmp2 + EV*tmp3 + FV*tmp4); OP(dst[2*dstStride], AV*tmp0 + BV*tmp1 + CV*tmp2 + DV*tmp3 + EV*tmp4 + FV*tmp5); OP(dst[3*dstStride], AV*tmp1 + BV*tmp2 + CV*tmp3 + DV*tmp4 + EV*tmp5 + FV*tmp6); OP(dst[4*dstStride], AV*tmp2 + BV*tmp3 + CV*tmp4 + DV*tmp5 + EV*tmp6 + FV*tmp7); OP(dst[5*dstStride], AV*tmp3 + BV*tmp4 + CV*tmp5 + DV*tmp6 + EV*tmp7 + FV*tmp8); OP(dst[6*dstStride], AV*tmp4 + BV*tmp5 + CV*tmp6 + DV*tmp7 + EV*tmp8 + FV*tmp9); OP(dst[7*dstStride], AV*tmp5 + BV*tmp6 + CV*tmp7 + DV*tmp8 + EV*tmp9 + FV*tmp10); dst++; tmp++; } }}static void OPNAME ##cavs_filt16_hv_ ##NAME(uint8_t *dst, const uint8_t *src1, const uint8_t *src2, ptrdiff_t dstStride, ptrdiff_t srcStride){ OPNAME ##cavs_filt8_hv_ ##NAME(dst , src1, src2 , dstStride, srcStride); OPNAME ##cavs_filt8_hv_ ##NAME(dst+8, src1+8, src2+8, dstStride, srcStride); src1 += 8*srcStride;src2 += 8*srcStride;dst += 8*dstStride;OPNAME ##cavs_filt8_hv_ ##NAME(dst , src1, src2 , dstStride, srcStride); OPNAME ##cavs_filt8_hv_ ##NAME(dst+8, src1+8, src2+8, dstStride, srcStride); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CAVS_MC</name><parameter_list>(<parameter><type><name>OPNAME</name></type></parameter>, <parameter><type><name>SIZE</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void OPNAME ##cavs_qpel ##SIZE ##_mc10_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_h_qpel_l(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc20_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_h_hpel(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc30_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_h_qpel_r(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc01_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_v_qpel_l(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc02_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_v_hpel(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc03_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_v_qpel_r(dst, src, stride, stride);}static void OPNAME ##cavs_qpel ##SIZE ##_mc22_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_jj(dst, src, NULL, stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc11_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_egpr(dst, src, src, stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc13_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_egpr(dst, src, src+stride, stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc31_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_egpr(dst, src, src+1, stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc33_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_egpr(dst, src, src+stride+1,stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc21_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_ff(dst, src, src+stride+1,stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc12_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_ii(dst, src, src+stride+1,stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc32_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_kk(dst, src, src+stride+1,stride, stride); }static void OPNAME ##cavs_qpel ##SIZE ##_mc23_c(uint8_t *dst, const uint8_t *src, ptrdiff_t stride){OPNAME ##cavs_filt ##SIZE ##_hv_qq(dst, src, src+stride+1,stride, stride); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[((b)+4)&gt;&gt;3]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[((b)+64)&gt;&gt;7]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[((b)+32)&gt;&gt;6]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_put4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = cm[((b)+512)&gt;&gt;10]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg1</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = ((a)+cm[((b)+4)&gt;&gt;3] +1)&gt;&gt;1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = ((a)+cm[((b)+64)&gt;&gt;7] +1)&gt;&gt;1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg3</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = ((a)+cm[((b)+32)&gt;&gt;6] +1)&gt;&gt;1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_avg4</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = ((a)+cm[((b)+512)&gt;&gt;10]+1)&gt;&gt;1</cpp:value></cpp:define>

<macro><name>CAVS_SUBPIX</name><argument_list>(<argument>put_</argument> , <argument>op_put1</argument>, <argument>hpel</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX</name><argument_list>(<argument>put_</argument> , <argument>op_put2</argument>, <argument>qpel_l</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX</name><argument_list>(<argument>put_</argument> , <argument>op_put2</argument>, <argument>qpel_r</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>put_</argument>, <argument>op_put3</argument>, <argument>jj</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>put_</argument>, <argument>op_put4</argument>, <argument>ff</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>put_</argument>, <argument>op_put4</argument>, <argument>ii</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>put_</argument>, <argument>op_put4</argument>, <argument>kk</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>put_</argument>, <argument>op_put4</argument>, <argument>qq</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument>-<literal type="number">2</literal></argument>,<argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>put_</argument>, <argument>op_put2</argument>, <argument>egpr</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX</name><argument_list>(<argument>avg_</argument> , <argument>op_avg1</argument>, <argument>hpel</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX</name><argument_list>(<argument>avg_</argument> , <argument>op_avg2</argument>, <argument>qpel_l</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX</name><argument_list>(<argument>avg_</argument> , <argument>op_avg2</argument>, <argument>qpel_r</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument>-<literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>avg_</argument>, <argument>op_avg3</argument>, <argument>jj</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>avg_</argument>, <argument>op_avg4</argument>, <argument>ff</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>avg_</argument>, <argument>op_avg4</argument>, <argument>ii</argument>, <argument>-<literal type="number">1</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>avg_</argument>, <argument>op_avg4</argument>, <argument>kk</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument>-<literal type="number">2</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>avg_</argument>, <argument>op_avg4</argument>, <argument>qq</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">7</literal></argument>, <argument><literal type="number">42</literal></argument>, <argument><literal type="number">96</literal></argument>, <argument>-<literal type="number">2</literal></argument>,<argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>CAVS_SUBPIX_HV</name><argument_list>(<argument>avg_</argument>, <argument>op_avg2</argument>, <argument>egpr</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument><literal type="number">5</literal></argument>, <argument>-<literal type="number">1</literal></argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>CAVS_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>CAVS_MC</name><argument_list>(<argument>put_</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>CAVS_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>CAVS_MC</name><argument_list>(<argument>avg_</argument>, <argument><literal type="number">16</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_cavs_qpel8_mc00_c</name></cpp:macro> <cpp:value>ff_put_pixels8x8_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg_cavs_qpel8_mc00_c</name></cpp:macro> <cpp:value>ff_avg_pixels8x8_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>put_cavs_qpel16_mc00_c</name></cpp:macro> <cpp:value>ff_put_pixels16x16_c</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>avg_cavs_qpel16_mc00_c</name></cpp:macro> <cpp:value>ff_avg_pixels16x16_c</cpp:value></cpp:define>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_cavsdsp_init</name><parameter_list>(<parameter><decl><type><name>CAVSDSPContext</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dspfunc</name><parameter_list>(<parameter><type><name>PFX</name></type></parameter>, <parameter><type><name>IDX</name></type></parameter>, <parameter><type><name>NUM</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>c-&gt;PFX ##_pixels_tab[IDX][ 0] = PFX ##NUM ##_mc00_c; c-&gt;PFX ##_pixels_tab[IDX][ 1] = PFX ##NUM ##_mc10_c; c-&gt;PFX ##_pixels_tab[IDX][ 2] = PFX ##NUM ##_mc20_c; c-&gt;PFX ##_pixels_tab[IDX][ 3] = PFX ##NUM ##_mc30_c; c-&gt;PFX ##_pixels_tab[IDX][ 4] = PFX ##NUM ##_mc01_c; c-&gt;PFX ##_pixels_tab[IDX][ 5] = PFX ##NUM ##_mc11_c; c-&gt;PFX ##_pixels_tab[IDX][ 6] = PFX ##NUM ##_mc21_c; c-&gt;PFX ##_pixels_tab[IDX][ 7] = PFX ##NUM ##_mc31_c; c-&gt;PFX ##_pixels_tab[IDX][ 8] = PFX ##NUM ##_mc02_c; c-&gt;PFX ##_pixels_tab[IDX][ 9] = PFX ##NUM ##_mc12_c; c-&gt;PFX ##_pixels_tab[IDX][10] = PFX ##NUM ##_mc22_c; c-&gt;PFX ##_pixels_tab[IDX][11] = PFX ##NUM ##_mc32_c; c-&gt;PFX ##_pixels_tab[IDX][12] = PFX ##NUM ##_mc03_c; c-&gt;PFX ##_pixels_tab[IDX][13] = PFX ##NUM ##_mc13_c; c-&gt;PFX ##_pixels_tab[IDX][14] = PFX ##NUM ##_mc23_c; c-&gt;PFX ##_pixels_tab[IDX][15] = PFX ##NUM ##_mc33_c</cpp:value></cpp:define>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>put_cavs_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>put_cavs_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>avg_cavs_qpel</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dspfunc</name><argument_list>(<argument><expr><name>avg_cavs_qpel</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cavs_filter_lv</name></name> <operator>=</operator> <name>cavs_filter_lv_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cavs_filter_lh</name></name> <operator>=</operator> <name>cavs_filter_lh_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cavs_filter_cv</name></name> <operator>=</operator> <name>cavs_filter_cv_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cavs_filter_ch</name></name> <operator>=</operator> <name>cavs_filter_ch_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cavs_idct8_add</name></name> <operator>=</operator> <name>cavs_idct8_add_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>idct_perm</name></name> <operator>=</operator> <name>FF_IDCT_PERM_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_cavsdsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
