<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\amfenc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AMF/core/Factory.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AMF/components/VideoEncoderVCE.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;AMF/components/VideoEncoderHEVC.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fifo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AmfTraceWriter</name> <block>{

<decl_stmt><decl><type><name>AMFTraceWriterVtbl</name> <modifier>*</modifier></type><name>vtbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

}</block></struct></type> <name>AmfTraceWriter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AmfContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>avclass</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>amf_handle</name></type> <name>library</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AMFFactory</name> <modifier>*</modifier></type><name>factory</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AMFDebug</name> <modifier>*</modifier></type><name>debug</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AMFTrace</name> <modifier>*</modifier></type><name>trace</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>amf_uint64</name></type> <name>version</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AmfTraceWriter</name></type> <name>tracer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AMFContext</name> <modifier>*</modifier></type><name>context</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AMFComponent</name> <modifier>*</modifier></type><name>encoder</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>amf_bool</name></type> <name>eof</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AMF_SURFACE_FORMAT</name></type> <name>format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_device_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hw_frames_ctx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>hwsurfaces_in_queue</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hwsurfaces_in_queue_max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delayed_drain</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFSurface</name> <modifier>*</modifier></type><name>delayed_surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>delayed_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFifoBuffer</name> <modifier>*</modifier></type><name>timestamp_list</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>dts_delay</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log_to_dbg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>usage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>preanalysis</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_frame_delta_qp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_b_frame_delta_qp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rate_control_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enforce_hrd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filler_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>enable_vbaq</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skip_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_au_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_spacing</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b_frame_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>intra_refresh_mb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coding_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_half_pel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_quarter_pel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aud</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gops_per_idr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header_insertion_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_qp_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_qp_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_qp_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_qp_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tier</name></decl>;</decl_stmt>

}</block></struct></type> <name>AmfContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_amf_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_amf_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_amf_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_amf_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>ff_amf_pix_fmts</name><index>[]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AMF_RETURN_IF_FALSE</name><parameter_list>(<parameter><type><name>avctx</name></type></parameter>, <parameter><type><name>exp</name></type></parameter>, <parameter><type><name>ret_value</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>if (!(exp)) { av_log(avctx, AV_LOG_ERROR, __VA_ARGS__); return ret_value; }</cpp:value></cpp:define>

</unit>
