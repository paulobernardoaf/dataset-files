<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\qpeg.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>QpegContext</name><block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>pic</name></decl>, <modifier>*</modifier><name>ref</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>pal</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>buffer</name></decl>;</decl_stmt>

}</block></struct></type> <name>QpegContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>qpeg_decode_intra</name><parameter_list>(<parameter><decl><type><name>QpegContext</name> <modifier>*</modifier></type><name>qctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c0</name></decl>, <decl><type ref="prev"/><name>c1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>run</name></decl>, <decl><type ref="prev"/><name>copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rows_to_go</name></decl>;</decl_stmt>

<expr_stmt><expr><name>rows_to_go</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>height</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>rows_to_go</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <name>copy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0xFC</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0xF8</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>c1</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>run</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>c0</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>run</name> <operator>=</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x1F</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x3F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>c0</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>c1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>c0</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>+</operator> <name>c0</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name>copy</name> <operator>=</operator> <name>code</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>run</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>run</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>step</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>run</name> <operator>-</operator> <name>i</name></expr></argument>, <argument><expr><name>width</name> <operator>-</operator> <name>filled</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name><operator>+</operator><name>filled</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>filled</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>step</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filled</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rows_to_go</name><operator>--</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>run</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <name>width</name> <operator>&amp;&amp;</operator> <name>rows_to_go</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rows_to_go</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if<condition>(<expr><name>rows_to_go</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>copy</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>copy</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>copy</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>filled</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>filled</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rows_to_go</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>rows_to_go</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>qpeg_table_h</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x04</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>qpeg_table_w</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>=

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x18</literal></expr>, <expr><literal type="number">0x04</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <name>av_noinline</name></type> <name>qpeg_decode_inter</name><parameter_list>(<parameter><decl><type><name>QpegContext</name> <modifier>*</modifier></type><name>qctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>delta</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ctable</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>refdata</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>filled</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_height</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>refdata</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>stride</name><operator>)</operator></expr></argument>, <argument><expr><name>refdata</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>stride</name><operator>)</operator></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>refdata</name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>orig_height</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name>dst</name> <operator>+</operator> <name>height</name> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>height</name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>delta</name></expr>)</condition> <block>{<block_content>

<while>while<condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>==</operator> <literal type="number">0xF0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>me_idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>me_w</name></decl>, <decl><type ref="prev"/><name>me_h</name></decl>, <decl><type ref="prev"/><name>me_x</name></decl>, <decl><type ref="prev"/><name>me_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>me_plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>corr</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>me_idx</name> <operator>=</operator> <name>code</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>me_w</name> <operator>=</operator> <name><name>qpeg_table_w</name><index>[<expr><name>me_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>me_h</name> <operator>=</operator> <name><name>qpeg_table_h</name><index>[<expr><name>me_idx</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>corr</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>corr</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>me_x</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name>corr</name> <operator>&amp;</operator> <literal type="number">0xF</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>val</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>val</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>me_y</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>me_x</name> <operator>+</operator> <name>filled</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>me_x</name> <operator>+</operator> <name>me_w</name> <operator>+</operator> <name>filled</name> <operator>&gt;</operator> <name>width</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>height</name> <operator>-</operator> <name>me_y</name> <operator>-</operator> <name>me_h</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>me_y</name> <operator>&gt;=</operator> <name>orig_height</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>filled</name> <operator>+</operator> <name>me_w</name> <operator>&gt;</operator> <name>width</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>me_h</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>qctx</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bogus motion vector (%i,%i), block size %ix%i at %i,%i\n"</literal></expr></argument>,

<argument><expr><name>me_x</name></expr></argument>, <argument><expr><name>me_y</name></expr></argument>, <argument><expr><name>me_w</name></expr></argument>, <argument><expr><name>me_h</name></expr></argument>, <argument><expr><name>filled</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>me_plane</name> <operator>=</operator> <name>refdata</name> <operator>+</operator> <operator>(</operator><name>filled</name> <operator>+</operator> <name>me_x</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>height</name> <operator>-</operator> <name>me_y</name><operator>)</operator> <operator>*</operator> <name>stride</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>me_h</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>me_w</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>filled</name> <operator>+</operator> <name>i</name> <operator>-</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>stride</name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>me_plane</name><index>[<expr><name>i</name> <operator>-</operator> <operator>(</operator><name>j</name> <operator>*</operator> <name>stride</name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0xE0</literal></expr>)</condition><block type="pseudo"><block_content> 

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0xE0</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>&amp;=</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>code</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>filled</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>filled</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0xC0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>code</name> <operator>&amp;=</operator> <literal type="number">0x1F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>code</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>code</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>filled</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>filled</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>code</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>skip</name></decl>;</decl_stmt>

<expr_stmt><expr><name>code</name> <operator>&amp;=</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>code</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>qctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">320</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>skip</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>filled</name> <operator>+=</operator> <name>skip</name></expr>;</expr_stmt>

<while>while<condition>( <expr><name>filled</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filled</name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>height</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>filled</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ctable</name><index>[<expr><name>code</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>filled</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>filled</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>filled</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>-=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>ctable</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>QpegContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>a</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>pic</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>ref</name> <init>= <expr><name><name>a</name><operator>-&gt;</operator><name>ref</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>outdata</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pal</name> <init>= <expr><call><name>av_packet_get_side_data</name><argument_list>(<argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>AV_PKT_DATA_PALETTE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pal_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">0x86</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Packet is too small\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_move_ref</name><argument_list>(<argument><expr><name>ref</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>outdata</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>ctable</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>delta</name> <operator>==</operator> <literal type="number">0x10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>qpeg_decode_intra</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>outdata</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>qpeg_decode_inter</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>outdata</name></expr></argument>, <argument><expr><name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>ctable</name></expr></argument>, <argument><expr><name><name>ref</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>pal</name> <operator>&amp;&amp;</operator> <name>pal_size</name> <operator>==</operator> <name>AVPALETTE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>palette_has_changed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>pal</name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pal</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Palette size %d is wrong\n"</literal></expr></argument>, <argument><expr><name>pal_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>pal</name></name></expr></argument>, <argument><expr><name>AVPALETTE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_flush</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>QpegContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>a</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pal_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pal_src</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pal_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">1024U</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pal_src</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>+</operator> <name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>-</operator> <name>pal_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>pal_size</name><operator>/</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pal</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xFFU</literal><operator>&lt;&lt;</operator><literal type="number">24</literal> <operator>|</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>pal_src</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_end</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>QpegContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>a</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>QpegContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>a</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name><operator>=</operator> <name>AV_PIX_FMT_PAL8</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_flush</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>pic</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>pic</name></name> <operator>||</operator> <operator>!</operator><name><name>a</name><operator>-&gt;</operator><name>ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>decode_end</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_qpeg_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"qpeg"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Q-team QPEG"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_QPEG</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QpegContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>decode_init</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>decode_end</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>decode_frame</name></expr>,

<expr><operator>.</operator><name>flush</name> <operator>=</operator> <name>decode_flush</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
