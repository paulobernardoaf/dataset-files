<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\hevcpred_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hevcpred.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>POS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>src[(x) + stride * (y)]</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>FUNC</name></type>(<name>intra_pred</name>)<parameter_list>(<parameter><decl><type><name>HEVCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y0</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log2_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; s-&gt;ps.sps-&gt;log2_min_pu_size)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(s-&gt;ref-&gt;tab_mvf[(x) + (y) * min_pu_width])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MVF_PU</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>MVF(PU(x0 + ((x) * (1 &lt;&lt; hshift))), PU(y0 + ((y) * (1 &lt;&lt; vshift))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_INTRA</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(MVF_PU(x, y).pred_flag == PF_INTRA)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_TB_ADDR_ZS</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>s-&gt;ps.pps-&gt;min_tb_addr_zs[(y) * (s-&gt;ps.sps-&gt;tb_mask+2) + (x)]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTEND</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { pixel4 pix = PIXEL_SPLAT_X4(val); for (i = 0; i &lt; (len); i += 4) AV_WN4P(ptr + i, pix); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTEND_RIGHT_CIP</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (i = start; i &lt; (start) + (length); i += 4) if (!IS_INTRA(i, -1)) AV_WN4P(&amp;ptr[i], a); else a = PIXEL_SPLAT_X4(ptr[i+3])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTEND_LEFT_CIP</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (i = start; i &gt; (start) - (length); i--) if (!IS_INTRA(i - 1, -1)) ptr[i - 1] = ptr[i]</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTEND_UP_CIP</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (i = (start); i &gt; (start) - (length); i -= 4) if (!IS_INTRA(-1, i - 3)) AV_WN4P(&amp;ptr[i - 3], a); else a = PIXEL_SPLAT_X4(ptr[i - 3])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EXTEND_DOWN_CIP</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, <parameter><type><name>start</name></type></parameter>, <parameter><type><name>length</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (i = start; i &lt; (start) + (length); i += 4) if (!IS_INTRA(-1, i)) AV_WN4P(&amp;ptr[i], a); else a = PIXEL_SPLAT_X4(ptr[i + 3])</cpp:value></cpp:define>

<decl_stmt><decl><type><name>HEVCLocalContext</name> <modifier>*</modifier></type><name>lc</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>HEVClc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>hshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vshift</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>vshift</name><index>[<expr><name>c_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_h</name> <init>= <expr><name>size</name> <operator>&lt;&lt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_in_tbs_h</name> <init>= <expr><name>size_in_luma_h</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_v</name> <init>= <expr><name>size</name> <operator>&lt;&lt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_in_tbs_v</name> <init>= <expr><name>size_in_luma_v</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name>x0</name> <operator>&gt;&gt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name>y0</name> <operator>&gt;&gt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_tb</name> <init>= <expr><operator>(</operator><name>x0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_tb</name> <init>= <expr><operator>(</operator><name>y0</name> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_tb_size</name></name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cur_tb_addr</name> <init>= <expr><call><name>MIN_TB_ADDR_ZS</name><argument_list>(<argument><expr><name>x_tb</name></expr></argument>, <argument><expr><name>y_tb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>c_idx</name></expr>]</index></name> <operator>+</operator> <name>x</name> <operator>+</operator> <name>y</name> <operator>*</operator> <name>stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_pu_width</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>IntraPredMode</name></name></type> <name>mode</name> <init>= <expr><ternary><condition><expr><name>c_idx</name></expr> ?</condition><then> <expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode_c</name></name></expr> </then><else>:

<expr><name><name>lc</name><operator>-&gt;</operator><name>tu</name><operator>.</operator><name>intra_pred_mode</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>a</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name></type> <name><name>left_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_TB_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name></type> <name><name>filtered_left_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_TB_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name></type> <name><name>top_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_TB_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name></type> <name><name>filtered_top_array</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_TB_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><name>left_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><name>top_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>filtered_left</name> <init>= <expr><name>filtered_left_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>filtered_top</name> <init>= <expr><name>filtered_top_array</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_bottom_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_bottom_left</name></name> <operator>&amp;&amp;</operator> <name>cur_tb_addr</name> <operator>&gt;</operator> <call><name>MIN_TB_ADDR_ZS</name><argument_list>( <argument><expr><name>x_tb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>y_tb</name> <operator>+</operator> <name>size_in_tbs_v</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_left</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_up_left</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up_left</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_up</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cand_up_right</name> <init>= <expr><name><name>lc</name><operator>-&gt;</operator><name>na</name><operator>.</operator><name>cand_up_right</name></name> <operator>&amp;&amp;</operator> <name>cur_tb_addr</name> <operator>&gt;</operator> <call><name>MIN_TB_ADDR_ZS</name><argument_list>(<argument><expr><operator>(</operator><name>x_tb</name> <operator>+</operator> <name>size_in_tbs_h</name><operator>)</operator> <operator>&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>tb_mask</name></name></expr></argument>, <argument><expr><name>y_tb</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bottom_left_size</name> <init>= <expr><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>y0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_v</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><name>y0</name> <operator>+</operator> <name>size_in_luma_v</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_right_size</name> <init>= <expr><operator>(</operator><call><name>FFMIN</name><argument_list>(<argument><expr><name>x0</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>size_in_luma_h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<operator>(</operator><name>x0</name> <operator>+</operator> <name>size_in_luma_h</name><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_pu_v</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>size_in_luma_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_in_luma_pu_h</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>size_in_luma_h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>on_pu_edge_x</name> <init>= <expr><operator>!</operator><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>x0</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>on_pu_edge_y</name> <init>= <expr><operator>!</operator><call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_min_pu_size</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>size_in_luma_pu_h</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>size_in_luma_pu_h</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>x0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_bottom_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>y0</name> <operator>+</operator> <name>size_in_luma_v</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>size_in_luma_pu_v</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator> <name>y_bottom_pu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cand_bottom_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cand_bottom_left</name> <operator>|=</operator> <operator>(</operator><call><name>MVF</name><argument_list>(<argument><expr><name>x_left_pu</name></expr></argument>, <argument><expr><name>y_bottom_pu</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_left</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>x0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_left_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>y0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>size_in_luma_pu_v</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_height</name></name> <operator>-</operator> <name>y_left_pu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cand_left</name> <operator>|=</operator> <operator>(</operator><call><name>MVF</name><argument_list>(<argument><expr><name>x_left_pu</name></expr></argument>, <argument><expr><name>y_left_pu</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_up_left</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_left_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>x0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>y0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator> <call><name>MVF</name><argument_list>(<argument><expr><name>x_left_pu</name></expr></argument>, <argument><expr><name>y_top_pu</name></expr></argument>)</argument_list></call><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_up</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x_top_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>x0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>y0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>size_in_luma_pu_h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator> <name>x_top_pu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cand_up</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cand_up</name> <operator>|=</operator> <operator>(</operator><call><name>MVF</name><argument_list>(<argument><expr><name>x_top_pu</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y_top_pu</name></expr></argument>)</argument_list></call><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_up_right</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>on_pu_edge_y</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_top_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>y0</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x_right_pu</name> <init>= <expr><call><name>PU</name><argument_list>(<argument><expr><name>x0</name> <operator>+</operator> <name>size_in_luma_h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>size_in_luma_pu_h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>min_pu_width</name></name> <operator>-</operator> <name>x_right_pu</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cand_up_right</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>cand_up_right</name> <operator>|=</operator> <operator>(</operator><call><name>MVF</name><argument_list>(<argument><expr><name>x_right_pu</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>y_top_pu</name></expr></argument>)</argument_list></call><operator>.</operator><name>pred_flag</name> <operator>==</operator> <name>PF_INTRA</name><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_TB_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>top</name></expr></argument> , <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>MAX_TB_SIZE</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_up_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>POS</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_up</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_up_right</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>src</name> <operator>-</operator> <name>stride</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <name>size</name> <operator>+</operator> <name>top_right_size</name></expr></argument>, <argument><expr><call><name>POS</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <name>top_right_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>size</name> <operator>-</operator> <name>top_right_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_left</name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>POS</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>+</operator> <name>bottom_left_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>POS</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name> <operator>+</operator> <name>size</name> <operator>+</operator> <name>bottom_left_size</name></expr></argument>, <argument><expr><call><name>POS</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name> <operator>+</operator> <name>bottom_left_size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>size</name> <operator>-</operator> <name>bottom_left_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>constrained_intra_pred_flag</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name> <operator>||</operator> <name>cand_up_left</name> <operator>||</operator> <name>cand_up</name> <operator>||</operator> <name>cand_up_right</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size_max_x</name> <init>= <expr><ternary><condition><expr><name>x0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>size</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then>

<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_max_y</name> <init>= <expr><ternary><condition><expr><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>size</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then>

<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><name>size</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>cand_bottom_left</name></expr>?</condition><then> <expr><name>bottom_left_size</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator> <operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_right</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size_max_x</name> <operator>=</operator> <ternary><condition><expr><name>x0</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>size</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>hshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name></expr> ?</condition><then>

<expr><name>size</name></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>x0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>hshift</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>size_max_y</name> <operator>=</operator> <ternary><condition><expr><name>y0</name> <operator>+</operator> <operator>(</operator><operator>(</operator> <name>size</name><operator>)</operator> <operator>&lt;&lt;</operator> <name>vshift</name><operator>)</operator> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name></expr> ?</condition><then>

<expr><name>size</name></expr> </then><else>: <expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>y0</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>vshift</name></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name> <operator>||</operator> <name>cand_up_left</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>j</name> <operator>&gt;</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>--</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>size_max_x</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>EXTEND_LEFT_CIP</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>size_max_x</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EXTEND_LEFT_CIP</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>EXTEND_LEFT_CIP</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cand_bottom_left</name> <operator>||</operator> <name>cand_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND_DOWN_CIP</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size_max_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>x0</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>y0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND_UP_CIP</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>size_max_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTRA</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>x0</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size_max_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND_UP_CIP</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name>size_max_y</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>size_max_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND_RIGHT_CIP</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>size_max_x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_bottom_left</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cand_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>cand_up_right</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>top</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><name>size</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_up</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_up_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cand_left</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_left</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>left</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><name>size</name></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>top</name></expr></argument>, <argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cand_up_right</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>EXTEND</name><argument_list>(<argument><expr><name>top</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>top</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>intra_smoothing_disabled_flag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>==</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>!=</operator> <name>INTRA_DC</name> <operator>&amp;&amp;</operator> <name>size</name> <operator>!=</operator> <literal type="number">4</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>intra_hor_ver_dist_thresh</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_dist_vert_hor</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">26U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>mode</name> <operator>-</operator> <literal type="number">10U</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>min_dist_vert_hor</name> <operator>&gt;</operator> <name><name>intra_hor_ver_dist_thresh</name><index>[<expr><name>log2_size</name> <operator>-</operator> <literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>threshold</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">5</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>sps_strong_intra_smoothing_enable_flag</name></name> <operator>&amp;&amp;</operator> <name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name>log2_size</name> <operator>==</operator> <literal type="number">5</literal> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>threshold</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>left</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">31</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>top</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">63</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">64</literal> <operator>-</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>left</name><index>[<expr><literal type="number">63</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>filtered_top</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>filtered_left</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filtered_left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>left</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<name><name>left</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>filtered_left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>filtered_top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>top</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<name><name>top</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>left</name> <operator>=</operator> <name>filtered_left</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <name>filtered_top</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>mode</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>INTRA_PLANAR</name></expr>:</case>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_planar</name><index>[<expr><name>log2_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name><operator>,</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>top</name><operator>,</operator>

<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>left</name><operator>,</operator> <name>stride</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>INTRA_DC</name></expr>:</case>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_dc</name></name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>top</name></expr></argument>,

<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>left</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>log2_size</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>hpc</name><operator>.</operator><name>pred_angular</name><index>[<expr><name>log2_size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name><operator>,</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>top</name><operator>,</operator>

<operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>left</name><operator>,</operator> <name>stride</name><operator>,</operator> <name>c_idx</name><operator>,</operator>

<name>mode</name><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INTRA_PRED</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void FUNC(intra_pred_ ##size)(HEVCContext *s, int x0, int y0, int c_idx) { FUNC(intra_pred)(s, x0, y0, size, c_idx); }</cpp:value></cpp:define>

<macro><name>INTRA_PRED</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>INTRA_PRED</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>

<macro><name>INTRA_PRED</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>INTRA_PRED</name><argument_list>(<argument><literal type="number">5</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>INTRA_PRED</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>FUNC</name></type>(<name>pred_planar</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>trafo_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator><name>_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator><name>_left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>trafo_size</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>x</name><operator>)</operator> <operator>*</operator> <name><name>left</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>top</name><index>[<expr><name>size</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <name>y</name><operator>)</operator> <operator>*</operator> <name><name>top</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>left</name><index>[<expr><name>size</name></expr>]</index></name> <operator>+</operator> <name>size</name><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>trafo_size</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRED_PLANAR</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void FUNC(pred_planar_ ##size)(uint8_t *src, const uint8_t *top, const uint8_t *left, ptrdiff_t stride) { FUNC(pred_planar)(src, top, left, stride, size + 2); }</cpp:value></cpp:define>

<macro><name>PRED_PLANAR</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>PRED_PLANAR</name><argument_list>(<argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>PRED_PLANAR</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>PRED_PLANAR</name><argument_list>(<argument><literal type="number">3</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PRED_PLANAR</name></cpp:undef>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred_dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>log2_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>log2_size</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator><name>_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator><name>_left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel4</name></type> <name>a</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>dc</name> <operator>+=</operator> <name><name>left</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>top</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dc</name> <operator>&gt;&gt;=</operator> <name>log2_size</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>PIXEL_SPLAT_X4</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>POS</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name><name>top</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><name><name>left</name><index>[<expr><name>y</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>dc</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name> <name>FUNC</name></type>(<name>pred_angular</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>_left</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><operator>(</operator><name>pixel</name> <operator>*</operator><operator>)</operator><name>_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>top</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator><name>_top</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>left</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>pixel</name> <operator>*</operator><operator>)</operator><name>_left</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>intra_pred_angle</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">32</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><operator>-</operator><literal type="number">26</literal></expr>, <expr><operator>-</operator><literal type="number">32</literal></expr>,

<expr><operator>-</operator><literal type="number">26</literal></expr>, <expr><operator>-</operator><literal type="number">21</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">21</literal></expr>, <expr><literal type="number">26</literal></expr>, <expr><literal type="number">32</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>inv_angle</name><index>[]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">4096</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr>, <expr><operator>-</operator><literal type="number">256</literal></expr>, <expr><operator>-</operator><literal type="number">315</literal></expr>, <expr><operator>-</operator><literal type="number">390</literal></expr>, <expr><operator>-</operator><literal type="number">482</literal></expr>,

<expr><operator>-</operator><literal type="number">630</literal></expr>, <expr><operator>-</operator><literal type="number">910</literal></expr>, <expr><operator>-</operator><literal type="number">1638</literal></expr>, <expr><operator>-</operator><literal type="number">4096</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>angle</name> <init>= <expr><name><name>intra_pred_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name></type> <name><name>ref_array</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <name>MAX_TB_SIZE</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>ref_tmp</name> <init>= <expr><name>ref_array</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>pixel</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last</name> <init>= <expr><operator>(</operator><name>size</name> <operator>*</operator> <name>angle</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>top</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>top</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>*</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>angle</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fact</name> <init>= <expr><operator>(</operator><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>angle</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fact</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name></expr></argument> , <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>fact</name><operator>)</operator> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name>fact</name> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>fact</name><operator>)</operator> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name>fact</name> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>fact</name><operator>)</operator> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name>fact</name> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>fact</name><operator>)</operator> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name>fact</name> <operator>*</operator> <name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>POS</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>AV_RN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref</name><index>[<expr><name>x</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">26</literal> <operator>&amp;&amp;</operator> <name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>top</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>left</name><index>[<expr><name>y</name></expr>]</index></name> <operator>-</operator> <name><name>left</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>left</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>angle</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>last</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_tmp</name><index>[<expr><name>x</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>AV_RN4P</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>left</name><index>[<expr><name>x</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name>last</name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref_tmp</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>*</operator> <name><name>inv_angle</name><index>[<expr><name>mode</name> <operator>-</operator> <literal type="number">11</literal></expr>]</index></name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <name>ref_tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>angle</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fact</name> <init>= <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>angle</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">31</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fact</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">32</literal> <operator>-</operator> <name>fact</name><operator>)</operator> <operator>*</operator> <name><name>ref</name><index>[<expr><name>y</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<name>fact</name> <operator>*</operator> <name><name>ref</name><index>[<expr><name>y</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>ref</name><index>[<expr><name>y</name> <operator>+</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>mode</name> <operator>==</operator> <literal type="number">10</literal> <operator>&amp;&amp;</operator> <name>c_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>x</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>top</name><index>[<expr><name>x</name></expr> ]</index></name> <operator>-</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>POS</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>left</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>top</name><index>[<expr><name>x</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name><name>top</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred_angular_0</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pred_angular</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred_angular_1</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pred_angular</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred_angular_2</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pred_angular</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNC</name></type>(<name>pred_angular_3</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>top</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>left</name></decl></parameter>,

<parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c_idx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mode</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNC</name><argument_list>(<argument><expr><name>pred_angular</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>c_idx</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTEND_LEFT_CIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTEND_RIGHT_CIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTEND_UP_CIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTEND_DOWN_CIP</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>IS_INTRA</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MVF_PU</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MVF</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PU</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>EXTEND</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>MIN_TB_ADDR_ZS</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>POS</name></cpp:undef>

</unit>
