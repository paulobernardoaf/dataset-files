<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\aacps.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacps.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacps_fixed_tablegen.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacps_tablegen.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aacpsdata.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_BASELINE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>numQMFSlots</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define> 

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>num_env_tab</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">4</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>nr_iidicc_par_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">34</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">20</literal></expr>, <expr><literal type="number">34</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int8_t</name></type> <name><name>nr_iidopd_par_tab</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">17</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<enum>enum <block>{

<decl><name>huff_iid_df1</name></decl>,

<decl><name>huff_iid_dt1</name></decl>,

<decl><name>huff_iid_df0</name></decl>,

<decl><name>huff_iid_dt0</name></decl>,

<decl><name>huff_icc_df</name></decl>,

<decl><name>huff_icc_dt</name></decl>,

<decl><name>huff_ipd_df</name></decl>,

<decl><name>huff_ipd_dt</name></decl>,

<decl><name>huff_opd_df</name></decl>,

<decl><name>huff_opd_dt</name></decl>,

}</block>;</enum>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>huff_iid</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>huff_iid_df0</name></expr>,

<expr><name>huff_iid_df1</name></expr>,

<expr><name>huff_iid_dt0</name></expr>,

<expr><name>huff_iid_dt1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>VLC</name></type> <name><name>vlc_ps</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_PAR_DATA</name><parameter_list>(<parameter><type><name>PAR</name></type></parameter>, <parameter><type><name>OFFSET</name></type></parameter>, <parameter><type><name>MASK</name></type></parameter>, <parameter><type><name>ERR_CONDITION</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static int read_ ##PAR ##_data(AVCodecContext *avctx, GetBitContext *gb, PSContext *ps, int8_t (*PAR)[PS_MAX_NR_IIDICC], int table_idx, int e, int dt) { int b, num = ps-&gt;nr_ ##PAR ##_par; VLC_TYPE (*vlc_table)[2] = vlc_ps[table_idx].table; if (dt) { int e_prev = e ? e - 1 : ps-&gt;num_env_old - 1; e_prev = FFMAX(e_prev, 0); for (b = 0; b &lt; num; b++) { int val = PAR[e_prev][b] + get_vlc2(gb, vlc_table, 9, 3) - OFFSET; if (MASK) val &amp;= MASK; PAR[e][b] = val; if (ERR_CONDITION) goto err; } } else { int val = 0; for (b = 0; b &lt; num; b++) { val += get_vlc2(gb, vlc_table, 9, 3) - OFFSET; if (MASK) val &amp;= MASK; PAR[e][b] = val; if (ERR_CONDITION) goto err; } } return 0; err: av_log(avctx, AV_LOG_ERROR, "illegal "#PAR"\n"); return AVERROR_INVALIDDATA; }</cpp:value></cpp:define>

<macro><name>READ_PAR_DATA</name><argument_list>(<argument>iid</argument>, <argument>huff_offset[table_idx]</argument>, <argument><literal type="number">0</literal></argument>, <argument>FFABS(ps-&gt;iid_par[e][b]) &gt; <literal type="number">7</literal> + <literal type="number">8</literal> * ps-&gt;iid_quant</argument>)</argument_list></macro>

<macro><name>READ_PAR_DATA</name><argument_list>(<argument>icc</argument>, <argument>huff_offset[table_idx]</argument>, <argument><literal type="number">0</literal></argument>, <argument>ps-&gt;icc_par[e][b] &gt; <literal type="number">7U</literal></argument>)</argument_list></macro>

<macro><name>READ_PAR_DATA</name><argument_list>(<argument>ipdopd</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x07</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ps_read_extension_data</name><parameter_list>(<parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>PSContext</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ps_extension_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ps_extension_id</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dt</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>read_ipdopd_data</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dt</name></expr> ?</condition><then> <expr><name>huff_ipd_dt</name></expr> </then><else>: <expr><name>huff_ipd_df</name></expr></else></ternary></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>read_ipdopd_data</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dt</name></expr> ?</condition><then> <expr><name>huff_opd_dt</name></expr> </then><else>: <expr><name>huff_opd_df</name></expr></else></ternary></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ipdopd_reset</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ipd_hist</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>opd_hist</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>PS_MAX_NR_IPDOPD</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>opd_hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ipd_hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name> <name>AAC_RENAME</name></type>(<name>ff_ps_read_data</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb_host</name></decl></parameter>, <parameter><decl><type><name>PSContext</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits_left</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_count_start</name> <init>= <expr><call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb_host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits_consumed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gbc</name> <init>= <expr><operator>*</operator><name>gb_host</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>gb</name> <init>= <expr><operator>&amp;</operator><name>gbc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>header</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>enable_iid</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_iid</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>iid_mode</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>iid_mode</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"iid_mode %d is reserved.\n"</literal></expr></argument>,

<argument><expr><name>iid_mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_iid_par</name></name> <operator>=</operator> <name><name>nr_iidicc_par_tab</name><index>[<expr><name>iid_mode</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_quant</name></name> <operator>=</operator> <name>iid_mode</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_ipdopd_par</name></name> <operator>=</operator> <name><name>nr_iidopd_par_tab</name><index>[<expr><name>iid_mode</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>enable_icc</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_icc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_mode</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>icc_mode</name></name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"icc_mode %d is reserved.\n"</literal></expr></argument>,

<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_mode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_icc_par</name></name> <operator>=</operator> <name><name>nr_iidicc_par_tab</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>icc_mode</name></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ext</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>frame_class</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name> <operator>=</operator> <name><name>num_env_tab</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>frame_class</name></name></expr>]</index><index>[<expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>frame_class</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name>e</name></expr>]</index></name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name>e</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"border_position non monotone.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;=</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name>e</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>e</name> <operator>*</operator> <name>numQMFSlots</name> <operator>&gt;&gt;</operator> <name><name>ff_log2_tab</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_iid</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dt</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_iid_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name></expr></argument>, <argument><expr><name><name>huff_iid</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>dt</name><operator>+</operator><name><name>ps</name><operator>-&gt;</operator><name>iid_quant</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_icc</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dt</name> <init>= <expr><call><name>get_bits1</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>read_icc_data</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>dt</name></expr> ?</condition><then> <expr><name>huff_icc_dt</name></expr> </then><else>: <expr><name>huff_icc_df</name></expr></else></ternary></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ext</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>==</operator> <literal type="number">15</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cnt</name> <operator>+=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name> <operator>*=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ps_extension_id</name> <init>= <expr><call><name>get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>cnt</name> <operator>-=</operator> <literal type="number">2</literal> <operator>+</operator> <call><name>ps_read_extension_data</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>ps</name></expr></argument>, <argument><expr><name>ps_extension_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"ps extension overflow %d\n"</literal></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>skip_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name> <operator>&amp;=</operator> <operator>!</operator><name>PS_BASELINE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name> <operator>||</operator> <name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>]</index></name> <operator>&lt;</operator> <name>numQMFSlots</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>source</name> <init>= <expr><ternary><condition><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr> ?</condition><then> <expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>source</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>source</name> <operator>!=</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_iid</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name><operator>+</operator><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name><operator>+</operator><name>source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_icc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name><operator>+</operator><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name><operator>+</operator><name>source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name><operator>+</operator><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name><operator>+</operator><name>source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name><operator>+</operator><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name><operator>+</operator><name>source</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_iid</name></name></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>nr_iid_par</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>iid_quant</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"iid_par invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_icc</name></name></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>nr_iid_par</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">7U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"icc_par invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>err</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>]</index></name> <operator>=</operator> <name>numQMFSlots</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>is34bands_old</name></name> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>is34bands</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PS_BASELINE</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>enable_iid</name></name> <operator>||</operator> <name><name>ps</name><operator>-&gt;</operator><name>enable_icc</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>is34bands</name></name> <operator>=</operator> <operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>enable_iid</name></name> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>nr_iid_par</name></name> <operator>==</operator> <literal type="number">34</literal><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>ps</name><operator>-&gt;</operator><name>enable_icc</name></name> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>nr_icc_par</name></name> <operator>==</operator> <literal type="number">34</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>header</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bits_consumed</name> <operator>=</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bit_count_start</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits_consumed</name> <operator>&lt;=</operator> <name>bits_left</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb_host</name></expr></argument>, <argument><expr><name>bits_consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bits_consumed</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Expected to read %d PS bits actually read %d.\n"</literal></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>, <argument><expr><name>bits_consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>skip_bits_long</name><argument_list>(<argument><expr><name>gb_host</name></expr></argument>, <argument><expr><name>bits_left</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>bits_left</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>hybrid2_re</name><argument_list>(<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <name><name>filter</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>, <argument><expr><name>int</name> <name>reverse</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>in</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>re_in</name> <init>= <expr><call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>filter</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>re_op</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>im_in</name> <init>= <expr><call><name>AAC_MUL31</name><argument_list>(<argument><expr><name><name>filter</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>INT64FLOAT</name></type> <name>im_op</name> <init>= <expr><literal type="number">0.0f</literal></expr></init></decl>;</decl_stmt> 

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>re_op</name> <operator>+=</operator> <operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>im_op</name> <operator>+=</operator> <operator>(</operator><name>INT64FLOAT</name><operator>)</operator><name><name>filter</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><name><name>in</name><index>[<expr><name>j</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">12</literal><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>re_op</name> <operator>=</operator> <operator>(</operator><name>re_op</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>im_op</name> <operator>=</operator> <operator>(</operator><name>im_op</name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>out</name><index>[ <expr><name>reverse</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>INTFLOAT</name><operator>)</operator><operator>(</operator><name>re_in</name> <operator>+</operator> <name>re_op</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[ <expr><name>reverse</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>INTFLOAT</name><operator>)</operator><operator>(</operator><name>im_in</name> <operator>+</operator> <name>im_op</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>!</operator><name>reverse</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>INTFLOAT</name><operator>)</operator><operator>(</operator><name>re_in</name> <operator>-</operator> <name>re_op</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><operator>!</operator><name>reverse</name></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>INTFLOAT</name><operator>)</operator><operator>(</operator><name>im_in</name> <operator>-</operator> <name>im_op</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>hybrid6_cx</name><argument_list>(<argument><expr><name>PSDSPContext</name> <operator>*</operator><name>dsp</name></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><name>TABLE_CONST</name> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>N</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>in</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>hybrid_analysis</name></name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name>filter</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>temp</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>hybrid4_8_12_cx</name><argument_list>(<argument><expr><name>PSDSPContext</name> <operator>*</operator><name>dsp</name></expr></argument>,

<argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>in</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>,

<argument><expr><name>TABLE_CONST</name> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>filter</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>N</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>in</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>hybrid_analysis</name></name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name>filter</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hybrid_analysis</name><parameter_list>(<parameter><decl><type><name>PSDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>out</name><index>[<expr><literal type="number">91</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name></type> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><literal type="number">44</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is34</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">38</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name><operator>+</operator><literal type="number">6</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>L</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>is34</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>hybrid4_8_12_cx</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>f34_0_12</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid4_8_12_cx</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">12</literal></expr></argument>, <argument><expr><name>f34_1_8</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid4_8_12_cx</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">20</literal></expr></argument>, <argument><expr><name>f34_2_4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid4_8_12_cx</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">24</literal></expr></argument>, <argument><expr><name>f34_2_4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid4_8_12_cx</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">28</literal></expr></argument>, <argument><expr><name>f34_2_4</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>hybrid_analysis_ileave</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">27</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>hybrid6_cx</name><argument_list>(<argument><expr><name>dsp</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>f20_0_8</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid2_re</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">6</literal></expr></argument>, <argument><expr><name>g1_Q2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid2_re</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>out</name><operator>+</operator><literal type="number">8</literal></expr></argument>, <argument><expr><name>g1_Q2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>hybrid_analysis_ileave</name></name><argument_list>(<argument><expr><name>out</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index></name><operator>+</operator><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">6</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>in</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>hybrid_synthesis</name><parameter_list>(<parameter><decl><type><name>PSDSPContext</name> <modifier>*</modifier></type><name>dsp</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>out</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>INTFLOAT</name></type> <name><name>in</name><index>[<expr><literal type="number">91</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is34</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is34</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[ <expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[ <expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">12</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">12</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">20</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">20</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">24</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">24</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">28</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">28</literal><operator>+</operator><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>hybrid_synthesis_deint</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">27</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">5</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">6</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">7</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>out</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>UINTFLOAT</name><operator>)</operator><name><name>in</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>in</name><index>[<expr><literal type="number">9</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>dsp</name><operator>-&gt;</operator><name>hybrid_synthesis_deint</name></name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECAY_SLOPE</name></cpp:macro> <cpp:value>Q30(0.05f)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>NR_PAR_BANDS</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">34</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>NR_IPDOPD_BANDS</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">11</literal></expr>, <expr><literal type="number">17</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>NR_BANDS</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">71</literal></expr>, <expr><literal type="number">91</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>DECAY_CUTOFF</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">32</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>NR_ALLPASS_BANDS</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">50</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>SHORT_DELAY_BAND</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">42</literal></expr>, <expr><literal type="number">62</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_idx_10_to_20</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>par_mapped</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>b</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>b</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>b</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>par_mapped</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>b</name></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_idx_34_to_20</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>par_mapped</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">13</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">21</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">23</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">25</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">27</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">33</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_val_34_to_20</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name></type> <name><name>par</name><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">1431655765</literal> <operator>+</operator> \

<literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">1431655765</literal> <operator>+</operator> \

<literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <literal type="number">1431655765</literal> <operator>+</operator> \

<literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">1431655765</literal> <operator>+</operator> \

<literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.33333333f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.33333333f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.33333333f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.33333333f</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><literal type="number">20</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><literal type="number">22</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><literal type="number">23</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><literal type="number">24</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><literal type="number">26</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><literal type="number">27</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>par</name><index>[<expr><literal type="number">28</literal></expr>]</index></name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>par</name><index>[<expr><literal type="number">29</literal></expr>]</index></name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>par</name><index>[<expr><literal type="number">30</literal></expr>]</index></name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><operator>(</operator><name><name>par</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name><name>par</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[<expr><literal type="number">31</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">0.25f</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_idx_10_to_34</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>par_mapped</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_idx_20_to_34</name><parameter_list>(<parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>par_mapped</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>par</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>full</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>full</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par_mapped</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_val_20_to_34</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name></type> <name><name>par</name><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">33</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">31</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">30</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">29</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">28</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">27</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">26</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">25</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">23</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">22</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">21</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">20</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">19</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">18</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">17</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_HALF_SUM</name><argument_list>(<argument><expr><name><name>par</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>decorrelation</name><argument_list>(<argument><expr><name>PSContext</name> <operator>*</operator><name>ps</name></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>out</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>s</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>is34</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>power</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">34</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><name>PS_QMF_TIME_SLOTS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>transient_gain</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">34</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><name>PS_QMF_TIME_SLOTS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>peak_decay_nrg</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>peak_decay_nrg</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>power_smooth</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>power_smooth</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>peak_decay_diff_smooth</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>peak_decay_diff_smooth</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>delay</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_QMF_TIME_SLOTS</name> <operator>+</operator> <name>PS_MAX_DELAY</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>delay</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>ap_delay</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_AP_LINKS</name></expr>]</index><index>[<expr><name>PS_QMF_TIME_SLOTS</name> <operator>+</operator> <name>PS_MAX_AP_DELAY</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>ap_delay</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>transient_impact</name> <init>= <expr><literal type="number">1.5f</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>a_smooth</name> <init>= <expr><literal type="number">0.25f</literal></expr></init></decl>;</decl_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>k_to_i</name> <init>= <expr><ternary><condition><expr><name>is34</name></expr> ?</condition><then> <expr><name>k_to_i_34</name></expr> </then><else>: <expr><name>k_to_i_20</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>nL</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>INTFLOAT</name></type> <name>peak_decay_factor</name> <init>= <expr><call><name>Q31</name><argument_list>(<argument><expr><literal type="number">0.76592833836465f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>power</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">34</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>power</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>is34</name> <operator>!=</operator> <name><name>ps</name><operator>-&gt;</operator><name>is34bands_old</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>peak_decay_nrg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>peak_decay_nrg</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>power_smooth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>power_smooth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>peak_decay_diff_smooth</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>peak_decay_diff_smooth</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>delay</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ap_delay</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ap_delay</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>NR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>k_to_i</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ps</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>add_squares</name></name><argument_list>(<argument><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>nL</name> <operator>-</operator> <name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>NR_PAR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nL</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>decayed_peak</name></decl>;</decl_stmt>

<expr_stmt><expr><name>decayed_peak</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>peak_decay_factor</name> <operator>*</operator> \

<name><name>peak_decay_nrg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0x40000000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>peak_decay_nrg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>decayed_peak</name></expr></argument>, <argument><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>power_smooth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>power</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>+</operator> <literal type="number">2LL</literal> <operator>-</operator> <name><name>power_smooth</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>peak_decay_diff_smooth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name><name>peak_decay_nrg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2LL</literal> <operator>-</operator> <name><name>power</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> \

<name><name>peak_decay_diff_smooth</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>peak_decay_diff_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>transient_gain</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>power_smooth</name><index>[<expr><name>i</name></expr>]</index></name><operator>*</operator><literal type="number">43691LL</literal> <operator>/</operator> <name><name>peak_decay_diff_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>transient_gain</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>NR_PAR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>n0</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nL</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>decayed_peak</name> <init>= <expr><name>peak_decay_factor</name> <operator>*</operator> <name><name>peak_decay_nrg</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>denom</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>peak_decay_nrg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>decayed_peak</name></expr></argument>, <argument><expr><name><name>power</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>power_smooth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>a_smooth</name> <operator>*</operator> <operator>(</operator><name><name>power</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>power_smooth</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>peak_decay_diff_smooth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>a_smooth</name> <operator>*</operator> <operator>(</operator><name><name>peak_decay_nrg</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>power</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>-</operator> <name><name>peak_decay_diff_smooth</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>denom</name> <operator>=</operator> <name>transient_impact</name> <operator>*</operator> <name><name>peak_decay_diff_smooth</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>transient_gain</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>denom</name> <operator>&gt;</operator> <name><name>power_smooth</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>power_smooth</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>denom</name></expr> </then><else>: <expr><literal type="number">1.0f</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>NR_ALLPASS_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><name><name>k_to_i</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<decl_stmt><decl><type><name>int</name></type> <name>g_decay_slope</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>-</operator> <name><name>DECAY_CUTOFF</name><index>[<expr><name>is34</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g_decay_slope</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<if type="elseif">else if <condition>(<expr><name>k</name> <operator>-</operator> <name><name>DECAY_CUTOFF</name><index>[<expr><name>is34</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g_decay_slope</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>g_decay_slope</name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal><operator>)</operator> <operator>-</operator> <name>DECAY_SLOPE</name> <operator>*</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name><name>DECAY_CUTOFF</name><index>[<expr><name>is34</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>float</name></type> <name>g_decay_slope</name> <init>= <expr><literal type="number">1.f</literal> <operator>-</operator> <name>DECAY_SLOPE</name> <operator>*</operator> <operator>(</operator><name>k</name> <operator>-</operator> <name><name>DECAY_CUTOFF</name><index>[<expr><name>is34</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>g_decay_slope</name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name>g_decay_slope</name></expr></argument>, <argument><expr><literal type="number">0.f</literal></expr></argument>, <argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name>nL</name></expr></argument>, <argument><expr><name>PS_MAX_DELAY</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name>PS_MAX_DELAY</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>numQMFSlots</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>PS_AP_LINKS</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ap_delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ap_delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index></name><operator>+</operator><name>numQMFSlots</name></expr></argument>, <argument><expr><literal type="number">5</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ap_delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><name>m</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>ps</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>decorrelate</name></name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>PS_MAX_DELAY</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name><name>ap_delay</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>phi_fract</name><index>[<expr><name>is34</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name><name>Q_fract_allpass</name><index>[<expr><name>is34</name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>transient_gain</name><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name>g_decay_slope</name></expr></argument>, <argument><expr><name>nL</name> <operator>-</operator> <name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>SHORT_DELAY_BAND</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>k_to_i</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name>nL</name></expr></argument>, <argument><expr><name>PS_MAX_DELAY</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name>PS_MAX_DELAY</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>numQMFSlots</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ps</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mul_pair_single</name></name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>PS_MAX_DELAY</name> <operator>-</operator> <literal type="number">14</literal></expr></argument>,

<argument><expr><name><name>transient_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nL</name> <operator>-</operator> <name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>NR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><name><name>k_to_i</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name>nL</name></expr></argument>, <argument><expr><name>PS_MAX_DELAY</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name><operator>+</operator><name>PS_MAX_DELAY</name></expr></argument>, <argument><expr><name><name>s</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name>numQMFSlots</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ps</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mul_pair_single</name></name><argument_list>(<argument><expr><name><name>out</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>delay</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>PS_MAX_DELAY</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>transient_gain</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>nL</name> <operator>-</operator> <name>n0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>remap34</name><argument_list>(<argument><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>p_par_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></expr></argument>,

<argument><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>par</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></expr></argument>,

<argument><expr><name>int</name> <name>num_par</name></expr></argument>, <argument><expr><name>int</name> <name>num_env</name></expr></argument>, <argument><expr><name>int</name> <name>full</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>par_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <operator>*</operator><name>p_par_mapped</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_par</name> <operator>==</operator> <literal type="number">20</literal> <operator>||</operator> <name>num_par</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>num_env</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>map_idx_20_to_34</name><argument_list>(<argument><expr><name><name>par_mapped</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_par</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name>num_par</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>num_env</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>map_idx_10_to_34</name><argument_list>(<argument><expr><name><name>par_mapped</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_par_mapped</name> <operator>=</operator> <name>par</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>remap20</name><argument_list>(<argument><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><operator>*</operator><name>p_par_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></expr></argument>,

<argument><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>par</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></expr></argument>,

<argument><expr><name>int</name> <name>num_par</name></expr></argument>, <argument><expr><name>int</name> <name>num_env</name></expr></argument>, <argument><expr><name>int</name> <name>full</name></expr></argument>)</argument_list>

<block>{<block_content>

<expr_stmt><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>par_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <operator>*</operator><name>p_par_mapped</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>num_par</name> <operator>==</operator> <literal type="number">34</literal> <operator>||</operator> <name>num_par</name> <operator>==</operator> <literal type="number">17</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>num_env</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>map_idx_34_to_20</name><argument_list>(<argument><expr><name><name>par_mapped</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>num_par</name> <operator>==</operator> <literal type="number">10</literal> <operator>||</operator> <name>num_par</name> <operator>==</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>num_env</name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>map_idx_10_to_20</name><argument_list>(<argument><expr><name><name>par_mapped</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>par</name><index>[<expr><name>e</name></expr>]</index></name></expr></argument>, <argument><expr><name>full</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p_par_mapped</name> <operator>=</operator> <name>par</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name></type> <name>stereo_processing</name><argument_list>(<argument><expr><name>PSContext</name> <operator>*</operator><name>ps</name></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>l</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>r</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>is34</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>e</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>H11</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NUM_ENV</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>H11</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>H12</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NUM_ENV</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>H12</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>H21</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NUM_ENV</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>H21</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>H22</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NUM_ENV</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>H22</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>opd_hist</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>opd_hist</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ipd_hist</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_hist</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>iid_mapped_buf</name><index>[<expr><name>PS_MAX_NUM_ENV</name></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>icc_mapped_buf</name><index>[<expr><name>PS_MAX_NUM_ENV</name></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>ipd_mapped_buf</name><index>[<expr><name>PS_MAX_NUM_ENV</name></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>opd_mapped_buf</name><index>[<expr><name>PS_MAX_NUM_ENV</name></expr>]</index><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>iid_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name>iid_mapped_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>icc_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name>icc_mapped_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>ipd_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name>ipd_mapped_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>opd_mapped</name></expr></argument>)</argument_list></call><index>[<expr><name>PS_MAX_NR_IIDICC</name></expr>]</index> <operator>=</operator> <name>opd_mapped_buf</name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int8_t</name> <modifier>*</modifier></type><name>k_to_i</name> <init>= <expr><ternary><condition><expr><name>is34</name></expr> ?</condition><then> <expr><name>k_to_i_34</name></expr> </then><else>: <expr><name>k_to_i_20</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TABLE_CONST</name></type> <name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>H_LUT</name></expr></argument>)</argument_list>[8][4] <init>= <expr><ternary><condition><expr><operator>(</operator><name>PS_BASELINE</name> <operator>||</operator> <name><name>ps</name><operator>-&gt;</operator><name>icc_mode</name></name> <operator>&lt;</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then> <expr><name>HA</name></expr> </then><else>: <expr><name>HB</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name><name>ps</name><operator>-&gt;</operator><name>num_env_old</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>PS_MAX_NR_IIDICC</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is34</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remap34</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iid_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_iid_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remap34</name><argument_list>(<argument><expr><operator>&amp;</operator><name>icc_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_icc_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remap34</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ipd_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_ipdopd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remap34</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opd_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_ipdopd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ps</name><operator>-&gt;</operator><name>is34bands_old</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_20_to_34</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipdopd_reset</name><argument_list>(<argument><expr><name>ipd_hist</name></expr></argument>, <argument><expr><name>opd_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>remap20</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iid_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>iid_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_iid_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remap20</name><argument_list>(<argument><expr><operator>&amp;</operator><name>icc_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>icc_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_icc_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>remap20</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ipd_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ipd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_ipdopd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>remap20</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opd_mapped</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>opd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>nr_ipdopd_par</name></name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ps</name><operator>-&gt;</operator><name>is34bands_old</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>map_val_34_to_20</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ipdopd_reset</name><argument_list>(<argument><expr><name>ipd_hist</name></expr></argument>, <argument><expr><name>opd_hist</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name><name>ps</name><operator>-&gt;</operator><name>num_env</name></name></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>b</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>NR_PAR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h11</name></decl>, <decl><type ref="prev"/><name>h12</name></decl>, <decl><type ref="prev"/><name>h21</name></decl>, <decl><type ref="prev"/><name>h22</name></decl>;</decl_stmt>

<expr_stmt><expr><name>h11</name> <operator>=</operator> <name><name>H_LUT</name><index>[<expr><name><name>iid_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">23</literal> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>iid_quant</name></name></expr>]</index><index>[<expr><name><name>icc_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h12</name> <operator>=</operator> <name><name>H_LUT</name><index>[<expr><name><name>iid_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">23</literal> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>iid_quant</name></name></expr>]</index><index>[<expr><name><name>icc_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h21</name> <operator>=</operator> <name><name>H_LUT</name><index>[<expr><name><name>iid_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">23</literal> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>iid_quant</name></name></expr>]</index><index>[<expr><name><name>icc_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h22</name> <operator>=</operator> <name><name>H_LUT</name><index>[<expr><name><name>iid_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal> <operator>+</operator> <literal type="number">23</literal> <operator>*</operator> <name><name>ps</name><operator>-&gt;</operator><name>iid_quant</name></name></expr>]</index><index>[<expr><name><name>icc_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PS_BASELINE</name> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&lt;</operator> <name><name>NR_IPDOPD_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>h11i</name></decl>, <decl><type ref="prev"/><name>h12i</name></decl>, <decl><type ref="prev"/><name>h21i</name></decl>, <decl><type ref="prev"/><name>h22i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>ipd_adj_re</name></decl>, <decl><type ref="prev"/><name>ipd_adj_im</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>opd_idx</name> <init>= <expr><name><name>opd_hist</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>opd_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ipd_idx</name> <init>= <expr><name><name>ipd_hist</name><index>[<expr><name>b</name></expr>]</index></name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name><name>ipd_mapped</name><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>opd_re</name> <init>= <expr><name><name>pd_re_smooth</name><index>[<expr><name>opd_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>opd_im</name> <init>= <expr><name><name>pd_im_smooth</name><index>[<expr><name>opd_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>ipd_re</name> <init>= <expr><name><name>pd_re_smooth</name><index>[<expr><name>ipd_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>ipd_im</name> <init>= <expr><name><name>pd_im_smooth</name><index>[<expr><name>ipd_idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>opd_hist</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>opd_idx</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ipd_hist</name><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>ipd_idx</name> <operator>&amp;</operator> <literal type="number">0x3F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ipd_adj_re</name> <operator>=</operator> <call><name>AAC_MADD30</name><argument_list>(<argument><expr><name>opd_re</name></expr></argument>, <argument><expr><name>ipd_re</name></expr></argument>, <argument><expr><name>opd_im</name></expr></argument>, <argument><expr><name>ipd_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ipd_adj_im</name> <operator>=</operator> <call><name>AAC_MSUB30</name><argument_list>(<argument><expr><name>opd_im</name></expr></argument>, <argument><expr><name>ipd_re</name></expr></argument>, <argument><expr><name>opd_re</name></expr></argument>, <argument><expr><name>ipd_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h11i</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h11</name></expr></argument>, <argument><expr><name>opd_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h11</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h11</name></expr></argument>, <argument><expr><name>opd_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h12i</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h12</name></expr></argument>, <argument><expr><name>ipd_adj_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h12</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h12</name></expr></argument>, <argument><expr><name>ipd_adj_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h21i</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h21</name></expr></argument>, <argument><expr><name>opd_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h21</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h21</name></expr></argument>, <argument><expr><name>opd_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h22i</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h22</name></expr></argument>, <argument><expr><name>ipd_adj_im</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h22</name> <operator>=</operator> <call><name>AAC_MUL30</name><argument_list>(<argument><expr><name>h22</name></expr></argument>, <argument><expr><name>ipd_adj_re</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h11i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h12i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h21i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h22i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h11</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h12</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h21</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>=</operator> <name>h22</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>NR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>h_step</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name>e</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stop</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>border_position</name><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>width</name> <init>= <expr><call><name>Q30</name><argument_list>(<argument><expr><literal type="number">1.f</literal></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>stop</name> <operator>-</operator> <name>start</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>stop</name> <operator>-</operator> <name>start</name><operator>)</operator></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">2U</literal><operator>*</operator><name>width</name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>k_to_i</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PS_BASELINE</name> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>is34</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <literal type="number">13</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&gt;=</operator> <literal type="number">9</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>is34</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PS_BASELINE</name> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H11</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H12</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H21</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h_step</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>AAC_MSUB31_V3</name><argument_list>(<argument><expr><name><name>H22</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>e</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>h</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>stop</name> <operator>-</operator> <name>start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ps</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>stereo_interpolate</name><index>[<expr><operator>!</operator><name>PS_BASELINE</name> <operator>&amp;&amp;</operator> <name><name>ps</name><operator>-&gt;</operator><name>enable_ipdopd</name></name></expr>]</index></name><operator>(</operator>

<name><name>l</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>start</name><operator>,</operator> <name><name>r</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <name>start</name><operator>,</operator>

<name>h</name><operator>,</operator> <name>h_step</name><operator>,</operator> <name>stop</name> <operator>-</operator> <name>start</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></decl></decl_stmt>

<function><type><name>int</name> <name>AAC_RENAME</name></type>(<name>ff_ps_apply</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>PSContext</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>L</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>INTFLOAT</name></type> <name><name>R</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>Lbuf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>Lbuf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator><name>Rbuf</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <name><name>ps</name><operator>-&gt;</operator><name>Rbuf</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>len</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is34</name> <init>= <expr><name><name>ps</name><operator>-&gt;</operator><name>is34bands</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>top</name> <operator>+=</operator> <name><name>NR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name> <operator>-</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>delay</name></name><operator>+</operator><name>top</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>NR_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name> <operator>-</operator> <name>top</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>delay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <name><name>NR_ALLPASS_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ap_delay</name></name> <operator>+</operator> <name>top</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>NR_ALLPASS_BANDS</name><index>[<expr><name>is34</name></expr>]</index></name> <operator>-</operator> <name>top</name><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>ps</name><operator>-&gt;</operator><name>ap_delay</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>hybrid_analysis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name>Lbuf</name></expr></argument>, <argument><expr><name><name>ps</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>is34</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decorrelation</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>Rbuf</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <call><name>INTFLOAT</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator> <name>Lbuf</name></expr></argument>, <argument><expr><name>is34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>stereo_processing</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><name>Lbuf</name></expr></argument>, <argument><expr><name>Rbuf</name></expr></argument>, <argument><expr><name>is34</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid_synthesis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name>L</name></expr></argument>, <argument><expr><name>Lbuf</name></expr></argument>, <argument><expr><name>is34</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>hybrid_synthesis</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><name>R</name></expr></argument>, <argument><expr><name>Rbuf</name></expr></argument>, <argument><expr><name>is34</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_INIT_VLC_STATIC</name><parameter_list>(<parameter><type><name>num</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>INIT_VLC_STATIC(&amp;vlc_ps[num], 9, ps_tmp[num].table_size / ps_tmp[num].elem_size, ps_tmp[num].ps_bits, 1, 1, ps_tmp[num].ps_codes, ps_tmp[num].elem_size, ps_tmp[num].elem_size, size);</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PS_VLC_ROW</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ name ##_codes, name ##_bits, sizeof(name ##_codes), sizeof(name ##_codes[0]) }</cpp:value></cpp:define>

<function><type><name>av_cold</name> <name>void</name> <name>AAC_RENAME</name></type>(<name>ff_ps_init</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ps_codes</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ps_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>table_size</name></decl>, <decl><type ref="prev"/><name>elem_size</name></decl>;</decl_stmt>

}</block> <decl><name><name>ps_tmp</name><index>[]</index></name> <init>= <expr><block>{

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_iid_df1</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_iid_dt1</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_iid_df0</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_iid_dt0</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_icc_df</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_icc_dt</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_ipd_df</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_ipd_dt</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_opd_df</name></expr></argument>)</argument_list></call></expr>,

<expr><call><name>PS_VLC_ROW</name><argument_list>(<argument><expr><name>huff_opd_dt</name></expr></argument>)</argument_list></call></expr>,

}</block></expr></init></decl>;</struct>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1544</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">832</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">1036</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">544</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">544</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PS_INIT_VLC_STATIC</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>, <argument><expr><literal type="number">512</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ps_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name> <name>AAC_RENAME</name></type>(<name>ff_ps_ctx_init</name>)<parameter_list>(<parameter><decl><type><name>PSContext</name> <modifier>*</modifier></type><name>ps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>AAC_RENAME</name><argument_list>(<argument><expr><name>ff_psdsp_init</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ps</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
