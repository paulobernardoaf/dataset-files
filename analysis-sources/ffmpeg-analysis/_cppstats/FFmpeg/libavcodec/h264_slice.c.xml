<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264_slice.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/display.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/stereo3d.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cabac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cabac_functions.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error_resilience.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264chroma.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_mvpred.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264_ps.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"golomb.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpegvideo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rectangle.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>field_scan</name><index>[<expr><literal type="number">16</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>,

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>field_scan8x8</name><index>[<expr><literal type="number">64</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>field_scan8x8_cavlc</name><index>[<expr><literal type="number">64</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>zigzag_scan8x8_cavlc</name><index>[<expr><literal type="number">64</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">5</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">8</literal></expr>, <expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <literal type="number">8</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>release_unused_pictures</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>remove_current</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>remove_current</name> <operator>||</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_unref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_scratch_buffers</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>h264</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alloc_size</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><call><name>FFABS</name><argument_list>(<argument><expr><name>linesize</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad_allocated</name></name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">6</literal> <operator>*</operator> <name>alloc_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_malloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer_allocated</name></name></expr></argument>, <argument><expr><name>alloc_size</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">21</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_mallocz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders_allocated</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fast_mallocz</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders_allocated</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad</name></name> <operator>||</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name> <operator>||</operator>

<operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>bipred_scratchpad_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>edge_emu_buffer_allocated</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_borders_allocated</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_borders_allocated</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_table_pools</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>big_mb_num</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_array_size</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b4_stride</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b4_array_size</name> <init>= <expr><name>b4_stride</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>qscale_table_pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><name>big_mb_num</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>,

<argument><expr><name>av_buffer_allocz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_type_pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><operator>(</operator><name>big_mb_num</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name><operator>)</operator> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>av_buffer_allocz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>motion_val_pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>b4_array_size</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>av_buffer_allocz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ref_index_pool</name></name> <operator>=</operator> <call><name>av_buffer_pool_init</name><argument_list>(<argument><expr><literal type="number">4</literal> <operator>*</operator> <name>mb_array_size</name></expr></argument>, <argument><expr><name>av_buffer_allocz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>qscale_table_pool</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>mb_type_pool</name></name> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>motion_val_pool</name></name> <operator>||</operator>

<operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ref_index_pool</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>qscale_table_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>mb_type_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>motion_val_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ref_index_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>alloc_picture</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>f</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name></expr> ?</condition><then>

<expr><name>AV_GET_BUFFER_FLAG_REF</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVHWAccel</name> <modifier>*</modifier></type><name>hwaccel</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name> <operator>=</operator> <call><name>av_buffer_allocz</name><argument_list>(<argument><expr><name><name>hwaccel</name><operator>-&gt;</operator><name>frame_priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>hwaccel_picture_private</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>hwaccel_priv_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>h_chroma_shift</name></decl>, <decl><type ref="prev"/><name>v_chroma_shift</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>h_chroma_shift</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>v_chroma_shift</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>,

<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>h_chroma_shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><name>i</name></expr></argument>,

<argument><expr><literal type="number">0x80</literal></expr></argument>, <argument><expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>h_chroma_shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>qscale_table_pool</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>init_table_pools</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>qscale_table_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_type_buf</name></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_type_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name></name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_type_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mb_type</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>mb_type_buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>qscale_table</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>qscale_table_buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>motion_val_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ref_index_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>motion_val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>motion_val_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>ref_index</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>ref_index_buf</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_h264_unref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>find_unused_picture</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IN_RANGE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((void*)(a) &gt;= (void*)(b)) &amp;&amp; ((void*)(a) &lt; (void*)((b) + (size))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REBASE_PICTURE</name><parameter_list>(<parameter><type><name>pic</name></type></parameter>, <parameter><type><name>new_ctx</name></type></parameter>, <parameter><type><name>old_ctx</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((pic) &amp;&amp; (pic) &gt;= (old_ctx)-&gt;DPB &amp;&amp; (pic) &lt; (old_ctx)-&gt;DPB + H264_MAX_PICTURE_COUNT) ? &amp;(new_ctx)-&gt;DPB[(pic) - (old_ctx)-&gt;DPB] : NULL)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copy_picture_range</name><parameter_list>(<parameter><decl><type><name>H264Picture</name> <modifier>*</modifier><modifier>*</modifier></type><name>to</name></decl></parameter>, <parameter><decl><type><name>H264Picture</name> <modifier>*</modifier><modifier>*</modifier></type><name>from</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>new_base</name></decl></parameter>,

<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>old_base</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><operator>!</operator><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator>

<call><name>IN_RANGE</name><argument_list>(<argument><expr><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>old_base</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>IN_RANGE</name><argument_list>(<argument><expr><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>old_base</name><operator>-&gt;</operator><name>DPB</name></name></expr></argument>, <argument><expr><name>H264_MAX_PICTURE_COUNT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>to</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>REBASE_PICTURE</name><argument_list>(<argument><expr><name><name>from</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>new_base</name></expr></argument>, <argument><expr><name>old_base</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>h264_slice_header_init</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>ff_h264_update_thread_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVCodecContext</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>dst</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>h1</name> <init>= <expr><name><name>src</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>inited</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name></expr></init></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>need_reinit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name> <operator>==</operator> <name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>inited</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>width</name></name> <operator>!=</operator> <name><name>h1</name><operator>-&gt;</operator><name>width</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>height</name></name> <operator>!=</operator> <name><name>h1</name><operator>-&gt;</operator><name>height</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>!=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>!=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>||</operator>

<operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>!=</operator> <name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>need_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>block_offset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>PPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>h1</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>need_reinit</name> <operator>||</operator> <operator>!</operator><name>inited</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mb_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_stride</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>b_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>x264_build</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>||</operator> <name><name>h1</name><operator>-&gt;</operator><name>context_initialized</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>h264_slice_header_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"h264_slice_header_init() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>block_offset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>width_from_caller</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>width_from_caller</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>height_from_caller</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>height_from_caller</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>coded_picture_number</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>first_field</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_aff_frame</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mb_aff_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>droppable</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>H264_MAX_PICTURE_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_unref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h1</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_h264_ref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h1</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <call><name>REBASE_PICTURE</name><argument_list>(<argument><expr><name><name>h1</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264_unref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h1</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_ref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h1</name><operator>-&gt;</operator><name>cur_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>enable_er</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>enable_er</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>workaround_bugs</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>droppable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>is_avc</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>is_avc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nal_length_size</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>nal_length_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h1</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>delayed_pic</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>last_pocs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_output_pic</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>next_output_pic</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_outputed_poc</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>next_outputed_poc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>mmco</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nb_mmco</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>nb_mmco</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mmco_reset</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>mmco_reset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>long_ref_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_range</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>short_ref</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_range</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>long_ref</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>copy_picture_range</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name></name></expr></argument>, <argument><expr><name><name>h1</name><operator>-&gt;</operator><name>delayed_pic</name></name></expr></argument>,

<argument><expr><name>MAX_DELAYED_PIC_COUNT</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>frame_recovered</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>a53_caption</name><operator>.</operator><name>buf_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h1</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>a53_caption</name><operator>.</operator><name>buf_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>a53_caption</name><operator>.</operator><name>buf_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>h1</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>a53_caption</name><operator>.</operator><name>buf_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>a53_caption</name><operator>.</operator><name>buf_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_h264_execute_ref_pic_marking</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_poc_msb</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>poc_msb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_poc_lsb</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>poc_lsb</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num_offset</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num_offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>recovery_frame</name></name> <operator>=</operator> <name><name>h1</name><operator>-&gt;</operator><name>recovery_frame</name></name></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_frame_start</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_shift</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_thread_can_start_frame</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Attempt to start a frame outside SETUP state\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>release_unused_pictures</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>find_unused_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"no frame buffer available\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>DPB</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>coded_picture_number</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>coded_picture_number</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>field_picture</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>mmco_reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>recovered</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>invalid_gap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>sei_recovery_frame_cnt</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>recovery_point</name><operator>.</operator><name>recovery_frame_cnt</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>slice_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>crop_left</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>crop_right</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>crop_top</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>crop_bottom</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>alloc_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264_unref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_ERROR_RESILIENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_set_erpic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>cur_pic</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_h264_ref_picture</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>linesize</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uvlinesize</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>CONFIG_ERROR_RESILIENCE</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>enable_er</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_er_frame_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>er</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264_set_erpic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>last_pic</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264_set_erpic</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>next_pic</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">48</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">32</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">48</literal> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator>

<name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">48</literal> <operator>+</operator> <literal type="number">32</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>pic</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_output_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>postpone_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_aff_frame</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>mb_aff</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>unregistered</name><operator>.</operator><name>x264_build</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>unregistered</name><operator>.</operator><name>x264_build</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>backup_mb_border</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_y</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cb</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src_cr</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>uvlinesize</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>simple</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top_border</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_shift</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma444</name> <init>= <expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma422</name> <init>= <expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>src_y</name> <operator>-=</operator> <name>linesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_cb</name> <operator>-=</operator> <name>uvlinesize</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src_cr</name> <operator>-=</operator> <name>uvlinesize</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>simple</name> <operator>&amp;&amp;</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top_border</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>simple</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chroma422</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">15</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">7</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>top_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>top_border</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>top_borders</name><index>[<expr><name>top_idx</name></expr>]</index><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>simple</name> <operator>||</operator> <operator>!</operator><name>CONFIG_GRAY</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>chroma444</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">64</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>chroma422</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pixel_shift</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">48</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name>src_cb</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY64</name><argument_list>(<argument><expr><name>top_border</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>src_cr</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>implicit_weight_table</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>field</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ref0</name></decl>, <decl><type ref="prev"/><name>ref1</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>cur_poc</name></decl>, <decl><type ref="prev"/><name>ref_start</name></decl>, <decl><type ref="prev"/><name>ref_count0</name></decl>, <decl><type ref="prev"/><name>ref_count1</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>field</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>cur_poc</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cur_poc</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>poc</name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>poc</name> <operator>==</operator> <literal type="number">2LL</literal> <operator>*</operator> <name>cur_poc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight_chroma</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ref_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_count0</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_count1</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>cur_poc</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><name>field</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_start</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_count0</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_count1</name> <operator>=</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight_chroma</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_log2_weight_denom</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_log2_weight_denom</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ref0</name> <operator>=</operator> <name>ref_start</name></expr>;</init> <condition><expr><name>ref0</name> <operator>&lt;</operator> <name>ref_count0</name></expr>;</condition> <incr><expr><name>ref0</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>poc0</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref0</name></expr>]</index></name><operator>.</operator><name>poc</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ref1</name> <operator>=</operator> <name>ref_start</name></expr>;</init> <condition><expr><name>ref1</name> <operator>&lt;</operator> <name>ref_count1</name></expr>;</condition> <incr><expr><name>ref1</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>ref0</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ref1</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>long_ref</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>poc1</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>ref1</name></expr>]</index></name><operator>.</operator><name>poc</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>td</name> <init>= <expr><call><name>av_clip_int8</name><argument_list>(<argument><expr><name>poc1</name> <operator>-</operator> <name>poc0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>td</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tb</name> <init>= <expr><call><name>av_clip_int8</name><argument_list>(<argument><expr><name>cur_poc</name> <operator>-</operator> <name>poc0</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tx</name> <init>= <expr><operator>(</operator><literal type="number">16384</literal> <operator>+</operator> <operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>td</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>/</operator> <name>td</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dist_scale_factor</name> <init>= <expr><operator>(</operator><name>tb</name> <operator>*</operator> <name>tx</name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dist_scale_factor</name> <operator>&gt;=</operator> <operator>-</operator><literal type="number">64</literal> <operator>&amp;&amp;</operator> <name>dist_scale_factor</name> <operator>&lt;=</operator> <literal type="number">128</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>dist_scale_factor</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>field</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>implicit_weight</name><index>[<expr><name>ref0</name></expr>]</index><index>[<expr><name>ref1</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>implicit_weight</name><index>[<expr><name>ref0</name></expr>]</index><index>[<expr><name>ref1</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>implicit_weight</name><index>[<expr><name>ref0</name></expr>]</index><index>[<expr><name>ref1</name></expr>]</index><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_scan_tables</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; 2) | (((x) &lt;&lt; 2) &amp; 0xF)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TRANSPOSE</name><argument_list>(<argument><expr><name><name>ff_zigzag_scan</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TRANSPOSE</name><argument_list>(<argument><expr><name><name>field_scan</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRANSPOSE</name></cpp:undef>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRANSPOSE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x) &gt;&gt; 3) | (((x) &amp; 7) &lt;&lt; 3)</cpp:value></cpp:define>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TRANSPOSE</name><argument_list>(<argument><expr><name><name>ff_zigzag_direct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TRANSPOSE</name><argument_list>(<argument><expr><name><name>zigzag_scan8x8_cavlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TRANSPOSE</name><argument_list>(<argument><expr><name><name>field_scan8x8</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>TRANSPOSE</name><argument_list>(<argument><expr><name><name>field_scan8x8_cavlc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>TRANSPOSE</name></cpp:undef>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>transform_bypass</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan_q0</name></name></expr></argument> , <argument><expr><name>ff_zigzag_scan</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_q0</name></name></expr></argument> , <argument><expr><name>ff_zigzag_direct</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc_q0</name></name></expr></argument> , <argument><expr><name>zigzag_scan8x8_cavlc</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc_q0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan_q0</name></name></expr></argument> , <argument><expr><name>field_scan</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_q0</name></name></expr></argument> , <argument><expr><name>field_scan8x8</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc_q0</name></name></expr></argument> , <argument><expr><name>field_scan8x8_cavlc</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan_q0</name></name></expr></argument> , <argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_q0</name></name></expr></argument> , <argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc_q0</name></name></expr></argument> , <argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>zigzag_scan8x8_cavlc_q0</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan_q0</name></name></expr></argument> , <argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_q0</name></name></expr></argument> , <argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc_q0</name></name></expr></argument> , <argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>field_scan8x8_cavlc_q0</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>get_pixel_format</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>force_callback</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HWACCEL_MAX</name></cpp:macro> <cpp:value>(CONFIG_H264_DXVA2_HWACCEL + (CONFIG_H264_D3D11VA_HWACCEL * 2) + CONFIG_H264_NVDEC_HWACCEL + CONFIG_H264_VAAPI_HWACCEL + CONFIG_H264_VIDEOTOOLBOX_HWACCEL + CONFIG_H264_VDPAU_HWACCEL)</cpp:value></cpp:define>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>pix_fmts</name><index>[<expr><name>HWACCEL_MAX</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>fmt</name> <init>= <expr><name>pix_fmts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>choices</name> <init>= <expr><name>pix_fmts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">9</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_GBRP9</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV444P9</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV422P9</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV420P9</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_GBRP10</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV444P10</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV422P10</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV420P10</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">12</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_GBRP12</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV444P12</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV422P12</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV420P12</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">14</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_GBRP14</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV444P14</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV422P14</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV420P14</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_VDPAU_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_VDPAU</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_NVDEC_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_CUDA</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>==</operator> <name>AVCOL_SPC_RGB</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_GBRP</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUVJ444P</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV444P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>CHROMA422</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUVJ422P</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV422P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_DXVA2_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_DXVA2_VLD</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_D3D11VA_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_D3D11VA_VLD</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_D3D11</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_VAAPI_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_H264_VIDEOTOOLBOX_HWACCEL</name></expr></cpp:if>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_VIDEOTOOLBOX</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>choices</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>pix_fmts</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>==</operator> <name>AVCOL_RANGE_JPEG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUVJ420P</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>fmt</name><operator>++</operator> <operator>=</operator> <name>AV_PIX_FMT_YUV420P</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unsupported bit depth %d\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>fmt</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name>force_callback</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>choices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><call><name>ff_thread_get_format</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>choices</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_dimensions</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cr</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>crop_right</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cl</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>crop_left</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ct</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>crop_top</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cb</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>crop_bottom</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <operator>(</operator><name>cr</name> <operator>+</operator> <name>cl</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <operator>(</operator><name>ct</name> <operator>+</operator> <name>cb</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>+</operator> <name><name>sps</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>width_from_caller</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>height_from_caller</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>&amp;&amp;</operator>

<call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>width_from_caller</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>width</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>height_from_caller</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>width_from_caller</name></name> <operator>&lt;=</operator> <name>width</name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>height_from_caller</name></name> <operator>&lt;=</operator> <name>height</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>width_from_caller</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>height_from_caller</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>cl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ct</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>cr</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cb</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name>height</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>width_from_caller</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>height_from_caller</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>crop_right</name></name> <operator>=</operator> <name>cr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>=</operator> <name>ct</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>=</operator> <name>cb</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_slice_header_init</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_set_sar</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_pix_fmt_get_chroma_sub_sample</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>chroma_x_shift</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>timing_info_present_flag</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>den</name> <init>= <expr><name><name>sps</name><operator>-&gt;</operator><name>time_scale</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>x264_build</name></name> <operator>&lt;</operator> <literal type="number">44U</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>den</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_units_in_tick</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>ticks_per_frame</name></name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264_free_tables</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev_interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_scan_tables</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_alloc_tables</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Could not allocate memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>&gt;</operator> <literal type="number">14</literal> <operator>||</operator>

<name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>==</operator> <literal type="number">11</literal> <operator>||</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>==</operator> <literal type="number">13</literal></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported bit depth %d\n"</literal></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_bit_depth_luma</name></name> <operator>=</operator>

<name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_chroma_format_idc</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>h264dsp</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264chroma_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>h264chroma</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264qpel_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>h264qpel</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264_pred_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>hpc</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>,

<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>vdsp</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_THREADS</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_slice_context_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"context_init() failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>h264</name></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>intra4x4_pred_mode</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>intra4x4_pred_mode</name></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mvd_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mvd_table</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mvd_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mvd_table</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_h264_slice_context_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"context_init() failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_h264_free_tables</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>non_j_pixfmt</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>a</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUVJ420P</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV420P</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVJ422P</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV422P</name></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_YUVJ444P</name></expr>:</case> <return>return <expr><name>AV_PIX_FMT_YUV444P</name></expr>;</return>

<default>default:</default>

<return>return <expr><name>a</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_init_ps</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_slice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>needs_reinit</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>must_reinit</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_slice</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>PPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>cur_bit_depth_luma</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>cur_chroma_format_idc</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>

)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>needs_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>needs_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>must_reinit</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator> <literal type="number">16</literal><operator>*</operator><name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name>

<operator>||</operator> <literal type="number">16</literal><operator>*</operator><name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name>

<operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_bit_depth_luma</name></name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name>

<operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_chroma_format_idc</name></name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name>

<operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name>

<operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name>

<operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name>

<operator>||</operator> <operator>(</operator><call><name>non_j_pixfmt</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>non_j_pixfmt</name><argument_list>(<argument><expr><call><name>get_pixel_format</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>must_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>first_slice</name> <operator>&amp;&amp;</operator> <call><name>av_cmp_q</name><argument_list>(<argument><expr><name><name>sps</name><operator>-&gt;</operator><name>sar</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>must_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>setup_finished</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>ff_h264_get_profile</name><argument_list>(<argument><expr><name>sps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>level_idc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>refs</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>b_stride</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>chroma_y_shift</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_format_idc</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>init_dimensions</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>video_signal_type_present_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>color_range</name></name> <operator>=</operator> <ternary><condition><expr><name><name>sps</name><operator>-&gt;</operator><name>full_range</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>AVCOL_RANGE_JPEG</name></expr>

</then><else>: <expr><name>AVCOL_RANGE_MPEG</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>colour_description_present_flag</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>needs_reinit</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>alternative_transfer</name><operator>.</operator><name>present</name></name> <operator>&amp;&amp;</operator>

<call><name>av_color_transfer_name</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>alternative_transfer</name><operator>.</operator><name>preferred_transfer_characteristics</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>alternative_transfer</name><operator>.</operator><name>preferred_transfer_characteristics</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>alternative_transfer</name><operator>.</operator><name>preferred_transfer_characteristics</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>chroma_location</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>||</operator> <name>must_reinit</name> <operator>||</operator> <name>needs_reinit</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flush_changes</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>context_initialized</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sl</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"changing width %d -&gt; %d / height %d -&gt; %d on "</literal>

<literal type="string">"slice %d\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_width</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>coded_height</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name>first_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flush_changes</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_flush_change</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_pixel_format</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Reinit context to %dx%d, "</literal>

<literal type="string">"pix_fmt: %s\n"</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>h264_slice_header_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"h264_slice_header_init() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_export_frame_props</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>pic_struct_present_flag</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>present</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264SEIPictureTiming</name> <modifier>*</modifier></type><name>pt</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>pt</name><operator>-&gt;</operator><name>pic_struct</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_SEI_PIC_STRUCT_FRAME</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>H264_SEI_PIC_STRUCT_TOP_FIELD</name></expr>:</case>

<case>case <expr><name>H264_SEI_PIC_STRUCT_BOTTOM_FIELD</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_PIC_STRUCT_TOP_BOTTOM</name></expr>:</case>

<case>case <expr><name>H264_SEI_PIC_STRUCT_BOTTOM_TOP</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>prev_interlaced_frame</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_PIC_STRUCT_TOP_BOTTOM_TOP</name></expr>:</case>

<case>case <expr><name>H264_SEI_PIC_STRUCT_BOTTOM_TOP_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_PIC_STRUCT_FRAME_DOUBLING</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_PIC_STRUCT_FRAME_TRIPLING</name></expr>:</case>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>repeat_pict</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>ct_type</name></name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>pt</name><operator>-&gt;</operator><name>pic_struct</name></name> <operator>&lt;=</operator> <name>H264_SEI_PIC_STRUCT_BOTTOM_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <operator>(</operator><name><name>pt</name><operator>-&gt;</operator><name>ct_type</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name> <operator>=</operator> <call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>prev_interlaced_frame</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>cur</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;</operator> <name><name>cur</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>pic_struct_present_flag</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>present</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>pic_struct</name></name> <operator>==</operator> <name>H264_SEI_PIC_STRUCT_TOP_BOTTOM</name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>pic_struct</name></name> <operator>==</operator> <name>H264_SEI_PIC_STRUCT_TOP_BOTTOM_TOP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>interlaced_frame</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>present</name></name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>arrangement_type</name></name> <operator>&lt;=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>content_interpretation_type</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>frame_packing</name><operator>.</operator><name>content_interpretation_type</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264SEIFramePacking</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>frame_packing</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVStereo3D</name> <modifier>*</modifier></type><name>stereo</name> <init>= <expr><call><name>av_stereo3d_create_side_data</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>stereo</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>arrangement_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>H264_SEI_FPA_TYPE_CHECKERBOARD</name></expr>:</case>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_CHECKERBOARD</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_FPA_TYPE_INTERLEAVE_COLUMN</name></expr>:</case>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_COLUMNS</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_FPA_TYPE_INTERLEAVE_ROW</name></expr>:</case>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_LINES</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_FPA_TYPE_SIDE_BY_SIDE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>quincunx_sampling_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_SIDEBYSIDE_QUINCUNX</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_SIDEBYSIDE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_FPA_TYPE_TOP_BOTTOM</name></expr>:</case>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_TOPBOTTOM</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_FPA_TYPE_INTERLEAVE_TEMPORAL</name></expr>:</case>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_FRAMESEQUENCE</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>H264_SEI_FPA_TYPE_2D</name></expr>:</case>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>AV_STEREO3D_2D</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>content_interpretation_type</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AV_STEREO3D_FLAG_INVERT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>arrangement_type</name></name> <operator>==</operator> <name>H264_SEI_FPA_TYPE_INTERLEAVE_TEMPORAL</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>fp</name><operator>-&gt;</operator><name>current_frame_is_frame0_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>view</name></name> <operator>=</operator> <name>AV_STEREO3D_VIEW_LEFT</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>stereo</name><operator>-&gt;</operator><name>view</name></name> <operator>=</operator> <name>AV_STEREO3D_VIEW_RIGHT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>display_orientation</name><operator>.</operator><name>present</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>display_orientation</name><operator>.</operator><name>anticlockwise_rotation</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>display_orientation</name><operator>.</operator><name>hflip</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>display_orientation</name><operator>.</operator><name>vflip</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264SEIDisplayOrientation</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>display_orientation</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>angle</name> <init>= <expr><name><name>o</name><operator>-&gt;</operator><name>anticlockwise_rotation</name></name> <operator>*</operator> <literal type="number">360</literal> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>rotation</name> <init>= <expr><call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,

<argument><expr><name>AV_FRAME_DATA_DISPLAYMATRIX</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rotation</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_display_rotation_set</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>rotation</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>angle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_display_matrix_flip</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>rotation</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>o</name><operator>-&gt;</operator><name>hflip</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>vflip</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>afd</name><operator>.</operator><name>present</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_AFD</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>afd</name><operator>.</operator><name>active_format_description</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>afd</name><operator>.</operator><name>present</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>a53_caption</name><operator>.</operator><name>buf_ref</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264SEIA53Caption</name> <modifier>*</modifier></type><name>a53</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>a53_caption</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>= <expr><call><name>av_frame_new_side_data_from_buf</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name></name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_A53_CC</name></expr></argument>, <argument><expr><name><name>a53</name><operator>-&gt;</operator><name>buf_ref</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sd</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a53</name><operator>-&gt;</operator><name>buf_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a53</name><operator>-&gt;</operator><name>buf_ref</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>properties</name></name> <operator>|=</operator> <name>FF_CODEC_PROPERTY_CLOSED_CAPTIONS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode_cnt</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>tc_sd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>tcside</name> <init>= <expr><call><name>av_frame_new_side_data</name><argument_list>(<argument><expr><name><name>cur</name><operator>-&gt;</operator><name>f</name></name></expr></argument>,

<argument><expr><name>AV_FRAME_DATA_S12M_TIMECODE</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tcside</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tc_sd</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>tcside</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc_sd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode_cnt</name></name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>tc_sd</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>frames</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>h-&gt;avctx-&gt;framerate</argument>, <argument>(AVRational) {<literal type="number">30</literal></argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>h-&gt;avctx-&gt;framerate</argument>, <argument>(AVRational) {<literal type="number">50</literal></argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>frames</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>frame</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dropframe</name> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name>frames</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name>frames</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seconds</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>seconds</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minutes</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minutes</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hours</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tc</name> <operator>|=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>hours</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc_sd</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tc</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>picture_timing</name><operator>.</operator><name>timecode_cnt</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_select_output_frame</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>cur</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>pics</name></decl>, <decl><type ref="prev"/><name>out_of_order</name></decl>, <decl><type ref="prev"/><name>out_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>mmco_reset</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mmco_reset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mmco_reset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>&gt;=</operator> <name>FF_COMPLIANCE_STRICT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>==</operator> <name>MAX_DELAYED_PIC_COUNT</name> <operator>||</operator> <name><name>cur</name><operator>-&gt;</operator><name>poc</name></name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>out_of_order</name> <operator>=</operator> <name>MAX_DELAYED_PIC_COUNT</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><name><name>cur</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name>

<operator>||</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>MAX_DELAYED_PIC_COUNT</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <name>INT_MIN</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>MAX_DELAYED_PIC_COUNT</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>MAX_DELAYED_PIC_COUNT</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_of_order</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>out_of_order</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_of_order</name> <operator>==</operator> <name>MAX_DELAYED_PIC_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Invalid POC %d&lt;%d\n"</literal></expr></argument>, <argument><expr><name><name>cur</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_DELAYED_PIC_COUNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>mmco_reset</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>&lt;</operator> <name>out_of_order</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>loglevel</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>frame_number</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>AV_LOG_WARNING</name></expr> </then><else>: <expr><name>AV_LOG_VERBOSE</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>loglevel</name></expr></argument>, <argument><expr><literal type="string">"Increasing reorder buffer to %d\n"</literal></expr></argument>, <argument><expr><name>out_of_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <name>out_of_order</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pics</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>pics</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pics</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pics</name> <operator>&lt;=</operator> <name>MAX_DELAYED_PIC_COUNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>pics</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>cur</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>reference</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>cur</name><operator>-&gt;</operator><name>reference</name></name> <operator>=</operator> <name>DELAYED_PIC_REF</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>mmco_reset</name></expr>;</condition>

<incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>poc</name> <operator>&lt;</operator> <name><name>out</name><operator>-&gt;</operator><name>poc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_idx</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>mmco_reset</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_outputed_poc</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_of_order</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>poc</name></name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>next_outputed_poc</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_of_order</name> <operator>||</operator> <name>pics</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;=</operator> <operator>~</operator><name>DELAYED_PIC_REF</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>out_idx</name></expr>;</init> <condition><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_of_order</name> <operator>&amp;&amp;</operator> <name>pics</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_output_pic</name></name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_idx</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>delayed_pic</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>mmco_reset</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_outputed_poc</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_outputed_poc</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>poc</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>out</name><operator>-&gt;</operator><name>recovered</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name> <operator>|=</operator> <name>FRAME_RECOVERED_SEI</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>recovered</name></name> <operator>|=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name> <operator>&amp;</operator> <name>FRAME_RECOVERED_SEI</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>recovered</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_OUTPUT_CORRUPT</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_SHOW_ALL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>next_output_pic</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_FRAME_FLAG_CORRUPT</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"no picture %s\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>out_of_order</name></expr> ?</condition><then> <expr><literal type="string">"ooo"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_field_start</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>first_slice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>last_pic_structure</name></decl>, <decl><type ref="prev"/><name>last_pic_droppable</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_init_ps</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>first_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sps</name> <operator>&amp;&amp;</operator> <name><name>sps</name><operator>-&gt;</operator><name>bitstream_restriction_flag</name></name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>has_b_frames</name></name> <operator>=</operator> <name><name>sps</name><operator>-&gt;</operator><name>num_reorder_frames</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_pic_droppable</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>droppable</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>last_pic_structure</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name> <operator>=</operator> <operator>(</operator><name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>poc_lsb</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>poc_lsb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>delta_poc_bottom</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>delta_poc_bottom</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>delta_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>delta_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>unwrap_prev_frame_num</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_frame_num</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>unwrap_prev_frame_num</name> <operator>&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>unwrap_prev_frame_num</name> <operator>-=</operator> <name>max_frame_num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>-</operator> <name>unwrap_prev_frame_num</name><operator>)</operator> <operator>&gt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>unwrap_prev_frame_num</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>-</operator> <name><name>sps</name><operator>-&gt;</operator><name>ref_frame_count</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>unwrap_prev_frame_num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>unwrap_prev_frame_num</name> <operator>+=</operator> <name>max_frame_num</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name> <operator>=</operator> <name>unwrap_prev_frame_num</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>last_field</name> <init>= <expr><name>last_pic_structure</name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>!=</operator> <name>DELAYED_PIC_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>owner</name><index>[<expr><name>last_field</name></expr>]</index></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><name>last_field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>last_pic_structure</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_pic_structure</name> <operator>!=</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,

<argument><expr><name>last_pic_structure</name> <operator>==</operator> <name>PICT_TOP_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>last_pic_structure</name> <operator>!=</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,

<argument><expr><name>last_pic_structure</name> <operator>==</operator> <name>PICT_TOP_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name>last_pic_structure</name> <operator>==</operator> <name>PICT_TOP_FIELD</name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>last_pic_structure</name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_TOP_FIELD</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid field mode combination %d/%d\n"</literal></expr></argument>,

<argument><expr><name>last_pic_structure</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>last_pic_structure</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name> <operator>=</operator> <name>last_pic_droppable</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>last_pic_droppable</name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>droppable</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"Found reference and non-reference fields in the same frame, which"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>last_pic_structure</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name> <operator>=</operator> <name>last_pic_droppable</name></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>!=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264Picture</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Frame num gap %d %d\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>gaps_in_frame_num_allowed_flag</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>last_pocs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_frame_start</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name> <operator>%=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>invalid_gap</name></name> <operator>=</operator> <operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>gaps_in_frame_num_allowed_flag</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_execute_ref_pic_marking</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>,

<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>,

<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_chroma</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>==</operator> <name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>prev</name><operator>-&gt;</operator><name>field_picture</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_thread_await_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>prev</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>prev</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>poc</name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>poc</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_color_frame</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>frame_num</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>prev_frame_num</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>!=</operator> <name>DELAYED_PIC_REF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>last_pic_structure</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>missing_fields</name></name> <operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>missing_fields</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>!=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name><operator>==</operator><name>PICT_BOTTOM_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>reference</name></name> <operator>&amp;</operator> <name>DELAYED_PIC_REF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>h264_frame_start</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>field</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>release_unused_pictures</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name><operator>.</operator><name>owner</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name><operator>)</operator></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>==</operator><name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>slice_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>slice_table</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_init_poc</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>, <argument><expr><name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mmco</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mmco</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>nb_mmco</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>h</name><operator>-&gt;</operator><name>mmco</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nb_mmco</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>nb_mmco</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>picture_idr</name></name> <operator>=</operator> <name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>recovery_point</name><operator>.</operator><name>recovery_frame_cnt</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>sei_recovery_frame_cnt</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>recovery_point</name><operator>.</operator><name>recovery_frame_cnt</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>!=</operator> <name>sei_recovery_frame_cnt</name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>valid_recovery_point</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>recovery_frame</name></name> <operator>&lt;</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>recovery_frame</name></name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>sei_recovery_frame_cnt</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>recovery_frame</name></name> <operator>=</operator> <call><name>av_mod_uintp2</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>+</operator> <name>sei_recovery_frame_cnt</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>valid_recovery_point</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>recovery_frame</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>|=</operator> <operator>(</operator><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>recovery_frame</name></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>&amp;&amp;</operator> <name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>recovery_frame</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>recovered</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name> <operator>|=</operator> <name>FRAME_RECOVERED_IDR</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>recovered</name></name> <operator>|=</operator> <name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>recovered</name></name> <operator>|=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>frame_recovered</name></name> <operator>&amp;</operator> <name>FRAME_RECOVERED_IDR</name><operator>)</operator></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>missing_fields</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_export_frame_props</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_select_output_frame</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_slice_header_parse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SPS</name> <modifier>*</modifier></type><name>sps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>slice_type</name></decl>, <decl><type ref="prev"/><name>tmp</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>field_pic_flag</name></decl>, <decl><type ref="prev"/><name>bottom_field_flag</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_slice</name> <init>= <expr><name>sl</name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>picture_structure</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>first_slice</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>setup_finished</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name> <operator>=</operator> <call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_type</name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"slice type %d too large at %d\n"</literal></expr></argument>,

<argument><expr><name>slice_type</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_type</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>slice_type</name> <operator>-=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_fixed</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_fixed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>slice_type</name> <operator>=</operator> <name><name>ff_h264_golomb_to_pict_type</name><index>[<expr><name>slice_type</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name>slice_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>=</operator> <name>slice_type</name> <operator>&amp;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A non-intra slice in an IDR NAL unit.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name> <operator>&gt;=</operator> <name>MAX_PPS_COUNT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pps_id %u out of range\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"non-existing PPS %u referenced\n"</literal></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pps</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>PPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"non-existing SPS %u referenced\n"</literal></expr></argument>, <argument><expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>sps</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_slice</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>frame_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Frame num change from %d to %d\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>frame_num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_mbaff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>frame_mbs_only_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>picture_structure</name> <operator>=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>direct_8x8_inference_flag</name></name> <operator>&amp;&amp;</operator> <name>slice_type</name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"This stream was generated by a broken encoder, invalid 8x8 inference\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>field_pic_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>field_pic_flag</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bottom_field_flag</name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>picture_structure</name> <operator>=</operator> <name>PICT_TOP_FIELD</name> <operator>+</operator> <name>bottom_field_flag</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>picture_structure</name> <operator>=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <name>picture_structure</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_field_decoding_flag</name></name> <operator>=</operator> <name>picture_structure</name> <operator>!=</operator> <name>PICT_FRAME</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>picture_structure</name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>curr_pic_num</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>frame_num</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>max_pic_num</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>curr_pic_num</name></name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>frame_num</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>max_pic_num</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>log2_max_frame_num</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_ue_golomb_long</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>poc_lsb</name></name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name><name>sps</name><operator>-&gt;</operator><name>log2_max_poc_lsb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>pic_order_present</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>picture_structure</name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>delta_poc_bottom</name></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sps</name><operator>-&gt;</operator><name>poc_type</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sps</name><operator>-&gt;</operator><name>delta_pic_order_always_zero_flag</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>pic_order_present</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>picture_structure</name> <operator>==</operator> <name>PICT_FRAME</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>delta_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>redundant_pic_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>redundant_pic_cnt_present</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>redundant_pic_count</name></name> <operator>=</operator> <call><name>get_ue_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name> <operator>=</operator> <call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_parse_ref_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>pps</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name></expr></argument>,

<argument><expr><name>picture_structure</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_ref_pic_list_reordering</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>luma_weight_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>chroma_weight_flag</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_pred</name></name> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_P</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_pred_weight_table</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>sps</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>pwt</name></name></expr></argument>,

<argument><expr><name>picture_structure</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>explicit_ref_marking</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_ref_pic_marking</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>, <argument><expr><name>nal</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name> <operator>&amp;&amp;</operator> <name><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cabac_init_idc %u overflow\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>cabac_init_idc</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>last_qscale_diff</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <name><name>pps</name><operator>-&gt;</operator><name>init_qp</name></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">51</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"QP %u out of range\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name>pps</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_SP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_bits1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_SP</name> <operator>||</operator>

<name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_SI</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pps</name><operator>-&gt;</operator><name>deblocking_filter_parameters_present</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>get_ue_golomb_31</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"deblocking_filter_idc %u out of range\n"</literal></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>slice_alpha_c0_offset_div2</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_beta_offset_div2</name> <init>= <expr><call><name>get_se_golomb</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_alpha_c0_offset_div2</name> <operator>&gt;</operator> <literal type="number">6</literal> <operator>||</operator>

<name><name>slice_alpha_c0_offset_div2</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">6</literal> <operator>||</operator>

<name>slice_beta_offset_div2</name></expr></argument> &gt;</argument_list></name> <literal type="number">6</literal> <operator>||</operator>

<name>slice_beta_offset_div2</name> <operator>&lt;</operator> <operator>-</operator><literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"deblocking filter parameters %d %d out of range\n"</literal></expr></argument>,

<argument><expr><name>slice_alpha_c0_offset_div2</name></expr></argument>, <argument><expr><name>slice_beta_offset_div2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name> <operator>=</operator> <name>slice_alpha_c0_offset_div2</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name> <operator>=</operator> <name>slice_beta_offset_div2</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>h264_slice_init</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>picture_idr</name></name> <operator>&amp;&amp;</operator> <name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid mix of IDR and non-IDR slices\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name> <operator>&lt;&lt;</operator> <call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>||</operator>

<name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_num</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"first_mb_in_slice overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name> <operator>%</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name> <operator>/</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name><operator>)</operator> <operator>&lt;&lt;</operator>

<call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_build_ref_list</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>weighted_bipred_idc</name></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>implicit_weight_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>implicit_weight_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>implicit_weight_table</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_direct_dist_scale_factor</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>setup_finished</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_direct_ref_list_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>&amp;&amp;</operator>

<name><name>h</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>!=</operator> <name>H264_NAL_IDR_SLICE</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONINTRA</name> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_BIDIR</name> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_loop_filter</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name> <operator>&amp;&amp;</operator>

<name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG2_FAST</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>postpone_filter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>qp_thresh</name></name> <operator>=</operator> <literal type="number">15</literal> <operator>-</operator>

<call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name></expr></argument>)</argument_list></call> <operator>-</operator>

<call><name>FFMAX3</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>chroma_qp_index_offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name><operator>-&gt;</operator><name>bit_depth_luma</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name> <operator>=</operator> <operator>++</operator><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_row</name><index>[<expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>&amp;</operator><operator>(</operator><name>MAX_SLICES</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name><operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>h</name><operator>-&gt;</operator><name>slice_row</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name><operator>&amp;</operator><operator>(</operator><name>MAX_SLICES</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name>

<operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_row</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name><operator>&amp;</operator><operator>(</operator><name>MAX_SLICES</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>]</index></name> <operator>&lt;=</operator> <name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name>

<operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name> <operator>&gt;=</operator> <name>MAX_SLICES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Possibly too many slices (%d &gt;= %d), increase MAX_SLICES and recompile if there are artifacts\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr></argument>, <argument><expr><name>MAX_SLICES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name><name>id_list</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>ref2frm</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>ref2frm</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_SLICES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>id_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBuffer</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>parent</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>buffer</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>short_ref</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>buffer</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>id_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>long_ref_count</name></name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>long_ref</name><index>[<expr><name>k</name></expr>]</index></name><operator>-&gt;</operator><name><name>f</name><operator>-&gt;</operator><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>buffer</name> <operator>==</operator> <name>buf</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>id_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>short_ref_count</name></name> <operator>+</operator> <name>k</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ref2frm</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref2frm</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref2frm</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>id_list</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ref2frm</name><index>[<expr><literal type="number">18</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref2frm</name><index>[<expr><literal type="number">18</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ref2frm</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>id_list</name><index>[<expr><operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">16</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_list</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>reference</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>&amp;</operator> <name>FF_DEBUG_PICT_INFO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"slice:%d %s mb:%d %c%s%s frame:%d poc:%d/%d ref:%d/%d qp:%d loop:%d:%d:%d weight:%d%s %s\n"</literal></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr></argument>,

<argument><expr><operator>(</operator><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name></expr> ?</condition><then> <expr><literal type="string">"F"</literal></expr> </then><else>: <expr><ternary><condition><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_TOP_FIELD</name></expr> ?</condition><then> <expr><literal type="string">"T"</literal></expr> </then><else>: <expr><literal type="string">"B"</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,

<argument><expr><call><name>av_get_picture_type_char</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type_fixed</name></name></expr> ?</condition><then> <expr><literal type="string">" fix"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>nal</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr> ?</condition><then> <expr><literal type="string">" IDR"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>frame_num</name></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>field_poc</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_alpha_c0_offset</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_beta_offset</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>pwt</name><operator>.</operator><name>use_weight_chroma</name></name></expr> ?</condition><then> <expr><literal type="string">"c"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name></expr> ?</condition><then> <expr><operator>(</operator><ternary><condition><expr><name><name>sl</name><operator>-&gt;</operator><name>direct_spatial_mv_pred</name></name></expr> ?</condition><then> <expr><literal type="string">"SPAT"</literal></expr> </then><else>: <expr><literal type="string">"TEMP"</literal></expr></else></ternary><operator>)</operator></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_queue_decode_slice</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx_queued</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>first_slice</name> <init>= <expr><name>sl</name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name> <operator>=</operator> <name><name>nal</name><operator>-&gt;</operator><name>gb</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_slice_header_parse</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>redundant_pic_count</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>setup_finished</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Too many fields\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>first_mb_addr</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx_queued</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>H264SliceContext</name></type> <name>tmp_ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_execute_decode_slices</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_EXPLODE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp_ctx</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp_ctx</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sl</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>&amp;&amp;</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_field_end</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>==</operator> <name>H264_NAL_IDR_SLICE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Broken frame packetizing\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_field_end</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>sl</name> <operator>==</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>first_field</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(

<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONREF</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>nal_ref_idc</name></name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_BIDIR</name> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_B</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONINTRA</name> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_type_nos</name></name> <operator>!=</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_NONKEY</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>nal_unit_type</name></name> <operator>!=</operator> <name>H264_NAL_IDR_SLICE</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>sei</name><operator>.</operator><name>recovery_point</name><operator>.</operator><name>recovery_frame_cnt</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>skip_frame</name></name> <operator>&gt;=</operator> <name>AVDISCARD_ALL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>first_slice</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>PPS</name> <modifier>*</modifier></type><name>pps</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>PPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps_list</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>pps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>!=</operator> <name><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name> <operator>!=</operator> <name><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr> 

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PPS changed between slices\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps</name></name> <operator>!=</operator> <operator>(</operator><specifier>const</specifier> <name>SPS</name><operator>*</operator><operator>)</operator><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>sps_list</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>sps_id</name></name></expr>]</index></name><operator>-&gt;</operator><name>data</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"SPS changed in the middle of the frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_field_start</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>nal</name></expr></argument>, <argument><expr><name>first_slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>||</operator>

<name><name>h</name><operator>-&gt;</operator><name>droppable</name></name> <operator>!=</operator> <operator>(</operator><name><name>nal</name><operator>-&gt;</operator><name>ref_idc</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Changing field mode (%d -&gt; %d) between slices is not allowed\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>picture_structure</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"unset cur_pic_ptr on slice %d\n"</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>current_slice</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>h264_slice_init</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>nal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx_queued</name></name><operator>++</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_get_slice_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PICTURE_TYPE_P</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_B</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_I</name></expr>:</case>

<return>return <expr><literal type="number">2</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_SP</name></expr>:</case>

<return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><name>AV_PICTURE_TYPE_SI</name></expr>:</case>

<return>return <expr><literal type="number">4</literal></expr>;</return>

<default>default:</default>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>fill_filter_caches_inter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>,

<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>top_xy</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>left_xy</name><index>[<expr><name>LEFT_MBS</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>top_type</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name><name>left_type</name><index>[<expr><name>LEFT_MBS</name></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mb_xy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>list</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>b_stride</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>b_stride</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator><name>mv_dst</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>mv_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ref_cache</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>ref_cache</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTER</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>IS_DIRECT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>b_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b8_xy</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name>top_xy</name> <operator>+</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ref2frm</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ref2frm</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_SLICES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><operator>(</operator><ternary><condition><expr><call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b_xy</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><literal type="number">1</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref2frm</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b8_xy</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref2frm</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b8_xy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO128</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">0</literal> <operator>-</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>LIST_NOT_USED</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name> <operator>^</operator> <name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>USES_LIST</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b_xy</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb2b_xy</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b8_xy</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ref2frm</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ref2frm</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_SLICES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><operator>(</operator><ternary><condition><expr><call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b_xy</name> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b_xy</name> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b_xy</name> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b_xy</name> <operator>+</operator> <name>b_stride</name> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>ref2frm</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b8_xy</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name><name>ref2frm</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><name>b8_xy</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_ZERO32</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>-</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">16</literal></expr>]</index></name> <operator>=</operator>

<name><name>ref_cache</name><index>[<expr><operator>-</operator><literal type="number">1</literal> <operator>+</operator> <literal type="number">24</literal></expr>]</index></name> <operator>=</operator> <name>LIST_NOT_USED</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>USES_LIST</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_rectangle</name><argument_list>(<argument><expr><name>mv_dst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><call><name>pack16to32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>LIST_NOT_USED</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>LIST_NOT_USED</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>LIST_NOT_USED</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>LIST_NOT_USED</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x01010101u</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>ref</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>ref_index</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>ref2frm</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>ref2frm</name><index>[<expr><name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name> <operator>&amp;</operator> <operator>(</operator><name>MAX_SLICES</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>]</index><index>[<expr><name>list</name></expr>]</index><index>[<expr><operator>(</operator><ternary><condition><expr><call><name>MB_MBAFF</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">20</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref01</name> <init>= <expr><operator>(</operator><call><name>pack16to32</name><argument_list>(<argument><expr><name><name>ref2frm</name><index>[<expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ref2frm</name><index>[<expr><name><name>ref</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FF00FF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x0101</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref23</name> <init>= <expr><operator>(</operator><call><name>pack16to32</name><argument_list>(<argument><expr><name><name>ref2frm</name><index>[<expr><name><name>ref</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr></argument>, <argument><expr><name><name>ref2frm</name><index>[<expr><name><name>ref</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x00FF00FF</literal><operator>)</operator> <operator>*</operator> <literal type="number">0x0101</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ref01</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ref23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN32A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ref_cache</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><name>ref23</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<block>{<block_content>

<expr_stmt><expr><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator><name>mv_src</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>motion_val</name><index>[<expr><name>list</name></expr>]</index><index>[<expr><literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name>b_stride</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>mv_src</name> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <name>b_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>mv_src</name> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <name>b_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>mv_src</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>b_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY128</name><argument_list>(<argument><expr><name>mv_dst</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>mv_src</name> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <name>b_stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fill_filter_caches</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mb_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_xy</name></decl>, <decl><type ref="prev"/><name><name>left_xy</name><index>[<expr><name>LEFT_MBS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>top_type</name></decl>, <decl><type ref="prev"/><name><name>left_type</name><index>[<expr><name>LEFT_MBS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nnz</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>nnz_cache</name></decl>;</decl_stmt>

<expr_stmt><expr><name>top_xy</name> <operator>=</operator> <name>mb_xy</name> <operator>-</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>&lt;&lt;</operator> <call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>left_mb_field_flag</name> <init>= <expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>curr_mb_field_flag</name> <init>= <expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>left_mb_field_flag</name> <operator>!=</operator> <name>curr_mb_field_flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>-=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curr_mb_field_flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top_xy</name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>&amp;</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>left_mb_field_flag</name> <operator>!=</operator> <name>curr_mb_field_flag</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_mb_xy</name></name> <operator>=</operator> <name>top_xy</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_mb_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>qp_thresh</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>qp_thresh</name></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>qp</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>qp</name> <operator>&lt;=</operator> <name>qp_thresh</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>qp</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>qp_thresh</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>top_xy</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>qp</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>qp_thresh</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>qp</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>qp_thresh</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>top_xy</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name> <operator>||</operator>

<operator>(</operator><operator>(</operator><name>qp</name> <operator>+</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>top_xy</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;=</operator> <name>qp_thresh</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block>

<expr_stmt><expr><name>top_type</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>top_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name> <operator>!=</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>top_type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name> <operator>==</operator> <literal type="number">0xFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>top_type</name></name> <operator>=</operator> <name>top_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name> <operator>=</operator> <name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name> <operator>=</operator> <name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_INTRA</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>fill_filter_caches_inter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>top_xy</name></expr></argument>, <argument><expr><name>left_xy</name></expr></argument>,

<argument><expr><name>top_type</name></expr></argument>, <argument><expr><name>left_type</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>list_count</name></name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fill_filter_caches_inter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>, <argument><expr><name>top_xy</name></expr></argument>, <argument><expr><name>left_xy</name></expr></argument>,

<argument><expr><name>top_type</name></expr></argument>, <argument><expr><name>left_type</name></expr></argument>, <argument><expr><name>mb_xy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>nnz_cache</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>non_zero_count_cache</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top_type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name>top_xy</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_COPY32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>nnz</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>nnz</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>non_zero_count</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>nnz</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CABAC</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>transform_8x8_mode</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>top_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">5</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">6</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">7</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name>top_xy</name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LTOP</name></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name><name>left_type</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>cbp_table</name><index>[<expr><name><name>left_xy</name><index>[<expr><name>LBOT</name></expr>]</index></name></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>IS_8x8DCT</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>&amp;</operator> <literal type="number">0x1000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>&amp;</operator> <literal type="number">0x2000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>&amp;</operator> <literal type="number">0x4000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<name><name>nnz_cache</name><index>[<expr><name><name>scan8</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">12</literal></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>cbp</name></name> <operator>&amp;</operator> <literal type="number">0x8000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>loop_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>start_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end_x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest_y</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cb</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>dest_cr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>linesize</name></decl>, <decl><type ref="prev"/><name>uvlinesize</name></decl>, <decl><type ref="prev"/><name>mb_x</name></decl>, <decl><type ref="prev"/><name>mb_y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>end_mb_y</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>old_slice_type</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixel_shift</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>block_h</name> <init>= <expr><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name><name>h</name><operator>-&gt;</operator><name>chroma_y_shift</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>postpone_filter</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>mb_x</name> <operator>=</operator> <name>start_x</name></expr>;</init> <condition><expr><name>mb_x</name> <operator>&lt;</operator> <name>end_x</name></expr>;</condition> <incr><expr><name>mb_x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>mb_y</name> <operator>=</operator> <name>end_mb_y</name> <operator>-</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>mb_y</name> <operator>&lt;=</operator> <name>end_mb_y</name></expr>;</condition> <incr><expr><name>mb_y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mb_xy</name></decl>, <decl><type ref="prev"/><name>mb_type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>mb_xy</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_xy</name></name> <operator>=</operator> <name>mb_x</name> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>mb_type</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_mbaff</name></name> <operator>=</operator>

<name><name>sl</name><operator>-&gt;</operator><name>mb_field_decoding_flag</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name>mb_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name>mb_y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_y</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>+</operator> <name>mb_y</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>

<name>mb_y</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <name>block_h</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>f</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>mb_x</name> <operator>&lt;&lt;</operator> <name>pixel_shift</name><operator>)</operator> <operator>*</operator> <operator>(</operator><literal type="number">8</literal> <operator>&lt;&lt;</operator> <call><name>CHROMA444</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>+</operator>

<name>mb_y</name> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <name>block_h</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>MB_FIELD</name><argument_list>(<argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>mb_y</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>dest_y</name> <operator>-=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cb</name> <operator>-=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <operator>(</operator><name>block_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>dest_cr</name> <operator>-=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>*</operator> <operator>(</operator><name>block_h</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_linesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>uvlinesize</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_uvlinesize</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>backup_mb_border</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>,

<argument><expr><name>uvlinesize</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fill_filter_caches</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>qscale_table</name><index>[<expr><name>mb_xy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_filter_mb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>, <argument><expr><name>dest_cr</name></expr></argument>,

<argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>ff_h264_filter_mb_fast</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>mb_x</name></expr></argument>, <argument><expr><name>mb_y</name></expr></argument>, <argument><expr><name>dest_y</name></expr></argument>, <argument><expr><name>dest_cb</name></expr></argument>,

<argument><expr><name>dest_cr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>, <argument><expr><name>uvlinesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>slice_type</name></name> <operator>=</operator> <name>old_slice_type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name>end_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name>end_mb_y</name> <operator>-</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>chroma_qp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>get_chroma_qp</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>qscale</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>predict_field_decoding_flag</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>mb_xy</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mb_type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr> </then><else>:

<expr><ternary><condition><expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>slice_table</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name> <operator>==</operator> <name><name>sl</name><operator>-&gt;</operator><name>slice_num</name></name><operator>)</operator></expr> ?</condition><then>

<expr><name><name>h</name><operator>-&gt;</operator><name>cur_pic</name><operator>.</operator><name>mb_type</name><index>[<expr><name>mb_xy</name> <operator>-</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_stride</name></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_mbaff</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_field_decoding_flag</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_INTERLACED</name><argument_list>(<argument><expr><name>mb_type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_finish_row</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>top</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;&gt;</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pic_height</name> <init>= <expr><literal type="number">16</literal> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name> <operator>&gt;&gt;</operator> <call><name>FIELD_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><literal type="number">16</literal> <operator>&lt;&lt;</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>deblock_border</name> <init>= <expr><operator>(</operator><literal type="number">16</literal> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&lt;&lt;</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>top</name> <operator>+</operator> <name>height</name><operator>)</operator> <operator>&gt;=</operator> <name>pic_height</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>height</name> <operator>+=</operator> <name>deblock_border</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>top</name> <operator>-=</operator> <name>deblock_border</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&gt;=</operator> <name>pic_height</name> <operator>||</operator> <operator>(</operator><name>top</name> <operator>+</operator> <name>height</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>height</name></expr></argument>, <argument><expr><name>pic_height</name> <operator>-</operator> <name>top</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>top</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name>top</name> <operator>+</operator> <name>height</name></expr>;</expr_stmt>

<expr_stmt><expr><name>top</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264_draw_horiz_band</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>top</name></expr></argument>, <argument><expr><name>height</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>droppable</name></name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>h264</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>error_occurred</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_thread_report_progress</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>tf</name></name></expr></argument>, <argument><expr><name>top</name> <operator>+</operator> <name>height</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_BOTTOM_FIELD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>er_add_slice</name><parameter_list>(<parameter><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>startx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>starty</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>endx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>endy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>sl</name><operator>-&gt;</operator><name>h264</name><operator>-&gt;</operator><name>enable_er</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_ERROR_RESILIENCE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ERContext</name> <modifier>*</modifier></type><name>er</name> <init>= <expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>h264</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>er</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_er_add_slice</name><argument_list>(<argument><expr><name>er</name></expr></argument>, <argument><expr><name>startx</name></expr></argument>, <argument><expr><name>starty</name></expr></argument>, <argument><expr><name>endx</name></expr></argument>, <argument><expr><name>endy</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_slice</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVCodecContext</name></name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>H264Context</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>h264</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lf_x_start</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>orig_deblock</name> <init>= <expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>uvlinesize</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>cur_pic_ptr</name><operator>-&gt;</operator><name>f</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>alloc_scratch_buffers</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_skip_run</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>block_offset</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>pixel_shift</name></name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>sl</name><operator>-&gt;</operator><name>linesize</name></name> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>scan8</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>-</operator> <name><name>scan8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>postpone_filter</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>is_complex</name></name> <operator>=</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>!=</operator> <name>PICT_FRAME</name> <operator>||</operator>

<operator>(</operator><name>CONFIG_GRAY</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GRAY</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>active_thread_type</name></name> <operator>&amp;</operator> <name>FF_THREAD_SLICE</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>==</operator> <name>PICT_FRAME</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>error_status_table</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>start_i</name> <init>= <expr><call><name>av_clip</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_num</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>start_i</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>prev_status</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>error_status_table</name><index>[<expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>mb_index2xy</name><index>[<expr><name>start_i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>prev_status</name> <operator>&amp;=</operator> <operator>~</operator> <name>VP_START</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev_status</name> <operator>!=</operator> <operator>(</operator><name>ER_MV_END</name> <operator>|</operator> <name>ER_DC_END</name> <operator>|</operator> <name>ER_AC_END</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>error_occurred</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>ps</name><operator>.</operator><name>pps</name><operator>-&gt;</operator><name>cabac</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_init_cabac_decoder</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>cabac</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr></argument>,

<argument><expr><operator>(</operator><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_h264_init_cabac_states</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>eos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>&gt;=</operator> <name><name>sl</name><operator>-&gt;</operator><name>next_slice_idx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice overlaps with next at %d\n"</literal></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>next_slice_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_mb_cabac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_hl_decode_mb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_mb_cabac</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_hl_decode_mb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>eos</name> <operator>=</operator> <call><name>get_cabac_terminate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>cabac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>workaround_bugs</name></name> <operator>&amp;</operator> <name>FF_BUG_TRUNCATED</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream</name></name> <operator>&gt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream_end</name></name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <name>lf_x_start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>lf_x_start</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>finish</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream</name></name> <operator>&gt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream_end</name></name> <operator>+</operator> <literal type="number">2</literal></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"bytestream overread %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ret</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream</name></name></expr></argument> &gt;</argument_list></name> <name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream_end</name></name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"error while decoding MB %d %d, bytestream %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>sl</name><operator>-&gt;</operator><name>cabac</name><operator>.</operator><name>bytestream</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>loop_filter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>lf_x_start</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name>lf_x_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_finish_row</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>predict_field_decoding_flag</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>eos</name> <operator>||</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"slice end %d %d\n"</literal></expr></argument>,

<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;</operator> <name>lf_x_start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>lf_x_start</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>finish</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>&gt;=</operator> <name><name>sl</name><operator>-&gt;</operator><name>next_slice_idx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Slice overlaps with next at %d\n"</literal></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>next_slice_idx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_mb_cavlc</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_hl_decode_mb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_h264_decode_mb_cavlc</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_h264_hl_decode_mb</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"error while decoding MB %d %d\n"</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>loop_filter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>lf_x_start</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>=</operator> <name>lf_x_start</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_finish_row</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>++</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FRAME_MBAFF</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>predict_field_decoding_flag</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"slice end %d %d\n"</literal></expr></argument>,

<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal>

<operator>||</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>&amp;</operator> <name>AV_EF_AGGRESSIVE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>finish</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_skip_run</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>ff_tlog</name><argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"slice end %d %d\n"</literal></expr></argument>,

<argument><expr><call><name>get_bits_count</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>gb</name><operator>.</operator><name>size_in_bits</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>get_bits_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sl</name><operator>-&gt;</operator><name>gb</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name> <operator>&gt;</operator> <name>lf_x_start</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>loop_filter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><name>lf_x_start</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>finish</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>er_add_slice</name><argument_list>(<argument><expr><name>sl</name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr></argument>, <argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></argument>,

<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr></argument>, <argument><expr><name>ER_MB_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>deblocking_filter</name></name> <operator>=</operator> <name>orig_deblock</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_h264_execute_decode_slices</name><parameter_list>(<parameter><decl><type><name>H264Context</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier><specifier>const</specifier></type> <name>avctx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>context_count</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx_queued</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_slice_idx</name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>hwaccel</name></name> <operator>||</operator> <name>context_count</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>context_count</name> <operator>&amp;&amp;</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>context_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>mb_y</name> <operator>&lt;</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>context_count</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next_slice_idx</name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>postpone_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>decode_slice</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mb_y</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>finish</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>context_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>next_slice_idx</name> <init>= <expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_idx</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sl</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_ERROR_RESILIENCE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>er</name><operator>.</operator><name>error_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slice_idx</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>context_count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>H264SliceContext</name> <modifier>*</modifier></type><name>sl2</name> <init>= <expr><operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>slice_idx2</name> <init>= <expr><name><name>sl2</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>*</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name> <operator>+</operator> <name><name>sl2</name><operator>-&gt;</operator><name>mb_x</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>j</name> <operator>||</operator> <name>slice_idx2</name> <operator>&lt;</operator> <name>slice_idx</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>next_slice_idx</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>next_slice_idx</name></expr></argument>, <argument><expr><name>slice_idx2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>next_slice_idx</name></name> <operator>=</operator> <name>next_slice_idx</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>decode_slice</name></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name></name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>context_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sl</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>context_count</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_ERROR_RESILIENCE</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>error_count</name></name> <operator>+=</operator> <name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>er</name><operator>.</operator><name>error_count</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>h</name><operator>-&gt;</operator><name>postpone_filter</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>postpone_filter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>context_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y_end</name></decl>, <decl><type ref="prev"/><name>x_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sl</name> <operator>=</operator> <operator>&amp;</operator><name><name>h</name><operator>-&gt;</operator><name>slice_ctx</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y_end</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>x_end</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>&gt;=</operator> <name><name>h</name><operator>-&gt;</operator><name>mb_height</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>mb_x</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>y_end</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>FIELD_OR_MBAFF_PICTURE</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>sl</name><operator>-&gt;</operator><name>mb_y</name></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>loop_filter</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>sl</name></expr></argument>, <argument><expr><ternary><condition><expr><name>j</name> <operator>&gt;</operator> <name><name>sl</name><operator>-&gt;</operator><name>resync_mb_y</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>sl</name><operator>-&gt;</operator><name>resync_mb_x</name></name></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>j</name> <operator>==</operator> <name>y_end</name> <operator>-</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>x_end</name></expr> </then><else>: <expr><name><name>h</name><operator>-&gt;</operator><name>mb_width</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<label><name>finish</name>:</label>

<expr_stmt><expr><name><name>h</name><operator>-&gt;</operator><name>nb_slice_ctx_queued</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
