<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\srtenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass_split.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ass.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRT_STACK_SIZE</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASSSplitContext</name> <modifier>*</modifier></type><name>ass_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>stack</name><index>[<expr><name>SRT_STACK_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stack_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>alignment_applied</name></decl>;</decl_stmt>

}</block></struct></type> <name>SRTContext</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<macro><name>__attribute__</name> <argument_list>(<argument>(__format__ (__printf__, <literal type="number">2</literal>, <literal type="number">3</literal>))</argument>)</argument_list></macro>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_print</name><parameter_list>(<parameter><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>va_list</name></type> <name>vargs</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>vargs</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_vbprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>vargs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>srt_stack_push</name><parameter_list>(<parameter><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stack_ptr</name></name> <operator>&gt;=</operator> <name>SRT_STACK_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>stack_ptr</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name></type> <name>srt_stack_pop</name><parameter_list>(<parameter><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stack_ptr</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>stack</name><index>[<expr><operator>--</operator><name><name>s</name><operator>-&gt;</operator><name>stack_ptr</name></name></expr>]</index></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>srt_stack_find</name><parameter_list>(<parameter><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>stack_ptr</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stack</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_close_tag</name><parameter_list>(<parameter><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>tag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;/%c%s&gt;"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><ternary><condition><expr><name>tag</name> <operator>==</operator> <literal type="char">'f'</literal></expr> ?</condition><then> <expr><literal type="string">"ont"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_stack_push_pop</name><parameter_list>(<parameter><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>close</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><ternary><condition><expr><name>c</name></expr> ?</condition><then> <expr><call><name>srt_stack_find</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>stack_ptr</name></name> <operator>!=</operator> <name>i</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_close_tag</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>srt_stack_pop</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>srt_stack_push</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"tag stack overflow\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_style_apply</name><parameter_list>(<parameter><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ASSStyle</name> <modifier>*</modifier></type><name>st</name> <init>= <expr><call><name>ff_ass_style_get</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>st</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><name><name>st</name><operator>-&gt;</operator><name>primary_color</name></name> <operator>&amp;</operator> <literal type="number">0xFFFFFF</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>font_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>, <argument><expr><name>ASS_DEFAULT_FONT</name></expr></argument>)</argument_list></call> <operator>||</operator>

<name><name>st</name><operator>-&gt;</operator><name>font_size</name></name> <operator>!=</operator> <name>ASS_DEFAULT_FONT_SIZE</name> <operator>||</operator>

<name>c</name> <operator>!=</operator> <name>ASS_DEFAULT_COLOR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;font"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>font_name</name></name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>st</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>, <argument><expr><name>ASS_DEFAULT_FONT</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" face=\"%s\""</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>font_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>font_size</name></name> <operator>!=</operator> <name>ASS_DEFAULT_FONT_SIZE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" size=\"%d\""</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>font_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <name>ASS_DEFAULT_COLOR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">" color=\"#%06x\""</literal></expr></argument>,

<argument><expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>c</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal> <operator>|</operator> <operator>(</operator><name>c</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_stack_push</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>bold</name></name> <operator>!=</operator> <name>ASS_DEFAULT_BOLD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;b&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_stack_push</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'b'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>italic</name></name> <operator>!=</operator> <name>ASS_DEFAULT_ITALIC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;i&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_stack_push</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>underline</name></name> <operator>!=</operator> <name>ASS_DEFAULT_UNDERLINE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"&lt;u&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_stack_push</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="char">'u'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>st</name><operator>-&gt;</operator><name>alignment</name></name> <operator>!=</operator> <name>ASS_DEFAULT_ALIGNMENT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{\\an%d}"</literal></expr></argument>, <argument><expr><name><name>st</name><operator>-&gt;</operator><name>alignment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alignment_applied</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>srt_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name> <operator>=</operator> <call><name>ff_ass_split</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>subtitle_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>AVERROR_INVALIDDATA</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_text_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>text</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>text</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_new_line_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forced</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_style_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name>style</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>close</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_stack_push_pop</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>style</name></expr></argument>, <argument><expr><name>close</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>close</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="string">"&lt;%c&gt;"</literal></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_color_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>color</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>color_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>color_id</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>srt_stack_push_pop</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><name>color</name> <operator>==</operator> <literal type="number">0xFFFFFFFF</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>color</name> <operator>!=</operator> <literal type="number">0xFFFFFFFF</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="string">"&lt;font color=\"#%06x\"&gt;"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xFF0000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>color</name> <operator>&amp;</operator> <literal type="number">0xFF00</literal> <operator>|</operator> <operator>(</operator><name>color</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_font_name_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_stack_push_pop</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><operator>!</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="string">"&lt;font face=\"%s\"&gt;"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_font_size_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_stack_push_pop</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="char">'f'</literal></expr></argument>, <argument><expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="string">"&lt;font size=\"%d\"&gt;"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_alignment_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alignment</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name>priv</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>alignment_applied</name></name> <operator>&amp;&amp;</operator> <name>alignment</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>srt_print</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"{\\an%d}"</literal></expr></argument>, <argument><expr><name>alignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alignment_applied</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_cancel_overrides_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>style</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_stack_push_pop</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>srt_style_apply</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><name>style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_move_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x2</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y2</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>t2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>srt_end_cb</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>priv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>srt_stack_push_pop</name><argument_list>(<argument><expr><name>priv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ASSCodesCallbacks</name></type> <name>srt_callbacks</name> <init>= <expr><block>{

<expr><operator>.</operator><name>text</name> <operator>=</operator> <name>srt_text_cb</name></expr>,

<expr><operator>.</operator><name>new_line</name> <operator>=</operator> <name>srt_new_line_cb</name></expr>,

<expr><operator>.</operator><name>style</name> <operator>=</operator> <name>srt_style_cb</name></expr>,

<expr><operator>.</operator><name>color</name> <operator>=</operator> <name>srt_color_cb</name></expr>,

<expr><operator>.</operator><name>font_name</name> <operator>=</operator> <name>srt_font_name_cb</name></expr>,

<expr><operator>.</operator><name>font_size</name> <operator>=</operator> <name>srt_font_size_cb</name></expr>,

<expr><operator>.</operator><name>alignment</name> <operator>=</operator> <name>srt_alignment_cb</name></expr>,

<expr><operator>.</operator><name>cancel_overrides</name> <operator>=</operator> <name>srt_cancel_overrides_cb</name></expr>,

<expr><operator>.</operator><name>move</name> <operator>=</operator> <name>srt_move_cb</name></expr>,

<expr><operator>.</operator><name>end</name> <operator>=</operator> <name>srt_end_cb</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ASSCodesCallbacks</name></type> <name>text_callbacks</name> <init>= <expr><block>{

<expr><operator>.</operator><name>text</name> <operator>=</operator> <name>srt_text_cb</name></expr>,

<expr><operator>.</operator><name>new_line</name> <operator>=</operator> <name>srt_new_line_cb</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>ASSCodesCallbacks</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ASSDialog</name> <modifier>*</modifier></type><name>dialog</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_clear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>sub</name><operator>-&gt;</operator><name>num_rects</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>ass</name> <init>= <expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>ass</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>sub</name><operator>-&gt;</operator><name>rects</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>type</name> <operator>!=</operator> <name>SUBTITLE_ASS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Only SUBTITLE_ASS type supported.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ASS_TIMING</name></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>ass</name></expr></argument>, <argument><expr><literal type="string">"Dialogue: "</literal></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>ff_ass_split_dialog</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr></argument>, <argument><expr><name>ass</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>dialog</name> <operator>&amp;&amp;</operator> <name>num</name><operator>--</operator></expr>;</condition> <incr><expr><name>dialog</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alignment_applied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SUBRIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_style_apply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ass_split_override_codes</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>dialog</name> <operator>=</operator> <call><name>ff_ass_split_dialog2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr></argument>, <argument><expr><name>ass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dialog</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>alignment_applied</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_SUBRIP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>srt_style_apply</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_ass_split_override_codes</name><argument_list>(<argument><expr><name>cb</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>dialog</name><operator>-&gt;</operator><name>text</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_ass_free_dialog</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dialog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_ASS_TIMING</name></expr></cpp:if>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_bprint_is_complete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name> <operator>&gt;</operator> <name>bufsize</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Buffer too small for ASS event.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>buffer</name><operator>.</operator><name>len</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>srt_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>srt_callbacks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>text_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bufsize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVSubtitle</name> <modifier>*</modifier></type><name>sub</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>encode_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bufsize</name></expr></argument>, <argument><expr><name>sub</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>text_callbacks</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>srt_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SRTContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_ass_split_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ass_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SRT_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_srt_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"srt"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SubRip subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SUBRIP</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRTContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>srt_encode_init</name></expr>,

<expr><operator>.</operator><name>encode_sub</name> <operator>=</operator> <name>srt_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>srt_encode_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SUBRIP_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_subrip_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"subrip"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SubRip subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SUBRIP</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRTContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>srt_encode_init</name></expr>,

<expr><operator>.</operator><name>encode_sub</name> <operator>=</operator> <name>srt_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>srt_encode_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_TEXT_ENCODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_text_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"text"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"Raw text subtitle"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_SUBTITLE</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_TEXT</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SRTContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>srt_encode_init</name></expr>,

<expr><operator>.</operator><name>encode_sub</name> <operator>=</operator> <name>text_encode_frame</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <name>srt_encode_close</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
