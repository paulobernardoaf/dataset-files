<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\pnmdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pnm.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>samplecpy</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>maxval</name> <operator>&lt;=</operator> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>n</name><operator>/</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><name>i</name></expr>]</index> <operator>=</operator> <call><name>AV_RB16</name><argument_list>(<argument><expr><name>src</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pnm_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PNMContext</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier> <specifier>const</specifier></type> <name>p</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>linesize</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>upgrade</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>is_mono</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>components</name></decl>, <decl><type ref="prev"/><name>sample_len</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_start</name></name> <operator>=</operator>

<name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>buf</name> <operator>+</operator> <name>buf_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_pnm_decode_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_PIX_FMT_RGBA64</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&lt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>upgrade</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_RGB48</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&lt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>upgrade</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_RGBA</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">8</literal></expr>;</expr_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_RGB24</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>upgrade</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_GRAY8</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&lt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>upgrade</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_GRAY8A</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">8</literal></expr>;</expr_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_GRAY16</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&lt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>upgrade</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_YA16</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&lt;</operator> <literal type="number">65535</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>upgrade</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<goto>goto <name>do_read</name>;</goto>

<case>case <expr><name>AV_PIX_FMT_MONOWHITE</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_MONOBLACK</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>components</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_len</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_mono</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<label><name>do_read</name>:</label>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>||</operator> <operator>(</operator><name>is_mono</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>type</name></name><operator>==</operator><literal type="number">7</literal><operator>)</operator></expr>)</condition><block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>PutBitContext</name></type> <name>pb</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>init_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>linesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>components</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>c</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<while>while<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&lt;</operator> <literal type="char">'0'</literal> <operator>||</operator> <operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&gt;</operator> <literal type="char">'9'</literal> <operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>is_mono</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name><operator>++</operator><operator>)</operator><operator>&amp;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>k</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>v</name> <operator>+</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>(</operator><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name><operator>++</operator><operator>)</operator> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"value %d larger than maxval %d\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_len</name> <operator>==</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>sample_len</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>v</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>, <argument><expr><name>sample_len</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>sample_len</name><operator>)</operator><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>v</name> <operator>+</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>/</operator><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>sample_len</name> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>flush_put_bits</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name><operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>upgrade</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>samplecpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>upgrade</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><operator>(</operator><literal type="number">255</literal> <operator>*</operator> <literal type="number">128</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ptr</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name>f</name> <operator>+</operator> <literal type="number">64</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>upgrade</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>f</name> <init>= <expr><operator>(</operator><literal type="number">65535</literal> <operator>*</operator> <literal type="number">32768</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_be2ne16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <name>f</name> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P9</name></expr>:</case>

<case>case <expr><name>AV_PIX_FMT_YUV420P10</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ptr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>&gt;=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>n</name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>samplecpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>samplecpy</name><argument_list>(<argument><expr><name>ptr1</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>samplecpy</name><argument_list>(<argument><expr><name>ptr2</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P16</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>ptr1</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>f</name> <init>= <expr><operator>(</operator><literal type="number">65535</literal> <operator>*</operator> <literal type="number">32768</literal> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>maxval</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>linesize</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_be2ne16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><index>[<expr><name>j</name></expr>]</index> <operator>=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <name>f</name> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name>linesize</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ptr1</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_be2ne16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <name>f</name> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>av_be2ne16</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name><operator>)</operator><index>[<expr><name>j</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ptr2</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>*</operator> <name>f</name> <operator>+</operator> <literal type="number">16384</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr1</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr2</name> <operator>+=</operator> <name><name>p</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name><name>s</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>bytestream_start</name></name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PGM_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_pgm_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pgm"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PGM (Portable GrayMap) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PGM</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNMContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>pnm_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PGMYUV_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_pgmyuv_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pgmyuv"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PGMYUV (Portable GrayMap YUV) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PGMYUV</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNMContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>pnm_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PPM_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_ppm_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"ppm"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PPM (Portable PixelMap) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PPM</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNMContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>pnm_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PBM_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_pbm_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pbm"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PBM (Portable BitMap) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PBM</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNMContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>pnm_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_PAM_DECODER</name></expr></cpp:if>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_pam_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"pam"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"PAM (Portable AnyMap) image"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_PAM</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>PNMContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>pnm_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
