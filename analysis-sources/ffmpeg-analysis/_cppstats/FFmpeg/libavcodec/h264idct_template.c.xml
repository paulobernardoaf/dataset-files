<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264idct_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264dec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h264idct.h"</cpp:file></cpp:include>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z0</name><init>= <expr><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z1</name><init>= <expr><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z2</name><init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z3</name><init>= <expr><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>z0</name> <operator>+</operator> <name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>z1</name> <operator>+</operator> <name>z2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name>z1</name> <operator>-</operator> <name>z2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name>z0</name> <operator>-</operator> <name>z3</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z0</name><init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z1</name><init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z2</name><init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z3</name><init>= <expr><name><name>block</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">3</literal> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z0</name> <operator>+</operator> <name>z3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z1</name> <operator>+</operator> <name>z2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z1</name> <operator>-</operator> <name>z2</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <call><name>av_clip_pixel</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>z0</name> <operator>-</operator> <name>z3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct8_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>a0</name> <init>= <expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>a2</name> <init>= <expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>a4</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>a6</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>b0</name> <init>= <expr><name>a0</name> <operator>+</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>b2</name> <init>= <expr><name>a2</name> <operator>+</operator> <name>a4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>b4</name> <init>= <expr><name>a2</name> <operator>-</operator> <name>a4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>b6</name> <init>= <expr><name>a0</name> <operator>-</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><operator>-</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a3</name> <init>= <expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a5</name> <init>= <expr><operator>-</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a7</name> <init>= <expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name>a7</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>a1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b3</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>a3</name> <operator>+</operator> <operator>(</operator><name>a5</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b5</name> <init>= <expr><operator>(</operator><name>a3</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>a5</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b7</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>a7</name> <operator>-</operator> <operator>(</operator><name>a1</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b0</name> <operator>+</operator> <name>b7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b0</name> <operator>-</operator> <name>b7</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b2</name> <operator>+</operator> <name>b5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b2</name> <operator>-</operator> <name>b5</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b4</name> <operator>+</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b4</name> <operator>-</operator> <name>b3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b6</name> <operator>+</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name>b6</name> <operator>-</operator> <name>b1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>a0</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>a2</name> <init>= <expr><name><name>block</name><index>[<expr><literal type="number">0</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">4</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>a4</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">6</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>a6</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">6</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">2</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b0</name> <init>= <expr><name>a0</name> <operator>+</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b2</name> <init>= <expr><name>a2</name> <operator>+</operator> <name>a4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b4</name> <init>= <expr><name>a2</name> <operator>-</operator> <name>a4</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b6</name> <init>= <expr><name>a0</name> <operator>-</operator> <name>a6</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><operator>-</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><literal type="number">7</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">7</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a3</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">7</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a5</name> <init>= <expr><operator>-</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">7</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a7</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name><name>block</name><index>[<expr><literal type="number">3</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">5</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><name><name>block</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>*</operator><literal type="number">8</literal></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name>a7</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>a1</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b3</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>a3</name> <operator>+</operator> <operator>(</operator><name>a5</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b5</name> <init>= <expr><operator>(</operator><name>a3</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>a5</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>b7</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>a7</name> <operator>-</operator> <operator>(</operator><name>a1</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b0</name> <operator>+</operator> <name>b7</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b2</name> <operator>+</operator> <name>b5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b4</name> <operator>+</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b6</name> <operator>+</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b6</name> <operator>-</operator> <name>b1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">5</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b4</name> <operator>-</operator> <name>b3</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">6</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b2</name> <operator>-</operator> <name>b5</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">7</literal><operator>*</operator><name>stride</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>b0</name> <operator>-</operator> <name>b7</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>dctcoef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct_dc_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct8_dc_add</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>_dst</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name> <init>= <expr><operator>(</operator><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>stride</name> <operator>/=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr> )</control>

<block>{<block_content>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>dc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct_add16</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nnz</name> <init>= <expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nnz</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nnz</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>block</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_dc_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_add</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct_add16intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_add</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>block</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_dc_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct8_add4</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>+=</operator><literal type="number">4</literal></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nnz</name> <init>= <expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>nnz</name></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>nnz</name><operator>==</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>block</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct8_dc_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct8_add</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct_add8</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>*</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>j</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_add</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>block</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_dc_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_idct_add8_422</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>block_offset</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>nnzc</name><index>[<expr><literal type="number">15</literal><operator>*</operator><literal type="number">8</literal></expr>]</index></name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>*</operator><literal type="number">16</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>j</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name></expr>]</index></name></expr> ]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_add</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>block</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_dc_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name>j</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><literal type="number">4</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>j</name><operator>*</operator><literal type="number">16</literal><operator>+</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>nnzc</name><index>[ <expr><name><name>scan8</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr> ]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_add</name></expr></argument> )</argument_list></call><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><operator>(</operator><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>block</name><operator>)</operator><index>[<expr><name>i</name><operator>*</operator><literal type="number">16</literal></expr>]</index></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>ff_h264_idct_dc_add</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name><name>dest</name><index>[<expr><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>block_offset</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name></expr></argument>, <argument><expr><name>block</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">16</literal><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_luma_dc_dequant_idct</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_output</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_input</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qmul</name></decl></parameter>)</parameter_list><block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>stride</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>x_offset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal><operator>*</operator><name>stride</name></expr>, <expr><literal type="number">8</literal><operator>*</operator><name>stride</name></expr>, <expr><literal type="number">10</literal><operator>*</operator><name>stride</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_input</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_output</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z0</name><init>= <expr><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z1</name><init>= <expr><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z2</name><init>= <expr><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>z3</name><init>= <expr><name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>input</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>z0</name><operator>+</operator><name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name>z0</name><operator>-</operator><name>z3</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name>z1</name><operator>-</operator><name>z2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>=</operator> <name>z1</name><operator>+</operator><name>z2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name><init>= <expr><name><name>x_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z0</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z1</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z2</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z3</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">4</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>stride</name><operator>*</operator> <literal type="number">0</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z0</name> <operator>+</operator> <name>z3</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>stride</name><operator>*</operator> <literal type="number">1</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z1</name> <operator>+</operator> <name>z2</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>stride</name><operator>*</operator> <literal type="number">4</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z1</name> <operator>-</operator> <name>z2</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>stride</name><operator>*</operator> <literal type="number">5</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z0</name> <operator>-</operator> <name>z3</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>stride</name></cpp:undef>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_chroma422_dc_dequant_idct</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qmul</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xStride</name><init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>x_offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><init>=<expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">16</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><name>i</name> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><name>i</name> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><name>i</name> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><name>i</name> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>offset</name><init>= <expr><name><name>x_offset</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z0</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z1</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z2</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>SUINT</name></type> <name>z3</name><init>= <expr><name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>temp</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z0</name> <operator>+</operator> <name>z3</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z1</name> <operator>+</operator> <name>z2</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z1</name> <operator>-</operator> <name>z2</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">3</literal><operator>+</operator><name>offset</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>z0</name> <operator>-</operator> <name>z3</name><operator>)</operator><operator>*</operator><name>qmul</name> <operator>+</operator> <literal type="number">128</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name> <name>FUNCC</name></type>(<name>ff_h264_chroma_dc_dequant_idct</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>_block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qmul</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>stride</name><init>= <expr><literal type="number">16</literal><operator>*</operator><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>xStride</name><init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SUINT</name></type> <name>a</name></decl>,<decl><type ref="prev"/><name>b</name></decl>,<decl><type ref="prev"/><name>c</name></decl>,<decl><type ref="prev"/><name>d</name></decl>,<decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>dctcoef</name> <modifier>*</modifier></type><name>block</name> <init>= <expr><operator>(</operator><name>dctcoef</name><operator>*</operator><operator>)</operator><name>_block</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name><operator>=</operator> <name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name><operator>=</operator> <name>a</name><operator>-</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name><operator>=</operator> <name>a</name><operator>+</operator><name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <name>c</name><operator>-</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <name>c</name><operator>+</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>+</operator><name>c</name><operator>)</operator><operator>*</operator><name>qmul</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">0</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>e</name><operator>+</operator><name>b</name><operator>)</operator><operator>*</operator><name>qmul</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>a</name><operator>-</operator><name>c</name><operator>)</operator><operator>*</operator><name>qmul</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>stride</name><operator>*</operator><literal type="number">1</literal> <operator>+</operator> <name>xStride</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>e</name><operator>-</operator><name>b</name><operator>)</operator><operator>*</operator><name>qmul</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">7</literal></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
