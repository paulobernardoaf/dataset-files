<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dca_core.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/fixed_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dca_exss.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcadct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcamath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dcahuff.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fft.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"synth_filter.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_CHANNELS</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SUBBANDS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SUBBANDS_X96</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SUBFRAMES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SUBBAND_SAMPLES</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_PCMBLOCK_SAMPLES</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_LFE_HISTORY</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_ABITS_MAX</name></cpp:macro> <cpp:value>26</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_CORE_CHANNELS_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_DMIX_CHANNELS_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_XXCH_CHANNELS_MAX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_EXSS_CHANNELS_MAX</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_EXSS_CHSETS_MAX</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_FILTER_MODE_X96</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_FILTER_MODE_FIXED</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<enum>enum <name>DCACoreAudioMode</name> <block>{

<decl><name>DCA_AMODE_MONO</name></decl>, 

<decl><name>DCA_AMODE_MONO_DUAL</name></decl>, 

<decl><name>DCA_AMODE_STEREO</name></decl>, 

<decl><name>DCA_AMODE_STEREO_SUMDIFF</name></decl>, 

<decl><name>DCA_AMODE_STEREO_TOTAL</name></decl>, 

<decl><name>DCA_AMODE_3F</name></decl>, 

<decl><name>DCA_AMODE_2F1R</name></decl>, 

<decl><name>DCA_AMODE_3F1R</name></decl>, 

<decl><name>DCA_AMODE_2F2R</name></decl>, 

<decl><name>DCA_AMODE_3F2R</name></decl>, 

<decl><name>DCA_AMODE_COUNT</name></decl>

}</block>;</enum>

<enum>enum <name>DCACoreExtAudioType</name> <block>{

<decl><name>DCA_EXT_AUDIO_XCH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>DCA_EXT_AUDIO_X96</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>DCA_EXT_AUDIO_XXCH</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <name>DCACoreLFEFlag</name> <block>{

<decl><name>DCA_LFE_FLAG_NONE</name></decl>,

<decl><name>DCA_LFE_FLAG_128</name></decl>,

<decl><name>DCA_LFE_FLAG_64</name></decl>,

<decl><name>DCA_LFE_FLAG_INVALID</name></decl>

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>DCADSPData</name> <block>{

<union>union <block>{

<struct>struct <block>{

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>hist1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1024</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>hist2</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

}</block> <decl><name>flt</name></decl>;</struct>

<struct>struct <block>{

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>hist1</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">1024</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>hist2</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">64</literal></expr>]</index></expr>;</expr_stmt>

}</block> <decl><name>fix</name></decl>;</struct>

}</block> <decl><name>u</name></decl>;</union>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

}</block></struct></type> <name>DCADSPData</name>;</typedef>

<typedef>typedef <type><struct>struct <name>DCACoreDecoder</name> <block>{

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb_in</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crc_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>npcmblocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>frame_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>audio_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sample_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>bit_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>drc_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ts_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>aux_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ext_audio_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ext_audio_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sync_ssf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>lfe_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>predictor_history</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>filter_perfect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>source_pcm_res</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>es_format</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sumdiff_front</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sumdiff_surround</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nsubframes</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>nchannels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ch_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>nsubbands</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>subband_vq_start</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>joint_intensity_index</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>transition_mode_sel</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>scale_factor_sel</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>bit_allocation_sel</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>quant_index_sel</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>scale_factor_adj</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_CODE_BOOKS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>nsubsubframes</name><index>[<expr><name>DCA_SUBFRAMES</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>prediction_mode</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS_X96</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>prediction_vq_index</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS_X96</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>bit_allocation</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS_X96</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>transition_mode</name><index>[<expr><name>DCA_SUBFRAMES</name></expr>]</index><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>scale_factors</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int8_t</name></type> <name><name>joint_scale_sel</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>joint_scale_factors</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS_X96</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prim_dmix_embedded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>prim_dmix_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>prim_dmix_coeff</name><index>[<expr><name>DCA_DMIX_CHANNELS_MAX</name> <operator>*</operator> <name>DCA_CORE_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>ext_audio_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xch_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xxch_crc_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xxch_mask_nbits</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xxch_core_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xxch_spkr_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xxch_dmix_embedded</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xxch_dmix_scale_inv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>xxch_dmix_mask</name><index>[<expr><name>DCA_XXCH_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>xxch_dmix_coeff</name><index>[<expr><name>DCA_XXCH_CHANNELS_MAX</name> <operator>*</operator> <name>DCA_CORE_CHANNELS_MAX</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>xxch_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x96_rev_no</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x96_crc_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x96_nchannels</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x96_high_res</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x96_subband_start</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x96_rand</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>x96_pos</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x96_subband_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>x96_subband_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>x96_subband_samples</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS_X96</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>subband_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>subband_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>subband_samples</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index><index>[<expr><name>DCA_SUBBANDS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>lfe_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DCADSPData</name></type> <name><name>dcadsp_data</name><index>[<expr><name>DCA_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>DCADSPContext</name> <modifier>*</modifier></type><name>dcadsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DCADCTContext</name></type> <name>dcadct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FFTContext</name></type> <name><name>imdct</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SynthFilterContext</name></type> <name>synth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>float_dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFixedDSPContext</name> <modifier>*</modifier></type><name>fixed_dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>output_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>output_buffer</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name><name>output_samples</name><index>[<expr><name>DCA_SPEAKER_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int32_t</name></type> <name>output_history_lfe_fixed</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>float</name></type> <name>output_history_lfe_float</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>ch_remap</name><index>[<expr><name>DCA_SPEAKER_COUNT</name></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>request_mask</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>npcmsamples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>output_rate</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>filter_mode</name></decl>;</decl_stmt> 

}</block></struct></type> <name>DCACoreDecoder</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_dca_core_map_spkr</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>core</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>spkr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>core</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1U</literal> <operator>&lt;&lt;</operator> <name>spkr</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>spkr</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spkr</name> <operator>==</operator> <name>DCA_SPEAKER_Lss</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>&amp;</operator> <name>DCA_SPEAKER_MASK_Ls</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DCA_SPEAKER_Ls</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>spkr</name> <operator>==</operator> <name>DCA_SPEAKER_Rss</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>core</name><operator>-&gt;</operator><name>ch_mask</name></name> <operator>&amp;</operator> <name>DCA_SPEAKER_MASK_Rs</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>DCA_SPEAKER_Rs</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ff_dca_core_dequantize</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name>step_size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>scale</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>residual</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>step_scale</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>step_size</name> <operator>*</operator> <name>scale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>step_scale</name> <operator>&gt;</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>step_scale</name> <operator>&gt;&gt;</operator> <literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step_scale</name> <operator>&gt;&gt;=</operator> <name>shift</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>residual</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>n</name></expr>]</index></name> <operator>+=</operator> <call><name>clip23</name><argument_list>(<argument><expr><call><name>norm__</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>step_scale</name></expr></argument>, <argument><expr><literal type="number">22</literal> <operator>-</operator> <name>shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>output</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>clip23</name><argument_list>(<argument><expr><call><name>norm__</name><argument_list>(<argument><expr><name><name>input</name><index>[<expr><name>n</name></expr>]</index></name> <operator>*</operator> <name>step_scale</name></expr></argument>, <argument><expr><literal type="number">22</literal> <operator>-</operator> <name>shift</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_dca_core_parse</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dca_core_parse_exss</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>DCAExssAsset</name> <modifier>*</modifier></type><name>asset</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dca_core_filter_fixed</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>x96_synth</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dca_core_filter_frame</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>av_cold</name> <name>void</name></type> <name>ff_dca_core_flush</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>av_cold</name> <name>int</name></type> <name>ff_dca_core_init</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>av_cold</name> <name>void</name></type> <name>ff_dca_core_close</name><parameter_list>(<parameter><decl><type><name>DCACoreDecoder</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
