<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\eaidct.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eaidct.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASQRT</name></cpp:macro> <cpp:value>181</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A4</name></cpp:macro> <cpp:value>669</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A2</name></cpp:macro> <cpp:value>277</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A5</name></cpp:macro> <cpp:value>196</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_TRANSFORM</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>s0</name></type></parameter>,<parameter><type><name>s1</name></type></parameter>,<parameter><type><name>s2</name></type></parameter>,<parameter><type><name>s3</name></type></parameter>,<parameter><type><name>s4</name></type></parameter>,<parameter><type><name>s5</name></type></parameter>,<parameter><type><name>s6</name></type></parameter>,<parameter><type><name>s7</name></type></parameter>,<parameter><type><name>d0</name></type></parameter>,<parameter><type><name>d1</name></type></parameter>,<parameter><type><name>d2</name></type></parameter>,<parameter><type><name>d3</name></type></parameter>,<parameter><type><name>d4</name></type></parameter>,<parameter><type><name>d5</name></type></parameter>,<parameter><type><name>d6</name></type></parameter>,<parameter><type><name>d7</name></type></parameter>,<parameter><type><name>munge</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{const int a1 = (src)[s1] + (src)[s7]; const int a7 = (src)[s1] - (src)[s7]; const int a5 = (src)[s5] + (src)[s3]; const int a3 = (src)[s5] - (src)[s3]; const int a2 = (src)[s2] + (src)[s6]; const int a6 = (ASQRT*((src)[s2] - (src)[s6]))&gt;&gt;8; const int a0 = (src)[s0] + (src)[s4]; const int a4 = (src)[s0] - (src)[s4]; const int b0 = (((A4-A5)*a7 - A5*a3)&gt;&gt;9) + a1+a5; const int b1 = (((A4-A5)*a7 - A5*a3)&gt;&gt;9) + ((ASQRT*(a1-a5))&gt;&gt;8); const int b2 = (((A2+A5)*a3 + A5*a7)&gt;&gt;9) + ((ASQRT*(a1-a5))&gt;&gt;8); const int b3 = ((A2+A5)*a3 + A5*a7)&gt;&gt;9; (dest)[d0] = munge(a0+a2+a6+b0); (dest)[d1] = munge(a4+a6 +b1); (dest)[d2] = munge(a4-a6 +b2); (dest)[d3] = munge(a0-a2-a6+b3); (dest)[d4] = munge(a0-a2-a6-b3); (dest)[d5] = munge(a4-a6 -b2); (dest)[d6] = munge(a4+a6 -b1); (dest)[d7] = munge(a0+a2+a6-b0); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUNGE_NONE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_COL</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IDCT_TRANSFORM(dest,0,8,16,24,32,40,48,56,0,8,16,24,32,40,48,56,MUNGE_NONE,src)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUNGE_8BIT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>av_clip_uint8((x)&gt;&gt;4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IDCT_ROW</name><parameter_list>(<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>IDCT_TRANSFORM(dest,0,1,2,3,4,5,6,7,0,1,2,3,4,5,6,7,MUNGE_8BIT,src)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>ea_idct_col</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">24</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">32</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">40</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">48</literal></expr>]</index></name><operator>|</operator><name><name>src</name><index>[<expr><literal type="number">56</literal></expr>]</index></name><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>dest</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator>

<name><name>dest</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <operator>=</operator>

<name><name>dest</name><index>[<expr><literal type="number">24</literal></expr>]</index></name> <operator>=</operator>

<name><name>dest</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <operator>=</operator>

<name><name>dest</name><index>[<expr><literal type="number">40</literal></expr>]</index></name> <operator>=</operator>

<name><name>dest</name><index>[<expr><literal type="number">48</literal></expr>]</index></name> <operator>=</operator>

<name><name>dest</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDCT_COL</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_ea_idct_put_c</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>linesize</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>block</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ea_idct_col</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>IDCT_ROW</name><argument_list>( <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>dest</name><index>[<expr><name>i</name><operator>*</operator><name>linesize</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>&amp;</operator><name><name>temp</name><index>[<expr><literal type="number">8</literal><operator>*</operator><name>i</name></expr>]</index></name><operator>)</operator></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

</unit>
