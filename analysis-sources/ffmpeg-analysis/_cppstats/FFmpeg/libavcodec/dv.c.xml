<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dv.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dv.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dvdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"put_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simple_idct.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>RL_VLC_ELEM</name></type> <name><name>ff_dv_rl_vlc</name><index>[<expr><literal type="number">1664</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>dv_calc_mb_coordinates</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>chan</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>seq</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slot</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>tbl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>off</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">2</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shuf1</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">36</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">54</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">72</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shuf2</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">48</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>shuf3</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">18</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">36</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>l_start</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><literal type="number">22</literal></expr>, <expr><literal type="number">27</literal></expr>, <expr><literal type="number">31</literal></expr>, <expr><literal type="number">36</literal></expr>, <expr><literal type="number">40</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>l_start_shuffled</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">9</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">18</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>serpent1</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>serpent2</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>remap</name><index>[]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">2</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">3</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">30</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">50</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">64</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">65</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">70</literal></expr>, <expr><literal type="number">66</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">67</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">20</literal></expr>, <expr><literal type="number">67</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">40</literal></expr>, <expr><literal type="number">67</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">60</literal></expr>, <expr><literal type="number">67</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>m</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>width</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1440</literal></expr>:</case>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>chan</name> <operator>*</operator> <literal type="number">11</literal> <operator>+</operator> <name>seq</name><operator>)</operator> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <name>slot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>chan</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>seq</name> <operator>==</operator> <literal type="number">11</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>m</name> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <name>slot</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">90</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">90</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">67</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>chan</name> <operator>+</operator> <name>blk</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>blk</name> <operator>/</operator> <literal type="number">11</literal><operator>)</operator> <operator>%</operator> <literal type="number">27</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>shuf1</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>chan</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <name>k</name> <operator>%</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">9</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>chan</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1280</literal></expr>:</case>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>chan</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>seq</name><operator>)</operator> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <name>slot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>chan</name> <operator>+</operator> <operator>(</operator><name>seq</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>blk</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>blk</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>%</operator> <literal type="number">27</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>shuf1</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>chan</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">9</literal> <operator>+</operator> <name>k</name> <operator>%</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">3</literal> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">9</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <operator>(</operator><name>chan</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;=</operator> <literal type="number">80</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>remap</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>x</name> <operator>-</operator> <literal type="number">80</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>y</name> <operator>&gt;</operator> <literal type="number">59</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>remap</name><index>[<expr><name>y</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">960</literal></expr>:</case>

<expr_stmt><expr><name>blk</name> <operator>=</operator> <operator>(</operator><name>chan</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>seq</name><operator>)</operator> <operator>*</operator> <literal type="number">27</literal> <operator>+</operator> <name>slot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name>chan</name> <operator>+</operator> <operator>(</operator><name>seq</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>blk</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>blk</name> <operator>/</operator> <literal type="number">5</literal><operator>)</operator> <operator>%</operator> <literal type="number">27</literal> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>shuf2</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name>k</name> <operator>%</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">6</literal> <operator>*</operator> <operator>(</operator><name>chan</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>l_start</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">6</literal> <operator>+</operator> <literal type="number">45</literal> <operator>*</operator> <operator>(</operator><name>chan</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">720</literal></expr>:</case>

<switch>switch <condition>(<expr><name><name>d</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_PIX_FMT_YUV422P</name></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>shuf3</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name>slot</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>serpent1</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>seq</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name><name>d</name><operator>-&gt;</operator><name>difseg_size</name></name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>chan</name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV420P</name></expr>:</case>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>shuf3</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name>slot</name> <operator>/</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>serpent1</name><index>[<expr><name>slot</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><operator>(</operator><name>seq</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name><name>d</name><operator>-&gt;</operator><name>difseg_size</name></name><operator>)</operator> <operator>*</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_PIX_FMT_YUV411P</name></expr>:</case>

<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>seq</name> <operator>+</operator> <name><name>off</name><index>[<expr><name>m</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <name><name>d</name><operator>-&gt;</operator><name>difseg_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name>slot</name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>m</name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator> <name>m</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>l_start_shuffled</name><index>[<expr><name>m</name></expr>]</index></name> <operator>+</operator> <name>k</name> <operator>/</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>serpent2</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&gt;</operator> <literal type="number">21</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name> <operator>*</operator> <literal type="number">2</literal> <operator>-</operator> <name>i</name> <operator>*</operator> <literal type="number">6</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>y</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_dv_init_dynamic_tables</name><parameter_list>(<parameter><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVDVProfile</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>s</name></decl>, <decl><type ref="prev"/><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>n_difchan</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>s</name> <operator>&lt;</operator> <name><name>d</name><operator>-&gt;</operator><name>difseg_size</name></name></expr>;</condition> <incr><expr><name>s</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">27</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <operator>!</operator><operator>(</operator><name>j</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>DV_PROFILE_IS_1080i50</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>s</name> <operator>==</operator> <literal type="number">11</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><call><name>DV_PROFILE_IS_720p50</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>s</name> <operator>&gt;</operator> <literal type="number">9</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dv_calc_mb_coordinates</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>work_chunks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>mb_coordinates</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>work_chunks</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name><operator>.</operator><name>buf_offset</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_dvvideo_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DVVideoContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>VLC</name></type> <name>dv_vlc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>new_dv_vlc_bits</name><index>[<expr><name>NB_DV_VLC</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>new_dv_vlc_len</name><index>[<expr><name>NB_DV_VLC</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>new_dv_vlc_run</name><index>[<expr><name>NB_DV_VLC</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>new_dv_vlc_level</name><index>[<expr><name>NB_DV_VLC</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NB_DV_VLC</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>new_dv_vlc_bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dv_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dv_vlc_len</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_run</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dv_vlc_run</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_level</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dv_vlc_level</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ff_dv_vlc_level</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>new_dv_vlc_bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_len</name><index>[<expr><name>j</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_bits</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>ff_dv_vlc_bits</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_len</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dv_vlc_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_run</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>ff_dv_vlc_run</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>new_dv_vlc_level</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>ff_dv_vlc_level</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>init_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dv_vlc</name></expr></argument>, <argument><expr><name>TEX_VLC_BITS</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>new_dv_vlc_len</name></expr></argument>,

<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>new_dv_vlc_bits</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>dv_vlc</name><operator>.</operator><name>table_size</name></name> <operator>==</operator> <literal type="number">1664</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>dv_vlc</name><operator>.</operator><name>table_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><name><name>dv_vlc</name><operator>.</operator><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><name><name>dv_vlc</name><operator>.</operator><name>table</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>, <decl><type ref="prev"/><name>run</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>run</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>run</name> <operator>=</operator> <name><name>new_dv_vlc_run</name><index>[<expr><name>code</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>level</name> <operator>=</operator> <name><name>new_dv_vlc_level</name><index>[<expr><name>code</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ff_dv_rl_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>len</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_dv_rl_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ff_dv_rl_vlc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>run</name> <operator>=</operator> <name>run</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>ff_free_vlc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dv_vlc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>chroma_sample_location</name></name> <operator>=</operator> <name>AVCHROMA_LOC_TOPLEFT</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
