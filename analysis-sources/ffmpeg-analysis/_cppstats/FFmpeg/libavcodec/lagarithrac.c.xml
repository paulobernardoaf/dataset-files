<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\lagarithrac.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lagarithrac.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_lag_rac_init</name><parameter_list>(<parameter><decl><type><name>lag_rac</name> <modifier>*</modifier></type><name>l</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>left</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>align_get_bits</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>left</name> <operator>=</operator> <call><name>get_bits_left</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>bytestream_start</name></name> <operator>=</operator>

<name><name>l</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>=</operator> <name><name>gb</name><operator>-&gt;</operator><name>buffer</name></name> <operator>+</operator> <call><name>get_bits_count</name><argument_list>(<argument><expr><name>gb</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>bytestream_end</name></name> <operator>=</operator> <name><name>l</name><operator>-&gt;</operator><name>bytestream_start</name></name> <operator>+</operator> <name>left</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>low</name></name> <operator>=</operator> <operator>*</operator><name><name>l</name><operator>-&gt;</operator><name>bytestream</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>hash_shift</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>l</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>overread</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1024</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>r</name> <init>= <expr><name>i</name> <operator>&lt;&lt;</operator> <name><name>l</name><operator>-&gt;</operator><name>hash_shift</name></name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name><name>l</name><operator>-&gt;</operator><name>prob</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <name>r</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name><name>l</name><operator>-&gt;</operator><name>range_hash</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

</unit>
