<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\pcm.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pcm_tablegen.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pcm_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>frame_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

<expr_stmt><expr><call><name>pcm_alaw_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>

<expr_stmt><expr><call><name>pcm_ulaw_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_VIDC</name></expr>:</case>

<expr_stmt><expr><call><name>pcm_vidc_tableinit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>*</operator> <literal type="number">8LL</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>endian</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>samples_ ##type = (const type *) src; for (; n &gt; 0; n--) { register type v = (*samples_ ##type++ &gt;&gt; shift) + offset; bytestream_put_ ##endian(&amp;dst, v); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ENCODE_PLANAR</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>endian</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n /= avctx-&gt;channels; for (c = 0; c &lt; avctx-&gt;channels; c++) { int i; samples_ ##type = (const type *) frame-&gt;extended_data[c]; for (i = n; i &gt; 0; i--) { register type v = (*samples_ ##type++ &gt;&gt; shift) + offset; bytestream_put_ ##endian(&amp;dst, v); } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pcm_encode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_packet_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>sample_size</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>short</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>samples_uint8_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int16_t</name> <modifier>*</modifier></type><name>samples_int16_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>samples_int32_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name> <modifier>*</modifier></type><name>samples_int64_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>samples_uint16_t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>samples_uint32_t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample_size</name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>short</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_alloc_packet2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>sample_size</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>sample_size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_U32LE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>uint32_t</argument>, <argument>le32</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x80000000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U32BE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>uint32_t</argument>, <argument>be32</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x80000000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24LE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int32_t</argument>, <argument>le24</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24LE_PLANAR</name></expr>:</case>

<macro><name>ENCODE_PLANAR</name><argument_list>(<argument>int32_t</argument>, <argument>le24</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int32_t</argument>, <argument>be24</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U24LE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>uint32_t</argument>, <argument>le24</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0x800000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U24BE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>uint32_t</argument>, <argument>be24</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0x800000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24DAUD</name></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><name><name>ff_reverse</name><index>[<expr><operator>(</operator><operator>*</operator><name>samples</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name><name>ff_reverse</name><index>[<expr><operator>*</operator><name>samples</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>&lt;&lt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream_put_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U16LE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>uint16_t</argument>, <argument>le16</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x8000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U16BE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>uint16_t</argument>, <argument>be16</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x8000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S8</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>uint8_t</argument>, <argument>byte</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">128</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S8_PLANAR</name></expr>:</case>

<macro><name>ENCODE_PLANAR</name><argument_list>(<argument>uint8_t</argument>, <argument>byte</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument>-<literal type="number">128</literal></argument>)</argument_list></macro>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_PCM_S64LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int64_t</argument>, <argument>le64</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int32_t</argument>, <argument>le32</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE_PLANAR</name></expr>:</case>

<macro><name>ENCODE_PLANAR</name><argument_list>(<argument>int32_t</argument>, <argument>le32</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int16_t</argument>, <argument>le16</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

<macro><name>ENCODE_PLANAR</name><argument_list>(<argument>int16_t</argument>, <argument>le16</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S64BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>AV_CODEC_ID_PCM_S64BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int64_t</argument>, <argument>be64</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int32_t</argument>, <argument>be32</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

<macro><name>ENCODE</name><argument_list>(<argument>int16_t</argument>, <argument>be16</argument>, <argument>samples</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE_PLANAR</name></expr>:</case>

<macro><name>ENCODE_PLANAR</name><argument_list>(<argument>int16_t</argument>, <argument>be16</argument>, <argument>dst</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S64LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>AV_CODEC_ID_PCM_U8</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE_PLANAR</name></expr>:</case>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE_PLANAR</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>n</name> <operator>/=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream_put_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>linear_to_alaw</name><index>[<expr><operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>linear_to_ulaw</name><index>[<expr><operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_VIDC</name></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>*</operator><name>samples</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name><operator>++</operator> <operator>=</operator> <name><name>linear_to_vidc</name><index>[<expr><operator>(</operator><name>v</name> <operator>+</operator> <literal type="number">32768</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>got_packet_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>PCMDecode</name> <block>{

<decl_stmt><decl><type><name>short</name></type> <name><name>table</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>scale</name></decl>;</decl_stmt>

}</block></struct></type> <name>PCMDecode</name>;</typedef>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pcm_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PCMDecode</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PCM channels out of bounds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>alaw2linear</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ulaw2linear</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_VIDC</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>table</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>vidc2linear</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F16LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F24LE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>&gt;</operator> <literal type="number">24</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">1.</literal> <operator>/</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name> <operator>=</operator> <call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sample_fmts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>pcm_decode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PCMDecode</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>fdsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>endian</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>for (; n &gt; 0; n--) { uint ##size ##_t v = bytestream_get_ ##endian(&amp;src); AV_WN ##size ##A(dst, (uint ##size ##_t)(v - offset) &lt;&lt; shift); dst += size / 8; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODE_PLANAR</name><parameter_list>(<parameter><type><name>size</name></type></parameter>, <parameter><type><name>endian</name></type></parameter>, <parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>n</name></type></parameter>, <parameter><type><name>shift</name></type></parameter>, <parameter><type><name>offset</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>n /= avctx-&gt;channels; for (c = 0; c &lt; avctx-&gt;channels; c++) { int i; dst = frame-&gt;extended_data[c]; for (i = n; i &gt; 0; i--) { uint ##size ##_t v = bytestream_get_ ##endian(&amp;src); AV_WN ##size ##A(dst, (uint ##size ##_t)(v - offset) &lt;&lt; shift); dst += size / 8; } }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pcm_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_size</name> <init>= <expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>PCMDecode</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sample_size</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>samples_per_block</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dst_int32_t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sample_size</name> <operator>=</operator> <call><name>av_get_bits_per_sample</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>samples_per_block</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_LXF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samples_per_block</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>sample_size</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample_size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of channels\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"codec ids mismatch\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>*</operator> <name>sample_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&amp;&amp;</operator> <name>buf_size</name> <operator>%</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>buf_size</name> <operator>&lt;</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid PCM packet, data has size %d but at least a size of %d was expected\n"</literal></expr></argument>,

<argument><expr><name>buf_size</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>buf_size</name> <operator>-=</operator> <name>buf_size</name> <operator>%</operator> <name>n</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name>buf_size</name> <operator>/</operator> <name>sample_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>n</name> <operator>*</operator> <name>samples_per_block</name> <operator>/</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_PCM_U32LE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>le32</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x80000000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U32BE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>be32</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x80000000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24LE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>le24</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24LE_PLANAR</name></expr>:</case>

<expr_stmt><expr><call><name>DECODE_PLANAR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>le24</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24BE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>be24</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U24LE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>le24</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0x800000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U24BE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>be24</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0x800000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S24DAUD</name></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><call><name>bytestream_get_be24</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">4</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AV_WN16A</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>ff_reverse</name><index>[<expr><operator>(</operator><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name><name>ff_reverse</name><index>[<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U16LE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>le16</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x8000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_U16BE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>be16</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0x8000</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S8</name></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S8_PLANAR</name></expr>:</case>

<expr_stmt><expr><name>n</name> <operator>/=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>samples</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator> <operator>+</operator> <literal type="number">128</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_PCM_S64LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument>le64</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F24LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F16LE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>le32</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE_PLANAR</name></expr>:</case>

<expr_stmt><expr><call><name>DECODE_PLANAR</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>le32</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>le16</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

<expr_stmt><expr><call><name>DECODE_PLANAR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>le16</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S64BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>AV_CODEC_ID_PCM_S64BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F64BE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">64</literal></argument>, <argument>be64</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F32BE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32BE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">32</literal></argument>, <argument>be32</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE</name></expr>:</case>

<macro><name>DECODE</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>be16</argument>, <argument>src</argument>, <argument>samples</argument>, <argument>n</argument>, <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE_PLANAR</name></expr>:</case>

<expr_stmt><expr><call><name>DECODE_PLANAR</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>be16</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_F64LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F24LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_F16LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S64LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<case>case <expr><name>AV_CODEC_ID_PCM_U8</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<case>case <expr><name>AV_CODEC_ID_PCM_S16BE_PLANAR</name></expr>:</case>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<case>case <expr><name>AV_CODEC_ID_PCM_S16LE_PLANAR</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_S32LE_PLANAR</name></expr>:</case>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<expr_stmt><expr><name>n</name> <operator>/=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream_get_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>src</name></expr></argument>, <argument><expr><name>samples</name></expr></argument>, <argument><expr><name>n</name> <operator>*</operator> <name>sample_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_ALAW</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_MULAW</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_PCM_VIDC</name></expr>:</case>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WN16A</name><argument_list>(<argument><expr><name>samples</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>table</name><index>[<expr><operator>*</operator><name>src</name><operator>++</operator></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_PCM_LXF</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>/=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>dst_int32_t</name> <operator>=</operator> <operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>dst_int32_t</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">28</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x0F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst_int32_t</name><operator>++</operator> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint32_t</name><operator>)</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xF0</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>src</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator>

<operator>(</operator><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block>

<default>default:</default>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_F16LE</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>==</operator> <name>AV_CODEC_ID_PCM_F24LE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>float</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>extended_data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>scale</name></name></expr></argument>, <argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>emms_c</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>buf_size</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_ENCODER_0</name><parameter_list>(<parameter><type><name>id_</name></type></parameter>, <parameter><type><name>sample_fmt_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_ENCODER_1</name><parameter_list>(<parameter><type><name>id_</name></type></parameter>, <parameter><type><name>sample_fmt_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVCodec ff_ ##name_ ##_encoder = { .name = #name_, .long_name = NULL_IF_CONFIG_SMALL(long_name_), .type = AVMEDIA_TYPE_AUDIO, .id = AV_CODEC_ID_ ##id_, .init = pcm_encode_init, .encode2 = pcm_encode_frame, .capabilities = AV_CODEC_CAP_VARIABLE_FRAME_SIZE, .sample_fmts = (const enum AVSampleFormat[]){ sample_fmt_, AV_SAMPLE_FMT_NONE }, }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_ENCODER_2</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PCM_ENCODER_ ##cf(id, sample_fmt, name, long_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_ENCODER_3</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PCM_ENCODER_2(cf, id, sample_fmt, name, long_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_ENCODER</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PCM_ENCODER_3(CONFIG_ ##id ##_ENCODER, id, sample_fmt, name, long_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_DECODER_0</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name</name></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_DECODER_1</name><parameter_list>(<parameter><type><name>id_</name></type></parameter>, <parameter><type><name>sample_fmt_</name></type></parameter>, <parameter><type><name>name_</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>AVCodec ff_ ##name_ ##_decoder = { .name = #name_, .long_name = NULL_IF_CONFIG_SMALL(long_name_), .type = AVMEDIA_TYPE_AUDIO, .id = AV_CODEC_ID_ ##id_, .priv_data_size = sizeof(PCMDecode), .init = pcm_decode_init, .close = pcm_decode_close, .decode = pcm_decode_frame, .capabilities = AV_CODEC_CAP_DR1, .sample_fmts = (const enum AVSampleFormat[]){ sample_fmt_, AV_SAMPLE_FMT_NONE }, }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_DECODER_2</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PCM_DECODER_ ##cf(id, sample_fmt, name, long_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_DECODER_3</name><parameter_list>(<parameter><type><name>cf</name></type></parameter>, <parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PCM_DECODER_2(cf, id, sample_fmt, name, long_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_DECODER</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PCM_DECODER_3(CONFIG_ ##id ##_DECODER, id, sample_fmt, name, long_name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PCM_CODEC</name><parameter_list>(<parameter><type><name>id</name></type></parameter>, <parameter><type><name>sample_fmt_</name></type></parameter>, <parameter><type><name>name</name></type></parameter>, <parameter><type><name>long_name_</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>PCM_ENCODER(id, sample_fmt_, name, long_name_); PCM_DECODER(id, sample_fmt_, name, long_name_)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_ALAW</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_alaw</name></expr></argument>, <argument><expr><literal type="string">"PCM A-law / G.711 A-law"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_DECODER</name><argument_list>(<argument><expr><name>PCM_F16LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>pcm_f16le</name></expr></argument>, <argument><expr><literal type="string">"PCM 16.8 floating point little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_DECODER</name><argument_list>(<argument><expr><name>PCM_F24LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>pcm_f24le</name></expr></argument>, <argument><expr><literal type="string">"PCM 24.0 floating point little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_F32BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>pcm_f32be</name></expr></argument>, <argument><expr><literal type="string">"PCM 32-bit floating point big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_F32LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLT</name></expr></argument>, <argument><expr><name>pcm_f32le</name></expr></argument>, <argument><expr><literal type="string">"PCM 32-bit floating point little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_F64BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>pcm_f64be</name></expr></argument>, <argument><expr><literal type="string">"PCM 64-bit floating point big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_F64LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_DBL</name></expr></argument>, <argument><expr><name>pcm_f64le</name></expr></argument>, <argument><expr><literal type="string">"PCM 64-bit floating point little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_DECODER</name><argument_list>(<argument><expr><name>PCM_LXF</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32P</name></expr></argument>,<argument><expr><name>pcm_lxf</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 20-bit little-endian planar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_MULAW</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_mulaw</name></expr></argument>, <argument><expr><literal type="string">"PCM mu-law / G.711 mu-law"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S8</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument>, <argument><expr><name>pcm_s8</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 8-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S8_PLANAR</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8P</name></expr></argument>, <argument><expr><name>pcm_s8_planar</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 8-bit planar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S16BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_s16be</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 16-bit big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S16BE_PLANAR</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>,<argument><expr><name>pcm_s16be_planar</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 16-bit big-endian planar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S16LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_s16le</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 16-bit little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S16LE_PLANAR</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>,<argument><expr><name>pcm_s16le_planar</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 16-bit little-endian planar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S24BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_s24be</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 24-bit big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S24DAUD</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_s24daud</name></expr></argument>, <argument><expr><literal type="string">"PCM D-Cinema audio signed 24-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S24LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_s24le</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 24-bit little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S24LE_PLANAR</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32P</name></expr></argument>,<argument><expr><name>pcm_s24le_planar</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 24-bit little-endian planar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S32BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_s32be</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 32-bit big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S32LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_s32le</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 32-bit little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S32LE_PLANAR</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32P</name></expr></argument>,<argument><expr><name>pcm_s32le_planar</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 32-bit little-endian planar"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_U8</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_U8</name></expr></argument>, <argument><expr><name>pcm_u8</name></expr></argument>, <argument><expr><literal type="string">"PCM unsigned 8-bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_U16BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_u16be</name></expr></argument>, <argument><expr><literal type="string">"PCM unsigned 16-bit big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_U16LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_u16le</name></expr></argument>, <argument><expr><literal type="string">"PCM unsigned 16-bit little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_U24BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_u24be</name></expr></argument>, <argument><expr><literal type="string">"PCM unsigned 24-bit big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_U24LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_u24le</name></expr></argument>, <argument><expr><literal type="string">"PCM unsigned 24-bit little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_U32BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_u32be</name></expr></argument>, <argument><expr><literal type="string">"PCM unsigned 32-bit big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_U32LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S32</name></expr></argument>, <argument><expr><name>pcm_u32le</name></expr></argument>, <argument><expr><literal type="string">"PCM unsigned 32-bit little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S64BE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>pcm_s64be</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 64-bit big-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_S64LE</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S64</name></expr></argument>, <argument><expr><name>pcm_s64le</name></expr></argument>, <argument><expr><literal type="string">"PCM signed 64-bit little-endian"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>PCM_CODEC</name> <argument_list>(<argument><expr><name>PCM_VIDC</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16</name></expr></argument>, <argument><expr><name>pcm_vidc</name></expr></argument>, <argument><expr><literal type="string">"PCM Archimedes VIDC"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</unit>
