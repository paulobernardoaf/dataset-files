<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\pcm_tablegen.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIGN_BIT</name></cpp:macro> <cpp:value>(0x80)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QUANT_MASK</name></cpp:macro> <cpp:value>(0xf)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NSEGS</name></cpp:macro> <cpp:value>(8)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEG_SHIFT</name></cpp:macro> <cpp:value>(4)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEG_MASK</name></cpp:macro> <cpp:value>(0x70)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BIAS</name></cpp:macro> <cpp:value>(0x84)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDC_SIGN_BIT</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDC_QUANT_MASK</name></cpp:macro> <cpp:value>(0x1E)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDC_QUANT_SHIFT</name></cpp:macro> <cpp:value>(1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDC_SEG_SHIFT</name></cpp:macro> <cpp:value>(5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VIDC_SEG_MASK</name></cpp:macro> <cpp:value>(0xE0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>alaw2linear</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>a_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>seg</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a_val</name> <operator>^=</operator> <literal type="number">0x55</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>a_val</name> <operator>&amp;</operator> <name>QUANT_MASK</name></expr>;</expr_stmt>

<expr_stmt><expr><name>seg</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>a_val</name> <operator>&amp;</operator> <name>SEG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SEG_SHIFT</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>seg</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">32</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>seg</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>t</name><operator>=</operator> <operator>(</operator><name>t</name> <operator>+</operator> <name>t</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>a_val</name> <operator>&amp;</operator> <name>SIGN_BIT</name><operator>)</operator></expr> ?</condition><then> <expr><name>t</name></expr> </then><else>: <expr><operator>-</operator><name>t</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>ulaw2linear</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>u_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>u_val</name> <operator>=</operator> <operator>~</operator><name>u_val</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>u_val</name> <operator>&amp;</operator> <name>QUANT_MASK</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>BIAS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>u_val</name> <operator>&amp;</operator> <name>SEG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>SEG_SHIFT</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>u_val</name> <operator>&amp;</operator> <name>SIGN_BIT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>BIAS</name> <operator>-</operator> <name>t</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>t</name> <operator>-</operator> <name>BIAS</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vidc2linear</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>u_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>t</name></decl>;</decl_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name>u_val</name> <operator>&amp;</operator> <name>VIDC_QUANT_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>VIDC_QUANT_SHIFT</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>+</operator> <name>BIAS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>&lt;&lt;=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>u_val</name> <operator>&amp;</operator> <name>VIDC_SEG_MASK</name><operator>)</operator> <operator>&gt;&gt;</operator> <name>VIDC_SEG_SHIFT</name></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>u_val</name> <operator>&amp;</operator> <name>VIDC_SIGN_BIT</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>BIAS</name> <operator>-</operator> <name>t</name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name>t</name> <operator>-</operator> <name>BIAS</name><operator>)</operator></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_HARDCODED_TABLES</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcm_alaw_tableinit</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcm_ulaw_tableinit</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>pcm_vidc_tableinit</name><parameter_list>()</parameter_list></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/pcm_tables.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>linear_to_alaw</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>linear_to_ulaw</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>linear_to_vidc</name><index>[<expr><literal type="number">16384</literal></expr>]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>build_xlaw_table</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>linear_to_xlaw</name></decl></parameter>,

<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>xlaw2linear</name>)<parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>char</name></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>v</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>, <decl><type ref="prev"/><name>v2</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linear_to_xlaw</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name> <operator>=</operator> <name>mask</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init><condition><expr><name>i</name><operator>&lt;</operator><literal type="number">127</literal></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>xlaw2linear</name><argument_list>(<argument><expr><name>i</name> <operator>^</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>xlaw2linear</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v1</name> <operator>+</operator> <name>v2</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<for>for<control>(<init>;</init><condition><expr><name>j</name><operator>&lt;</operator><name>v</name></expr>;</condition><incr><expr><name>j</name><operator>+=</operator><literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>linear_to_xlaw</name><index>[<expr><literal type="number">8192</literal> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>^</operator> <operator>(</operator><name>mask</name> <operator>^</operator> <literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linear_to_xlaw</name><index>[<expr><literal type="number">8192</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>^</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init>;</init><condition><expr><name>j</name><operator>&lt;</operator><literal type="number">8192</literal></expr>;</condition><incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>linear_to_xlaw</name><index>[<expr><literal type="number">8192</literal> <operator>-</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">127</literal> <operator>^</operator> <operator>(</operator><name>mask</name> <operator>^</operator> <literal type="number">0x80</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>linear_to_xlaw</name><index>[<expr><literal type="number">8192</literal> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">127</literal> <operator>^</operator> <name>mask</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>linear_to_xlaw</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>linear_to_xlaw</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pcm_alaw_tableinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>build_xlaw_table</name><argument_list>(<argument><expr><name>linear_to_alaw</name></expr></argument>, <argument><expr><name>alaw2linear</name></expr></argument>, <argument><expr><literal type="number">0xd5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pcm_ulaw_tableinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>build_xlaw_table</name><argument_list>(<argument><expr><name>linear_to_ulaw</name></expr></argument>, <argument><expr><name>ulaw2linear</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>pcm_vidc_tableinit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>build_xlaw_table</name><argument_list>(<argument><expr><name>linear_to_vidc</name></expr></argument>, <argument><expr><name>vidc2linear</name></expr></argument>, <argument><expr><literal type="number">0xff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
