<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\amfenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_d3d11va.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COBJMACROS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/hwcontext_dxva2.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"amfenc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;d3d11.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"compat/w32dlfcn.h"</cpp:file></cpp:include>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FFMPEG_AMF_WRITER_ID</name></cpp:macro> <cpp:value>L"ffmpeg_amf"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTS_PROP</name></cpp:macro> <cpp:value>L"PtsProp"</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>ff_amf_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_PIX_FMT_NV12</name></expr>,

<expr><name>AV_PIX_FMT_YUV420P</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_D3D11</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><name>AV_PIX_FMT_NONE</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>FormatMap</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>av_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AMF_SURFACE_FORMAT</name></name></type> <name>amf_format</name></decl>;</decl_stmt>

}</block></struct></type> <name>FormatMap</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>FormatMap</name></type> <name><name>format_map</name><index>[]</index></name> <init>=

<expr><block>{

<expr><block>{ <expr><name>AV_PIX_FMT_NONE</name></expr>, <expr><name>AMF_SURFACE_UNKNOWN</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_NV12</name></expr>, <expr><name>AMF_SURFACE_NV12</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_BGR0</name></expr>, <expr><name>AMF_SURFACE_BGRA</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_RGB0</name></expr>, <expr><name>AMF_SURFACE_RGBA</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_GRAY8</name></expr>, <expr><name>AMF_SURFACE_GRAY8</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUV420P</name></expr>, <expr><name>AMF_SURFACE_YUV420P</name></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_PIX_FMT_YUYV422</name></expr>, <expr><name>AMF_SURFACE_YUY2</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name><name>enum</name> <name>AMF_SURFACE_FORMAT</name></name></type> <name>amf_av_to_amf_format</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>amf_countof</name><argument_list>(<argument><expr><name>format_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_format</name> <operator>==</operator> <name>fmt</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name><name>format_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>amf_format</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>AMF_SURFACE_UNKNOWN</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>AMF_CDECL_CALL</name></type> <name>AMFTraceWriter_Write</name><parameter_list>(<parameter><decl><type><name>AMFTraceWriter</name> <modifier>*</modifier></type><name>pThis</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>scope</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfTraceWriter</name> <modifier>*</modifier></type><name>tracer</name> <init>= <expr><operator>(</operator><name>AmfTraceWriter</name><operator>*</operator><operator>)</operator><name>pThis</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>tracer</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"%ls: %ls"</literal></expr></argument>, <argument><expr><name>scope</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>AMF_CDECL_CALL</name></type> <name>AMFTraceWriter_Flush</name><parameter_list>(<parameter><decl><type><name>AMFTraceWriter</name> <modifier>*</modifier></type><name>pThis</name></decl></parameter>)</parameter_list>

<block>{<block_content>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>AMFTraceWriterVtbl</name></type> <name>tracer_vtbl</name> <init>=

<expr><block>{

<expr><operator>.</operator><name>Write</name> <operator>=</operator> <name>AMFTraceWriter_Write</name></expr>,

<expr><operator>.</operator><name>Flush</name> <operator>=</operator> <name>AMFTraceWriter_Flush</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amf_load_library</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFInit_Fn</name></type> <name>init_fun</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFQueryVersion_Fn</name></type> <name>version_fun</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_frame</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>delayed_frame</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name> <operator>=</operator> <call><name>av_fifo_alloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dts_delay</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>library</name></name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><name>AMF_DLL_NAMEA</name></expr></argument>, <argument><expr><name>RTLD_NOW</name> <operator>|</operator> <name>RTLD_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>library</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>,

<argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"DLL %s failed to open\n"</literal></expr></argument>, <argument><expr><name>AMF_DLL_NAMEA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>init_fun</name> <operator>=</operator> <operator>(</operator><name>AMFInit_Fn</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>library</name></name></expr></argument>, <argument><expr><name>AMF_INIT_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>init_fun</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"DLL %s failed to find function %s\n"</literal></expr></argument>, <argument><expr><name>AMF_DLL_NAMEA</name></expr></argument>, <argument><expr><name>AMF_INIT_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>version_fun</name> <operator>=</operator> <operator>(</operator><name>AMFQueryVersion_Fn</name><operator>)</operator><call><name>dlsym</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>library</name></name></expr></argument>, <argument><expr><name>AMF_QUERY_VERSION_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>version_fun</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"DLL %s failed to find function %s\n"</literal></expr></argument>, <argument><expr><name>AMF_DLL_NAMEA</name></expr></argument>, <argument><expr><name>AMF_QUERY_VERSION_FUNCTION_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>version_fun</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"%s failed with error %d\n"</literal></expr></argument>, <argument><expr><name>AMF_QUERY_VERSION_FUNCTION_NAME</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>init_fun</name><argument_list>(<argument><expr><name>AMF_FULL_VERSION</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>factory</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"%s failed with error %d\n"</literal></expr></argument>, <argument><expr><name>AMF_INIT_FUNCTION_NAME</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>factory</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetTrace</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>factory</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"GetTrace() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>factory</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetDebug</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>factory</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>debug</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"GetDebug() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amf_init_from_d3d11_device</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVD3D11VADeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>InitDX11</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>device</name></name></expr></argument>, <argument><expr><name>AMF_DX11_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_NOT_SUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF via D3D11 is not supported on the given device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF failed to initialise on the given D3D11 device: %d.\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amf_init_from_dxva2_device</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVDXVA2DeviceContext</name> <modifier>*</modifier></type><name>hwctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HANDLE</name></type> <name>device_handle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDirect3DDevice9</name> <modifier>*</modifier></type><name>device</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HRESULT</name></type> <name>hr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_OpenDeviceHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FAILED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to open device handle for Direct3D9 device: %lx.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hr</name> <operator>=</operator> <call><name>IDirect3DDeviceManager9_LockDevice</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name>device_handle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>device</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>SUCCEEDED</name><argument_list>(<argument><expr><name>hr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>IDirect3DDeviceManager9_UnlockDevice</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name>device_handle</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to lock device handle for Direct3D9 device: %lx.\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name>hr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>IDirect3DDeviceManager9_CloseDeviceHandle</name><argument_list>(<argument><expr><name><name>hwctx</name><operator>-&gt;</operator><name>devmgr</name></name></expr></argument>, <argument><expr><name>device_handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>InitDX9</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>IDirect3DDevice9_Release</name><argument_list>(<argument><expr><name>device</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_NOT_SUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF via D3D9 is not supported on the given device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF failed to initialise on given D3D9 device: %d.\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENODEV</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amf_init_context</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFContext1</name> <modifier>*</modifier></type><name>context1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwsurfaces_in_queue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwsurfaces_in_queue_max</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>EnableWriter</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name>AMF_TRACE_WRITER_DEBUG_OUTPUT</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>log_to_dbg</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>log_to_dbg</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SetWriterLevel</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name>AMF_TRACE_WRITER_DEBUG_OUTPUT</name></expr></argument>, <argument><expr><name>AMF_TRACE_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>EnableWriter</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name>AMF_TRACE_WRITER_CONSOLE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SetGlobalLevel</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name>AMF_TRACE_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tracer</name><operator>.</operator><name>vtbl</name></name> <operator>=</operator> <operator>&amp;</operator><name>tracer_vtbl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tracer</name><operator>.</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>RegisterWriter</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name>FFMPEG_AMF_WRITER_ID</name></expr></argument>,<argument><expr><operator>(</operator><name>AMFTraceWriter</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>tracer</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SetWriterLevel</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name>FFMPEG_AMF_WRITER_ID</name></expr></argument>, <argument><expr><name>AMF_TRACE_TRACE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>factory</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>CreateContext</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>factory</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"CreateContext() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWFramesContext</name> <modifier>*</modifier></type><name>frames_ctx</name> <init>= <expr><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>amf_av_to_amf_format</name><argument_list>(<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AMF_SURFACE_UNKNOWN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Format of input frames context (%s) is not supported by AMF.\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_D3D11VA</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>amf_init_from_d3d11_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>amf_init_from_dxva2_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF initialisation from a %s frames context is not supported.\n"</literal></expr></argument>,

<argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwsurfaces_in_queue_max</name></name> <operator>=</operator> <name><name>frames_ctx</name><operator>-&gt;</operator><name>initial_pool_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name> <init>= <expr><operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_D3D11VA</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>amf_init_from_d3d11_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<case>case <expr><name>AV_HWDEVICE_TYPE_DXVA2</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>amf_init_from_dxva2_device</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>device_ctx</name><operator>-&gt;</operator><name>hwctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF initialisation from a %s device is not supported.\n"</literal></expr></argument>,

<argument><expr><call><name>av_hwdevice_get_type_name</name><argument_list>(<argument><expr><name><name>device_ctx</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>InitDX11</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AMF_DX11_1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"AMF initialisation succeeded via D3D11.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>InitDX9</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"AMF initialisation succeeded via D3D9.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>AMFGuid</name></type> <name>guid</name> <init>= <expr><call><name>IID_AMFContext1</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>context1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"CreateContext1() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>context1</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>InitVulkan</name></name><argument_list>(<argument><expr><name>context1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>context1</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>context1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_NOT_SUPPORTED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF via Vulkan is not supported on the given device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"AMF failed to initialise on the given Vulkan device: %d.\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"AMF initialisation succeeded via Vulkan.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amf_init_encoder</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>codec_id</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AMFVideoEncoderVCE_AVC</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<expr_stmt><expr><name>codec_id</name> <operator>=</operator> <name>AMFVideoEncoder_HEVC</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>codec_id</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"Codec %d is not supported\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator><operator>-&gt;</operator><name>sw_format</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>pix_fmt</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <call><name>amf_av_to_amf_format</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name>AMF_SURFACE_UNKNOWN</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="string">"Format %s is not supported\n"</literal></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>factory</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>CreateComponent</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>factory</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_ENCODER_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"CreateComponent(%ls) failed with error %d\n"</literal></expr></argument>, <argument><expr><name>codec_id</name></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name> <name>av_cold</name></type> <name>ff_amf_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Terminate</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Terminate</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hw_device_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>trace</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>UnregisterWriter</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name></expr></argument>, <argument><expr><name>FFMPEG_AMF_WRITER_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>library</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>library</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>library</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>trace</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>debug</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>factory</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_drain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>delayed_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amf_copy_surface</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>AMFSurface</name><modifier>*</modifier></type> <name>surface</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMFPlane</name> <modifier>*</modifier></type><name>plane</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst_data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>dst_linesize</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>planes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>planes</name> <operator>=</operator> <call><name><name>surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetPlanesCount</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>planes</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>planes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>plane</name> <operator>=</operator> <call><name><name>surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetPlaneAt</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>plane</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetNative</name></name><argument_list>(<argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst_linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name><name>plane</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetHPitch</name></name><argument_list>(<argument><expr><name>plane</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_image_copy</name><argument_list>(<argument><expr><name>dst_data</name></expr></argument>, <argument><expr><name>dst_linesize</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>timestamp_queue_enqueue</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_fifo_space</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_fifo_grow</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_write</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>amf_copy_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><name>AMFBuffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFVariantStruct</name></type> <name>var</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetSize</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetNative</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetProperty</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_OUTPUT_DATA_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>var</name><operator>.</operator><name>int64Value</name></name> <operator>==</operator> <name>AMF_VIDEO_ENCODER_OUTPUT_DATA_TYPE_IDR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetProperty</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_OUTPUT_DATA_TYPE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>.</operator><name>int64Value</name></name> <operator>==</operator> <name>AMF_VIDEO_ENCODER_HEVC_OUTPUT_DATA_TYPE_IDR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetProperty</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>PTS_PROP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>var</name><operator>.</operator><name>int64Value</name></name></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"timestamp_list is empty\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_read</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timestamp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dts_delay</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>timestamp_last</name> <init>= <expr><name>AV_NOPTS_VALUE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>,

<argument><expr><literal type="string">"timestamp_list is empty while max_b_frames = %d\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_fifo_generic_peek_at</name><argument_list>(

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>timestamp_last</name></expr></argument>,

<argument><expr><operator>(</operator><call><name>av_fifo_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>timestamp_list</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>timestamp</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>timestamp_last</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>timestamp_last</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>timestamp_last</name> <operator>&lt;</operator> <name>AV_NOPTS_VALUE</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dts_delay</name></name> <operator>=</operator> <name>timestamp_last</name> <operator>-</operator> <name>timestamp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>timestamp</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dts_delay</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_amf_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>amf_load_library</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>amf_init_context</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>amf_init_encoder</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_amf_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AMF_RESULT</name></type> <name>amf_set_property_buffer</name><parameter_list>(<parameter><decl><type><name>AMFSurface</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>AMFBuffer</name> <modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFVariantStruct</name></type> <name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AMFVariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AMFGuid</name></type> <name>guid_AMFInterface</name> <init>= <expr><call><name>IID_AMFInterface</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFInterface</name> <modifier>*</modifier></type><name>amf_interface</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>val</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid_AMFInterface</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>amf_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AMFVariantAssignInterface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>, <argument><expr><name>amf_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>amf_interface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>amf_interface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>object</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SetProperty</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMFVariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AMF_RESULT</name></type> <name>amf_get_property_buffer</name><parameter_list>(<parameter><decl><type><name>AMFData</name> <modifier>*</modifier></type><name>object</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>AMFBuffer</name> <modifier>*</modifier><modifier>*</modifier></type><name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFVariantStruct</name></type> <name>var</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AMFVariantInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>object</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetProperty</name></name><argument_list>(<argument><expr><name>object</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>var</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>AMF_VARIANT_INTERFACE</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AMFGuid</name></type> <name>guid_AMFBuffer</name> <init>= <expr><call><name>IID_AMFBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFInterface</name> <modifier>*</modifier></type><name>amf_interface</name> <init>= <expr><call><name>AMFVariantInterface</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>amf_interface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>amf_interface</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid_AMFBuffer</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <name>AMF_INVALID_DATA_TYPE</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMFVariantClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AMFBuffer</name> <modifier>*</modifier></type><name>amf_create_buffer_with_frame_ref</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AMFContext</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFBuffer</name> <modifier>*</modifier></type><name>frame_ref_storage_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>AllocBuffer</name></name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>AMF_MEMORY_HOST</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frame_ref</name> <operator>=</operator> <call><name>av_frame_clone</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name><name>frame_ref_storage_buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetNative</name></name><argument_list>(<argument><expr><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_ref</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>frame_ref_storage_buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_ref_storage_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>frame_ref_storage_buffer</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>amf_release_buffer_with_frame_ref</name><parameter_list>(<parameter><decl><type><name>AMFBuffer</name> <modifier>*</modifier></type><name>frame_ref_storage_buffer</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame_ref</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame_ref</name></expr></argument>, <argument><expr><call><name><name>frame_ref_storage_buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetNative</name></name><argument_list>(<argument><expr><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>frame_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame_ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>frame_ref_storage_buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_amf_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFSurface</name> <modifier>*</modifier></type><name>surface</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_drain</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <if type="elseif">else if<condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>delayed_drain</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Drain</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_INPUT_FULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_drain</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"Drain() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else<block>{<block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>hw_surface</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return> 

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_D3D11VA</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_D3D11</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>GUID</name></type> <name>AMFTextureArrayIndexGUID</name> <init>= <expr><block>{ <expr><literal type="number">0x28115527</literal></expr>, <expr><literal type="number">0xe7c3</literal></expr>, <expr><literal type="number">0x4b66</literal></expr>, <expr><block>{ <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xd3</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0x2a</literal></expr>, <expr><literal type="number">0xe6</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x7f</literal></expr>, <expr><literal type="number">0xaf</literal></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ID3D11Texture2D</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><operator>(</operator><name>ID3D11Texture2D</name><operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><operator>(</operator><name>intptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name> <operator>&amp;&amp;</operator>

<name><name>frame</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>texture</name><operator>-&gt;</operator><name>lpVtbl</name><operator>-&gt;</operator><name>SetPrivateData</name></name><argument_list>(<argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>AMFTextureArrayIndexGUID</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>CreateSurfaceFromDX11Native</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"CreateSurfaceFromDX11Native() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hw_surface</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_DXVA2</name></expr></cpp:if>

<case>case <expr><name>AV_PIX_FMT_DXVA2_VLD</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>IDirect3DSurface9</name> <modifier>*</modifier></type><name>texture</name> <init>= <expr><operator>(</operator><name>IDirect3DSurface9</name> <operator>*</operator><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>CreateSurfaceFromDX9Native</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>texture</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"CreateSurfaceFromDX9Native() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hw_surface</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<default>default:</default>

<block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>context</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>AllocSurface</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>, <argument><expr><name>AMF_MEMORY_HOST</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>format</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"AllocSurface() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amf_copy_surface</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>hw_surface</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AMFBuffer</name> <modifier>*</modifier></type><name>frame_ref_storage_buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SetCrop</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frame_ref_storage_buffer</name> <operator>=</operator> <call><name>amf_create_buffer_with_frame_ref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame_ref_storage_buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"create_buffer_with_frame_ref() returned NULL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>amf_set_property_buffer</name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><literal type="string">L"av_frame_ref"</literal></expr></argument>, <argument><expr><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"SetProperty failed for \"av_frame_ref\" with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwsurfaces_in_queue</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>frame_ref_storage_buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SetPts</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>PTS_PROP</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_H264</name></expr>:</case>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_INSERT_AUD</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HEVC</name></expr>:</case>

<expr_stmt><expr><call><name>AMF_ASSIGN_PROPERTY_INT64</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>surface</name></expr></argument>, <argument><expr><name>AMF_VIDEO_ENCODER_HEVC_INSERT_AUD</name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>aud</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SubmitInput</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>(</operator><name>AMFData</name><operator>*</operator><operator>)</operator><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>AMF_INPUT_FULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name> <operator>=</operator> <name>surface</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetMemoryType</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>AMF_MEMORY_DX11</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>surface</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"SubmitInput() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>timestamp_queue_enqueue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_amf_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMF_RESULT</name></type> <name>res_query</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AmfContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>block_and_wait</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>block_and_wait</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res_query</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>QueryOutput</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>data</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AMFBuffer</name><modifier>*</modifier></type> <name>buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AMFGuid</name></type> <name>guid</name> <init>= <expr><call><name>IID_AMFBuffer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>QueryInterface</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>guid</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>amf_copy_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>buffer</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name><name>data</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>HasProperty</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">L"av_frame_ref"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AMFBuffer</name> <modifier>*</modifier></type><name>frame_ref_storage_buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>amf_get_property_buffer</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="string">L"av_frame_ref"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"GetProperty failed for \"av_frame_ref\" with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>amf_release_buffer_with_frame_ref</name><argument_list>(<argument><expr><name>frame_ref_storage_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwsurfaces_in_queue</name></name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name><name>data</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><literal type="string">"amf_copy_buffer() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>SubmitInput</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>, <argument><expr><operator>(</operator><name>AMFData</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AMF_INPUT_FULL</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>pts</name> <init>= <expr><call><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>GetPts</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Release</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_frame</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"Repeated SubmitInput() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>timestamp_queue_enqueue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pts</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Data acquired but delayed frame submission got AMF_INPUT_FULL- should not happen\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_drain</name></name></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name><operator>-&gt;</operator><name>pVtbl</name><operator>-&gt;</operator><name>Drain</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>encoder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>!=</operator> <name>AMF_INPUT_FULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_drain</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>AMF_RETURN_IF_FALSE</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>res</name> <operator>==</operator> <name>AMF_OK</name></expr></argument>, <argument><expr><name>AVERROR_UNKNOWN</name></expr></argument>, <argument><expr><literal type="string">"Repeated Drain() failed with error %d\n"</literal></expr></argument>, <argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Data acquired but delayed drain submission got AMF_INPUT_FULL- should not happen\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>delayed_surface</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>delayed_drain</name></name> <operator>||</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <name>res_query</name> <operator>!=</operator> <name>AMF_EOF</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>hwsurfaces_in_queue</name></name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwsurfaces_in_queue_max</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>block_and_wait</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_usleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><name>block_and_wait</name></expr>)</condition>;</do>

<if_stmt><if>if <condition>(<expr><name>res_query</name> <operator>==</operator> <name>AMF_EOF</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_EOF</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>data</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
