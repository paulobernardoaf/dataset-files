<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\lpc.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lls.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aac_defines.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDER_METHOD_EST</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDER_METHOD_2LEVEL</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDER_METHOD_4LEVEL</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDER_METHOD_8LEVEL</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDER_METHOD_SEARCH</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ORDER_METHOD_LOG</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN_LPC_ORDER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_LPC_ORDER</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<enum>enum <name>FFLPCType</name> <block>{

<decl><name>FF_LPC_TYPE_DEFAULT</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, 

<decl><name>FF_LPC_TYPE_NONE</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>FF_LPC_TYPE_FIXED</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>FF_LPC_TYPE_LEVINSON</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>FF_LPC_TYPE_CHOLESKY</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>FF_LPC_TYPE_NB</name></decl> , 

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>LPCContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>blocksize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_order</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>FFLPCType</name></name></type> <name>lpc_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>windowed_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>windowed_samples</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lpc_apply_welch_window</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>w_data</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>lpc_compute_autocorr</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lag</name></decl></parameter>,

<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>autoc</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>LLSModel</name></type> <name><name>lls_models</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>LPCContext</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_lpc_calc_coefs</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_order</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precision</name></decl></parameter>,

<parameter><decl><type><name>int32_t</name></type> <name><name>coefs</name><index>[]</index><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>shift</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>FFLPCType</name></name></type> <name>lpc_type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lpc_passes</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>omethod</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>min_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_shift</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>zero_shift</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_lpc_calc_ref_coefs</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int32_t</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>double</name></type> <name>ff_lpc_calc_ref_coefs_f</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>samples</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_lpc_init</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blocksize</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_order</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>FFLPCType</name></name></type> <name>lpc_type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_lpc_init_x86</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_lpc_end</name><parameter_list>(<parameter><decl><type><name>LPCContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_FIXED</name></expr></cpp:if>

<typedef>typedef <type><name>int</name></type> <name>LPC_TYPE</name>;</typedef>

<typedef>typedef <type><name>unsigned</name></type> <name>LPC_TYPE_U</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LPC_USE_DOUBLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>double</name></type> <name>LPC_TYPE</name>;</typedef>

<typedef>typedef <type><name>double</name></type> <name>LPC_TYPE_U</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>float</name></type> <name>LPC_TYPE</name>;</typedef>

<typedef>typedef <type><name>float</name></type> <name>LPC_TYPE_U</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>compute_ref_coefs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LPC_TYPE</name> <modifier>*</modifier></type><name>autoc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_order</name></decl></parameter>,

<parameter><decl><type><name>LPC_TYPE</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>LPC_TYPE</name> <modifier>*</modifier></type><name>error</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPC_TYPE</name></type> <name>err</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPC_TYPE</name></type> <name><name>gen0</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>gen1</name><index>[<expr><name>MAX_LPC_ORDER</name></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>gen0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>gen1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>autoc</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name><name>autoc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>gen1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>+=</operator> <name><name>gen1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ref</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>error</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>max_order</name> <operator>-</operator> <name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>gen1</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>gen1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>ref</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>gen0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>gen0</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>gen1</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>ref</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>gen0</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><name><name>gen1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>+=</operator> <name><name>gen1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>error</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>error</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name> <name>AAC_RENAME</name></type>(<name>compute_lpc_coefs</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>LPC_TYPE</name> <modifier>*</modifier></type><name>autoc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max_order</name></decl></parameter>,

<parameter><decl><type><name>LPC_TYPE</name> <modifier>*</modifier></type><name>lpc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lpc_stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fail</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>normalize</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPC_TYPE</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPC_TYPE</name> <modifier>*</modifier></type><name>lpc_last</name> <init>= <expr><name>lpc</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>normalize</name> <operator>||</operator> <operator>!</operator><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>normalize</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <operator>*</operator><name>autoc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>fail</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>autoc</name><index>[<expr><name>max_order</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>err</name> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>max_order</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>LPC_TYPE</name></type> <name>r</name> <init>= <expr><call><name>AAC_SRA_R</name><argument_list>(<argument><expr><operator>-</operator><name><name>autoc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>normalize</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>i</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>-=</operator> <name><name>lpc_last</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>autoc</name><index>[<expr><name>i</name><operator>-</operator><name>j</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>r</name> <operator>/=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>*=</operator> <call><name>FIXR</name><argument_list>(<argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>r</name> <operator>*</operator> <name>r</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>j</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>&gt;</argument_list></name><operator>&gt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>LPC_TYPE</name></type> <name>f</name> <init>= <expr><name><name>lpc_last</name><index>[ <expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>LPC_TYPE</name></type> <name>b</name> <init>= <expr><name><name>lpc_last</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[ <expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>f</name> <operator>+</operator> <operator>(</operator><name>LPC_TYPE_U</name><operator>)</operator><call><name>AAC_MUL26</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>lpc</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>j</name></expr>]</index></name> <operator>=</operator> <name>b</name> <operator>+</operator> <operator>(</operator><name>LPC_TYPE_U</name><operator>)</operator><call><name>AAC_MUL26</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>fail</name> <operator>&amp;&amp;</operator> <name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>lpc_last</name> <operator>=</operator> <name>lpc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>lpc</name> <operator>+=</operator> <name>lpc_stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
