<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\sbcdec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdbool.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sbcdec_data.h"</cpp:file></cpp:include>

<struct>struct <name>sbc_decoder_state</name> <block>{

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>V</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">170</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</struct>

<typedef>typedef <type><struct>struct <name>SBCDecContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr>struct <name>sbc_frame</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><name>SBC_ALIGN</name></expr></argument>, <argument><expr>struct <name>sbc_decoder_state</name></expr></argument>, <argument><expr><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block></struct></type> <name>SBCDecContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_unpack_frame</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>consumed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>crc_header</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>crc_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>temp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>audio_sample</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>sb</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>, <decl><type ref="prev"/><name>bit</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>bits</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>levels</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt> 

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>MSBC_SYNCWORD</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <name>SBC_FREQ_16000</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <name>MSBC_BLOCKS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>allocation</name></name> <operator>=</operator> <name>LOUDNESS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <name>MONO</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>=</operator> <literal type="number">26</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>SBC_SYNCWORD</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>frequency</name></name> <operator>=</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name> <operator>=</operator> <literal type="number">4</literal> <operator>*</operator> <operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal><operator>)</operator> <operator>+</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>=</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <ternary><condition><expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MONO</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>allocation</name></name> <operator>=</operator> <operator>(</operator><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0x01</literal></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>MONO</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>DUAL_CHANNEL</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>STEREO</name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name><operator>)</operator> <operator>&amp;&amp;</operator>

<name><name>frame</name><operator>-&gt;</operator><name>bitpool</name></name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crc_header</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crc_header</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>crc_pos</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>*</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>consumed</name> <operator>+</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>joint</name></name> <operator>=</operator> <literal type="number">0x00</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>joint</name></name> <operator>|=</operator> <operator>(</operator><operator>(</operator><name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <name>sb</name><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>sb</name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>crc_header</name><index>[<expr><name>crc_pos</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>&amp;</operator> <literal type="number">0xf0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>crc_header</name><index>[<expr><name>crc_pos</name> <operator>/</operator> <literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>crc_pos</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>*</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name>consumed</name> <operator>+</operator> <operator>(</operator><literal type="number">4</literal> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name><name>data</name><index>[<expr><name>consumed</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>consumed</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>crc_header</name><index>[<expr><name>crc_pos</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>|=</operator>

<name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>&lt;&lt;</operator> <operator>(</operator><literal type="number">4</literal> <operator>-</operator> <operator>(</operator><name>crc_pos</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>crc_pos</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>!=</operator> <call><name>ff_sbc_crc8</name><argument_list>(<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>crc_ctx</name></name></expr></argument>, <argument><expr><name>crc_header</name></expr></argument>, <argument><expr><name>crc_pos</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_sbc_calculate_bits</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>levels</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>bits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>shift</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>levels</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>shift</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>scale_factor</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>+</operator>

<literal type="number">1</literal> <operator>+</operator> <name>SBCDEC_FIXED_EXTRA_BITS</name></expr>;</expr_stmt>

<expr_stmt><expr><name>audio_sample</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>bit</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bit</name> <operator>&lt;</operator> <name><name>bits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</condition> <incr><expr><name>bit</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>consumed</name> <operator>&gt;</operator> <name>len</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>data</name><index>[<expr><name>consumed</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>]</index></name> <operator>&gt;&gt;</operator> <operator>(</operator><literal type="number">7</literal> <operator>-</operator> <operator>(</operator><name>consumed</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>audio_sample</name> <operator>|=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>bits</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>-</operator> <name>bit</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>consumed</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator>

<operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator> <name>audio_sample</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>/</operator>

<name><name>levels</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>JOINT_STEREO</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>sb</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>sb</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>;</condition> <incr><expr><name>sb</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>joint</name></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x01</literal> <operator>&lt;&lt;</operator> <name>sb</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp</name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>+</operator>

<name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator>

<name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>-</operator>

<name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>sb</name></expr>]</index></name> <operator>=</operator> <name>temp</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>consumed</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>consumed</name> <operator>+=</operator> <literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>consumed</name> <operator>&amp;</operator> <literal type="number">0x7</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>consumed</name> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sbc_synthesize_four</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbc_decoder_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>V</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">79</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <literal type="number">80</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix4</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_int16</name><argument_list>(

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_4_40m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>sbc_synthesize_eight</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbc_decoder_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blk</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>v</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>V</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>offset</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>offset</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name><operator>--</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">159</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>v</name> <operator>+</operator> <literal type="number">160</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><literal type="number">9</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>ff_synmatrix8</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>frame</name><operator>-&gt;</operator><name>sb_sample</name><index>[<expr><name>blk</name></expr>]</index><index>[<expr><name>ch</name></expr>]</index><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>idx</name> <operator>+=</operator> <literal type="number">5</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xf</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN16A</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>output_frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>blk</name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><call><name>av_clip_int16</name><argument_list>(

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">6</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m0</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><name><name>v</name><index>[<expr><name><name>offset</name><index>[<expr><name>k</name></expr>]</index></name> <operator>+</operator> <literal type="number">9</literal></expr>]</index></name> <operator>*</operator> <name><name>ff_sbc_proto_8_80m1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sbc_synthesize_audio</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>sbc_decoder_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name><name>struct</name> <name>sbc_frame</name></name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>output_frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>blk</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>frame</name><operator>-&gt;</operator><name>subbands</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sbc_synthesize_four</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>blk</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blk</name> <operator>&lt;</operator> <name><name>frame</name><operator>-&gt;</operator><name>blocks</name></name></expr>;</condition> <incr><expr><name>blk</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>sbc_synthesize_eight</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>blk</name></expr></argument>, <argument><expr><name>output_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SBCDecContext</name> <modifier>*</modifier></type><name>sbc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbc</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>crc_ctx</name></name> <operator>=</operator> <call><name>av_crc_get_table</name><argument_list>(<argument><expr><name>AV_CRC_8_EBU</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>V</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>V</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>offset</name><index>[<expr><name>ch</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">10</literal> <operator>*</operator> <name>i</name> <operator>+</operator> <literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sbc_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame_ptr</name></decl></parameter>,

<parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SBCDecContext</name> <modifier>*</modifier></type><name>sbc</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>frame_length</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>sbc</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frame_length</name> <operator>=</operator> <call><name>sbc_unpack_frame</name><argument_list>(<argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frame_length</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>frame_length</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name><name>sbc</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>sbc</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>blocks</name></name> <operator>*</operator> <name><name>sbc</name><operator>-&gt;</operator><name>frame</name><operator>.</operator><name>subbands</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>sbc_synthesize_audio</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sbc</name><operator>-&gt;</operator><name>frame</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame_ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>frame_length</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_sbc_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"sbc"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"SBC (low-complexity subband codec)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_SBC</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SBCDecContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>sbc_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>sbc_decode_frame</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>caps_internal</name> <operator>=</operator> <name>FF_CODEC_CAP_INIT_THREADSAFE</name></expr>,

<expr><operator>.</operator><name>channel_layouts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>uint64_t</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_CH_LAYOUT_MONO</name></expr>,

<expr><name>AV_CH_LAYOUT_STEREO</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>,

<expr><operator>.</operator><name>sample_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVSampleFormat</name><index>[]</index></name><operator>)</operator> <block>{ <expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_NONE</name></expr> }</block></expr>,

<expr><operator>.</operator><name>supported_samplerates</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name><name>int</name><index>[]</index></name><operator>)</operator> <block>{ <expr><literal type="number">16000</literal></expr>, <expr><literal type="number">32000</literal></expr>, <expr><literal type="number">44100</literal></expr>, <expr><literal type="number">48000</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
