<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h264dsp_template.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bit_depth_template.c"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_scale1</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>block[x] = av_clip_pixel( (block[x]*weight + offset) &gt;&gt; log2_denom )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>op_scale2</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>dst[x] = av_clip_pixel( (src[x]*weights + dst[x]*weightd + offset) &gt;&gt; (log2_denom+1))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H264_WEIGHT</name><parameter_list>(<parameter><type><name>W</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void FUNCC(weight_h264_pixels ##W)(uint8_t *_block, ptrdiff_t stride, int height, int log2_denom, int weight, int offset) { int y; pixel *block = (pixel*)_block; stride &gt;&gt;= sizeof(pixel)-1; offset = (unsigned)offset &lt;&lt; (log2_denom + (BIT_DEPTH-8)); if(log2_denom) offset += 1&lt;&lt;(log2_denom-1); for (y = 0; y &lt; height; y++, block += stride) { op_scale1(0); op_scale1(1); if(W==2) continue; op_scale1(2); op_scale1(3); if(W==4) continue; op_scale1(4); op_scale1(5); op_scale1(6); op_scale1(7); if(W==8) continue; op_scale1(8); op_scale1(9); op_scale1(10); op_scale1(11); op_scale1(12); op_scale1(13); op_scale1(14); op_scale1(15); } } static void FUNCC(biweight_h264_pixels ##W)(uint8_t *_dst, uint8_t *_src, ptrdiff_t stride, int height, int log2_denom, int weightd, int weights, int offset) { int y; pixel *dst = (pixel*)_dst; pixel *src = (pixel*)_src; stride &gt;&gt;= sizeof(pixel)-1; offset = (unsigned)offset &lt;&lt; (BIT_DEPTH-8); offset = (unsigned)((offset + 1) | 1) &lt;&lt; log2_denom; for (y = 0; y &lt; height; y++, dst += stride, src += stride) { op_scale2(0); op_scale2(1); if(W==2) continue; op_scale2(2); op_scale2(3); if(W==4) continue; op_scale2(4); op_scale2(5); op_scale2(6); op_scale2(7); if(W==8) continue; op_scale2(8); op_scale2(9); op_scale2(10); op_scale2(11); op_scale2(12); op_scale2(13); op_scale2(14); op_scale2(15); } }</cpp:value></cpp:define>

<macro><name>H264_WEIGHT</name><argument_list>(<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>H264_WEIGHT</name><argument_list>(<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>H264_WEIGHT</name><argument_list>(<argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>H264_WEIGHT</name><argument_list>(<argument><literal type="number">2</literal></argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_scale1</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>op_scale2</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>H264_WEIGHT</name></cpp:undef>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_flatten</name> <name>void</name> <name>FUNCC</name></type>(<name>h264_loop_filter_luma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>xstride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ystride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inner_iters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>p_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xstride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ystride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tc_orig</name> <init>= <expr><name><name>tc0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>tc_orig</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>inner_iters</name><operator>*</operator><name>ystride</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>inner_iters</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p0</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p1</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p2</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q0</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q1</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q2</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>alpha</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tc</name> <init>= <expr><name>tc_orig</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i_delta</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>p2</name> <operator>-</operator> <name>p0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>tc_orig</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <name>p1</name> <operator>+</operator> <call><name>av_clip</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator> <name>p2</name> <operator>+</operator> <operator>(</operator> <operator>(</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>p1</name></expr></argument>, <argument><expr><operator>-</operator><name>tc_orig</name></expr></argument>, <argument><expr><name>tc_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>q2</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><name>tc_orig</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pix</name><index>[ <expr><name>xstride</name></expr>]</index></name> <operator>=</operator> <name>q1</name> <operator>+</operator> <call><name>av_clip</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator> <name>q2</name> <operator>+</operator> <operator>(</operator> <operator>(</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">1</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>)</operator> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <name>q1</name></expr></argument>, <argument><expr><operator>-</operator><name>tc_orig</name></expr></argument>, <argument><expr><name>tc_orig</name></expr></argument> )</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>i_delta</name> <operator>=</operator> <call><name>av_clip</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name> <operator>)</operator> <operator>*</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>p1</name> <operator>-</operator> <name>q1</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name>p0</name> <operator>+</operator> <name>i_delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name>q0</name> <operator>-</operator> <name>i_delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>ystride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_v_loop_filter_luma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_luma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_luma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_luma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_luma_mbaff</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_luma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_flatten</name> <name>void</name> <name>FUNCC</name></type>(<name>h264_loop_filter_luma_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>xstride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ystride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inner_iters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>p_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xstride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ystride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>inner_iters</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p2</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p1</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p0</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q0</name> <init>= <expr><name><name>pix</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q1</name> <init>= <expr><name><name>pix</name><index>[ <expr><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q2</name> <init>= <expr><name><name>pix</name><index>[ <expr><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>alpha</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr> )</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><call><name>FFABS</name><argument_list>( <argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <operator>(</operator><operator>(</operator> <name>alpha</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>)</operator> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator></expr>)</condition><block>{<block_content>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>p2</name> <operator>-</operator> <name>p0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p3</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">4</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>p2</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>p1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>p0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">3</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>p3</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>p2</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>q2</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr>)</condition>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q3</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">3</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>p1</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>p0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>q0</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <name>p0</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q2</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>q3</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>q2</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <literal type="number">4</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>q1</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pix</name><index>[ <expr><literal type="number">0</literal><operator>*</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>q1</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>ystride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_v_loop_filter_luma_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_luma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_luma_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_luma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_luma_mbaff_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_luma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_flatten</name> <name>void</name> <name>FUNCC</name></type>(<name>h264_loop_filter_chroma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>xstride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ystride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inner_iters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>p_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>alpha</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>xstride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ystride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tc</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>tc0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <literal type="number">1U</literal><operator>)</operator> <operator>&lt;&lt;</operator> <operator>(</operator><name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><name>tc</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>inner_iters</name><operator>*</operator><name>ystride</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for<control>( <init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <name>inner_iters</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p0</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p1</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q0</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q1</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>alpha</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr> )</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>delta</name> <init>= <expr><call><name>av_clip</name><argument_list>( <argument><expr><operator>(</operator><operator>(</operator><name>q0</name> <operator>-</operator> <name>p0</name><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <operator>(</operator><name>p1</name> <operator>-</operator> <name>q1</name><operator>)</operator> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><operator>-</operator><name>tc</name></expr></argument>, <argument><expr><name>tc</name></expr></argument> )</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name>p0</name> <operator>+</operator> <name>delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip_pixel</name><argument_list>( <argument><expr><name>q0</name> <operator>-</operator> <name>delta</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>ystride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_v_loop_filter_chroma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma_mbaff</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma422</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma422_mbaff</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>, <parameter><decl><type><name>int8_t</name> <modifier>*</modifier></type><name>tc0</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>, <argument><expr><name>tc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_flatten</name> <name>void</name> <name>FUNCC</name></type>(<name>h264_loop_filter_chroma_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p_pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>xstride</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>ystride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inner_iters</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pixel</name> <modifier>*</modifier></type><name>pix</name> <init>= <expr><operator>(</operator><name>pixel</name><operator>*</operator><operator>)</operator><name>p_pix</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>xstride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ystride</name> <operator>&gt;&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>alpha</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>beta</name> <operator>&lt;&lt;=</operator> <name>BIT_DEPTH</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for<control>( <init><expr><name>d</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>d</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>*</operator> <name>inner_iters</name></expr>;</condition> <incr><expr><name>d</name><operator>++</operator></expr></incr> )</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p0</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>p1</name> <init>= <expr><name><name>pix</name><index>[<expr><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q0</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>q1</name> <init>= <expr><name><name>pix</name><index>[<expr><literal type="number">1</literal><operator>*</operator><name>xstride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>( <expr><call><name>FFABS</name><argument_list>( <argument><expr><name>p0</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>alpha</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>p1</name> <operator>-</operator> <name>p0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name> <operator>&amp;&amp;</operator>

<call><name>FFABS</name><argument_list>( <argument><expr><name>q1</name> <operator>-</operator> <name>q0</name></expr></argument> )</argument_list></call> <operator>&lt;</operator> <name>beta</name></expr> )</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pix</name><index>[<expr><operator>-</operator><name>xstride</name></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>p1</name> <operator>+</operator> <name>p0</name> <operator>+</operator> <name>q1</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>pix</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator> <literal type="number">2</literal><operator>*</operator><name>q1</name> <operator>+</operator> <name>q0</name> <operator>+</operator> <name>p1</name> <operator>+</operator> <literal type="number">2</literal> <operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pix</name> <operator>+=</operator> <name>ystride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_v_loop_filter_chroma_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma_mbaff_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma422_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <name>FUNCC</name></type>(<name>h264_h_loop_filter_chroma422_mbaff_intra</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pix</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>alpha</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>beta</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><call><name>FUNCC</name><argument_list>(<argument><expr><name>h264_loop_filter_chroma_intra</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>pix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pixel</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>alpha</name></expr></argument>, <argument><expr><name>beta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
