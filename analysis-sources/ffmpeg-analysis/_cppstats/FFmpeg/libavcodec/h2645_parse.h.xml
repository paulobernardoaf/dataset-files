<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\h2645_parse.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_MBPAIR_SIZE</name></cpp:macro> <cpp:value>(256*1024)</cpp:value></cpp:define> 

<typedef>typedef <type><struct>struct <name>H2645NAL</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rbsp_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size_bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>raw_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>raw_data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetBitContext</name></type> <name>gb</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>temporal_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nuh_layer_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipped_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>skipped_bytes_pos_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>skipped_bytes_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ref_idc</name></decl>;</decl_stmt>

}</block></struct></type> <name>H2645NAL</name>;</typedef>

<typedef>typedef <type><struct>struct <name>H2645RBSP</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rbsp_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>rbsp_buffer_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rbsp_buffer_alloc_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rbsp_buffer_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>H2645RBSP</name>;</typedef>

<typedef>typedef <type><struct>struct <name>H2645Packet</name> <block>{

<decl_stmt><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>H2645RBSP</name></type> <name>rbsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_nals</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nals_allocated</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>nal_buffer_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>H2645Packet</name>;</typedef>

<function_decl><type><name>int</name></type> <name>ff_h2645_extract_rbsp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>H2645RBSP</name> <modifier>*</modifier></type><name>rbsp</name></decl></parameter>,

<parameter><decl><type><name>H2645NAL</name> <modifier>*</modifier></type><name>nal</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>small_padding</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_h2645_packet_split</name><parameter_list>(<parameter><decl><type><name>H2645Packet</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>length</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>is_nalff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nal_length_size</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>small_padding</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use_ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>ff_h2645_packet_uninit</name><parameter_list>(<parameter><decl><type><name>H2645Packet</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>get_nalsize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nal_length_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>buf_index</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>logctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>nalsize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>buf_index</name> <operator>&gt;=</operator> <name>buf_size</name> <operator>-</operator> <name>nal_length_size</name></expr>)</condition> <block>{<block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nal_length_size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>nalsize</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><name>nalsize</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <name><name>buf</name><index>[<expr><operator>(</operator><operator>*</operator><name>buf_index</name><operator>)</operator><operator>++</operator></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>nalsize</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>nalsize</name> <operator>&gt;</operator> <name>buf_size</name> <operator>-</operator> <operator>*</operator><name>buf_index</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>logctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid NAL unit size (%d &gt; %d).\n"</literal></expr></argument>, <argument><expr><name>nalsize</name></expr></argument>, <argument><expr><name>buf_size</name> <operator>-</operator> <operator>*</operator><name>buf_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>nalsize</name></expr>;</return>

</block_content>}</block></function>

</unit>
