<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\jpeg2000dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpeg2000.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jpeg2000dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"profiles.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JP2_SIG_TYPE</name></cpp:macro> <cpp:value>0x6A502020</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JP2_SIG_VALUE</name></cpp:macro> <cpp:value>0x0D0A870A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JP2_CODESTREAM</name></cpp:macro> <cpp:value>0x6A703263</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JP2_HEADER</name></cpp:macro> <cpp:value>0x6A703268</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAD_COC</name></cpp:macro> <cpp:value>0x01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAD_QCC</name></cpp:macro> <cpp:value>0x02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_POCS</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>Jpeg2000POCEntry</name> <block>{

<decl_stmt><decl><type><name>uint16_t</name></type> <name>LYEpoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>CSpoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>CEpoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>RSpoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>REpoc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>Ppoc</name></decl>;</decl_stmt>

}</block></struct></type> <name>Jpeg2000POCEntry</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Jpeg2000POC</name> <block>{

<decl_stmt><decl><type><name>Jpeg2000POCEntry</name></type> <name><name>poc</name><index>[<expr><name>MAX_POCS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>is_default</name></decl>;</decl_stmt>

}</block></struct></type> <name>Jpeg2000POC</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Jpeg2000TilePart</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>tile_index</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tp_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>tpg</name></decl>;</decl_stmt> 

}</block></struct></type> <name>Jpeg2000TilePart</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Jpeg2000Tile</name> <block>{

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>properties</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name></type> <name><name>codsty</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name></type> <name><name>qntsty</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000POC</name></type> <name>poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000TilePart</name></type> <name><name>tile_part</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>tp_idx</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name><name>coord</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>Jpeg2000Tile</name>;</typedef>

<typedef>typedef <type><struct>struct <name>Jpeg2000DecoderContext</name> <block>{

<decl_stmt><decl><type><name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>g</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>image_offset_x</name></decl>, <name>image_offset_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_offset_x</name></decl>, <name>tile_offset_y</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>cbps</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>sgnd</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>properties</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>cdx</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>, <name><name>cdy</name><index>[<expr><literal type="number">4</literal></expr>]</index></name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>precision</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ncomponents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>colour_space</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>palette</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int8_t</name></type> <name>pal8</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name><name>cdef</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tile_width</name></decl>, <name>tile_height</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>numXtiles</name></decl>, <name>numYtiles</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>maxtilelen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>sar</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name></type> <name><name>codsty</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name></type> <name><name>qntsty</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000POC</name></type> <name>poc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bit_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>curtileno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000DSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>reduction_factor</name></decl>;</decl_stmt>

}</block></struct></type> <name>Jpeg2000DecoderContext</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_bits</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>--</operator><name>n</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>=</operator> <literal type="number">7</literal> <operator>+</operator> <operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0xFFu</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>|=</operator> <operator>(</operator><call><name>bytestream2_peek_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jpeg2000_flush</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0xff</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>tag_tree_decode</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>threshold</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000TgtNode</name> <modifier>*</modifier></type><name><name>stack</name><index>[<expr><literal type="number">30</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sp</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>curval</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"missing node\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>node</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>node</name><operator>-&gt;</operator><name>vis</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stack</name><index>[<expr><operator>++</operator><name>sp</name></expr>]</index></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>

<expr_stmt><expr><name>node</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>node</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curval</name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>val</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>curval</name> <operator>=</operator> <name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>val</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<while>while <condition>(<expr><name>curval</name> <operator>&lt;</operator> <name>threshold</name> <operator>&amp;&amp;</operator> <name>sp</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>curval</name> <operator>&lt;</operator> <name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curval</name> <operator>=</operator> <name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>val</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>curval</name> <operator>&lt;</operator> <name>threshold</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>vis</name><operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>curval</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>stack</name><index>[<expr><name>sp</name></expr>]</index></name><operator>-&gt;</operator><name>val</name> <operator>=</operator> <name>curval</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sp</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>curval</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>pix_fmt_match</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>components</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bpc</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>log2_chroma_wh</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pal8</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>!=</operator> <name>components</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>components</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name>bpc</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&gt;&gt;</operator> <literal type="number">14</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&gt;&gt;</operator> <literal type="number">12</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name>bpc</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&gt;&gt;</operator> <literal type="number">10</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name>bpc</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>;</expr_stmt>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>match</name> <operator>=</operator> <name>match</name> <operator>&amp;&amp;</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name> <operator>&gt;=</operator> <name>bpc</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name>log2_chroma_wh</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PIX_FMT_FLAG_PAL</name><operator>)</operator> <operator>==</operator> <name>pal8</name> <operator>*</operator> <name>AV_PIX_FMT_FLAG_PAL</name></expr>;</expr_stmt>

</block_content>}</block></switch>

<return>return <expr><name>match</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RGB_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_PAL8,AV_PIX_FMT_RGB24,AV_PIX_FMT_RGBA,AV_PIX_FMT_RGB48,AV_PIX_FMT_RGBA64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GRAY_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_GRAY8,AV_PIX_FMT_GRAY8A,AV_PIX_FMT_GRAY16,AV_PIX_FMT_YA16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>YUV_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_YUV410P,AV_PIX_FMT_YUV411P,AV_PIX_FMT_YUVA420P, AV_PIX_FMT_YUV420P,AV_PIX_FMT_YUV422P,AV_PIX_FMT_YUVA422P, AV_PIX_FMT_YUV440P,AV_PIX_FMT_YUV444P,AV_PIX_FMT_YUVA444P, AV_PIX_FMT_YUV420P9,AV_PIX_FMT_YUV422P9,AV_PIX_FMT_YUV444P9, AV_PIX_FMT_YUVA420P9,AV_PIX_FMT_YUVA422P9,AV_PIX_FMT_YUVA444P9, AV_PIX_FMT_YUV420P10,AV_PIX_FMT_YUV422P10,AV_PIX_FMT_YUV444P10, AV_PIX_FMT_YUVA420P10,AV_PIX_FMT_YUVA422P10,AV_PIX_FMT_YUVA444P10, AV_PIX_FMT_YUV420P12,AV_PIX_FMT_YUV422P12,AV_PIX_FMT_YUV444P12, AV_PIX_FMT_YUV420P14,AV_PIX_FMT_YUV422P14,AV_PIX_FMT_YUV444P14, AV_PIX_FMT_YUV420P16,AV_PIX_FMT_YUV422P16,AV_PIX_FMT_YUV444P16, AV_PIX_FMT_YUVA420P16,AV_PIX_FMT_YUVA422P16,AV_PIX_FMT_YUVA444P16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XYZ_PIXEL_FORMATS</name></cpp:macro> <cpp:value>AV_PIX_FMT_XYZ12</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>rgb_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>RGB_PIXEL_FORMATS</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>gray_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>GRAY_PIXEL_FORMATS</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>yuv_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>YUV_PIXEL_FORMATS</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>xyz_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>XYZ_PIXEL_FORMATS</name></expr>,

<expr><name>YUV_PIXEL_FORMATS</name></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name></type> <name><name>all_pix_fmts</name><index>[]</index></name> <init>= <expr><block>{<expr><name>RGB_PIXEL_FORMATS</name></expr>,

<expr><name>GRAY_PIXEL_FORMATS</name></expr>,

<expr><name>YUV_PIXEL_FORMATS</name></expr>,

<expr><name>XYZ_PIXEL_FORMATS</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_siz</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ncomponents</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>log2_chroma_wh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>possible_fmts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>possible_fmts_nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">36</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient space for SIZ\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image_offset_x</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>image_offset_y</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_offset_x</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile_offset_y</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>ncomponents</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>image_offset_x</name></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>image_offset_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Support for image offsets"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr></argument>, <argument><expr><name>AV_PIX_FMT_NONE</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Large Dimensions"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ncomponents</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid number of components: %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ncomponents</name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Support for %d components"</literal></expr></argument>,

<argument><expr><name>ncomponents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tile_offset_x</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_y</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>image_offset_x</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_x</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>image_offset_y</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_y</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>tile_offset_x</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_offset_x</name></name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>tile_offset_y</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>image_offset_y</name></name></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Tile offsets are invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>=</operator> <name>ncomponents</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tile dimension %dx%d.\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">3</literal> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient space for %d components in SIZ\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>x</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sgnd</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>x</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal>

<operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">3</literal> <operator>||</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid sample separation %d/%d\n"</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>log2_chroma_wh</name> <operator>|=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildiv</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildiv</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>&gt;</operator> <name>INT_MAX</name><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr></argument>)</argument_list></sizeof> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>*</operator> <literal type="number">14LL</literal> <operator>&gt;</operator> <call><name>bytestream2_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_set_dimensions</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>image_offset_x</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>image_offset_y</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_JPEG2000_DCINEMA_2K</name> <operator>||</operator>

<name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_JPEG2000_DCINEMA_4K</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>xyz_pix_fmts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>xyz_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<switch>switch <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>colour_space</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>rgb_pix_fmts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rgb_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">17</literal></expr>:</case>

<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>gray_pix_fmts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>gray_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">18</literal></expr>:</case>

<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>yuv_pix_fmts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>yuv_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>possible_fmts</name> <operator>=</operator> <name>all_pix_fmts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>possible_fmts_nb</name> <operator>=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>all_pix_fmts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>possible_fmts_nb</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>pix_fmt_match</name><argument_list>(<argument><expr><name><name>possible_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ncomponents</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>log2_chroma_wh</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>pal8</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name><name>possible_fmts</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>possible_fmts_nb</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ncomponents</name> <operator>==</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <literal type="number">8</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>pal8</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>=</operator> <name>AV_PIX_FMT_YUVA420P</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>possible_fmts_nb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unknown pix_fmt, profile: %d, colour_space: %d, "</literal>

<literal type="string">"components: %d, precision: %d\n"</literal>

<literal type="string">"cdx[0]: %d, cdy[0]: %d\n"</literal>

<literal type="string">"cdx[1]: %d, cdy[1]: %d\n"</literal>

<literal type="string">"cdx[2]: %d, cdy[2]: %d\n"</literal>

<literal type="string">"cdx[3]: %d, cdy[3]: %d\n"</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>profile</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>colour_space</name></name></expr></argument>, <argument><expr><name>ncomponents</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>ncomponents</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ncomponents</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ncomponents</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ncomponents</name> <operator>&gt;</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ncomponents</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ncomponents</name> <operator>&gt;</operator> <literal type="number">3</literal></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>bits_per_raw_sample</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cox</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>byte</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient space for COX\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>&gt;=</operator> <name>JPEG2000_MAX_RESLEVELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"nreslevels %d is invalid\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>&lt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"reduction_factor too large for this bitstream, max is %d\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>nreslevels2decode</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>log2_cblk_width</name></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>log2_cblk_height</name></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">15</literal><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>log2_cblk_width</name></name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>log2_cblk_height</name></name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>||</operator>

<name><name>c</name><operator>-&gt;</operator><name>log2_cblk_width</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>log2_cblk_height</name></name> <operator>&gt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"cblk size invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>cblk_style</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cblk_style</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"extra cblk styles %X\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>cblk_style</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>cblk_style</name></name> <operator>&amp;</operator> <name>JPEG2000_CBLK_BYPASS</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Selective arithmetic coding bypass\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_BITEXACT</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT97</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>FF_DWT97_INT</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT53</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>properties</name></name> <operator>|=</operator> <name>FF_CODEC_PROPERTY_LOSSLESS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>csty</name></name> <operator>&amp;</operator> <name>JPEG2000_CSTY_PREC</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>byte</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_widths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>byte</name> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>byte</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0F</literal></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_widths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>log2_prec_heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"PPx %d PPy %d invalid\n"</literal></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_widths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_heights</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_widths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>log2_prec_heights</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_widths</name></name></expr></argument> , <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_widths</name></name></expr></argument> )</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_heights</name></name></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>log2_prec_heights</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_cod</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>properties</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient space for COD\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>csty</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>prog_order</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>nlayers</name></name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>mct</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>.</operator><name>mct</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"MCT %"</literal><name>PRIu8</name><literal type="string">" with too few components (%d)\n"</literal></expr></argument>,

<argument><expr><name><name>tmp</name><operator>.</operator><name>mct</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_cox</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>properties</name><index>[<expr><name>compno</name></expr>]</index></name> <operator>&amp;</operator> <name>HAD_COC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>c</name> <operator>+</operator> <name>compno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_coc</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>c</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>properties</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient space for COC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>compno</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compno</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid compno %d. There are %d components in the image.\n"</literal></expr></argument>,

<argument><expr><name>compno</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>+=</operator> <name>compno</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>csty</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_cox</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>properties</name><index>[<expr><name>compno</name></expr>]</index></name> <operator>|=</operator> <name>HAD_COC</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_qcx</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>nguardbits</name></name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>quantsty</name></name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>quantsty</name></name> <operator>==</operator> <name>JPEG2000_QSTY_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>-=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>n</name> <operator>||</operator>

<name>n</name> <operator>&gt;</operator> <name>JPEG2000_MAX_DECLEVELS</name><operator>*</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>expn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <literal type="number">3</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>quantsty</name></name> <operator>==</operator> <name>JPEG2000_QSTY_SI</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>expn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>mant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>JPEG2000_MAX_DECLEVELS</name> <operator>*</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>curexpn</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>expn</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>expn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>curexpn</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>mant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>mant</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>n</name> <operator>||</operator>

<name>n</name> <operator>&gt;</operator> <name>JPEG2000_MAX_DECLEVELS</name><operator>*</operator><literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>expn</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&gt;&gt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>mant</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>&amp;</operator> <literal type="number">0x7ff</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_qcd</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>properties</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name></type> <name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_qcx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>properties</name><index>[<expr><name>compno</name></expr>]</index></name> <operator>&amp;</operator> <name>HAD_QCC</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>q</name> <operator>+</operator> <name>compno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_qcc</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>properties</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>compno</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compno</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid compno %d. There are %d components in the image.\n"</literal></expr></argument>,

<argument><expr><name>compno</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>properties</name><index>[<expr><name>compno</name></expr>]</index></name> <operator>|=</operator> <name>HAD_QCC</name></expr>;</expr_stmt>

<return>return <expr><call><name>get_qcx</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>n</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>q</name> <operator>+</operator> <name>compno</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_poc</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000POC</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>elem_size</name> <init>= <expr><ternary><condition><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>&lt;=</operator> <literal type="number">257</literal></expr> ?</condition><then> <expr><literal type="number">7</literal></expr> </then><else>: <expr><literal type="number">9</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000POC</name></type> <name>tmp</name> <init>= <expr><block>{<expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">5</literal> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>+</operator> <name>elem_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient space for POC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>elem_size</name> <operator>&gt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Fat POC not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>tmp</name><operator>.</operator><name>nb_poc</name></name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name>elem_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>.</operator><name>nb_poc</name></name> <operator>&gt;</operator> <name>MAX_POCS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Too many POCs (%d)"</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>nb_poc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tmp</name><operator>.</operator><name>nb_poc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000POCEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>tmp</name><operator>.</operator><name>poc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>RSpoc</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>CSpoc</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>LYEpoc</name></name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>REpoc</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>Ppoc</name></name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><name><name>e</name><operator>-&gt;</operator><name>RSpoc</name></name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>REpoc</name></name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>REpoc</name></name> <operator>&gt;</operator> <literal type="number">33</literal>

<operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>CSpoc</name></name> <operator>&gt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name> <operator>||</operator> <name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name>

<operator>||</operator> <operator>!</operator><name><name>e</name><operator>-&gt;</operator><name>LYEpoc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"POC Entry %d is invalid (%d, %d, %d, %d, %d, %d)\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>RSpoc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>CSpoc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>LYEpoc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>REpoc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>Ppoc</name></name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>nb_poc</name></name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>is_default</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>p</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>nb_poc</name></name> <operator>+</operator> <name><name>tmp</name><operator>.</operator><name>nb_poc</name></name> <operator>&gt;</operator> <name>MAX_POCS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Insufficient space for POC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>poc</name></name> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>nb_poc</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>poc</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>nb_poc</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>poc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>nb_poc</name></name> <operator>+=</operator> <name><name>tmp</name><operator>.</operator><name>nb_poc</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>is_default</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_sot</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000TilePart</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>Isot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>Psot</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>TPsot</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>Isot</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><name>Isot</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name> <operator>=</operator> <name>Isot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>Psot</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>TPsot</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>Psot</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>Psot</name> <operator>=</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>Psot</name> <operator>&gt;</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal> <operator>+</operator> <name>n</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Psot %"</literal><name>PRIu32</name><literal type="string">" too big\n"</literal></expr></argument>, <argument><expr><name>Psot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>TPsot</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>Isot</name></expr>]</index></name><operator>.</operator><name>tile_part</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Too many tile parts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>Isot</name></expr>]</index></name><operator>.</operator><name>tp_idx</name> <operator>=</operator> <name>TPsot</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>Isot</name></expr>]</index></name><operator>.</operator><name>tile_part</name> <operator>+</operator> <name>TPsot</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tile_index</name></name> <operator>=</operator> <name>Isot</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_end</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>g</name><operator>.</operator><name>buffer</name></name> <operator>+</operator> <name>Psot</name> <operator>-</operator> <name>n</name> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>TPsot</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Jpeg2000CodingStyle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>qntsty</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Jpeg2000QuantStyle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>poc</name></name></expr></argument> , <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>poc</name></name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>is_default</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_tlm</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>Stlm</name></decl>, <decl><type ref="prev"/><name>ST</name></decl>, <decl><type ref="prev"/><name>SP</name></decl>, <decl><type ref="prev"/><name>tile_tlm</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><name>Stlm</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ST</name> <operator>=</operator> <operator>(</operator><name>Stlm</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x03</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ST</name> <operator>==</operator> <literal type="number">0x03</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"TLM marker contains invalid ST value.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>SP</name> <operator>=</operator> <operator>(</operator><name>Stlm</name> <operator>&gt;&gt;</operator> <literal type="number">6</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x01</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tile_tlm</name> <operator>=</operator> <operator>(</operator><name>n</name> <operator>-</operator> <literal type="number">4</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><operator>(</operator><name>SP</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>ST</name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tile_tlm</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<switch>switch <condition>(<expr><name>ST</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">3</literal></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>SP</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_get_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_plt</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>,

<argument><expr><literal type="string">"PLT marker at pos 0x%X\n"</literal></expr></argument>, <argument><expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name> <operator>-</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>v</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>init_tile</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tileno</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tilex</name> <init>= <expr><name>tileno</name> <operator>%</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tiley</name> <init>= <expr><name>tileno</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>tileno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>tilex</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_offset_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>tilex</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>tile_width</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_offset_x</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>tiley</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_offset_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name>tiley</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>tile_height</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>tile_offset_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>image_offset_y</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>qntsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt> 

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compno</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>/=</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>compno</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>reduction_factor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>ff_jpeg2000_init_component</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>qntsty</name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cbps</name><index>[<expr><name>compno</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>compno</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>compno</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getnpasses</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><literal type="number">3</literal> <operator>+</operator> <name>num</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>num</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">31</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><ternary><condition><expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><literal type="number">6</literal> <operator>+</operator> <name>num</name></expr></else></ternary></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>num</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>num</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>num</name></expr> </then><else>: <expr><literal type="number">37</literal> <operator>+</operator> <name>num</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>getlblockinc</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpeg2000_decode_packet</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tp_index</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>precno</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>layno</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>expn</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numgbits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bandno</name></decl>, <decl><type ref="prev"/><name>cblkno</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>, <decl><type ref="prev"/><name>nb_code_blocks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cwsno</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>layno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prec</name><index>[<expr><name>precno</name></expr>]</index></name><operator>.</operator><name>decoded_layers</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>prec</name><index>[<expr><name>precno</name></expr>]</index></name><operator>.</operator><name>decoded_layers</name> <operator>=</operator> <name>layno</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tp_index</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>tile_part</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>tile_part</name><index>[<expr><operator>++</operator><operator>(</operator><operator>*</operator><name>tp_index</name><operator>)</operator></expr>]</index></name><operator>.</operator><name>tpg</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_peek_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JPEG2000_SOP_FIXED_BYTES</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>JPEG2000_SOP_BYTE_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>jpeg2000_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_code_blocks</name> <operator>=</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name> <operator>*</operator>

<name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cblkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblkno</name> <operator>&lt;</operator> <name>nb_code_blocks</name></expr>;</condition> <incr><expr><name>cblkno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>cblkno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>incl</name></decl>, <decl><type ref="prev"/><name>newpasses</name></decl>, <decl><type ref="prev"/><name>llen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>incl</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>incl</name> <operator>=</operator> <call><name>tag_tree_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>cblkincl</name></name> <operator>+</operator> <name>cblkno</name></expr></argument>, <argument><expr><name>layno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>layno</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>incl</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>incl</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>incl</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name> <init>= <expr><name><name>expn</name><index>[<expr><name>bandno</name></expr>]</index></name> <operator>+</operator> <name>numgbits</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator>

<call><name>tag_tree_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>prec</name><operator>-&gt;</operator><name>zerobits</name></name> <operator>+</operator> <name>cblkno</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>v</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>v</name></expr></argument> &gt;</argument_list></name> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"nonzerobits %d invalid or unsupported\n"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nonzerobits</name></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>newpasses</name> <operator>=</operator> <call><name>getnpasses</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>newpasses</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>newpasses</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name> <operator>+</operator> <name>newpasses</name> <operator>&gt;=</operator> <name>JPEG2000_MAX_PASSES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Too many passes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>llen</name> <operator>=</operator> <call><name>getlblockinc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>llen</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cblk</name><operator>-&gt;</operator><name>lblock</name></name> <operator>+</operator> <name>llen</name> <operator>+</operator> <call><name>av_log2</name><argument_list>(<argument><expr><name>newpasses</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"Block with length beyond 16 bits"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>lblock</name></name> <operator>+=</operator> <name>llen</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_lengthinc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminationsinc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>newpasses</name></expr></argument> , <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data_start</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminations</name></name> <operator>+</operator> <name>newpasses</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>cblk</name><operator>-&gt;</operator><name>data_start</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data_start</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<do>do <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>newpasses1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>newpasses1</name> <operator>&lt;</operator> <name>newpasses</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>newpasses1</name> <operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>needs_termination</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>cblk_style</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name> <operator>+</operator> <name>newpasses1</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminationsinc</name></name> <operator>++</operator></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_bits</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name>newpasses1</name></expr></argument>)</argument_list></call> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>lblock</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>av_realloc</name><argument_list>(<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,

<argument><expr><literal type="string">"Block with lengthinc greater than %"</literal><name>SIZE_SPECIFIER</name><literal type="string">""</literal></expr></argument>,

<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_lengthinc</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name> <operator>+=</operator> <name>newpasses1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>newpasses</name> <operator>-=</operator> <name>newpasses1</name></expr>;</expr_stmt>

</block_content>}</block> while<condition>(<expr><name>newpasses</name></expr>)</condition>;</do>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>jpeg2000_flush</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>csty</name></name> <operator>&amp;</operator> <name>JPEG2000_CSTY_EPH</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_peek_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JPEG2000_EPH</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"EPH marker not found. instead %X\n"</literal></expr></argument>, <argument><expr><call><name>bytestream2_peek_be32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>nb_code_blocks</name> <operator>=</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name> <operator>*</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cblkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cblkno</name> <operator>&lt;</operator> <name>nb_code_blocks</name></expr>;</condition> <incr><expr><name>cblkno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>cblkno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminationsinc</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>cwsno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>cwsno</name> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>nb_lengthinc</name></name></expr>;</condition> <incr><expr><name>cwsno</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>new_size</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>new</name> <init>= <expr><call><name>av_realloc</name><argument_list>(<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>new</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>new</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name> <operator>=</operator> <name>new_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name>

<operator>||</operator> <name><name>cblk</name><operator>-&gt;</operator><name>data_allocated</name></name> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal></expr>

)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Block length %"</literal><name>PRIu16</name><literal type="string">" or lengthinc %d is too large, left %d\n"</literal></expr></argument>,

<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_get_bufferu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>+=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name><index>[<expr><name>cwsno</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminationsinc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminationsinc</name></name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminations</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0xFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data_start</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>nb_terminations</name></name></expr>]</index></name> <operator>=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>length</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cblk</name><operator>-&gt;</operator><name>lengthinc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpeg2000_decode_packets_po_iteration</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>RSpoc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>CSpoc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>LYEpoc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>REpoc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>CEpoc</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>Ppoc</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>tp_index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>layno</name></decl>, <decl><type ref="prev"/><name>reslevelno</name></decl>, <decl><type ref="prev"/><name>compno</name></decl>, <decl><type ref="prev"/><name>precno</name></decl>, <decl><type ref="prev"/><name>ok_reslevel</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>step_x</name></decl>, <decl><type ref="prev"/><name>step_y</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>Ppoc</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>JPEG2000_PGOD_RLCP</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Progression order RLCP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <name>RSpoc</name></expr>;</init> <condition><expr><name>ok_reslevel</name> <operator>&amp;&amp;</operator> <name>reslevelno</name> <operator>&lt;</operator> <name>REpoc</name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>layno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layno</name> <operator>&lt;</operator> <name>LYEpoc</name></expr>;</condition> <incr><expr><name>layno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <name>CSpoc</name></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>CEpoc</name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>qntsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>reslevel</name> <operator>+</operator>

<name>reslevelno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>tp_index</name></expr></argument>,

<argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>rlevel</name></expr></argument>,

<argument><expr><name>precno</name></expr></argument>, <argument><expr><name>layno</name></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>reslevelno</name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>reslevelno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>JPEG2000_PGOD_LRCP</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Progression order LRCP\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>layno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layno</name> <operator>&lt;</operator> <name>LYEpoc</name></expr>;</condition> <incr><expr><name>layno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <name>RSpoc</name></expr>;</init> <condition><expr><name>ok_reslevel</name> <operator>&amp;&amp;</operator> <name>reslevelno</name> <operator>&lt;</operator> <name>REpoc</name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <name>CSpoc</name></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>CEpoc</name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>qntsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>compno</name></expr>]</index></name><operator>.</operator><name>reslevel</name> <operator>+</operator>

<name>reslevelno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>tp_index</name></expr></argument>,

<argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>rlevel</name></expr></argument>,

<argument><expr><name>precno</name></expr></argument>, <argument><expr><name>layno</name></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>reslevelno</name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>reslevelno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>JPEG2000_PGOD_CPRL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Progression order CPRL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <name>CSpoc</name></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>CEpoc</name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>qntsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>RSpoc</name> <operator>&gt;=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr></argument>, <argument><expr><name>REpoc</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <name>RSpoc</name></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr></argument>, <argument><expr><name>REpoc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reducedresno</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>step_x</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>+</operator> <name>reducedresno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>step_y</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>+</operator> <name>reducedresno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>step_x</name> <operator>&gt;=</operator> <literal type="number">31</literal> <operator>||</operator> <name>step_y</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"CPRL with large step"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>step_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>step_y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>/</operator><name>step_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step_y</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>/</operator><name>step_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step_x</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <name>RSpoc</name></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr></argument>, <argument><expr><name>REpoc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>prcx</name></decl>, <decl><type ref="prev"/><name>prcy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reducedresno</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xc</name> <init>= <expr><name>x</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>compno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yc</name> <init>= <expr><name>y</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>compno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>yc</name> <operator>%</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>+</operator> <name>reducedresno</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>y</name> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xc</name> <operator>%</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>+</operator> <name>reducedresno</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prcx</name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcy</name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name>yc</name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcx</name> <operator>-=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcy</name> <operator>-=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>precno</name> <operator>=</operator> <name>prcx</name> <operator>+</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name>prcy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prcx</name> <operator>&gt;=</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>||</operator> <name>prcy</name> <operator>&gt;=</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"prc %d %d outside limits %d %d\n"</literal></expr></argument>,

<argument><expr><name>prcx</name></expr></argument>, <argument><expr><name>prcy</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>layno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layno</name> <operator>&lt;</operator> <name>LYEpoc</name></expr>;</condition> <incr><expr><name>layno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>tp_index</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>rlevel</name></expr></argument>,

<argument><expr><name>precno</name></expr></argument>, <argument><expr><name>layno</name></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>reslevelno</name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>reslevelno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>JPEG2000_PGOD_RPCL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Progression order RPCL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <name>RSpoc</name></expr>;</init> <condition><expr><name>ok_reslevel</name> <operator>&amp;&amp;</operator> <name>reslevelno</name> <operator>&lt;</operator> <name>REpoc</name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <name>CSpoc</name></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>CEpoc</name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reducedresno</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>step_x</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>+</operator> <name>reducedresno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>step_y</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>+</operator> <name>reducedresno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>step_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>step_y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>/</operator><name>step_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step_y</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>/</operator><name>step_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step_x</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <name>CSpoc</name></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>CEpoc</name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>qntsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reducedresno</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>prcx</name></decl>, <decl><type ref="prev"/><name>prcy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xc</name> <init>= <expr><name>x</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>compno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yc</name> <init>= <expr><name>y</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>compno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>reslevelno</name> <operator>&gt;=</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>yc</name> <operator>%</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>+</operator> <name>reducedresno</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>y</name> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xc</name> <operator>%</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>+</operator> <name>reducedresno</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prcx</name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcy</name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name>yc</name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcx</name> <operator>-=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcy</name> <operator>-=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>precno</name> <operator>=</operator> <name>prcx</name> <operator>+</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name>prcy</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ok_reslevel</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prcx</name> <operator>&gt;=</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>||</operator> <name>prcy</name> <operator>&gt;=</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"prc %d %d outside limits %d %d\n"</literal></expr></argument>,

<argument><expr><name>prcx</name></expr></argument>, <argument><expr><name>prcy</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>layno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layno</name> <operator>&lt;</operator> <name>LYEpoc</name></expr>;</condition> <incr><expr><name>layno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>tp_index</name></expr></argument>,

<argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>rlevel</name></expr></argument>,

<argument><expr><name>precno</name></expr></argument>, <argument><expr><name>layno</name></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>reslevelno</name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>reslevelno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<case>case <expr><name>JPEG2000_PGOD_PCRL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Progression order PCRL\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <name>CSpoc</name></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>CEpoc</name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <name>RSpoc</name></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr></argument>, <argument><expr><name>REpoc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reducedresno</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>step_x</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>+</operator> <name>reducedresno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>step_y</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>+</operator> <name>reducedresno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>step_x</name> <operator>&gt;=</operator> <literal type="number">31</literal> <operator>||</operator> <name>step_y</name> <operator>&gt;=</operator> <literal type="number">31</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"PCRL with large step"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>step_x</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>step_x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>step_y</name> <operator>=</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><name>step_y</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>y</name> <operator>=</operator> <operator>(</operator><name>y</name><operator>/</operator><name>step_y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step_y</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>x</name> <operator>=</operator> <operator>(</operator><name>x</name><operator>/</operator><name>step_x</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator><operator>*</operator><name>step_x</name></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <name>CSpoc</name></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name>CEpoc</name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>qntsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>xc</name> <init>= <expr><name>x</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>cdx</name><index>[<expr><name>compno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>yc</name> <init>= <expr><name>y</name> <operator>/</operator> <name><name>s</name><operator>-&gt;</operator><name>cdy</name><index>[<expr><name>compno</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <name>RSpoc</name></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name></expr></argument>, <argument><expr><name>REpoc</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>prcx</name></decl>, <decl><type ref="prev"/><name>prcy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>reducedresno</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>nreslevels</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator><name>reslevelno</name></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>yc</name> <operator>%</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name> <operator>+</operator> <name>reducedresno</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>y</name> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>xc</name> <operator>%</operator> <operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name> <operator>+</operator> <name>reducedresno</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name>x</name> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> 

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>prcx</name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name>xc</name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcy</name> <operator>=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name>yc</name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcx</name> <operator>-=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>prcy</name> <operator>-=</operator> <call><name>ff_jpeg2000_ceildivpow2</name><argument_list>(<argument><expr><name><name>comp</name><operator>-&gt;</operator><name>coord_o</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>reducedresno</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>log2_prec_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>precno</name> <operator>=</operator> <name>prcx</name> <operator>+</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name>prcy</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prcx</name> <operator>&gt;=</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>||</operator> <name>prcy</name> <operator>&gt;=</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"prc %d %d outside limits %d %d\n"</literal></expr></argument>,

<argument><expr><name>prcx</name></expr></argument>, <argument><expr><name>prcy</name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name></expr></argument>, <argument><expr><name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>layno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>layno</name> <operator>&lt;</operator> <name>LYEpoc</name></expr>;</condition> <incr><expr><name>layno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packet</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>tp_index</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>rlevel</name></expr></argument>,

<argument><expr><name>precno</name></expr></argument>, <argument><expr><name>layno</name></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>expn</name></name> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>reslevelno</name></expr> ?</condition><then> <expr><literal type="number">3</literal> <operator>*</operator> <operator>(</operator><name>reslevelno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>,

<argument><expr><name><name>qntsty</name><operator>-&gt;</operator><name>nguardbits</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpeg2000_decode_packets</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>AVERROR_BUG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tp_index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>bit_index</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>nb_poc</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>tile</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>nb_poc</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000POCEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>&amp;</operator><name><name>tile</name><operator>-&gt;</operator><name>poc</name><operator>.</operator><name>poc</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packets_po_iteration</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>RSpoc</name></name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>CSpoc</name></name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>LYEpoc</name></name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nlayers</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>REpoc</name></name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>CEpoc</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>e</name><operator>-&gt;</operator><name>Ppoc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp_index</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packets_po_iteration</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>nlayers</name></expr></argument>,

<argument><expr><literal type="number">33</literal></expr></argument>,

<argument><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr></argument>,

<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>prog_order</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>tp_index</name></expr></argument>

)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_sigpass</name><parameter_list>(<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>vert_causal_ctx_csty_symbol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y0</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>y0</name> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags_mask</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vert_causal_ctx_csty_symbol</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>y0</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags_mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>JPEG2000_T1_SIG_S</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SW</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SE</name> <operator>|</operator> <name>JPEG2000_T1_SGN_S</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>JPEG2000_T1_SIG_NB</name> <operator>&amp;</operator> <name>flags_mask</name><operator>)</operator>

<operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <call><name>ff_jpeg2000_getsigctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>flags_mask</name></expr></argument>, <argument><expr><name>bandno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xorbit</name></decl>, <decl><type ref="prev"/><name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsgnctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>flags_mask</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>xorbit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>raw</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><name>mask</name></expr> </then><else>: <expr><name>mask</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>)</argument_list></call> <operator>^</operator> <name>xorbit</name><operator>)</operator></expr> ?</condition><then>

<expr><operator>-</operator><name>mask</name></expr> </then><else>: <expr><name>mask</name></expr></else></ternary></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_jpeg2000_set_significance</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>,

<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_VIS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_refpass</name><parameter_list>(<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vert_causal_ctx_csty_symbol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>phalf</name></decl>, <decl><type ref="prev"/><name>nhalf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y0</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<expr_stmt><expr><name>phalf</name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>nhalf</name> <operator>=</operator> <operator>-</operator><name>phalf</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>y0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y0</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>height</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>y0</name> <operator>+</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name><operator>)</operator><operator>)</operator> <operator>==</operator> <name>JPEG2000_T1_SIG</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags_mask</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>vert_causal_ctx_csty_symbol</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>y0</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator></expr> ?</condition><then>

<expr><operator>~</operator><operator>(</operator><name>JPEG2000_T1_SIG_S</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SW</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SE</name> <operator>|</operator> <name>JPEG2000_T1_SGN_S</name><operator>)</operator></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getrefctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>flags_mask</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><ternary><condition><expr><call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>,

<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>)</argument_list></call></expr>

?</condition><then> <expr><name>phalf</name></expr> </then><else>: <expr><name>nhalf</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>+=</operator> <ternary><condition><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><name>r</name></expr> </then><else>: <expr><name>r</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <name>JPEG2000_T1_REF</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>decode_clnpass</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bpno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandno</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>seg_symbols</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>vert_causal_ctx_csty_symbol</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mask</name> <init>= <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name>bpno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>, <decl><type ref="prev"/><name>y0</name></decl>, <decl><type ref="prev"/><name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>runlen</name></decl>, <decl><type ref="prev"/><name>dec</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y0</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y0</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y0</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags_mask</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vert_causal_ctx_csty_symbol</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags_mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>JPEG2000_T1_SIG_S</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SW</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SE</name> <operator>|</operator> <name>JPEG2000_T1_SGN_S</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>y0</name> <operator>+</operator> <literal type="number">3</literal> <operator>&lt;</operator> <name>height</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator><operator>)</operator> <operator>||</operator>

<operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y0</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG_NB</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name> <operator>|</operator> <name>JPEG2000_T1_SIG</name><operator>)</operator> <operator>&amp;</operator> <name>flags_mask</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_RL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>runlen</name> <operator>=</operator> <call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>,

<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_UNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>runlen</name> <operator>=</operator> <operator>(</operator><name>runlen</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>,

<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator>

<name>MQC_CX_UNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>dec</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>runlen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <name>y0</name> <operator>+</operator> <name>runlen</name></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>y0</name> <operator>+</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>flags_mask</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>vert_causal_ctx_csty_symbol</name> <operator>&amp;&amp;</operator> <name>y</name> <operator>==</operator> <name>y0</name> <operator>+</operator> <literal type="number">3</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>flags_mask</name> <operator>&amp;=</operator> <operator>~</operator><operator>(</operator><name>JPEG2000_T1_SIG_S</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SW</name> <operator>|</operator> <name>JPEG2000_T1_SIG_SE</name> <operator>|</operator> <name>JPEG2000_T1_SGN_S</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dec</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><name>JPEG2000_T1_SIG</name> <operator>|</operator> <name>JPEG2000_T1_VIS</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dec</name> <operator>=</operator> <call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <call><name>ff_jpeg2000_getsigctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>flags_mask</name></expr></argument>,

<argument><expr><name>bandno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dec</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>xorbit</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ctxno</name> <init>= <expr><call><name>ff_jpeg2000_getsgnctxno</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name>flags_mask</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>xorbit</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>,

<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>ctxno</name></expr></argument>)</argument_list></call> <operator>^</operator>

<name>xorbit</name><operator>)</operator></expr>

?</condition><then> <expr><operator>-</operator><name>mask</name></expr> </then><else>: <expr><name>mask</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpeg2000_set_significance</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name><index>[<expr><operator>(</operator><name>y</name><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dec</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name><index>[<expr><operator>(</operator><name>y</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>+</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&amp;=</operator> <operator>~</operator><name>JPEG2000_T1_VIS</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>seg_symbols</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_UNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_UNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_UNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <call><name>ff_mqc_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>cx_states</name></name> <operator>+</operator> <name>MQC_CX_UNI</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>!=</operator> <literal type="number">0xa</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Segmentation symbol value incorrect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>decode_cblk</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bandpos</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>passno</name> <init>= <expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name></expr></init></decl>, <decl><type ref="prev"/><name>pass_t</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, <decl><type ref="prev"/><name>bpno</name> <init>= <expr><name><name>cblk</name><operator>-&gt;</operator><name>nonzerobits</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pass_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>vert_causal_ctx_csty_symbol</name> <init>= <expr><name><name>codsty</name><operator>-&gt;</operator><name>cblk_style</name></name> <operator>&amp;</operator> <name>JPEG2000_CBLK_VSC</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>term_cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coder_type</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>width</name> <operator>&lt;=</operator> <literal type="number">1024U</literal> <operator>&amp;&amp;</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">1024U</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>width</name><operator>*</operator><name>height</name> <operator>&lt;=</operator> <literal type="number">4096</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>t1</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>t1</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>t1</name><operator>-&gt;</operator><name>stride</name></name> <operator>*</operator> <operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>t1</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>cblk</name><operator>-&gt;</operator><name>length</name></name><operator>+</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xff</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mqc_initdec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>passno</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>bpno</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"bpno became negative\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch<condition>(<expr><name>pass_t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><call><name>decode_sigpass</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bpno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bandpos</name></expr></argument>,

<argument><expr><name>vert_causal_ctx_csty_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><call><name>decode_refpass</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bpno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>vert_causal_ctx_csty_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>!</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>raw</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_clnpass</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>bpno</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>bandpos</name></expr></argument>,

<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>cblk_style</name></name> <operator>&amp;</operator> <name>JPEG2000_CBLK_SEGSYM</name></expr></argument>,

<argument><expr><name>vert_causal_ctx_csty_symbol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>cblk_style</name></name> <operator>&amp;</operator> <name>JPEG2000_CBLK_RESET</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><call><name>ff_mqc_init_contexts</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>passno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>coder_type</name> <operator>=</operator> <call><name>needs_termination</name><argument_list>(<argument><expr><name><name>codsty</name><operator>-&gt;</operator><name>cblk_style</name></name></expr></argument>, <argument><expr><name>pass_cnt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>term_cnt</name> <operator>&gt;=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>nb_terminations</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing needed termination \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFABS</name><argument_list>(<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>data_start</name><index>[<expr><name>term_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>bp</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Mid mismatch %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">" in pass %d of %d\n"</literal></expr></argument>,

<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>data_start</name><index>[<expr><name>term_cnt</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">2</literal> <operator>-</operator> <name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>bp</name></name></expr></argument>,

<argument><expr><name>pass_cnt</name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>npasses</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_mqc_initdec</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>t1</name><operator>-&gt;</operator><name>mqc</name></name></expr></argument>, <argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>data_start</name><index>[<expr><operator>++</operator><name>term_cnt</name></expr>]</index></name></expr></argument>, <argument><expr><name>coder_type</name> <operator>==</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pass_t</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pass_t</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bpno</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>pass_t</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pass_cnt</name> <operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>term_cnt</name> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>nb_terminations</name></name><operator>)</operator> <operator>!=</operator> <name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>bp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"End mismatch %"</literal><name>PTRDIFF_SPECIFIER</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>cblk</name><operator>-&gt;</operator><name>length</name></name> <operator>-</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>term_cnt</name> <operator>&lt;</operator> <name><name>cblk</name><operator>-&gt;</operator><name>nb_terminations</name></name><operator>)</operator> <operator>-</operator> <name><name>t1</name><operator>-&gt;</operator><name>mqc</name><operator>.</operator><name>bp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dequantization_float</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>datap</name> <init>= <expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>f_data</name><index>[<expr><operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>t1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>t1</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>datap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>band</name><operator>-&gt;</operator><name>f_stepsize</name></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dequantization_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>datap</name> <init>= <expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name><index>[<expr><operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>t1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>t1</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>i_stepsize</name></name> <operator>==</operator> <literal type="number">32768</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>datap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>datap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>band</name><operator>-&gt;</operator><name>i_stepsize</name></name><operator>)</operator> <operator>/</operator> <literal type="number">65536</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dequantization_int_97</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>y</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name></decl></parameter>,

<parameter><decl><type><name>Jpeg2000T1Context</name> <modifier>*</modifier></type><name>t1</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>(</operator><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>datap</name> <init>= <expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name><index>[<expr><operator>(</operator><name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>comp</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>y</name> <operator>+</operator> <name>j</name><operator>)</operator> <operator>+</operator> <name>x</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>t1</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>j</name><operator>*</operator><name><name>t1</name><operator>-&gt;</operator><name>stride</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>datap</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>band</name><operator>-&gt;</operator><name>i_stepsize</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">15</literal><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mct_decode</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>csize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>transform</name> <operator>!=</operator> <name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>transform</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Transforms mismatch, MCT not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coord</name></expr></argument>, <argument><expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>coord</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>coord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Coords mismatch, MCT not supported\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>transform</name> <operator>==</operator> <name>FF_DWT97</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>f_data</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>i_data</name></expr>;</expr_stmt></block_content></block></else></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>csize</name> <operator>*=</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>tile</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>coord</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>dsp</name><operator>.</operator><name>mct_decode</name><index>[<expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>transform</name></expr>]</index></name><operator>(</operator><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>,</operator> <name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>,</operator> <name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>,</operator> <name>csize</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>tile_codeblocks</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000T1Context</name></type> <name>t1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compno</name></decl>, <decl><type ref="prev"/><name>reslevelno</name></decl>, <decl><type ref="prev"/><name>bandno</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>comp</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name></name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>coded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>t1</name><operator>.</operator><name>stride</name></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name><name>codsty</name><operator>-&gt;</operator><name>log2_cblk_width</name></name><operator>)</operator> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>reslevelno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>reslevelno</name> <operator>&lt;</operator> <name><name>codsty</name><operator>-&gt;</operator><name>nreslevels2decode</name></name></expr>;</condition> <incr><expr><name>reslevelno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000ResLevel</name> <modifier>*</modifier></type><name>rlevel</name> <init>= <expr><name><name>comp</name><operator>-&gt;</operator><name>reslevel</name></name> <operator>+</operator> <name>reslevelno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>bandno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>bandno</name> <operator>&lt;</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>nbands</name></name></expr>;</condition> <incr><expr><name>bandno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb_precincts</name></decl>, <decl><type ref="prev"/><name>precno</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Band</name> <modifier>*</modifier></type><name>band</name> <init>= <expr><name><name>rlevel</name><operator>-&gt;</operator><name>band</name></name> <operator>+</operator> <name>bandno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cblkno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>bandpos</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bandpos</name> <operator>=</operator> <name>bandno</name> <operator>+</operator> <operator>(</operator><name>reslevelno</name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>||</operator>

<name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_precincts</name> <operator>=</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_x</name></name> <operator>*</operator> <name><name>rlevel</name><operator>-&gt;</operator><name>num_precincts_y</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>precno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>precno</name> <operator>&lt;</operator> <name>nb_precincts</name></expr>;</condition> <incr><expr><name>precno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Prec</name> <modifier>*</modifier></type><name>prec</name> <init>= <expr><name><name>band</name><operator>-&gt;</operator><name>prec</name></name> <operator>+</operator> <name>precno</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>cblkno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init>

<condition><expr><name>cblkno</name> <operator>&lt;</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_width</name></name> <operator>*</operator> <name><name>prec</name><operator>-&gt;</operator><name>nb_codeblocks_height</name></name></expr>;</condition>

<incr><expr><name>cblkno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Cblk</name> <modifier>*</modifier></type><name>cblk</name> <init>= <expr><name><name>prec</name><operator>-&gt;</operator><name>cblk</name></name> <operator>+</operator> <name>cblkno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_cblk</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>cblk</name></expr></argument>,

<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,

<argument><expr><name>bandpos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>coded</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></else></if_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name><name>cblk</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>band</name><operator>-&gt;</operator><name>coord</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT97</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dequantization_float</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cblk</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT97_INT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dequantization_int_97</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cblk</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dequantization_int</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>, <argument><expr><name>cblk</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>t1</name></expr></argument>, <argument><expr><name>band</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for> 

</block_content>}</block></for> 

</block_content>}</block></for> 

</block_content>}</block></for> 

<if_stmt><if>if <condition>(<expr><name>coded</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dwt_decode</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>comp</name><operator>-&gt;</operator><name>dwt</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>codsty</name><operator>-&gt;</operator><name>transform</name></name> <operator>==</operator> <name>FF_DWT97</name></expr> ?</condition><then> <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>comp</name><operator>-&gt;</operator><name>f_data</name></name></expr> </then><else>: <expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>comp</name><operator>-&gt;</operator><name>i_data</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for> 

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_FRAME</name><parameter_list>(<parameter><type><name>D</name></type></parameter>, <parameter><type><name>PIXEL</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static inline void write_frame_ ##D(Jpeg2000DecoderContext * s, Jpeg2000Tile * tile, AVFrame * picture, int precision) { const AVPixFmtDescriptor *pixdesc = av_pix_fmt_desc_get(s-&gt;avctx-&gt;pix_fmt); int planar = !!(pixdesc-&gt;flags &amp; AV_PIX_FMT_FLAG_PLANAR); int pixelsize = planar ? 1 : pixdesc-&gt;nb_components; int compno; int x, y; for (compno = 0; compno &lt; s-&gt;ncomponents; compno++) { Jpeg2000Component *comp = tile-&gt;comp + compno; Jpeg2000CodingStyle *codsty = tile-&gt;codsty + compno; PIXEL *line; float *datap = comp-&gt;f_data; int32_t *i_datap = comp-&gt;i_data; int cbps = s-&gt;cbps[compno]; int w = tile-&gt;comp[compno].coord[0][1] - s-&gt;image_offset_x; int plane = 0; if (planar) plane = s-&gt;cdef[compno] ? s-&gt;cdef[compno]-1 : (s-&gt;ncomponents-1); y = tile-&gt;comp[compno].coord[1][0] - s-&gt;image_offset_y / s-&gt;cdy[compno]; line = (PIXEL *)picture-&gt;data[plane] + y * (picture-&gt;linesize[plane] / sizeof(PIXEL));for (; y &lt; tile-&gt;comp[compno].coord[1][1] - s-&gt;image_offset_y; y++) { PIXEL *dst; x = tile-&gt;comp[compno].coord[0][0] - s-&gt;image_offset_x / s-&gt;cdx[compno]; dst = line + x * pixelsize + compno*!planar; if (codsty-&gt;transform == FF_DWT97) { for (; x &lt; w; x++) { int val = lrintf(*datap) + (1 &lt;&lt; (cbps - 1)); val = av_clip(val, 0, (1 &lt;&lt; cbps) - 1); *dst = val &lt;&lt; (precision - cbps); datap++; dst += pixelsize; } } else { for (; x &lt; w; x++) { int val = *i_datap + (1 &lt;&lt; (cbps - 1)); val = av_clip(val, 0, (1 &lt;&lt; cbps) - 1); *dst = val &lt;&lt; (precision - cbps); i_datap++; dst += pixelsize; } } line += picture-&gt;linesize[plane] / sizeof(PIXEL); } } }</cpp:value></cpp:define>

<macro><name>WRITE_FRAME</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument>uint8_t</argument>)</argument_list></macro>

<macro><name>WRITE_FRAME</name><argument_list>(<argument><literal type="number">16</literal></argument>, <argument>uint16_t</argument>)</argument_list></macro>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>WRITE_FRAME</name></cpp:undef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpeg2000_decode_tile</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>td</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>jobnr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>threadnr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>td</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>jobnr</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>tile_codeblocks</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tile</name><operator>-&gt;</operator><name>codsty</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>mct</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mct_decode</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><name>x</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><name>x</name></expr>]</index></name> <operator>=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>write_frame_8</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><ternary><condition><expr><name><name>picture</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_XYZ12</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGB48</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_RGBA64</name> <operator>||</operator>

<name><name>picture</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>AV_PIX_FMT_GRAY16</name></expr> ?</condition><then> <expr><literal type="number">16</literal></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>precision</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>write_frame_16</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>jpeg2000_dec_cleanup</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>tileno</name></decl>, <decl><type ref="prev"/><name>compno</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tileno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tileno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>tileno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name>comp</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>compno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>compno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>;</condition> <incr><expr><name>compno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Component</name> <modifier>*</modifier></type><name>comp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name>comp</name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name>codsty</name> <operator>+</operator> <name>compno</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_jpeg2000_cleanup</name><argument_list>(<argument><expr><name>comp</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name>tileno</name></expr>]</index></name><operator>.</operator><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>properties</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>poc</name></name></expr></argument> , <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>poc</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpeg2000_read_main_headers</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000CodingStyle</name> <modifier>*</modifier></type><name>codsty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>codsty</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000QuantStyle</name> <modifier>*</modifier></type><name>qntsty</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>qntsty</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000POC</name> <modifier>*</modifier></type><name>poc</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>poc</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>properties</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>properties</name></name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>marker</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>oldpos</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing EOC\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>marker</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oldpos</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>==</operator> <name>JPEG2000_SOD</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000TilePart</name> <modifier>*</modifier></type><name>tp</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing SIZ\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing SOT\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>tile</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tp</name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>tile_part</name></name> <operator>+</operator> <name><name>tile</name><operator>-&gt;</operator><name>tp_idx</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tp</name><operator>-&gt;</operator><name>tp_end</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>g</name><operator>.</operator><name>buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid tpend\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tp</name><operator>-&gt;</operator><name>tpg</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>g</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>g</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>tp</name><operator>-&gt;</operator><name>tp_end</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>g</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>marker</name> <operator>==</operator> <name>JPEG2000_EOC</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>||</operator> <call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid len %d left=%d\n"</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>marker</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>JPEG2000_SIZ</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ncomponents</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Duplicate SIZ\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_siz</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_COC</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_coc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_COD</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_cod</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>codsty</name></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_QCC</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_qcc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>qntsty</name></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_QCD</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_qcd</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>qntsty</name></expr></argument>, <argument><expr><name>properties</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_POC</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_poc</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>poc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_SOT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_sot</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert1</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>codsty</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name></expr>]</index></name><operator>.</operator><name>codsty</name></expr>;</expr_stmt>

<expr_stmt><expr><name>qntsty</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name></expr>]</index></name><operator>.</operator><name>qntsty</name></expr>;</expr_stmt>

<expr_stmt><expr><name>poc</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name></expr>]</index></name><operator>.</operator><name>poc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>properties</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tile</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name></expr>]</index></name><operator>.</operator><name>properties</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_PLM</name></expr>:</case>

<case>case <expr><name>JPEG2000_COM</name></expr>:</case>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_TLM</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_tlm</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>JPEG2000_PLT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>get_plt</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"unsupported marker 0x%.4"</literal><name>PRIX16</name><literal type="string">" at pos 0x%X\n"</literal></expr></argument>,

<argument><expr><name>marker</name></expr></argument>, <argument><expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>oldpos</name> <operator>!=</operator> <name>len</name> <operator>||</operator> <name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"error during processing marker segment %.4"</literal><name>PRIx16</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name>marker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>ret</name></expr> ?</condition><then> <expr><name>ret</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpeg2000_read_bitstream_packets</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tileno</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>tileno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>tileno</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr>;</condition> <incr><expr><name>tileno</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000Tile</name> <modifier>*</modifier></type><name>tile</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>tile</name></name> <operator>+</operator> <name>tileno</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_tile</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tileno</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>g</name></name> <operator>=</operator> <name><name>tile</name><operator>-&gt;</operator><name>tile_part</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>tpg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jpeg2000_decode_packets</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>tile</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jp2_find_codestream</name><parameter_list>(<parameter><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>atom_size</name></decl>, <decl><type ref="prev"/><name>atom</name></decl>, <decl><type ref="prev"/><name>atom_end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>search_range</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>search_range</name>

<operator>&amp;&amp;</operator>

<call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>atom_size</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>atom</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>atom_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Huge atom"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>atom_size</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>atom_end</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>atom_size</name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>atom_end</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>atom_size</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>==</operator> <name>JP2_CODESTREAM</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>atom_size</name> <operator>||</operator> <name>atom_end</name> <operator>&lt;</operator> <name>atom_size</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atom</name> <operator>==</operator> <name>JP2_HEADER</name> <operator>&amp;&amp;</operator>

<name>atom_size</name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>atom2_size</name></decl>, <decl><type ref="prev"/><name>atom2</name></decl>, <decl><type ref="prev"/><name>atom2_end</name></decl>;</decl_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>atom2_size</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>atom2</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>atom2_end</name> <operator>=</operator> <call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>atom2_size</name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atom2_size</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">8</literal> <operator>||</operator> <name>atom2_end</name></expr></argument> &gt;</argument_list></name> <name>atom_end</name> <operator>||</operator> <name>atom2_end</name> <operator>&lt;</operator> <name>atom2_size</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>atom2_size</name> <operator>-=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>atom2</name> <operator>==</operator> <name>JP2_CODESTREAM</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atom2</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'o'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>atom2_size</name> <operator>&gt;=</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>method</name> <init>= <expr><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_skipu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>colour_space</name></name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atom2</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'p'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'l'</literal></expr></argument>,<argument><expr><literal type="char">'r'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>atom2_size</name> <operator>&gt;=</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name></decl>, <decl><type ref="prev"/><name>colour_count</name></decl>, <decl><type ref="prev"/><name>colour_channels</name></decl>, <decl><type ref="prev"/><name><name>colour_depth</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>colour_count</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>colour_channels</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colour_depth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colour_depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>colour_depth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7f</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name><name>colour_depth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>colour_count</name> <operator>+</operator>

<operator>(</operator><name><name>colour_depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>colour_count</name> <operator>+</operator>

<operator>(</operator><name><name>colour_depth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <literal type="number">7</literal> <operator>&gt;&gt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>*</operator> <name>colour_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>colour_count</name> <operator>&gt;</operator> <name>AVPALETTE_COUNT</name> <operator>||</operator>

<name>colour_channels</name> <operator>!=</operator> <literal type="number">3</literal> <operator>||</operator>

<name><name>colour_depth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator>

<name><name>colour_depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator>

<name><name>colour_depth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="number">16</literal> <operator>||</operator>

<name>atom2_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avpriv_request_sample</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><literal type="string">"Unknown palette"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>atom2_end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>pal8</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>colour_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>b</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colour_depth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name> <operator>|=</operator> <name>r</name> <operator>&gt;&gt;</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colour_depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>g</name> <operator>|=</operator> <name>g</name> <operator>&gt;&gt;</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>g</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>colour_depth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>-</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>|=</operator> <name>b</name> <operator>&gt;&gt;</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator> <name><name>colour_depth</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0xffu</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> <name>r</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>g</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atom2</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'c'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>,<argument><expr><literal type="char">'f'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>atom2_size</name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>n</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cn</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <name>av_unused</name></type> <name>typ</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>asoc</name> <init>= <expr><call><name>bytestream2_get_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>cn</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name>asoc</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name><index>[<expr><name>cn</name></expr>]</index></name> <operator>=</operator> <name>asoc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>atom2</name> <operator>==</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>atom2_size</name> <operator>&gt;=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>vnum</name></decl>, <decl><type ref="prev"/><name>vden</name></decl>, <decl><type ref="prev"/><name>hnum</name></decl>, <decl><type ref="prev"/><name>hden</name></decl>, <decl><type ref="prev"/><name>vexp</name></decl>, <decl><type ref="prev"/><name>hexp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>resx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>resx</name> <operator>=</operator> <call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>resx</name> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'c'</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>resx</name> <operator>!=</operator> <call><name>MKBETAG</name><argument_list>(<argument><expr><literal type="char">'r'</literal></expr></argument>,<argument><expr><literal type="char">'e'</literal></expr></argument>,<argument><expr><literal type="char">'s'</literal></expr></argument>,<argument><expr><literal type="char">'d'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>atom2_end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vnum</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vden</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hnum</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hden</name> <operator>=</operator> <call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vexp</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>hexp</name> <operator>=</operator> <call><name>bytestream2_get_byteu</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>vnum</name> <operator>||</operator> <operator>!</operator><name>vden</name> <operator>||</operator> <operator>!</operator><name>hnum</name> <operator>||</operator> <operator>!</operator><name>hden</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>atom2_end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"RES box invalid\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>vexp</name> <operator>&gt;</operator> <name>hexp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>vexp</name> <operator>-=</operator> <name>hexp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>hexp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hexp</name> <operator>-=</operator> <name>vexp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vexp</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>( <expr><name>INT64_MAX</name> <operator>/</operator> <operator>(</operator><name>hnum</name> <operator>*</operator> <name>vden</name><operator>)</operator> <operator>&gt;</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>hexp</name></expr></argument>)</argument_list></call>

<operator>&amp;&amp;</operator> <name>INT64_MAX</name> <operator>/</operator> <operator>(</operator><name>vnum</name> <operator>*</operator> <name>hden</name><operator>)</operator> <operator>&gt;</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name>hnum</name> <operator>*</operator> <name>vden</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>hexp</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>vnum</name> <operator>*</operator> <name>hden</name> <operator>*</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>vexp</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>INT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>atom2_end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>atom_end</name> <operator>-</operator> <name>atom2_end</name> <operator>&gt;=</operator> <literal type="number">8</literal></expr>)</condition>;</do>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>search_range</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name>atom_end</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>jpeg2000_init_static_data</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_jpeg2000_init_tier1_luts</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_mqc_init_context_tables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>jpeg2000_decode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVOnce</name></type> <name>init_static_once</name> <init>= <expr><name>AV_ONCE_INIT</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_thread_once</name><argument_list>(<argument><expr><operator>&amp;</operator><name>init_static_once</name></expr></argument>, <argument><expr><name>jpeg2000_init_static_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_jpeg2000dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dsp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>jpeg2000_decode_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_frame</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>Jpeg2000DecoderContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ThreadFrame</name></type> <name>frame</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name>data</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name> <operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>avpkt</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>curtileno</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>cdef</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">12</literal><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JP2_SIG_TYPE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><call><name>bytestream2_get_be32u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>JP2_SIG_VALUE</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>jp2_find_codestream</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Could not find Jpeg2000 codestream atom.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>bytestream2_seek</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><call><name>bytestream2_get_bytes_left</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">3</literal> <operator>&amp;&amp;</operator> <call><name>bytestream2_peek_be16</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JPEG2000_SOC</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>bytestream2_skip</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><call><name>bytestream2_get_be16u</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>JPEG2000_SOC</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"SOC marker not present\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>AVERROR_INVALIDDATA</name></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>jpeg2000_read_main_headers</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_thread_get_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>=</operator> <name>AV_PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>picture</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>=</operator> <call><name>jpeg2000_read_bitstream_packets</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>avctx</name><operator>-&gt;</operator><name>execute2</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>jpeg2000_decode_tile</name></expr></argument>, <argument><expr><name>picture</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>numXtiles</name></name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>numYtiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>jpeg2000_dec_cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>got_frame</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name> <operator>==</operator> <name>AV_PIX_FMT_PAL8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>palette</name></name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sar</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>num</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>sar</name><operator>.</operator><name>den</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><call><name>bytestream2_tell</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>g</name></name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>jpeg2000_dec_cleanup</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(Jpeg2000DecoderContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VD</name></cpp:macro> <cpp:value>AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_DECODING_PARAM</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"lowres"</literal></expr>, <expr><literal type="string">"Lower the decoding resolution by a power of two"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>reduction_factor</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>JPEG2000_MAX_RESLEVELS</name> <operator>-</operator> <literal type="number">1</literal></expr>, <expr><name>VD</name></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>jpeg2000_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"jpeg2000"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_jpeg2000_decoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"jpeg2000"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"JPEG 2000"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_JPEG2000</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_SLICE_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_FRAME_THREADS</name> <operator>|</operator> <name>AV_CODEC_CAP_DR1</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Jpeg2000DecoderContext</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <name>jpeg2000_decode_init</name></expr>,

<expr><operator>.</operator><name>decode</name> <operator>=</operator> <name>jpeg2000_decode_frame</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>jpeg2000_class</name></expr>,

<expr><operator>.</operator><name>max_lowres</name> <operator>=</operator> <literal type="number">5</literal></expr>,

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <macro><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument>ff_jpeg2000_profiles</argument>)</argument_list></macro></expr>

}</block></expr></init></decl>;</decl_stmt>

</unit>
