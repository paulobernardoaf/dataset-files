<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\dca.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"get_bits.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_CORE_FRAME_HEADER_SIZE</name></cpp:macro> <cpp:value>18</cpp:value></cpp:define>

<enum>enum <name>DCAParseError</name> <block>{

<decl><name>DCA_PARSE_ERROR_SYNC_WORD</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_DEFICIT_SAMPLES</name> <init>= <expr><operator>-</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_PCM_BLOCKS</name> <init>= <expr><operator>-</operator><literal type="number">3</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_FRAME_SIZE</name> <init>= <expr><operator>-</operator><literal type="number">4</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_AMODE</name> <init>= <expr><operator>-</operator><literal type="number">5</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_SAMPLE_RATE</name> <init>= <expr><operator>-</operator><literal type="number">6</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_RESERVED_BIT</name> <init>= <expr><operator>-</operator><literal type="number">7</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_LFE_FLAG</name> <init>= <expr><operator>-</operator><literal type="number">8</literal></expr></init></decl>,

<decl><name>DCA_PARSE_ERROR_PCM_RES</name> <init>= <expr><operator>-</operator><literal type="number">9</literal></expr></init></decl>,

}</block>;</enum>

<typedef>typedef <type><struct>struct <name>DCACoreFrameHeader</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>normal_frame</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>deficit_samples</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>crc_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>npcmblocks</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint16_t</name></type> <name>frame_size</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>audio_mode</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sr_code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>br_code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>drc_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ts_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>aux_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>hdcd_master</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ext_audio_type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>ext_audio_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sync_ssf</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>lfe_present</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>predictor_history</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>filter_perfect</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>encoder_rev</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>copy_hist</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>pcmr_code</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sumdiff_front</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>sumdiff_surround</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name>dn_code</name></decl>;</decl_stmt> 

}</block></struct></type> <name>DCACoreFrameHeader</name>;</typedef>

<enum>enum <name>DCASpeaker</name> <block>{

<decl><name>DCA_SPEAKER_C</name></decl>, <decl><name>DCA_SPEAKER_L</name></decl>, <decl><name>DCA_SPEAKER_R</name></decl>, <decl><name>DCA_SPEAKER_Ls</name></decl>,

<decl><name>DCA_SPEAKER_Rs</name></decl>, <decl><name>DCA_SPEAKER_LFE1</name></decl>, <decl><name>DCA_SPEAKER_Cs</name></decl>, <decl><name>DCA_SPEAKER_Lsr</name></decl>,

<decl><name>DCA_SPEAKER_Rsr</name></decl>, <decl><name>DCA_SPEAKER_Lss</name></decl>, <decl><name>DCA_SPEAKER_Rss</name></decl>, <decl><name>DCA_SPEAKER_Lc</name></decl>,

<decl><name>DCA_SPEAKER_Rc</name></decl>, <decl><name>DCA_SPEAKER_Lh</name></decl>, <decl><name>DCA_SPEAKER_Ch</name></decl>, <decl><name>DCA_SPEAKER_Rh</name></decl>,

<decl><name>DCA_SPEAKER_LFE2</name></decl>, <decl><name>DCA_SPEAKER_Lw</name></decl>, <decl><name>DCA_SPEAKER_Rw</name></decl>, <decl><name>DCA_SPEAKER_Oh</name></decl>,

<decl><name>DCA_SPEAKER_Lhs</name></decl>, <decl><name>DCA_SPEAKER_Rhs</name></decl>, <decl><name>DCA_SPEAKER_Chr</name></decl>, <decl><name>DCA_SPEAKER_Lhr</name></decl>,

<decl><name>DCA_SPEAKER_Rhr</name></decl>, <decl><name>DCA_SPEAKER_Cl</name></decl>, <decl><name>DCA_SPEAKER_Ll</name></decl>, <decl><name>DCA_SPEAKER_Rl</name></decl>,

<decl><name>DCA_SPEAKER_RSV1</name></decl>, <decl><name>DCA_SPEAKER_RSV2</name></decl>, <decl><name>DCA_SPEAKER_RSV3</name></decl>, <decl><name>DCA_SPEAKER_RSV4</name></decl>,

<decl><name>DCA_SPEAKER_COUNT</name></decl>

}</block>;</enum>

<enum>enum <name>DCASpeakerMask</name> <block>{

<decl><name>DCA_SPEAKER_MASK_C</name> <init>= <expr><literal type="number">0x00000001</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_L</name> <init>= <expr><literal type="number">0x00000002</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_R</name> <init>= <expr><literal type="number">0x00000004</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Ls</name> <init>= <expr><literal type="number">0x00000008</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rs</name> <init>= <expr><literal type="number">0x00000010</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_LFE1</name> <init>= <expr><literal type="number">0x00000020</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Cs</name> <init>= <expr><literal type="number">0x00000040</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Lsr</name> <init>= <expr><literal type="number">0x00000080</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rsr</name> <init>= <expr><literal type="number">0x00000100</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Lss</name> <init>= <expr><literal type="number">0x00000200</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rss</name> <init>= <expr><literal type="number">0x00000400</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Lc</name> <init>= <expr><literal type="number">0x00000800</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rc</name> <init>= <expr><literal type="number">0x00001000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Lh</name> <init>= <expr><literal type="number">0x00002000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Ch</name> <init>= <expr><literal type="number">0x00004000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rh</name> <init>= <expr><literal type="number">0x00008000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_LFE2</name> <init>= <expr><literal type="number">0x00010000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Lw</name> <init>= <expr><literal type="number">0x00020000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rw</name> <init>= <expr><literal type="number">0x00040000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Oh</name> <init>= <expr><literal type="number">0x00080000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Lhs</name> <init>= <expr><literal type="number">0x00100000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rhs</name> <init>= <expr><literal type="number">0x00200000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Chr</name> <init>= <expr><literal type="number">0x00400000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Lhr</name> <init>= <expr><literal type="number">0x00800000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rhr</name> <init>= <expr><literal type="number">0x01000000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Cl</name> <init>= <expr><literal type="number">0x02000000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Ll</name> <init>= <expr><literal type="number">0x04000000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_MASK_Rl</name> <init>= <expr><literal type="number">0x08000000</literal></expr></init></decl>,

}</block>;</enum>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_MONO</name></cpp:macro> <cpp:value>(DCA_SPEAKER_MASK_C)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_STEREO</name></cpp:macro> <cpp:value>(DCA_SPEAKER_MASK_L | DCA_SPEAKER_MASK_R)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_2POINT1</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_STEREO | DCA_SPEAKER_MASK_LFE1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_3_0</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_STEREO | DCA_SPEAKER_MASK_C)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_2_1</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_STEREO | DCA_SPEAKER_MASK_Cs)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_3_1</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_3_0 | DCA_SPEAKER_MASK_Cs)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_2_2</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_STEREO | DCA_SPEAKER_MASK_Ls | DCA_SPEAKER_MASK_Rs)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_5POINT0</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_3_0 | DCA_SPEAKER_MASK_Ls | DCA_SPEAKER_MASK_Rs)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_5POINT1</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_5POINT0 | DCA_SPEAKER_MASK_LFE1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_7POINT0_WIDE</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_5POINT0 | DCA_SPEAKER_MASK_Lw | DCA_SPEAKER_MASK_Rw)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_SPEAKER_LAYOUT_7POINT1_WIDE</name></cpp:macro> <cpp:value>(DCA_SPEAKER_LAYOUT_7POINT0_WIDE | DCA_SPEAKER_MASK_LFE1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DCA_HAS_STEREO</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((mask &amp; DCA_SPEAKER_LAYOUT_STEREO) == DCA_SPEAKER_LAYOUT_STEREO)</cpp:value></cpp:define>

<enum>enum <name>DCASpeakerPair</name> <block>{

<decl><name>DCA_SPEAKER_PAIR_C</name> <init>= <expr><literal type="number">0x0001</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LR</name> <init>= <expr><literal type="number">0x0002</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LsRs</name> <init>= <expr><literal type="number">0x0004</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LFE1</name> <init>= <expr><literal type="number">0x0008</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_Cs</name> <init>= <expr><literal type="number">0x0010</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LhRh</name> <init>= <expr><literal type="number">0x0020</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LsrRsr</name> <init>= <expr><literal type="number">0x0040</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_Ch</name> <init>= <expr><literal type="number">0x0080</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_Oh</name> <init>= <expr><literal type="number">0x0100</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LcRc</name> <init>= <expr><literal type="number">0x0200</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LwRw</name> <init>= <expr><literal type="number">0x0400</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LssRss</name> <init>= <expr><literal type="number">0x0800</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LFE2</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LhsRhs</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_Chr</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>,

<decl><name>DCA_SPEAKER_PAIR_LhrRhr</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>

}</block>;</enum>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_dca_count_chs_for_mask</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>mask</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_popcount</name><argument_list>(<argument><expr><operator>(</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0xffff</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><operator>(</operator><name>mask</name> <operator>&amp;</operator> <literal type="number">0xae66</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<enum>enum <name>DCARepresentationType</name> <block>{

<decl><name>DCA_REPR_TYPE_LtRt</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>DCA_REPR_TYPE_LhRh</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>

}</block>;</enum>

<enum>enum <name>DCAExtensionMask</name> <block>{

<decl><name>DCA_CSS_CORE</name> <init>= <expr><literal type="number">0x001</literal></expr></init></decl>,

<decl><name>DCA_CSS_XXCH</name> <init>= <expr><literal type="number">0x002</literal></expr></init></decl>,

<decl><name>DCA_CSS_X96</name> <init>= <expr><literal type="number">0x004</literal></expr></init></decl>,

<decl><name>DCA_CSS_XCH</name> <init>= <expr><literal type="number">0x008</literal></expr></init></decl>,

<decl><name>DCA_CSS_MASK</name> <init>= <expr><literal type="number">0x00f</literal></expr></init></decl>,

<decl><name>DCA_EXSS_CORE</name> <init>= <expr><literal type="number">0x010</literal></expr></init></decl>,

<decl><name>DCA_EXSS_XBR</name> <init>= <expr><literal type="number">0x020</literal></expr></init></decl>,

<decl><name>DCA_EXSS_XXCH</name> <init>= <expr><literal type="number">0x040</literal></expr></init></decl>,

<decl><name>DCA_EXSS_X96</name> <init>= <expr><literal type="number">0x080</literal></expr></init></decl>,

<decl><name>DCA_EXSS_LBR</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>,

<decl><name>DCA_EXSS_XLL</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>,

<decl><name>DCA_EXSS_RSV1</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,

<decl><name>DCA_EXSS_RSV2</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>,

<decl><name>DCA_EXSS_MASK</name> <init>= <expr><literal type="number">0xff0</literal></expr></init></decl>,

}</block>;</enum>

<enum>enum <name>DCADownMixType</name> <block>{

<decl><name>DCA_DMIX_TYPE_1_0</name></decl>,

<decl><name>DCA_DMIX_TYPE_LoRo</name></decl>,

<decl><name>DCA_DMIX_TYPE_LtRt</name></decl>,

<decl><name>DCA_DMIX_TYPE_3_0</name></decl>,

<decl><name>DCA_DMIX_TYPE_2_1</name></decl>,

<decl><name>DCA_DMIX_TYPE_2_2</name></decl>,

<decl><name>DCA_DMIX_TYPE_3_1</name></decl>,

<decl><name>DCA_DMIX_TYPE_COUNT</name></decl>

}</block>;</enum>

<decl_stmt><decl><type><specifier>extern</specifier> <name>av_export_avcodec</name> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>avpriv_dca_sample_rates</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>ff_dca_sampling_freqs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dca_freq_ranges</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ff_dca_bits_per_sample</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>avpriv_dca_convert_bitstream</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>max_size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>avpriv_dca_parse_core_frame_header</name><parameter_list>(<parameter><decl><type><name>DCACoreFrameHeader</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_dca_parse_core_frame_header</name><parameter_list>(<parameter><decl><type><name>DCACoreFrameHeader</name> <modifier>*</modifier></type><name>h</name></decl></parameter>, <parameter><decl><type><name>GetBitContext</name> <modifier>*</modifier></type><name>gb</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
