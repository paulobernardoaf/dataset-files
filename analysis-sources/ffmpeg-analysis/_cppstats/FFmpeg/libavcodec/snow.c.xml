<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\snow.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"me_cmp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snow_dwt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snow.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snowdata.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rangecoder.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathops.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"h263.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>ff_snow_inner_add_yblock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>obmc_stride</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_h</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>src_x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_y</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_stride</name></decl></parameter>, <parameter><decl><type><name>slice_buffer</name> <modifier>*</modifier></type> <name>sb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>add</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type> <name>dst8</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>, <decl><type ref="prev"/><name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>IDWTELEM</name> <modifier>*</modifier></type> <name>dst</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc1</name><init>= <expr><name>obmc</name> <operator>+</operator> <name>y</name><operator>*</operator><name>obmc_stride</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc2</name><init>= <expr><name>obmc1</name><operator>+</operator> <operator>(</operator><name>obmc_stride</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc3</name><init>= <expr><name>obmc1</name><operator>+</operator> <name>obmc_stride</name><operator>*</operator><operator>(</operator><name>obmc_stride</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>obmc4</name><init>= <expr><name>obmc3</name><operator>+</operator> <operator>(</operator><name>obmc_stride</name><operator>&gt;&gt;</operator><literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <call><name>slice_buffer_get_line</name><argument_list>(<argument><expr><name>sb</name></expr></argument>, <argument><expr><name>src_y</name> <operator>+</operator> <name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>b_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>v</name><init>= <expr><name><name>obmc1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>block</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>src_stride</name></expr>]</index></name>

<operator>+</operator><name><name>obmc2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>block</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>src_stride</name></expr>]</index></name>

<operator>+</operator><name><name>obmc3</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>block</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>src_stride</name></expr>]</index></name>

<operator>+</operator><name><name>obmc4</name><index>[<expr><name>x</name></expr>]</index></name> <operator>*</operator> <name><name>block</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>src_stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">8</literal> <operator>-</operator> <name>LOG2_OBMC_MAX</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>FRAC_BITS</name> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal> <operator>-</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>add</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>src_x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <operator>(</operator><name>v</name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><operator>(</operator><name>FRAC_BITS</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator> <operator>&gt;&gt;</operator> <name>FRAC_BITS</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>v</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>v</name><operator>=</operator> <operator>~</operator><operator>(</operator><name>v</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dst8</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>src_stride</name></expr>]</index></name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>src_x</name></expr>]</index></name> <operator>-=</operator> <name>v</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_snow_get_buffer</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>edges_needed</name> <init>= <expr><call><name>av_codec_is_encoder</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr> ;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>edges_needed</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>EDGE_WIDTH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>+=</operator> <literal type="number">2</literal> <operator>*</operator> <name>EDGE_WIDTH</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>edges_needed</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><operator>(</operator><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator> <operator>*</operator>

<name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator>

<operator>(</operator><name>EDGE_WIDTH</name> <operator>&gt;&gt;</operator> <operator>(</operator><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+=</operator> <name>offset</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_snow_reset_contexts</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name><operator>&lt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>level</name><operator>&lt;</operator><name>MAX_DECOMPOSITIONS</name></expr>;</condition> <incr><expr><name>level</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>, <argument><expr><name>MID_STATE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name><operator>.</operator><name>state</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>, <argument><expr><name>MID_STATE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>header_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>, <argument><expr><name>MID_STATE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block_state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_snow_alloc_blocks</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name>LOG2_MB_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name>LOG2_MB_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_width</name></name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>b_height</name></name><operator>=</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>block</name></name><operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>w</name> <operator>*</operator> <name>h</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BlockNode</name></expr></argument>)</argument_list></sizeof> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>block_max_depth</name></name><operator>*</operator><literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>init_qexp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>v</name><init>=<expr><literal type="number">128</literal></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>QROOT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>ff_qexp</name><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>*=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <name>QROOT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mc_block</name><parameter_list>(<parameter><decl><type><name>Plane</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dy</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>weight</name><index>[<expr><literal type="number">64</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">8</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">7</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,

<expr><literal type="number">6</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">5</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">5</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">3</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">6</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">1</literal></expr>,<expr><literal type="number">7</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>brane</name><index>[<expr><literal type="number">256</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">0x00</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x01</literal></expr>,<expr><literal type="number">0x11</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x12</literal></expr>,<expr><literal type="number">0x12</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x52</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x16</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x04</literal></expr>,<expr><literal type="number">0x41</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x05</literal></expr>,<expr><literal type="number">0x15</literal></expr>,<expr><literal type="number">0x52</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x16</literal></expr>,

<expr><literal type="number">0x44</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x45</literal></expr>,<expr><literal type="number">0x55</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x56</literal></expr>,<expr><literal type="number">0x56</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x96</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,

<expr><literal type="number">0x48</literal></expr>,<expr><literal type="number">0x85</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x49</literal></expr>,<expr><literal type="number">0x59</literal></expr>,<expr><literal type="number">0x96</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0xcc</literal></expr>,<expr><literal type="number">0x5A</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>needs</name><index>[<expr><literal type="number">16</literal></expr>]</index></name><init>=<expr><block>{

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">2</literal></expr>,<expr><literal type="number">4</literal></expr>,<expr><literal type="number">2</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">0</literal></expr>,<expr><literal type="number">1</literal></expr>,<expr><literal type="number">0</literal></expr>,<expr><literal type="number">0</literal></expr>,

<expr><literal type="number">15</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>r</name></decl>, <decl><type ref="prev"/><name>l</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>tmpIt</name> <index>[<expr><literal type="number">64</literal><operator>*</operator><operator>(</operator><literal type="number">32</literal><operator>+</operator><name>HTAPS_MAX</name><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp2t</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">64</literal><operator>*</operator><operator>(</operator><literal type="number">32</literal><operator>+</operator><name>HTAPS_MAX</name><operator>)</operator></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>tmpI</name><init>= <expr><name>tmpIt</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp2</name><init>= <expr><name><name>tmp2t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name><name>hpel</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>dx</name><operator>&lt;</operator><literal type="number">16</literal> <operator>&amp;&amp;</operator> <name>dy</name><operator>&lt;</operator><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>r</name><operator>=</operator> <name><name>brane</name><index>[<expr><name>dx</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>dy</name></expr>]</index></name><operator>&amp;</operator><literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name><operator>=</operator> <name><name>brane</name><index>[<expr><name>dx</name> <operator>+</operator> <literal type="number">16</literal><operator>*</operator><name>dy</name></expr>]</index></name><operator>&gt;&gt;</operator><literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name><operator>=</operator> <name><name>needs</name><index>[<expr><name>l</name></expr>]</index></name> <operator>|</operator> <name><name>needs</name><index>[<expr><name>r</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>p</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>diag_mc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>b</name><operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">5</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name><operator>+</operator><name>HTAPS_MAX</name><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>b_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a_1</name><init>=<expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a0</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a2</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a3</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a4</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a5</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a6</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>am</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>fast_mc</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>am</name><operator>=</operator> <literal type="number">20</literal><operator>*</operator><operator>(</operator><name>a2</name><operator>+</operator><name>a3</name><operator>)</operator> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name>a1</name><operator>+</operator><name>a4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>a0</name><operator>+</operator><name>a5</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpI</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>am</name></expr>;</expr_stmt>

<expr_stmt><expr><name>am</name><operator>=</operator> <operator>(</operator><name>am</name><operator>+</operator><literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><name>am</name><operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a2</name><operator>+</operator><name>a3</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a1</name><operator>+</operator><name>a4</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a0</name><operator>+</operator><name>a5</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a_1</name><operator>+</operator><name>a6</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tmpI</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>am</name></expr>;</expr_stmt>

<expr_stmt><expr><name>am</name><operator>=</operator> <operator>(</operator><name>am</name><operator>+</operator><literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>am</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>am</name><operator>=</operator> <operator>~</operator><operator>(</operator><name>am</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp2</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>am</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmpI</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>stride</name><operator>*</operator><name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>=</operator> <name><name>tmp2t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">2</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>b_w</name><operator>+</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a_1</name><init>=<expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a0</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a2</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a3</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a4</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a5</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a6</name><init>= <expr><name><name>src</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name>stride</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>am</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>fast_mc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>am</name><operator>=</operator> <operator>(</operator><literal type="number">20</literal><operator>*</operator><operator>(</operator><name>a2</name><operator>+</operator><name>a3</name><operator>)</operator> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name>a1</name><operator>+</operator><name>a4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>a0</name><operator>+</operator><name>a5</name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>am</name><operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a2</name><operator>+</operator><name>a3</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a1</name><operator>+</operator><name>a4</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a0</name><operator>+</operator><name>a5</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a_1</name><operator>+</operator><name>a6</name><operator>)</operator> <operator>+</operator> <literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>am</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>am</name><operator>=</operator> <operator>~</operator><operator>(</operator><name>am</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp2</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>am</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name> <operator>-=</operator> <name>stride</name><operator>*</operator><name>y</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>stride</name><operator>*</operator><operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>=</operator> <name><name>tmp2t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>tmpI</name><operator>=</operator> <name>tmpIt</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>b</name><operator>&amp;</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>b_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a_1</name><init>=<expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a0</name><init>= <expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name><init>= <expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a2</name><init>= <expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a3</name><init>= <expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">0</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a4</name><init>= <expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a5</name><init>= <expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">2</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a6</name><init>= <expr><name><name>tmpI</name><index>[<expr><name>x</name> <operator>+</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><literal type="number">64</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>am</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>p</name> <operator>||</operator> <name><name>p</name><operator>-&gt;</operator><name>fast_mc</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>am</name><operator>=</operator> <operator>(</operator><literal type="number">20</literal><operator>*</operator><operator>(</operator><name>a2</name><operator>+</operator><name>a3</name><operator>)</operator> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name>a1</name><operator>+</operator><name>a4</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>a0</name><operator>+</operator><name>a5</name><operator>)</operator> <operator>+</operator> <literal type="number">512</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>am</name><operator>=</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a2</name><operator>+</operator><name>a3</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a1</name><operator>+</operator><name>a4</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a0</name><operator>+</operator><name>a5</name><operator>)</operator> <operator>+</operator> <name><name>p</name><operator>-&gt;</operator><name>hcoeff</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>*</operator><operator>(</operator><name>a_1</name><operator>+</operator><name>a6</name><operator>)</operator> <operator>+</operator> <literal type="number">2048</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">12</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if<condition>(<expr><name>am</name><operator>&amp;</operator><operator>(</operator><operator>~</operator><literal type="number">255</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>am</name><operator>=</operator> <operator>~</operator><operator>(</operator><name>am</name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tmp2</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <name>am</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>tmpI</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp2</name><operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name><operator>=</operator> <name>src</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name><operator>=</operator> <name><name>tmp2t</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal><operator>*</operator><operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name><operator>=</operator> <name>src</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name><operator>=</operator> <name><name>tmp2t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name><operator>=</operator> <name><name>tmp2t</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name><operator>=</operator> <name><name>tmp2t</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name><operator>=</operator> <name>src</name> <operator>+</operator> <name>stride</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name><operator>=</operator> <name><name>hpel</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>hpel</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>=</operator> <name><name>hpel</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MC_STRIDE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(needs[x] ? 64 : stride)</cpp:value></cpp:define>

<if_stmt><if>if<condition>(<expr><name>b</name><operator>==</operator><literal type="number">15</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dxy</name> <init>= <expr><name>dx</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <name>dy</name> <operator>/</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name><name>hpel</name><index>[<expr><name>dxy</name></expr> ]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name> <init>= <expr><name><name>hpel</name><index>[<expr><name>dxy</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src3</name> <init>= <expr><name><name>hpel</name><index>[<expr><name>dxy</name> <operator>+</operator> <literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src4</name> <init>= <expr><name><name>hpel</name><index>[<expr><name>dxy</name> <operator>+</operator> <literal type="number">5</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride1</name> <init>= <expr><call><name>MC_STRIDE</name><argument_list>(<argument><expr><name>dxy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride2</name> <init>= <expr><call><name>MC_STRIDE</name><argument_list>(<argument><expr><name>dxy</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride3</name> <init>= <expr><call><name>MC_STRIDE</name><argument_list>(<argument><expr><name>dxy</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride4</name> <init>= <expr><call><name>MC_STRIDE</name><argument_list>(<argument><expr><name>dxy</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dx</name><operator>&amp;=</operator><literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dy</name><operator>&amp;=</operator><literal type="number">7</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>b_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <operator>(</operator><operator>(</operator><literal type="number">8</literal><operator>-</operator><name>dx</name><operator>)</operator><operator>*</operator><operator>(</operator><literal type="number">8</literal><operator>-</operator><name>dy</name><operator>)</operator><operator>*</operator><name><name>src1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>dx</name><operator>*</operator><operator>(</operator><literal type="number">8</literal><operator>-</operator><name>dy</name><operator>)</operator><operator>*</operator><name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator>

<operator>(</operator><literal type="number">8</literal><operator>-</operator><name>dx</name><operator>)</operator><operator>*</operator> <name>dy</name> <operator>*</operator><name><name>src3</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>dx</name><operator>*</operator> <name>dy</name> <operator>*</operator><name><name>src4</name><index>[<expr><name>x</name></expr>]</index></name><operator>+</operator><literal type="number">32</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src1</name><operator>+=</operator><name>stride1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name><operator>+=</operator><name>stride2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src3</name><operator>+=</operator><name>stride3</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src4</name><operator>+=</operator><name>stride4</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator><name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src1</name><init>= <expr><name><name>hpel</name><index>[<expr><name>l</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src2</name><init>= <expr><name><name>hpel</name><index>[<expr><name>r</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride1</name> <init>= <expr><call><name>MC_STRIDE</name><argument_list>(<argument><expr><name>l</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stride2</name> <init>= <expr><call><name>MC_STRIDE</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>a</name><init>= <expr><name><name>weight</name><index>[<expr><operator>(</operator><operator>(</operator><name>dx</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">8</literal><operator>*</operator><operator>(</operator><name>dy</name><operator>&amp;</operator><literal type="number">7</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name><init>= <expr><literal type="number">8</literal><operator>-</operator><name>a</name></expr></init></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>b_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name></expr>]</index></name><operator>=</operator> <operator>(</operator><name>a</name><operator>*</operator><name><name>src1</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>src2</name><index>[<expr><name>x</name></expr>]</index></name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>src1</name><operator>+=</operator><name>stride1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>src2</name><operator>+=</operator><name>stride2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator><name>stride</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_snow_pred_block</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>tmp</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sy</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b_h</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BlockNode</name> <modifier>*</modifier></type><name>block</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>plane_index</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list><block>{<block_content>

<if_stmt><if>if<condition>(<expr><name><name>block</name><operator>-&gt;</operator><name>type</name></name> <operator>&amp;</operator> <name>BLOCK_INTRA</name></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>color</name> <init>= <expr><name><name>block</name><operator>-&gt;</operator><name>color</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name></type> <name>color4</name> <init>= <expr><name>color</name><operator>*</operator><literal type="number">0x01010101</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>b_w</name><operator>==</operator><literal type="number">32</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">12</literal><operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">16</literal><operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">20</literal><operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">24</literal><operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">28</literal><operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>b_w</name><operator>==</operator><literal type="number">16</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">8</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">12</literal><operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>b_w</name><operator>==</operator><literal type="number">8</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">4</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>b_w</name><operator>==</operator><literal type="number">4</literal></expr>)</condition><block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>dst</name><index>[<expr><literal type="number">0</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color4</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><else>else<block>{<block_content>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>b_w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>x</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name></expr>]</index></name><operator>=</operator> <name>color</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name><name>block</name><operator>-&gt;</operator><name>ref</name></name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scale</name><init>= <expr><ternary><condition><expr><name>plane_index</name></expr> ?</condition><then> <expr><operator>(</operator><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name><operator>)</operator><operator>&gt;&gt;</operator><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr> </then><else>: <expr><literal type="number">2</literal><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>mv_scale</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name><init>= <expr><name><name>block</name><operator>-&gt;</operator><name>mx</name></name><operator>*</operator><name>scale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>my</name><init>= <expr><name><name>block</name><operator>-&gt;</operator><name>my</name></name><operator>*</operator><name>scale</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dx</name><init>= <expr><name>mx</name><operator>&amp;</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dy</name><init>= <expr><name>my</name><operator>&amp;</operator><literal type="number">15</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>tab_index</name><init>= <expr><literal type="number">3</literal> <operator>-</operator> <operator>(</operator><name>b_w</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>b_w</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sx</name> <operator>+=</operator> <operator>(</operator><name>mx</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sy</name> <operator>+=</operator> <operator>(</operator><name>my</name><operator>&gt;&gt;</operator><literal type="number">4</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>/</operator><literal type="number">2</literal><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>sx</name> <operator>+</operator> <name>sy</name><operator>*</operator><name>stride</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>sx</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>w</name> <operator>-</operator> <name>b_w</name> <operator>-</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>sy</name> <operator>&gt;=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>h</name> <operator>-</operator> <name>b_h</name> <operator>-</operator> <operator>(</operator><name>HTAPS_MAX</name><operator>-</operator><literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name><name>s</name><operator>-&gt;</operator><name>vdsp</name><operator>.</operator><name>emulated_edge_mc</name></name><argument_list>(<argument><expr><name>tmp</name> <operator>+</operator> <name>MB_SIZE</name></expr></argument>, <argument><expr><name>src</name></expr></argument>,

<argument><expr><name>stride</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>,

<argument><expr><name>b_w</name><operator>+</operator><name>HTAPS_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>b_h</name><operator>+</operator><name>HTAPS_MAX</name><operator>-</operator><literal type="number">1</literal></expr></argument>,

<argument><expr><name>sx</name></expr></argument>, <argument><expr><name>sy</name></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name><operator>=</operator> <name>tmp</name> <operator>+</operator> <name>MB_SIZE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name> <operator>==</operator> <name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>tab_index</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tab_index</name><operator>&lt;</operator><literal type="number">4</literal><operator>)</operator> <operator>||</operator> <name>b_w</name><operator>==</operator><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>( <expr><operator>(</operator><name>dx</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>dy</name><operator>&amp;</operator><literal type="number">3</literal><operator>)</operator>

<operator>||</operator> <operator>!</operator><operator>(</operator><name>b_w</name> <operator>==</operator> <name>b_h</name> <operator>||</operator> <literal type="number">2</literal><operator>*</operator><name>b_w</name> <operator>==</operator> <name>b_h</name> <operator>||</operator> <name>b_w</name> <operator>==</operator> <literal type="number">2</literal><operator>*</operator><name>b_h</name><operator>)</operator>

<operator>||</operator> <operator>(</operator><name>b_w</name><operator>&amp;</operator><operator>(</operator><name>b_w</name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator>

<operator>||</operator> <name>b_w</name> <operator>==</operator> <literal type="number">1</literal>

<operator>||</operator> <name>b_h</name> <operator>==</operator> <literal type="number">1</literal>

<operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name>fast_mc</name></expr> )</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>mc_block</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name>b_w</name></expr></argument>, <argument><expr><name>b_h</name></expr></argument>, <argument><expr><name>dx</name></expr></argument>, <argument><expr><name>dy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>b_w</name><operator>==</operator><literal type="number">32</literal></expr>)</condition><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>y</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>b_h</name></expr>;</condition> <incr><expr><name>y</name><operator>+=</operator><literal type="number">16</literal></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>dy</name><operator>+</operator><operator>(</operator><name>dx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name><operator>,</operator> <name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>dy</name><operator>+</operator><operator>(</operator><name>dx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">16</literal> <operator>+</operator> <name>y</name><operator>*</operator><name>stride</name><operator>,</operator> <name>src</name> <operator>+</operator> <literal type="number">19</literal> <operator>+</operator> <operator>(</operator><name>y</name><operator>+</operator><literal type="number">3</literal><operator>)</operator><operator>*</operator><name>stride</name><operator>,</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if><if type="elseif">else if<condition>(<expr><name>b_w</name><operator>==</operator><name>b_h</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><name>tab_index</name></expr> ]</index><index>[<expr><name>dy</name><operator>+</operator><operator>(</operator><name>dx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name><operator>,</operator><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name><operator>,</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name>b_w</name><operator>==</operator><literal type="number">2</literal><operator>*</operator><name>b_h</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><name>tab_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>dy</name><operator>+</operator><operator>(</operator><name>dx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name> <operator>,</operator><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name><operator>,</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><name>tab_index</name><operator>+</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>dy</name><operator>+</operator><operator>(</operator><name>dx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name><operator>+</operator><name>b_h</name><operator>,</operator><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <name>b_h</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name><operator>,</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>b_w</name><operator>==</operator><name>b_h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><name>tab_index</name></expr> ]</index><index>[<expr><name>dy</name><operator>+</operator><operator>(</operator><name>dx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name> <operator>,</operator><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name> <operator>,</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name><operator>.</operator><name>put_h264_qpel_pixels_tab</name><index>[<expr><name>tab_index</name></expr> ]</index><index>[<expr><name>dy</name><operator>+</operator><operator>(</operator><name>dx</name><operator>&gt;&gt;</operator><literal type="number">2</literal><operator>)</operator></expr>]</index></name><operator>(</operator><name>dst</name><operator>+</operator><name>b_w</name><operator>*</operator><name>stride</name><operator>,</operator><name>src</name> <operator>+</operator> <literal type="number">3</literal> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><name>stride</name><operator>+</operator><name>b_w</name><operator>*</operator><name>stride</name><operator>,</operator><name>stride</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mca</name><parameter_list>(<parameter><type><name>dx</name></type></parameter>,<parameter><type><name>dy</name></type></parameter>,<parameter><type><name>b_w</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>static void mc_block_hpel ##dx ##dy ##b_w(uint8_t *dst, const uint8_t *src, ptrdiff_t stride, int h){av_assert2(h==b_w);mc_block(NULL, dst, src-(HTAPS_MAX/2-1)-(HTAPS_MAX/2-1)*stride, stride, b_w, b_w, dx, dy);}</cpp:value></cpp:define>

<macro><name>mca</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>mca</name><argument_list>( <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>mca</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>mca</name><argument_list>( <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>,<argument><literal type="number">16</literal></argument>)</argument_list></macro>

<macro><name>mca</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>,<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mca</name><argument_list>( <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>,<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mca</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>,<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mca</name><argument_list>( <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>,<argument><literal type="number">8</literal></argument>)</argument_list></macro>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_snow_common_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <decl><type ref="prev"/><name>height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name><operator>=</operator> <name>avctx</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_me_cmp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mecc</name></name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_hpeldsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>hdsp</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_videodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>vdsp</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_dwt_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>dwt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_h264qpel_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>h264qpel</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mcf</name><parameter_list>(<parameter><type><name>dx</name></type></parameter>,<parameter><type><name>dy</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>s-&gt;qdsp.put_qpel_pixels_tab [0][dy+dx/4]=s-&gt;qdsp.put_no_rnd_qpel_pixels_tab[0][dy+dx/4]=s-&gt;h264qpel.put_h264_qpel_pixels_tab[0][dy+dx/4];s-&gt;qdsp.put_qpel_pixels_tab [1][dy+dx/4]=s-&gt;qdsp.put_no_rnd_qpel_pixels_tab[1][dy+dx/4]=s-&gt;h264qpel.put_h264_qpel_pixels_tab[1][dy+dx/4];</cpp:value></cpp:define>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">4</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">4</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">8</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">4</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>(<argument><literal type="number">12</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">0</literal></argument>,<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">4</literal></argument>,<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>( <argument><literal type="number">8</literal></argument>,<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<macro><name>mcf</name><argument_list>(<argument><literal type="number">12</literal></argument>,<argument><literal type="number">12</literal></argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mcfh</name><parameter_list>(<parameter><type><name>dx</name></type></parameter>,<parameter><type><name>dy</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>s-&gt;hdsp.put_pixels_tab [0][dy/4+dx/8]=s-&gt;hdsp.put_no_rnd_pixels_tab[0][dy/4+dx/8]=mc_block_hpel ##dx ##dy ##16;s-&gt;hdsp.put_pixels_tab [1][dy/4+dx/8]=s-&gt;hdsp.put_no_rnd_pixels_tab[1][dy/4+dx/8]=mc_block_hpel ##dx ##dy ##8;</cpp:value></cpp:define>

<macro><name>mcfh</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>mcfh</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">0</literal></argument>)</argument_list></macro>

<macro><name>mcfh</name><argument_list>(<argument><literal type="number">0</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<macro><name>mcfh</name><argument_list>(<argument><literal type="number">8</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>init_qexp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>width</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>height</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_dwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>temp_idwt_buffer</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>IDWTELEM</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>run_buffer</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>width</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>height</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>s</name><operator>-&gt;</operator><name>run_buffer</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for<control>(<init><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><name>MAX_REF_FRAMES</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ff_scale_mv_ref</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <literal type="number">256</literal><operator>*</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>/</operator><operator>(</operator><name>j</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name></name> <operator>||</operator> <operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_snow_common_init_after_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>emu_buf_size</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>scratchbuf</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_get_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name></name></expr></argument>,

<argument><expr><name>AV_GET_BUFFER_FLAG_REF</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FF_ALLOCZ_ARRAY_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>scratchbuf</name></name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>+</operator><literal type="number">256</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">7</literal><operator>*</operator><name>MB_SIZE</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>emu_buf_size</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name><operator>+</operator><literal type="number">256</literal></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name>MB_SIZE</name> <operator>+</operator> <name>HTAPS_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FF_ALLOC_OR_GOTO</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>emu_edge_buffer</name></name></expr></argument>, <argument><expr><name>emu_buf_size</name></expr></argument>, <argument><expr><name>fail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name><operator>-&gt;</operator><name>format</name></name> <operator>!=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"pixel format changed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>plane_index</name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>w</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name>height</name><operator>=</operator> <name>h</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>level</name></name><operator>=</operator> <name>level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>stride</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name>width</name> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <operator>(</operator><name>w</name> <operator>+</operator> <operator>!</operator><operator>(</operator><name>orientation</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>height</name></name><operator>=</operator> <operator>(</operator><name>h</name> <operator>+</operator> <operator>!</operator><operator>(</operator><name>orientation</name><operator>&gt;</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>stride_line</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_decomposition_count</name></name> <operator>-</operator> <name>level</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf_x_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf_y_offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name> <operator>+=</operator> <operator>(</operator><name>w</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf_x_offset</name></name> <operator>=</operator> <operator>(</operator><name>w</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if<condition>(<expr><name>orientation</name><operator>&gt;</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf</name></name> <operator>+=</operator> <name><name>b</name><operator>-&gt;</operator><name>stride</name></name><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>buf_y_offset</name></name> <operator>=</operator> <name><name>b</name><operator>-&gt;</operator><name>stride_line</name></name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>ibuf</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name> <operator>+</operator> <operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name></name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>level</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>parent</name></name><operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x_coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>b</name><operator>-&gt;</operator><name>x_coeff</name></name><operator>=</operator><call><name>av_mallocz_array</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name><name>b</name><operator>-&gt;</operator><name>width</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>b</name><operator>-&gt;</operator><name>height</name></name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>x_and_coeff</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>b</name><operator>-&gt;</operator><name>x_coeff</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>w</name><operator>=</operator> <operator>(</operator><name>w</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>h</name><operator>=</operator> <operator>(</operator><name>h</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_HALFPEL_PLANE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>halfpel_interpol</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>halfpel</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>p</name></decl>,<decl><type ref="prev"/><name>x</name></decl>,<decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>p</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>p</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>nb_planes</name></name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_chroma</name><init>= <expr><operator>!</operator><operator>!</operator><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name><init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_h_shift</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>h</name><init>= <expr><ternary><condition><expr><name>is_chroma</name></expr> ?</condition><then> <expr><call><name>AV_CEIL_RSHIFT</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>chroma_v_shift</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ls</name><init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>src</name><init>= <expr><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>p</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>EDGE_WIDTH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>EDGE_WIDTH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>ls</name></expr></argument>, <argument><expr><operator>(</operator><name>h</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>EDGE_WIDTH</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>halfpel</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>halfpel</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>halfpel</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>halfpel</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>halfpel</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>halfpel</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <name>EDGE_WIDTH</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ls</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <name>EDGE_WIDTH</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ls</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name> <operator>+=</operator> <name>EDGE_WIDTH</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name>ls</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name><operator>=</operator> <name>src</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>y</name><operator>*</operator><name>ls</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">20</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>y</name><operator>*</operator><name>ls</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">20</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><name>ls</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>ls</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>ls</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>ls</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>ls</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>src</name><operator>=</operator> <name><name>halfpel</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name><operator>&lt;</operator><name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name><operator>&lt;</operator><name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name><init>= <expr><name>y</name><operator>*</operator><name>ls</name> <operator>+</operator> <name>x</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>halfpel</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>p</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>=</operator> <operator>(</operator><literal type="number">20</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><name>ls</name></expr>]</index></name><operator>)</operator> <operator>-</operator> <literal type="number">5</literal><operator>*</operator><operator>(</operator><name><name>src</name><index>[<expr><name>i</name><operator>-</operator><name>ls</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal><operator>*</operator><name>ls</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <operator>(</operator><name><name>src</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>ls</name></expr>]</index></name> <operator>+</operator> <name><name>src</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal><operator>*</operator><name>ls</name></expr>]</index></name><operator>)</operator> <operator>+</operator> <literal type="number">16</literal> <operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_snow_release_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>halfpel_plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>/</operator><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>halfpel_plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>/</operator><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name> <operator>-</operator> <name>EDGE_WIDTH</name><operator>*</operator><operator>(</operator><literal type="number">1</literal><operator>+</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>halfpel_plane</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal><operator>+</operator><name>i</name><operator>/</operator><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name><operator>%</operator><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_snow_frame_start</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_snow_release_buffer</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>tmp</name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>halfpel_plane</name></name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>halfpel_plane</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name><operator>-</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>USE_HALFPEL_PLANE</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if<condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>halfpel_interpol</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>halfpel_plane</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name><operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if><else>else<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name><name>s</name><operator>-&gt;</operator><name>max_ref_frames</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if<condition>(<expr><name>i</name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>key_frame</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name><operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ref_frames</name></name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>avctx</name></name></expr></argument>,<argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No reference frames\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ff_snow_get_buffer</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>key_frame</name></name><operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>keyframe</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_snow_common_end</name><parameter_list>(<parameter><decl><type><name>SnowContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>plane_index</name></decl>, <decl><type ref="prev"/><name>level</name></decl>, <decl><type ref="prev"/><name>orientation</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_dwt_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_dwt_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>spatial_idwt_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>temp_idwt_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>run_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>temp</name></name><operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>me</name><operator>.</operator><name>score_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>m</name><operator>.</operator><name>sc</name><operator>.</operator><name>obmc_scratchpad</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>scratchbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>emu_edge_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>MAX_REF_FRAMES</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref_mvs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>ref_scores</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name><name>s</name><operator>-&gt;</operator><name>current_picture</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>last_picture</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>plane_index</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>plane_index</name> <operator>&lt;</operator> <name>MAX_PLANES</name></expr>;</condition> <incr><expr><name>plane_index</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>level</name><operator>=</operator><name>MAX_DECOMPOSITIONS</name><operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>level</name><operator>&gt;=</operator><literal type="number">0</literal></expr>;</condition> <incr><expr><name>level</name><operator>--</operator></expr></incr>)</control><block>{<block_content>

<for>for<control>(<init><expr><name>orientation</name><operator>=</operator><ternary><condition><expr><name>level</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</init> <condition><expr><name>orientation</name><operator>&lt;</operator><literal type="number">4</literal></expr>;</condition> <incr><expr><name>orientation</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>SubBand</name> <modifier>*</modifier></type><name>b</name><init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>plane</name><index>[<expr><name>plane_index</name></expr>]</index></name><operator>.</operator><name><name>band</name><index>[<expr><name>level</name></expr>]</index><index>[<expr><name>orientation</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>b</name><operator>-&gt;</operator><name>x_coeff</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>mconly_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>current_picture</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
