<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\flacdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_SIZE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp_template.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp_lpc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLANAR</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>SAMPLE_SIZE</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLANAR</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAMPLE_SIZE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp_template.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp_lpc_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PLANAR</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PLANAR</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"flacdsp_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flac_lpc_16_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>coeffs</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pred_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pred_order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr><operator>,</operator> <expr><name>decoded</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>SUINT</name></type> <name>c</name> <init>= <expr><name><name>coeffs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SUINT</name></type> <name>d</name> <init>= <expr><name><name>decoded</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>s0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>s1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pred_order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>s0</name> <operator>+=</operator> <name>c</name><operator>*</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>decoded</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>c</name><operator>*</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>s0</name> <operator>+=</operator> <name>c</name><operator>*</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>decoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><operator>(</operator><name>s0</name> <operator>&gt;&gt;</operator> <name>qlevel</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>s1</name> <operator>+=</operator> <name>c</name><operator>*</operator><name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>decoded</name><index>[<expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><operator>(</operator><name>s1</name> <operator>&gt;&gt;</operator> <name>qlevel</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pred_order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <operator>(</operator><name>SUINT</name><operator>)</operator><name><name>decoded</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>decoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>decoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>sum</name> <operator>&gt;&gt;</operator> <name>qlevel</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>flac_lpc_32_c</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>decoded</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>coeffs</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>pred_order</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>qlevel</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>pred_order</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>decoded</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>pred_order</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>coeffs</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>decoded</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>decoded</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+=</operator> <name>sum</name> <operator>&gt;&gt;</operator> <name>qlevel</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>void</name></type> <name>ff_flacdsp_init</name><parameter_list>(<parameter><decl><type><name>FLACDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>bps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lpc16</name></name> <operator>=</operator> <name>flac_lpc_16_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lpc32</name></name> <operator>=</operator> <name>flac_lpc_32_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lpc16_encode</name></name> <operator>=</operator> <name>flac_lpc_encode_c_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>lpc32_encode</name></name> <operator>=</operator> <name>flac_lpc_encode_c_32</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>fmt</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_indep_c_32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ls_c_32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_rs_c_32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ms_c_32</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_indep_c_32p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ls_c_32p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_rs_c_32p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ms_c_32p</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_indep_c_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ls_c_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_rs_c_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ms_c_16</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_indep_c_16p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ls_c_16p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_rs_c_16p</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>decorrelate</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>flac_decorrelate_ms_c_16p</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_flacdsp_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_flacdsp_init_x86</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

</unit>
