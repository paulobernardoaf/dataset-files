<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vaapi_encode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_encode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>picture_type_name</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"IDR"</literal></expr>, <expr><literal type="string">"I"</literal></expr>, <expr><literal type="string">"P"</literal></expr>, <expr><literal type="string">"B"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_make_packed_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>bit_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VABufferID</name></type> <name>param_buffer</name></decl>, <decl><type ref="prev"/><name>data_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VABufferID</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncPackedHeaderParameterBuffer</name></type> <name>params</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>,

<expr><operator>.</operator><name>bit_length</name> <operator>=</operator> <name>bit_len</name></expr>,

<expr><operator>.</operator><name>has_emulation_bytes</name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name>VAEncPackedHeaderParameterBufferType</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create parameter buffer "</literal>

<literal type="string">"for packed header (type %d): %d (%s).\n"</literal></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>param_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name>VAEncPackedHeaderDataBufferType</name></expr></argument>,

<argument><expr><operator>(</operator><name>bit_len</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create data buffer "</literal>

<literal type="string">"for packed header (type %d): %d (%s).\n"</literal></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>data_buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Packed header buffer (%d) is %#x/%#x "</literal>

<literal type="string">"(%zu bits).\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>param_buffer</name></expr></argument>, <argument><expr><name>data_buffer</name></expr></argument>, <argument><expr><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_make_param_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VABufferID</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VABufferID</name></type> <name>buffer</name></decl>;</decl_stmt>

<expr_stmt><expr><name>tmp</name> <operator>=</operator> <call><name>av_realloc_array</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tmp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tmp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create parameter buffer "</literal>

<literal type="string">"(type %d): %d (%s).\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Param buffer (%d) is %#x.\n"</literal></expr></argument>,

<argument><expr><name>type</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_make_misc_param_buffer</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncMiscParameterBuffer</name></type> <name>header</name> <init>= <expr><block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>buffer_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>buffer_size</name> <operator>&lt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>vaapi_encode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAEncMiscParameterBufferType</name></expr></argument>,

<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>buffer_size</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_wait</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_issued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_complete</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Sync to pic %"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name><literal type="string">" "</literal>

<literal type="string">"(input surface %#x).\n"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaSyncSurface</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to sync to picture completion: "</literal>

<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_complete</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_issue</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>MAX_PARAM_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bit_len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>av_unused</name> <name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Issuing encode for pic %"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name><literal type="string">" "</literal>

<literal type="string">"as type %s.\n"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>,

<argument><expr><name><name>picture_type_name</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"No reference pictures.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Refers to:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">" %"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>display_order</name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>encode_order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">".\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>encode_issued</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>encode_issued</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Input surface is %#x.\n"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>recon_image</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>recon_image</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_get_buffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames_ref</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>recon_image</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>recon_image</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Recon surface is %#x.\n"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name></name> <operator>=</operator> <call><name>av_buffer_pool_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_buffer_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <operator>(</operator><name>VABufferID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Output buffer is %#x.\n"</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_params_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_sequence_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAEncSequenceParameterBufferType</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sequence_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_global_params</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_misc_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_params_type</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_params</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_params_size</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_picture_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_picture_params</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise picture "</literal>

<literal type="string">"parameters: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAEncPictureParameterBufferType</name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_SEQUENCE</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_sequence_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_sequence_header</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write per-sequence "</literal>

<literal type="string">"header: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_packed_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sequence_header_type</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_PICTURE</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_picture_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_picture_header</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write per-picture "</literal>

<literal type="string">"header: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_packed_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_header_type</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_extra_buffer</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_extra_buffer</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write extra "</literal>

<literal type="string">"buffer %d: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_MISC</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_extra_header</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt>

<expr_stmt><expr><name>bit_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_extra_header</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>AVERROR_EOF</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write extra "</literal>

<literal type="string">"header %d: %d.\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_packed_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>type</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rounding</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slices</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>row_size</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>rounding</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rounding</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>rounding</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rounding</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounding</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>row_size</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>rounding</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>row_size</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounding</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>row_size</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rounding</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>rounding</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>row_size</name> <operator>+=</operator> <name>rounding</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>slice</name> <operator>=</operator> <operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>row_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>prev</name> <init>= <expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>row_start</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>row_start</name></name> <operator>+</operator> <name><name>prev</name><operator>-&gt;</operator><name>row_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name> <operator>=</operator> <name><name>prev</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator> <name><name>prev</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>block_size</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>row_size</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_cols</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Slice %d: %d-%d (%d rows), "</literal>

<literal type="string">"%d-%d (%d blocks).\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>row_start</name></name></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>row_start</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>row_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>row_size</name></name></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name></expr></argument>, <argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name> <operator>+</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_size</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>block_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>slice_params_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>slice</name><operator>-&gt;</operator><name>codec_slice_params</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>slice_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>slice</name><operator>-&gt;</operator><name>codec_slice_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_slice_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_slice_params</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise slice "</literal>

<literal type="string">"parameters: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_SLICE</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_slice_header</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bit_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_slice_header</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>slice</name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write per-slice "</literal>

<literal type="string">"header: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_packed_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>slice_header_type</name></name></expr></argument>,

<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_slice_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAEncSliceParameterBufferType</name></expr></argument>,

<argument><expr><name><name>slice</name><operator>-&gt;</operator><name>codec_slice_params</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>slice_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>sd</name> <operator>=</operator> <call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name></expr></argument>,

<argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>roi_allowed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVRegionOfInterest</name> <modifier>*</modifier></type><name>roi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>roi_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncMiscParameterBufferROI</name></type> <name>param_roi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_roi</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>roi_size</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>self_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>roi_size</name> <operator>&amp;&amp;</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>%</operator> <name>roi_size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>nb_roi</name> <operator>=</operator> <name><name>sd</name><operator>-&gt;</operator><name>size</name></name> <operator>/</operator> <name>roi_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_roi</name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>roi_max_regions</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"More ROIs set than "</literal>

<literal type="string">"supported by driver (%d &gt; %d).\n"</literal></expr></argument>,

<argument><expr><name>nb_roi</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_max_regions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb_roi</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>roi_max_regions</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>roi</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>nb_roi</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>pic</name><operator>-&gt;</operator><name>roi</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>roi</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_roi</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>roi</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>AVRegionOfInterest</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>sd</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name>roi_size</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>num</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>roi_quant_range</name></name> <operator>/</operator> <name><name>roi</name><operator>-&gt;</operator><name>qoffset</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"ROI: (%d,%d)-(%d,%d) -&gt; %+d.\n"</literal></expr></argument>,

<argument><expr><name><name>roi</name><operator>-&gt;</operator><name>top</name></name></expr></argument>, <argument><expr><name><name>roi</name><operator>-&gt;</operator><name>left</name></name></expr></argument>, <argument><expr><name><name>roi</name><operator>-&gt;</operator><name>bottom</name></name></expr></argument>, <argument><expr><name><name>roi</name><operator>-&gt;</operator><name>right</name></name></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>roi</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>VAEncROI</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>roi_rectangle</name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>x</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>left</name></name></expr>,

<expr><operator>.</operator><name>y</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>top</name></name></expr>,

<expr><operator>.</operator><name>width</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>right</name></name> <operator>-</operator> <name><name>roi</name><operator>-&gt;</operator><name>left</name></name></expr>,

<expr><operator>.</operator><name>height</name> <operator>=</operator> <name><name>roi</name><operator>-&gt;</operator><name>bottom</name></name> <operator>-</operator> <name><name>roi</name><operator>-&gt;</operator><name>top</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>roi_value</name> <operator>=</operator> <call><name>av_clip_int8</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>,

}</block></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>param_roi</name> <operator>=</operator> <operator>(</operator><name>VAEncMiscParameterBufferROI</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>num_roi</name> <operator>=</operator> <name>nb_roi</name></expr>,

<expr><operator>.</operator><name>max_delta_qp</name> <operator>=</operator> <name>INT8_MAX</name></expr>,

<expr><operator>.</operator><name>min_delta_qp</name> <operator>=</operator> <name>INT8_MIN</name></expr>,

<expr><operator>.</operator><name>roi</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>roi</name></name></expr>,

<expr><operator>.</operator><name><name>roi_flags</name><operator>.</operator><name>bits</name><operator>.</operator><name>roi_value_is_qp_delta</name></name> <operator>=</operator> <literal type="number">1</literal></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_make_misc_param_buffer</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>VAEncMiscParameterTypeROI</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>param_roi</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>param_roi</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaBeginPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_surface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to begin picture encode issue: "</literal>

<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_with_picture</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaRenderPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to upload encode parameters: "</literal>

<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail_with_picture</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaEndPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to end picture encode issue: "</literal>

<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_VAAPI_1</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator>

<name>AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<goto>goto <name>fail_at_end</name>;</goto></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>CONFIG_VAAPI_1</name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>driver_quirks</name></name> <operator>&amp;</operator>

<name>AV_VAAPI_DRIVER_QUIRK_RENDER_PARAM_BUFFERS</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to destroy "</literal>

<literal type="string">"param buffer %#x: %d (%s).\n"</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_issued</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail_with_picture</name>:</label>

<expr_stmt><expr><call><name>vaEndPicture</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_param_buffers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>priv_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_slice_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<label><name>fail_at_end</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>roi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>recon_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_output</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VACodedBufferSegment</name> <modifier>*</modifier></type><name>buf_list</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>total_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_wait</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>buf_list</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaMapBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>buf_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to map output buffers: "</literal>

<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>buf</name> <operator>=</operator> <name>buf_list</name></expr>;</init> <condition><expr><name>buf</name></expr>;</condition> <incr><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>total_size</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><name>pkt</name></expr></argument>, <argument><expr><name>total_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail_mapped</name>;</goto></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>buf</name> <operator>=</operator> <name>buf_list</name></expr>;</init> <condition><expr><name>buf</name></expr>;</condition> <incr><expr><name>buf</name> <operator>=</operator> <name><name>buf</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Output buffer: %u bytes "</literal>

<literal type="string">"(status %08x).\n"</literal></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>+=</operator> <name><name>buf</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaUnmapBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to unmap output buffers: "</literal>

<literal type="string">"%d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Output read for pic %"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name><literal type="string">".\n"</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail_mapped</name>:</label>

<expr_stmt><expr><call><name>vaUnmapBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_discard</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vaapi_encode_wait</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Discard output for pic "</literal>

<literal type="string">"%"</literal><name>PRId64</name><literal type="string">"/%"</literal><name>PRId64</name><literal type="string">".\n"</literal></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>output_buffer_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>vaapi_encode_alloc</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pic</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_priv_data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_priv_data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>input_surface</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<return>return <expr><name>pic</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_free</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_issued</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vaapi_encode_discard</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>priv_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>codec_slice_params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>recon_image</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>param_buffers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name> <operator>==</operator> <name>VA_INVALID_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>priv_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pic</name><operator>-&gt;</operator><name>roi</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_encode_add_ref</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>target</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>is_ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_dpb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>refs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>is_ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pic</name> <operator>!=</operator> <name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name> <operator>&lt;</operator> <name>MAX_PICTURE_REFERENCES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>refs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_dpb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name> <operator>&lt;</operator> <name>MAX_DPB_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>refs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>refs</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>refs</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>refs</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_encode_remove_refs</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>ref_removed</name><index>[<expr><name>level</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ref_count</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ref_count</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_dpb_pics</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>--</operator><name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ref_count</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>dpb</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name><name>ref_count</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>prev</name></name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>prev</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name><name>pic</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>level</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><name>level</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>ref_removed</name><index>[<expr><name>level</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_encode_set_b_pictures</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>start</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>end</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>current_depth</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier><modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>start</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>start</name> <operator>!=</operator> <name>end</name> <operator>&amp;&amp;</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name></name> <operator>!=</operator> <name>end</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_depth</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name> <operator>||</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>pic</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pic</name> <operator>==</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PICTURE_TYPE_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>b_depth</name></name> <operator>=</operator> <name>current_depth</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>end</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>prev</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name></name></expr>;</init> <condition><expr><name>pic</name> <operator>!=</operator> <name>end</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>start</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><literal type="number">2</literal> <operator>*</operator> <name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PICTURE_TYPE_B</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>b_depth</name></name> <operator>=</operator> <name>current_depth</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>is_reference</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ref</name> <operator>=</operator> <name><name>end</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</init> <condition><expr><name>ref</name></expr>;</condition> <incr><expr><name>ref</name> <operator>=</operator> <name><name>ref</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vaapi_encode_set_b_pictures</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>,

<argument><expr><name>current_depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>next</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vaapi_encode_set_b_pictures</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>end</name></expr></argument>, <argument><expr><name>next</name></expr></argument>,

<argument><expr><name>current_depth</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_pick_next</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier><modifier>*</modifier></type><name>pic_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>start</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>b_counter</name></decl>, <decl><type ref="prev"/><name>closed_gop_end</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>;</init> <condition><expr><name>pic</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_issued</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PICTURE_TYPE_B</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>encode_issued</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>pic</name><operator>-&gt;</operator><name>nb_refs</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>pic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick B-picture at depth %d to "</literal>

<literal type="string">"encode next.\n"</literal></expr></argument>, <argument><expr><name><name>pic</name><operator>-&gt;</operator><name>b_depth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pic_out</name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b_counter</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>closed_gop_end</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>closed_gop</name></name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>idr_counter</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_per_idr</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>;</init> <condition><expr><name>pic</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_issued</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>start</name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>force_idr</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_counter</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_counter</name></name> <operator>+</operator> <name>b_counter</name> <operator>+</operator> <name>closed_gop_end</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>next</name> <operator>&amp;&amp;</operator> <name><name>next</name><operator>-&gt;</operator><name>force_idr</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>++</operator><name>b_counter</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>end_of_stream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>--</operator><name>b_counter</name></expr>;</expr_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_end</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_issued</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick nothing to encode next - "</literal>

<literal type="string">"need more input for reference pictures.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name> <operator>&lt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>decode_delay</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>end_of_stream</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick nothing to encode next - "</literal>

<literal type="string">"need more input for timestamps.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>force_idr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick forced IDR-picture to "</literal>

<literal type="string">"encode next.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PICTURE_TYPE_IDR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idr_counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_counter</name></name> <operator>+</operator> <name>b_counter</name> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>idr_counter</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_per_idr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick new-GOP IDR-picture to "</literal>

<literal type="string">"encode next.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PICTURE_TYPE_IDR</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idr_counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick new-GOP I-picture to "</literal>

<literal type="string">"encode next.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PICTURE_TYPE_I</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>idr_counter</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_counter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_counter</name></name> <operator>+</operator> <name>b_counter</name> <operator>+</operator> <name>closed_gop_end</name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick group-end P-picture to "</literal>

<literal type="string">"encode next.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Pick normal P-picture to "</literal>

<literal type="string">"encode next.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>PICTURE_TYPE_P</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_counter</name></name> <operator>+=</operator> <literal type="number">1</literal> <operator>+</operator> <name>b_counter</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>is_reference</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>pic_out</name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>PICTURE_TYPE_IDR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>start</name></expr></argument>,

<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name></expr></argument>,

<argument><expr><name>b_counter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_ref</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_prev</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>next_prev</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>--</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_prev</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b_counter</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vaapi_encode_set_b_pictures</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_prev</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>next_prev</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>next_prev</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_clear_old</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>prev</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>;</init> <condition><expr><name>pic</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_complete</name></name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vaapi_encode_remove_refs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>;</init> <condition><expr><name>pic</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_complete</name></name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>vaapi_encode_remove_refs</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>;</init> <condition><expr><name>pic</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_complete</name></name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>ref_count</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>ref_removed</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>pic</name><operator>-&gt;</operator><name>ref_removed</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>prev</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name> <operator>=</operator> <name>next</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>vaapi_encode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>prev</name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_check_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>frame</name><operator>-&gt;</operator><name>crop_top</name></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>crop_bottom</name></name> <operator>||</operator>

<name><name>frame</name><operator>-&gt;</operator><name>crop_left</name></name> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>crop_right</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>crop_warned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Cropping information on input "</literal>

<literal type="string">"frames ignored due to lack of API support.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>crop_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>roi_allowed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVFrameSideData</name> <modifier>*</modifier></type><name>sd</name> <init>=

<expr><call><name>av_frame_get_side_data</name><argument_list>(<argument><expr><name>frame</name></expr></argument>, <argument><expr><name>AV_FRAME_DATA_REGIONS_OF_INTEREST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sd</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"ROI side data on input "</literal>

<literal type="string">"frames ignored due to lack of driver support.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_warned</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_encode_send_frame</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Input frame: %ux%u (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><name><name>frame</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_check_frame</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <call><name>vaapi_encode_alloc</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pic</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_frame_ref</name><argument_list>(<argument><expr><name><name>pic</name><operator>-&gt;</operator><name>input_image</name></name></expr></argument>, <argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>frame</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>force_idr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>input_surface</name></name> <operator>=</operator> <operator>(</operator><name>VASurfaceID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name><name>frame</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>pts</name></name> <operator>=</operator> <name><name>frame</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>first_pts</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name> <operator>==</operator> <name><name>ctx</name><operator>-&gt;</operator><name>decode_delay</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dts_pts_diff</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>first_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>output_delay</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ts_ring</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name> <operator>%</operator> <operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_delay</name></name><operator>)</operator></expr>]</index></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_end</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_end</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>pic_end</name></name> <operator>=</operator> <name>pic</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>end_of_stream</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_order</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>decode_delay</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>dts_pts_diff</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_end</name><operator>-&gt;</operator><name>pts</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>first_pts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>vaapi_encode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_vaapi_encode_receive_packet</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>pkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>end_of_stream</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EAGAIN</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pic</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_pick_next</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>encode_order</name></name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_issue</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Encode failed: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_output</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>, <argument><expr><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Output failed: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>output_delay</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>decode_delay</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>ts_ring</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr>]</index></name> <operator>&lt;</operator> <name>INT64_MIN</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dts_pts_diff</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ts_ring</name><index>[<expr><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr>]</index></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>dts_pts_diff</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>ts_ring</name><index>[<expr><operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>decode_delay</name></name><operator>)</operator> <operator>%</operator>

<operator>(</operator><literal type="number">3</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>output_delay</name></name><operator>)</operator></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Output packet: pts %"</literal><name>PRId64</name><literal type="string">" dts %"</literal><name>PRId64</name><literal type="string">".\n"</literal></expr></argument>,

<argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>pkt</name><operator>-&gt;</operator><name>dts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_order</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>encode_order</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_clear_old</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>vaapi_encode_add_global_param</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_global_params</name></name> <operator>&lt;</operator> <name>MAX_GLOBAL_PARAMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_params_type</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_global_params</name></name></expr>]</index></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_params</name> <index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_global_params</name></name></expr>]</index></name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>global_params_size</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_global_params</name></name></expr>]</index></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name><name>ctx</name><operator>-&gt;</operator><name>nb_global_params</name></name></expr>;</expr_stmt>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeRTFormat</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>value</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>depth</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_components</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma_w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>log2_chroma_h</name></decl>;</decl_stmt>

}</block></struct></type> <name>VAAPIEncodeRTFormat</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeRTFormat</name></type> <name><name>vaapi_encode_rt_formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"YUV400"</literal></expr>, <expr><name>VA_RT_FORMAT_YUV400</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, }</block></expr>,

<expr><block>{ <expr><literal type="string">"YUV420"</literal></expr>, <expr><name>VA_RT_FORMAT_YUV420</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YUV422"</literal></expr>, <expr><name>VA_RT_FORMAT_YUV422</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YUV444"</literal></expr>, <expr><name>VA_RT_FORMAT_YUV444</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YUV411"</literal></expr>, <expr><name>VA_RT_FORMAT_YUV411</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">38</literal><operator>,</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><literal type="string">"YUV420_10"</literal></expr>, <expr><name>VA_RT_FORMAT_YUV420_10BPP</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAEntrypoint</name></type> <name><name>vaapi_encode_entrypoints_normal</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VAEntrypointEncSlice</name></expr>,

<expr><name>VAEntrypointEncPicture</name></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">39</literal><operator>,</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><name>VAEntrypointEncSliceLP</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">39</literal><operator>,</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAEntrypoint</name></type> <name><name>vaapi_encode_entrypoints_low_power</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VAEntrypointEncSliceLP</name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_profile_entrypoint</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAProfile</name> <modifier>*</modifier></type><name>va_profiles</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEntrypoint</name> <modifier>*</modifier></type><name>va_entrypoints</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VAEntrypoint</name> <modifier>*</modifier></type><name>usable_entrypoints</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeProfile</name> <modifier>*</modifier></type><name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name>rt_format_attr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeRTFormat</name> <modifier>*</modifier></type><name>rt_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>profile_string</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>entrypoint_string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>, <decl><type ref="prev"/><name>depth</name></decl>, <decl><type ref="prev"/><name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>low_power</name></name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">39</literal><operator>,</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>usable_entrypoints</name> <operator>=</operator> <name>vaapi_encode_entrypoints_low_power</name></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Low-power encoding is not "</literal>

<literal type="string">"supported with this VAAPI version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>usable_entrypoints</name> <operator>=</operator> <name>vaapi_encode_entrypoints_normal</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid input pixfmt (%d).\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>depth</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>depth</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>comp</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>depth</name> <operator>!=</operator> <name>depth</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid input pixfmt (%s).\n"</literal></expr></argument>,

<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Input surface format is %s.\n"</literal></expr></argument>,

<argument><expr><name><name>desc</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vaMaxNumProfiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>va_profiles</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VAProfile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>va_profiles</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryConfigProfiles</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>va_profiles</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query profiles: %d (%s).\n"</literal></expr></argument>,

<argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>profiles</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>profiles</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>av_profile</name> <operator>!=</operator>

<name>FF_PROFILE_UNKNOWN</name><operator>)</operator></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>profile</name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>profiles</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>depth</name> <operator>!=</operator> <name><name>profile</name><operator>-&gt;</operator><name>depth</name></name> <operator>||</operator>

<name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>!=</operator> <name><name>profile</name><operator>-&gt;</operator><name>nb_components</name></name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>desc</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>!=</operator> <name><name>profile</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>||</operator>

<name><name>desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>!=</operator> <name><name>profile</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name><name>profile</name><operator>-&gt;</operator><name>av_profile</name></name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>!=</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>profile_string</name> <operator>=</operator> <call><name>vaProfileStr</name><argument_list>(<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>profile_string</name> <operator>=</operator> <literal type="string">"(no profile names)"</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>va_profiles</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name><name>profile</name><operator>-&gt;</operator><name>va_profile</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Compatible profile %s (%d) "</literal>

<literal type="string">"is not supported by driver.\n"</literal></expr></argument>, <argument><expr><name>profile_string</name></expr></argument>,

<argument><expr><name><name>profile</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name>profile</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>profile</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No usable encoding profile found.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>profile</name><operator>-&gt;</operator><name>av_profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name> <operator>=</operator> <name><name>profile</name><operator>-&gt;</operator><name>va_profile</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using VAAPI profile %s (%d).\n"</literal></expr></argument>,

<argument><expr><name>profile_string</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>vaMaxNumEntrypoints</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>va_entrypoints</name> <operator>=</operator> <call><name>av_malloc_array</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VAEntrypoint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>va_entrypoints</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaQueryConfigEntrypoints</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name>va_entrypoints</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query entrypoints for "</literal>

<literal type="string">"profile %s (%d): %d (%s).\n"</literal></expr></argument>, <argument><expr><name>profile_string</name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>usable_entrypoints</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>va_entrypoints</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name><name>usable_entrypoints</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>usable_entrypoints</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No usable encoding entrypoint found "</literal>

<literal type="string">"for profile %s (%d).\n"</literal></expr></argument>, <argument><expr><name>profile_string</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name> <operator>=</operator> <name><name>va_entrypoints</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><name>entrypoint_string</name> <operator>=</operator> <call><name>vaEntrypointStr</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>entrypoint_string</name> <operator>=</operator> <literal type="string">"(no entrypoint names)"</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using VAAPI entrypoint %s (%d).\n"</literal></expr></argument>,

<argument><expr><name>entrypoint_string</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_encode_rt_formats</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rt_format</name> <operator>=</operator> <operator>&amp;</operator><name><name>vaapi_encode_rt_formats</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt_format</name><operator>-&gt;</operator><name>depth</name></name> <operator>==</operator> <name>depth</name> <operator>&amp;&amp;</operator>

<name><name>rt_format</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>==</operator> <name><name>profile</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>&amp;&amp;</operator>

<name><name>rt_format</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>==</operator> <name><name>profile</name><operator>-&gt;</operator><name>log2_chroma_w</name></name> <operator>&amp;&amp;</operator>

<name><name>rt_format</name><operator>-&gt;</operator><name>log2_chroma_h</name></name> <operator>==</operator> <name><name>profile</name><operator>-&gt;</operator><name>log2_chroma_h</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_encode_rt_formats</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No usable render target format "</literal>

<literal type="string">"found for profile %s (%d) entrypoint %s (%d).\n"</literal></expr></argument>,

<argument><expr><name>profile_string</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name>entrypoint_string</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rt_format_attr</name> <operator>=</operator> <operator>(</operator><name>VAConfigAttrib</name><operator>)</operator> <block>{ <expr><name>VAConfigAttribRTFormat</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rt_format_attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query RT format "</literal>

<literal type="string">"config attribute: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <name>AVERROR_EXTERNAL</name></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rt_format_attr</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RT format config attribute not "</literal>

<literal type="string">"supported by driver: assuming surface RT format %s "</literal>

<literal type="string">"is valid.\n"</literal></expr></argument>, <argument><expr><name><name>rt_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>rt_format_attr</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <name><name>rt_format</name><operator>-&gt;</operator><name>value</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Surface RT format %s not supported "</literal>

<literal type="string">"by driver for encoding profile %s (%d) entrypoint %s (%d).\n"</literal></expr></argument>,

<argument><expr><name><name>rt_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>profile_string</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name>entrypoint_string</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using VAAPI render target "</literal>

<literal type="string">"format %s (%#x).\n"</literal></expr></argument>, <argument><expr><name><name>rt_format</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>rt_format</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>config_attributes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_config_attributes</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>VAConfigAttrib</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VAConfigAttribRTFormat</name></expr>,

<expr><operator>.</operator><name>value</name> <operator>=</operator> <name><name>rt_format</name><operator>-&gt;</operator><name>value</name></name></expr>,

}</block></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>va_profiles</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>va_entrypoints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeRCMode</name></type> <name><name>vaapi_encode_rc_modes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>, 

<expr><block>{ <expr><name>RC_MODE_CQP</name></expr>, <expr><literal type="string">"CQP"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VA_RC_CQP</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>RC_MODE_CBR</name></expr>, <expr><literal type="string">"CBR"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VA_RC_CBR</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>RC_MODE_VBR</name></expr>, <expr><literal type="string">"VBR"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VA_RC_VBR</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><name>RC_MODE_ICQ</name></expr>, <expr><literal type="string">"ICQ"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VA_RC_ICQ</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{ <expr><name>RC_MODE_ICQ</name></expr>, <expr><literal type="string">"ICQ"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><block>{ <expr><name>RC_MODE_QVBR</name></expr>, <expr><literal type="string">"QVBR"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VA_RC_QVBR</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>RC_MODE_AVBR</name></expr>, <expr><literal type="string">"AVBR"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>VA_RC_AVBR</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr><block>{ <expr><name>RC_MODE_QVBR</name></expr>, <expr><literal type="string">"QVBR"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>RC_MODE_AVBR</name></expr>, <expr><literal type="string">"AVBR"</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_init_rate_control</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>supported_va_rc_modes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>VAAPIEncodeRCMode</name> <modifier>*</modifier></type><name>rc_mode</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>rc_bits_per_second</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_target_percentage</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_window_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rc_quality</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>hrd_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>hrd_initial_buffer_fullness</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>fr_num</name></decl>, <decl><type ref="prev"/><name>fr_den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name>rc_attr</name> <init>= <expr><block>{ <expr><name>VAConfigAttribRateControl</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>supported_rc_modes_string</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>rc_attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query rate control "</literal>

<literal type="string">"config attribute: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_attr</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Driver does not report any "</literal>

<literal type="string">"supported rate control modes: assuming CQP only.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>supported_va_rc_modes</name> <operator>=</operator> <name>VA_RC_CQP</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>supported_rc_modes_string</name></expr></argument>, <argument><expr><literal type="string">"unknown"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>supported_rc_modes_string</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>supported_rc_modes_string</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>first</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>supported_va_rc_modes</name> <operator>=</operator> <name><name>rc_attr</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>vaapi_encode_rc_modes</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>rc_mode</name> <operator>=</operator> <operator>&amp;</operator><name><name>vaapi_encode_rc_modes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>supported_va_rc_modes</name> <operator>&amp;</operator> <name><name>rc_mode</name><operator>-&gt;</operator><name>va_mode</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">", "</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>rc_mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>first</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>str</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>res</name></expr>;</expr_stmt>

<expr_stmt><expr><name>str</name> <operator>+=</operator> <name>res</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Driver supports RC modes %s.\n"</literal></expr></argument>,

<argument><expr><name>supported_rc_modes_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRY_RC_MODE</name><parameter_list>(<parameter><type><name>mode</name></type></parameter>, <parameter><type><name>fail</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { rc_mode = &amp;vaapi_encode_rc_modes[mode]; if (!(rc_mode-&gt;va_mode &amp; supported_va_rc_modes)) { if (fail) { av_log(avctx, AV_LOG_ERROR, "Driver does not support %s " "RC mode (supported modes: %s).\n", rc_mode-&gt;name, supported_rc_modes_string); return AVERROR(EINVAL); } av_log(avctx, AV_LOG_DEBUG, "Driver does not support %s " "RC mode.\n", rc_mode-&gt;name); rc_mode = NULL; } else { goto rc_mode_found; } } while (0)</cpp:value></cpp:define>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>explicit_rc_mode</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>explicit_rc_mode</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>explicit_qp</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_CQP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_CONSTANT_QUALITY_ONLY</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_CQP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_QSCALE</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_CQP</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_QVBR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_ICQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_CQP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>==</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_CBR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_AVBR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_VBR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_CBR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_ICQ</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>TRY_RC_MODE</name><argument_list>(<argument><expr><name>RC_MODE_CQP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support any "</literal>

<literal type="string">"RC mode compatible with selected options "</literal>

<literal type="string">"(supported modes: %s).\n"</literal></expr></argument>, <argument><expr><name>supported_rc_modes_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>rc_mode_found</name>:</label>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>bitrate</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Bitrate must be set for %s "</literal>

<literal type="string">"RC mode.\n"</literal></expr></argument>, <argument><expr><name><name>rc_mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>RC_MODE_AVBR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc_bits_per_second</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc_target_percentage</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc_window_size</name> <operator>=</operator> <ternary><condition><expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr> </then><else>: <expr><literal type="number">60</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>maxrate</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&lt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid bitrate settings: "</literal>

<literal type="string">"bitrate (%"</literal><name>PRId64</name><literal type="string">") must not be greater than "</literal>

<literal type="string">"maxrate (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc_bits_per_second</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc_target_percentage</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>*</operator> <literal type="number">100</literal><operator>)</operator> <operator>/</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rc_bits_per_second</name> <operator>=</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc_target_percentage</name> <operator>=</operator> <literal type="number">50</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Max bitrate is ignored "</literal>

<literal type="string">"in %s RC mode.\n"</literal></expr></argument>, <argument><expr><name><name>rc_mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>rc_bits_per_second</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>rc_target_percentage</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rc_bits_per_second</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rc_target_percentage</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>explicit_qp</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc_quality</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>explicit_qp</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc_quality</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>global_quality</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rc_quality</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>default_quality</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No quality level set; "</literal>

<literal type="string">"using default (%d).\n"</literal></expr></argument>, <argument><expr><name>rc_quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>rc_quality</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>hrd</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hrd_buffer_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hrd_buffer_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_max_rate</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>hrd_buffer_size</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>bit_rate</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name> <operator>&gt;</operator> <name>hrd_buffer_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid RC buffer settings: "</literal>

<literal type="string">"must have initial buffer size (%d) &lt;= "</literal>

<literal type="string">"buffer size (%"</literal><name>PRId64</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr></argument>, <argument><expr><name>hrd_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hrd_initial_buffer_fullness</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>hrd_initial_buffer_fullness</name> <operator>=</operator> <name>hrd_buffer_size</name> <operator>*</operator> <literal type="number">3</literal> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>rc_window_size</name> <operator>=</operator> <operator>(</operator><name>hrd_buffer_size</name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator> <operator>/</operator> <name>rc_bits_per_second</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>rc_initial_buffer_occupancy</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Buffering settings are ignored "</literal>

<literal type="string">"in %s RC mode.\n"</literal></expr></argument>, <argument><expr><name><name>rc_mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>hrd_buffer_size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hrd_initial_buffer_fullness</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>mode</name></name> <operator>!=</operator> <name>RC_MODE_AVBR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rc_window_size</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rc_bits_per_second</name> <operator>&gt;</operator> <name>UINT32_MAX</name> <operator>||</operator>

<name>hrd_buffer_size</name> <operator>&gt;</operator> <name>UINT32_MAX</name> <operator>||</operator>

<name>hrd_initial_buffer_fullness</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"RC parameters of 2^32 or "</literal>

<literal type="string">"greater are not supported by VAAPI.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_mode</name></name> <operator>=</operator> <name>rc_mode</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_quality</name></name> <operator>=</operator> <name>rc_quality</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>=</operator> <name><name>rc_mode</name><operator>-&gt;</operator><name>va_mode</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name> <operator>=</operator> <name>rc_bits_per_second</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RC mode: %s.\n"</literal></expr></argument>, <argument><expr><name><name>rc_mode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_attr</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>config_attributes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_config_attributes</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>VAConfigAttrib</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VAConfigAttribRateControl</name></expr>,

<expr><operator>.</operator><name>value</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name></expr>,

}</block></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>quality</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RC quality: %d.\n"</literal></expr></argument>, <argument><expr><name>rc_quality</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>va_mode</name></name> <operator>!=</operator> <name>VA_RC_CQP</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>mode</name></name> <operator>==</operator> <name>RC_MODE_AVBR</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RC target: %"</literal><name>PRId64</name><literal type="string">" bps "</literal>

<literal type="string">"converging in %d frames with %d%% accuracy.\n"</literal></expr></argument>,

<argument><expr><name>rc_bits_per_second</name></expr></argument>, <argument><expr><name>rc_window_size</name></expr></argument>,

<argument><expr><name>rc_target_percentage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>bitrate</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RC target: %d%% of "</literal>

<literal type="string">"%"</literal><name>PRId64</name><literal type="string">" bps over %d ms.\n"</literal></expr></argument>, <argument><expr><name>rc_target_percentage</name></expr></argument>,

<argument><expr><name>rc_bits_per_second</name></expr></argument>, <argument><expr><name>rc_window_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_params</name></name> <operator>=</operator> <operator>(</operator><name>VAEncMiscParameterRateControl</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>bits_per_second</name> <operator>=</operator> <name>rc_bits_per_second</name></expr>,

<expr><operator>.</operator><name>target_percentage</name> <operator>=</operator> <name>rc_target_percentage</name></expr>,

<expr><operator>.</operator><name>window_size</name> <operator>=</operator> <name>rc_window_size</name></expr>,

<expr><operator>.</operator><name>initial_qp</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<expr><operator>.</operator><name>min_qp</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmin</name></name> <operator>:</operator> <literal type="number">0</literal><operator>)</operator></expr>,

<expr><operator>.</operator><name>basic_unit_size</name> <operator>=</operator> <literal type="number">0</literal></expr>,

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>ICQ_quality_factor</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>rc_quality</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">51</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>max_qp</name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>?</operator> <name><name>avctx</name><operator>-&gt;</operator><name>qmax</name></name> <operator>:</operator> <literal type="number">0</literal><operator>)</operator></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">3</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr><operator>.</operator><name>quality_factor</name> <operator>=</operator> <name>rc_quality</name></expr>,

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_global_param</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>VAEncMiscParameterTypeRateControl</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc_params</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_params</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rc_mode</name><operator>-&gt;</operator><name>hrd</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RC buffer: %"</literal><name>PRId64</name><literal type="string">" bits, "</literal>

<literal type="string">"initial fullness %"</literal><name>PRId64</name><literal type="string">" bits.\n"</literal></expr></argument>,

<argument><expr><name>hrd_buffer_size</name></expr></argument>, <argument><expr><name>hrd_initial_buffer_fullness</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hrd_params</name></name> <operator>=</operator> <operator>(</operator><name>VAEncMiscParameterHRD</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>initial_buffer_fullness</name> <operator>=</operator> <name>hrd_initial_buffer_fullness</name></expr>,

<expr><operator>.</operator><name>buffer_size</name> <operator>=</operator> <name>hrd_buffer_size</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_global_param</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>VAEncMiscParameterTypeHRD</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>hrd_params</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hrd_params</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fr_den</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr_num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fr_den</name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><literal type="number">65535</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"RC framerate: %d/%d (%.2f fps).\n"</literal></expr></argument>,

<argument><expr><name>fr_num</name></expr></argument>, <argument><expr><name>fr_den</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>fr_num</name> <operator>/</operator> <name>fr_den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_params</name></name> <operator>=</operator> <operator>(</operator><name>VAEncMiscParameterFrameRate</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>framerate</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>fr_den</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <name>fr_num</name></expr>,

}</block></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">40</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<expr_stmt><expr><call><name>vaapi_encode_add_global_param</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>VAEncMiscParameterTypeFrameRate</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>fr_params</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fr_params</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_init_gop_structure</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name>attr</name> <init>= <expr><block>{ <expr><name>VAConfigAttribEncMaxRefFrames</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>ref_l0</name></decl>, <decl><type ref="prev"/><name>ref_l1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query reference frames "</literal>

<literal type="string">"attribute: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ref_l0</name> <operator>=</operator> <name>ref_l1</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ref_l0</name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>value</name></name> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ref_l1</name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>value</name></name> <operator>&gt;&gt;</operator> <literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_INTRA_ONLY</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using intra frames only.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ref_l0</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support any "</literal>

<literal type="string">"reference frames.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_B_PICTURES</name><operator>)</operator> <operator>||</operator>

<name>ref_l1</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using intra and P-frames "</literal>

<literal type="string">"(supported references: %d / %d).\n"</literal></expr></argument>, <argument><expr><name>ref_l0</name></expr></argument>, <argument><expr><name>ref_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_per_i</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Using intra, P- and B-frames "</literal>

<literal type="string">"(supported references: %d / %d).\n"</literal></expr></argument>, <argument><expr><name>ref_l0</name></expr></argument>, <argument><expr><name>ref_l1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_per_i</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>max_b_frames</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_B_PICTURE_REFERENCES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_b_depth</name></name></expr></argument>,

<argument><expr><call><name>av_log2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_NON_IDR_KEY_PICTURES</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>closed_gop</name></name> <operator>=</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_CLOSED_GOP</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_per_idr</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>idr_interval</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>closed_gop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>gop_per_idr</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_init_slice_structure</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name><name>attr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><block>{ <expr><name>VAConfigAttribEncMaxSlices</name></expr> }</block></expr>,

<expr><block>{ <expr><name>VAConfigAttribEncSliceStructure</name></expr> }</block></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>max_slices</name></decl>, <decl><type ref="prev"/><name>slice_structure</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>req_slices</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>FLAG_SLICE_CONTROL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Multiple slices were requested "</literal>

<literal type="string">"but this codec does not support controlling slices.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_height</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>slice_block_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_cols</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_width</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>slice_block_width</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><name>attr</name></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>attr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query slice "</literal>

<literal type="string">"attributes: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>max_slices</name> <operator>=</operator> <name><name>attr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_structure</name> <operator>=</operator> <name><name>attr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>max_slices</name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name> <operator>||</operator>

<name>slice_structure</name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support encoding "</literal>

<literal type="string">"pictures as multiple slices.\n."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name> <operator>&gt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not enough rows to use "</literal>

<literal type="string">"configured number of slices (%d &lt; %d); using "</literal>

<literal type="string">"maximum.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>req_slices</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>req_slices</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slice_structure</name> <operator>&amp;</operator> <name>VA_ENC_SLICE_STRUCTURE_ARBITRARY_ROWS</name> <operator>||</operator>

<name>slice_structure</name> <operator>&amp;</operator> <name>VA_ENC_SLICE_STRUCTURE_ARBITRARY_MACROBLOCKS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <name>req_slices</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name> <operator>/</operator> <name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>slice_structure</name> <operator>&amp;</operator> <name>VA_ENC_SLICE_STRUCTURE_POWER_OF_TWO_ROWS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>k</name> <operator>*=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><literal type="number">2</literal> <operator>*</operator> <name>k</name> <operator>*</operator> <operator>(</operator><name>req_slices</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name> <operator>+</operator> <name>k</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>slice_structure</name> <operator>&amp;</operator> <name>VA_ENC_SLICE_STRUCTURE_EQUAL_ROWS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support any usable "</literal>

<literal type="string">"slice structure modes (%#x).\n"</literal></expr></argument>, <argument><expr><name>slice_structure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>&gt;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Slice count rounded up to "</literal>

<literal type="string">"%d (from %d) due to driver constraints on slice "</literal>

<literal type="string">"structure.\n"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>slices</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>&gt;</operator> <name>max_slices</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support "</literal>

<literal type="string">"encoding with %d slices (max %"</literal><name>PRIu32</name><literal type="string">").\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>, <argument><expr><name>max_slices</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Encoding pictures with %d slices "</literal>

<literal type="string">"(default size %d block rows).\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_init_packed_headers</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name>attr</name> <init>= <expr><block>{ <expr><name>VAConfigAttribEncPackedHeaders</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query packed headers "</literal>

<literal type="string">"attribute: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support any "</literal>

<literal type="string">"packed headers (wanted %#x).\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support any "</literal>

<literal type="string">"packed headers (none wanted).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>&amp;</operator> <operator>~</operator><name><name>attr</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support some "</literal>

<literal type="string">"wanted packed headers (wanted %#x, found %#x).\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_VERBOSE</name></expr></argument>, <argument><expr><literal type="string">"All wanted packed headers "</literal>

<literal type="string">"available (wanted %#x, found %#x).\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>&amp;</operator> <name><name>attr</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>config_attributes</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_config_attributes</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator>

<operator>(</operator><name>VAConfigAttrib</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>VAConfigAttribEncPackedHeaders</name></expr>,

<expr><operator>.</operator><name>value</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name></expr>,

}</block></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>( <expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_SEQUENCE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_SEQUENCE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Driver does not support packed "</literal>

<literal type="string">"sequence headers, but a global header is requested.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"No global header will be written: "</literal>

<literal type="string">"this may result in a stream which is not usable for some "</literal>

<literal type="string">"purposes (e.g. not muxable to some containers).\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_init_quality</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>,</operator> <literal type="number">36</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name>attr</name> <init>= <expr><block>{ <expr><name>VAConfigAttribEncQualityRange</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quality</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query quality "</literal>

<literal type="string">"config attribute: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quality</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Quality attribute is not "</literal>

<literal type="string">"supported: will use default quality level.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>quality</name> <operator>&gt;</operator> <name><name>attr</name><operator>.</operator><name>value</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Invalid quality level: "</literal>

<literal type="string">"valid range is 0-%d, using %d.\n"</literal></expr></argument>,

<argument><expr><name><name>attr</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>attr</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>quality</name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>quality_params</name></name> <operator>=</operator> <operator>(</operator><name>VAEncMiscParameterBufferQualityLevel</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>quality_level</name> <operator>=</operator> <name>quality</name></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_add_global_param</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>,

<argument><expr><name>VAEncMiscParameterTypeQualityLevel</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>quality_params</name></name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>quality_params</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The encode quality option is "</literal>

<literal type="string">"not supported with this VAAPI version.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_init_roi</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>VA_CHECK_VERSION</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>,</operator> <literal type="number">0</literal><operator>,</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAConfigAttrib</name></type> <name>attr</name> <init>= <expr><block>{ <expr><name>VAConfigAttribEncROI</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaGetConfigAttributes</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>attr</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to query ROI "</literal>

<literal type="string">"config attribute: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>attr</name><operator>.</operator><name>value</name></name> <operator>==</operator> <name>VA_ATTRIB_NOT_SUPPORTED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_allowed</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>VAConfigAttribValEncROI</name></type> <name>roi</name> <init>= <expr><block>{

<expr><operator>.</operator><name>value</name> <operator>=</operator> <name><name>attr</name><operator>.</operator><name>value</name></name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_max_regions</name></name> <operator>=</operator> <name><name>roi</name><operator>.</operator><name>bits</name><operator>.</operator><name>num_roi_regions</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_allowed</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>roi_max_regions</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>==</operator> <name>VA_RC_CQP</name> <operator>||</operator>

<name><name>roi</name><operator>.</operator><name>bits</name><operator>.</operator><name>roi_rc_qp_delta_support</name></name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vaapi_encode_free_output_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VABufferID</name></type> <name>buffer_id</name></decl>;</decl_stmt>

<expr_stmt><expr><name>buffer_id</name> <operator>=</operator> <operator>(</operator><name>VABufferID</name><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>data</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>buffer_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Freed output buffer %#x\n"</literal></expr></argument>, <argument><expr><name>buffer_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>AVBufferRef</name> <modifier>*</modifier></type><name>vaapi_encode_alloc_output_buffer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>opaque</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name> <init>= <expr><name>opaque</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VABufferID</name></type> <name>buffer_id</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl>;</decl_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>,

<argument><expr><name>VAEncCodedBufferType</name></expr></argument>,

<argument><expr><literal type="number">3</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>+</operator>

<operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buffer_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create bitstream "</literal>

<literal type="string">"output buffer: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Allocated output buffer %#x\n"</literal></expr></argument>, <argument><expr><name>buffer_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ref</name> <operator>=</operator> <call><name>av_buffer_create</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>buffer_id</name></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer_id</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><operator>&amp;</operator><name>vaapi_encode_free_output_buffer</name></expr></argument>,

<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_BUFFER_FLAG_READONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ref</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vaDestroyBuffer</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name>buffer_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ref</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_create_recon_frames</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVAAPIHWConfig</name> <modifier>*</modifier></type><name>hwconfig</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>constraints</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>recon_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>hwconfig</name> <operator>=</operator> <call><name>av_hwdevice_hwconfig_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>hwconfig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>hwconfig</name><operator>-&gt;</operator><name>config_id</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>constraints</name> <operator>=</operator> <call><name>av_hwdevice_get_hwframe_constraints</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>,

<argument><expr><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>constraints</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>recon_format</name> <operator>=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>AV_PIX_FMT_NONE</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>==</operator>

<name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>recon_format</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>recon_format</name> <operator>==</operator> <name>AV_PIX_FMT_NONE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>recon_format</name> <operator>=</operator> <name><name>constraints</name><operator>-&gt;</operator><name>valid_sw_formats</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>recon_format</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>sw_format</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using %s as format of "</literal>

<literal type="string">"reconstructed frames.\n"</literal></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name>recon_format</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>&lt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>&lt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>&gt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name> <operator>||</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>&gt;</operator> <name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Hardware does not support encoding at "</literal>

<literal type="string">"size %dx%d (constraints: width %d-%d height %d-%d).\n"</literal></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name></expr></argument>,

<argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_width</name></name></expr></argument>, <argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_width</name></name></expr></argument>,

<argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>min_height</name></name></expr></argument>, <argument><expr><name><name>constraints</name><operator>-&gt;</operator><name>max_height</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_hwframe_constraints_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames_ref</name></name> <operator>=</operator> <call><name>av_hwframe_ctx_alloc</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames</name></name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames</name><operator>-&gt;</operator><name>format</name></name> <operator>=</operator> <name>AV_PIX_FMT_VAAPI</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames</name><operator>-&gt;</operator><name>sw_format</name></name> <operator>=</operator> <name>recon_format</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>av_hwframe_ctx_init</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to initialise reconstructed "</literal>

<literal type="string">"frame context: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hwconfig</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_hwframe_constraints_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>constraints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vaapi_encode_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVVAAPIFramesContext</name> <modifier>*</modifier></type><name>recon_hwctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAStatus</name></type> <name>vas</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"A hardware frames reference is "</literal>

<literal type="string">"required to associate the encoding device.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>hw_frames_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name></name> <operator>=</operator> <operator>(</operator><name>AVHWFramesContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>input_frames</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>device</name></name> <operator>=</operator> <operator>(</operator><name>AVHWDeviceContext</name><operator>*</operator><operator>)</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>device</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_profile_entrypoint</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_init_rate_control</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_init_gop_structure</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_init_slice_structure</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_init_packed_headers</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_init_roi</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>compression_level</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_init_quality</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateConfig</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_profile</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_entrypoint</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>config_attributes</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_config_attributes</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create encode pipeline "</literal>

<literal type="string">"configuration: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_create_recon_frames</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>recon_hwctx</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>recon_frames</name><operator>-&gt;</operator><name>hwctx</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>vas</name> <operator>=</operator> <call><name>vaCreateContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name></expr></argument>,

<argument><expr><name>VA_PROGRESSIVE</name></expr></argument>,

<argument><expr><name><name>recon_hwctx</name><operator>-&gt;</operator><name>surface_ids</name></name></expr></argument>,

<argument><expr><name><name>recon_hwctx</name><operator>-&gt;</operator><name>nb_surfaces</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>vas</name> <operator>!=</operator> <name>VA_STATUS_SUCCESS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to create encode pipeline "</literal>

<literal type="string">"context: %d (%s).\n"</literal></expr></argument>, <argument><expr><name>vas</name></expr></argument>, <argument><expr><call><name>vaErrorStr</name><argument_list>(<argument><expr><name>vas</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EIO</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_buffer_pool</name></name> <operator>=</operator>

<call><name>av_buffer_pool_init2</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>VABufferID</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>avctx</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>vaapi_encode_alloc_output_buffer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_buffer_pool</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>configure</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>configure</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>output_delay</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>decode_delay</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_b_depth</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sequence_params_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name> <operator>=</operator>

<call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>sequence_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_params_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name> <operator>=</operator>

<call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>picture_params_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_sequence_params</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>init_sequence_params</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Codec sequence initialisation "</literal>

<literal type="string">"failed: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_packed_headers</name></name> <operator>&amp;</operator> <name>VA_ENC_PACKED_HEADER_SEQUENCE</name> <operator>&amp;&amp;</operator>

<name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_sequence_header</name></name> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_CODEC_FLAG_GLOBAL_HEADER</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>data</name><index>[<expr><name>MAX_PARAM_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>bit_len</name> <init>= <expr><literal type="number">8</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name><name>ctx</name><operator>-&gt;</operator><name>codec</name><operator>-&gt;</operator><name>write_sequence_header</name></name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bit_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write sequence header "</literal>

<literal type="string">"for extradata: %d.\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <operator>(</operator><name>bit_len</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>+</operator>

<name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_vaapi_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>ff_vaapi_encode_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>pic</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>pic_start</name></name></expr>;</init> <condition><expr><name>pic</name></expr>;</condition> <incr><expr><name>pic</name> <operator>=</operator> <name>next</name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>next</name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>vaapi_encode_free</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>pic</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_buffer_pool_uninit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>output_buffer_pool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vaDestroyContext</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_context</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>!=</operator> <name>VA_INVALID_ID</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>vaDestroyConfig</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>hwctx</name><operator>-&gt;</operator><name>display</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>va_config</name></name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>recon_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>input_frames_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_buffer_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>device_ref</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
