<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavcodec\vaapi_encode_mpeg2.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;va/va_enc_mpeg2.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cbs_mpeg2.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mpeg12.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vaapi_encode.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>VAAPIEncodeMPEG2Context</name> <block>{

<decl_stmt><decl><type><name>VAAPIEncodeContext</name></type> <name>common</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>profile</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>level</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>quant_b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>bit_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>vbv_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>frame_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>f_code_horizontal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>f_code_vertical</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_i_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawSequenceHeader</name></type> <name>sequence_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawExtensionData</name></type> <name>sequence_extension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawExtensionData</name></type> <name>sequence_display_extension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawGroupOfPicturesHeader</name></type> <name>gop_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawPictureHeader</name></type> <name>picture_header</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawExtensionData</name></type> <name>picture_coding_extension</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamContext</name> <modifier>*</modifier></type><name>cbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name></type> <name>current_fragment</name></decl>;</decl_stmt>

}</block></struct></type> <name>VAAPIEncodeMPEG2Context</name>;</typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mpeg2_write_fragment</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_write_fragment_data</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to write packed header.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>data_len</name> <operator>&lt;</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Access unit too large: "</literal>

<literal type="string">"%zu &lt; %zu.\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>data_len</name></expr></argument>,

<argument><expr><literal type="number">8</literal> <operator>*</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSPC</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>data_len</name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_size</name></name> <operator>-</operator> <name><name>frag</name><operator>-&gt;</operator><name>data_bit_padding</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mpeg2_add_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>header</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_insert_unit_content</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Failed to add header: "</literal>

<literal type="string">"type = %d.\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mpeg2_write_sequence_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_fragment</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_add_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>MPEG2_START_SEQUENCE_HEADER</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_add_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>MPEG2_START_EXTENSION</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_add_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>MPEG2_START_EXTENSION</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_display_extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_add_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>MPEG2_START_GROUP</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>gop_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_write_fragment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mpeg2_write_picture_header</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>data_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CodedBitstreamFragment</name> <modifier>*</modifier></type><name>frag</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_fragment</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_add_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>MPEG2_START_PICTURE</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture_header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_add_header</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>, <argument><expr><name>MPEG2_START_EXTENSION</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture_coding_extension</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>vaapi_encode_mpeg2_write_fragment</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>data_len</name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_cbs_fragment_reset</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>frag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mpeg2_init_sequence_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawSequenceHeader</name> <modifier>*</modifier></type><name>sh</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawSequenceExtension</name> <modifier>*</modifier></type><name>se</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_extension</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawSequenceDisplayExtension</name> <modifier>*</modifier></type><name>sde</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>sequence_display_extension</name><operator>.</operator><name>data</name><operator>.</operator><name>sequence_display</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawGroupOfPicturesHeader</name> <modifier>*</modifier></type><name>goph</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>gop_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawPictureHeader</name> <modifier>*</modifier></type><name>ph</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawPictureCodingExtension</name> <modifier>*</modifier></type><name>pce</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture_coding_extension</name><operator>.</operator><name>data</name><operator>.</operator><name>picture_coding</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncSequenceParameterBufferMPEG2</name> <modifier>*</modifier></type><name>vseq</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_sequence_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncPictureParameterBufferMPEG2</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>, <decl><type ref="prev"/><name>ext_n</name></decl>, <decl><type ref="prev"/><name>ext_d</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sh</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sh</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>se</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>se</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>sde</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>sde</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>goph</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>goph</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ph</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ph</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pce</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pce</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name> <operator>+</operator> <literal type="number">399</literal><operator>)</operator> <operator>/</operator> <literal type="number">400</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <literal type="number">0x3fffffff</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>vbv_buffer_size</name></name> <operator>=</operator> <operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>rc_buffer_size</name></name> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>vbv_buffer_size</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;&gt;</operator> <literal type="number">14</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>f_code_horizontal</name></name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>f_code_vertical</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>f_code_horizontal</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>f_code_vertical</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">10</literal></expr>:</case> 

<default>default:</default>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>f_code_horizontal</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>f_code_vertical</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>sequence_header_code</name></name> <operator>=</operator> <name>MPEG2_START_SEQUENCE_HEADER</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>horizontal_size_value</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>vertical_size_value</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&amp;</operator> <literal type="number">0xfff</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>dar</name> <init>= <macro><name>av_div_q</name><argument_list>(<argument>avctx-&gt;sample_aspect_ratio</argument>,

<argument>(AVRational) { avctx-&gt;width</argument>, <argument>avctx-&gt;height }</argument>)</argument_list></macro></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>avctx-&gt;sample_aspect_ratio</argument>, <argument>(AVRational) { <literal type="number">1</literal></argument>, <argument><literal type="number">1</literal> }</argument>)</argument_list></macro> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>aspect_ratio_information</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>dar</argument>, <argument>(AVRational) { <literal type="number">3</literal></argument>, <argument><literal type="number">4</literal> }</argument>)</argument_list></macro> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>aspect_ratio_information</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>dar</argument>, <argument>(AVRational) { <literal type="number">9</literal></argument>, <argument><literal type="number">16</literal> }</argument>)</argument_list></macro> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>aspect_ratio_information</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><macro><name>av_cmp_q</name><argument_list>(<argument>dar</argument>, <argument>(AVRational) { <literal type="number">100</literal></argument>, <argument><literal type="number">221</literal> }</argument>)</argument_list></macro> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>aspect_ratio_information</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Sample aspect ratio %d:%d is not "</literal>

<literal type="string">"representable, signalling square pixels instead.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>num</name></name></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>sample_aspect_ratio</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>aspect_ratio_information</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>aspect_ratio_information</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>num</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name><operator>.</operator><name>den</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>framerate</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_rate</name></name> <operator>=</operator> <call><name>av_inv_q</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>time_base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>ff_mpeg12_find_best_frame_rate</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>code</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext_n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ext_d</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>frame_rate_code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>bit_rate_value</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&amp;</operator> <literal type="number">0x3ffff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>vbv_buffer_size_value</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>vbv_buffer_size</name></name> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>constrained_parameters_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>load_intra_quantiser_matrix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sh</name><operator>-&gt;</operator><name>load_non_intra_quantiser_matrix</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_extension</name><operator>.</operator><name>extension_start_code</name></name> <operator>=</operator> <name>MPEG2_START_EXTENSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_extension</name><operator>.</operator><name>extension_start_code_identifier</name></name> <operator>=</operator>

<name>MPEG2_EXTENSION_SEQUENCE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>profile_and_level_indication</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> <name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>progressive_sequence</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>chroma_format</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>horizontal_size_extension</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>vertical_size_extension</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>bit_rate_extension</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>&gt;&gt;</operator> <literal type="number">18</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>vbv_buffer_size_extension</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>vbv_buffer_size</name></name> <operator>&gt;&gt;</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>low_delay</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>frame_rate_extension_n</name></name> <operator>=</operator> <name>ext_n</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>se</name><operator>-&gt;</operator><name>frame_rate_extension_d</name></name> <operator>=</operator> <name>ext_d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_display_extension</name><operator>.</operator><name>extension_start_code</name></name> <operator>=</operator>

<name>MPEG2_START_EXTENSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>sequence_display_extension</name><operator>.</operator><name>extension_start_code_identifier</name></name> <operator>=</operator>

<name>MPEG2_EXTENSION_SEQUENCE_DISPLAY</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>video_format</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name> <operator>!=</operator> <name>AVCOL_PRI_UNSPECIFIED</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name> <operator>!=</operator> <name>AVCOL_TRC_UNSPECIFIED</name> <operator>||</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name> <operator>!=</operator> <name>AVCOL_SPC_UNSPECIFIED</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>colour_description</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>colour_primaries</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_primaries</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>transfer_characteristics</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>color_trc</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>matrix_coefficients</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>colorspace</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>colour_description</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>display_horizontal_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sde</name><operator>-&gt;</operator><name>display_vertical_size</name></name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>goph</name><operator>-&gt;</operator><name>group_start_code</name></name> <operator>=</operator> <name>MPEG2_START_GROUP</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>goph</name><operator>-&gt;</operator><name>time_code</name></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>goph</name><operator>-&gt;</operator><name>closed_gop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>goph</name><operator>-&gt;</operator><name>broken_link</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>picture_start_code</name></name> <operator>=</operator> <name>MPEG2_START_PICTURE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>vbv_delay</name></name> <operator>=</operator> <literal type="number">0xffff</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>full_pel_forward_vector</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>forward_f_code</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>full_pel_backward_vector</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>forward_f_code</name></name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>picture_coding_extension</name><operator>.</operator><name>extension_start_code</name></name> <operator>=</operator>

<name>MPEG2_START_EXTENSION</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>picture_coding_extension</name><operator>.</operator><name>extension_start_code_identifier</name></name> <operator>=</operator>

<name>MPEG2_EXTENSION_PICTURE_CODING</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>intra_dc_precision</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>picture_structure</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>top_field_first</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>frame_pred_frame_dct</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>concealment_motion_vectors</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>q_scale_type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>intra_vlc_format</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>alternate_scan</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>repeat_first_field</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>progressive_frame</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>composite_display_flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vseq</name> <operator>=</operator> <operator>(</operator><name>VAEncSequenceParameterBufferMPEG2</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>intra_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>gop_size</name></name></expr>,

<expr><operator>.</operator><name>ip_period</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>b_per_p</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name>picture_width</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr>,

<expr><operator>.</operator><name>picture_height</name> <operator>=</operator> <name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr>,

<expr><operator>.</operator><name>bits_per_second</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>va_bit_rate</name></name></expr>,

<expr><operator>.</operator><name>frame_rate</name> <operator>=</operator> <call><name>av_q2d</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>frame_rate</name></name></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>aspect_ratio_information</name> <operator>=</operator> <name><name>sh</name><operator>-&gt;</operator><name>aspect_ratio_information</name></name></expr>,

<expr><operator>.</operator><name>vbv_buffer_size</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>vbv_buffer_size</name></name></expr>,

<expr><operator>.</operator><name><name>sequence_extension</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>profile_and_level_indication</name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>profile_and_level_indication</name></name></expr>,

<expr><operator>.</operator><name>progressive_sequence</name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>progressive_sequence</name></name></expr>,

<expr><operator>.</operator><name>chroma_format</name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>chroma_format</name></name></expr>,

<expr><operator>.</operator><name>low_delay</name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>low_delay</name></name></expr>,

<expr><operator>.</operator><name>frame_rate_extension_n</name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>frame_rate_extension_n</name></name></expr>,

<expr><operator>.</operator><name>frame_rate_extension_d</name> <operator>=</operator> <name><name>se</name><operator>-&gt;</operator><name>frame_rate_extension_d</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>new_gop_header</name> <operator>=</operator> <literal type="number">1</literal></expr>,

<expr><operator>.</operator><name><name>gop_header</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>time_code</name> <operator>=</operator> <name><name>goph</name><operator>-&gt;</operator><name>time_code</name></name></expr>,

<expr><operator>.</operator><name>closed_gop</name> <operator>=</operator> <name><name>goph</name><operator>-&gt;</operator><name>closed_gop</name></name></expr>,

<expr><operator>.</operator><name>broken_link</name> <operator>=</operator> <name><name>goph</name><operator>-&gt;</operator><name>broken_link</name></name></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>vpic</name> <operator>=</operator> <operator>(</operator><name>VAEncPictureParameterBufferMPEG2</name><operator>)</operator> <block>{

<expr><operator>.</operator><name>forward_reference_picture</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>backward_reference_picture</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>reconstructed_picture</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>coded_buf</name> <operator>=</operator> <name>VA_INVALID_ID</name></expr>,

<expr><operator>.</operator><name>vbv_delay</name> <operator>=</operator> <literal type="number">0xffff</literal></expr>,

<expr><operator>.</operator><name>f_code</name> <operator>=</operator> <block>{ <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr>, <expr><block>{ <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr> }</block></expr> }</block></expr>,

<expr><operator>.</operator><name><name>picture_coding_extension</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>intra_dc_precision</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>intra_dc_precision</name></name></expr>,

<expr><operator>.</operator><name>picture_structure</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>picture_structure</name></name></expr>,

<expr><operator>.</operator><name>top_field_first</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>top_field_first</name></name></expr>,

<expr><operator>.</operator><name>frame_pred_frame_dct</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>frame_pred_frame_dct</name></name></expr>,

<expr><operator>.</operator><name>concealment_motion_vectors</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>concealment_motion_vectors</name></name></expr>,

<expr><operator>.</operator><name>q_scale_type</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>q_scale_type</name></name></expr>,

<expr><operator>.</operator><name>intra_vlc_format</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>intra_vlc_format</name></name></expr>,

<expr><operator>.</operator><name>alternate_scan</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>alternate_scan</name></name></expr>,

<expr><operator>.</operator><name>repeat_first_field</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>repeat_first_field</name></name></expr>,

<expr><operator>.</operator><name>progressive_frame</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>progressive_frame</name></name></expr>,

<expr><operator>.</operator><name>composite_display_flag</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>composite_display_flag</name></name></expr>,

}</block></expr>,

<expr><operator>.</operator><name><name>composite_display</name><operator>.</operator><name>bits</name></name> <operator>=</operator> <block>{

<expr><operator>.</operator><name>v_axis</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>v_axis</name></name></expr>,

<expr><operator>.</operator><name>field_sequence</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>field_sequence</name></name></expr>,

<expr><operator>.</operator><name>sub_carrier</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>sub_carrier</name></name></expr>,

<expr><operator>.</operator><name>burst_amplitude</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>burst_amplitude</name></name></expr>,

<expr><operator>.</operator><name>sub_carrier_phase</name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>sub_carrier_phase</name></name></expr>,

}</block></expr>,

}</block></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mpeg2_init_picture_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawPictureHeader</name> <modifier>*</modifier></type><name>ph</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture_header</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>MPEG2RawPictureCodingExtension</name> <modifier>*</modifier></type><name>pce</name> <init>= <expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>picture_coding_extension</name><operator>.</operator><name>data</name><operator>.</operator><name>picture_coding</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncPictureParameterBufferMPEG2</name> <modifier>*</modifier></type><name>vpic</name> <init>= <expr><name><name>pic</name><operator>-&gt;</operator><name>codec_picture_params</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>temporal_reference</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>picture_coding_type</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>last_i_frame</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>temporal_reference</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>display_order</name></name> <operator>-</operator> <name><name>priv</name><operator>-&gt;</operator><name>last_i_frame</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ph</name><operator>-&gt;</operator><name>picture_coding_type</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_P</name> <operator>||</operator> <name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>f_code_horizontal</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>f_code_vertical</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_B</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>f_code_horizontal</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>f_code_vertical</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>reconstructed_picture</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>recon_surface</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>coded_buf</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>output_buffer</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PICTURE_TYPE_IDR</name></expr>:</case>

<case>case <expr><name>PICTURE_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>picture_type</name></name> <operator>=</operator> <name>VAEncPictureTypeIntra</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PICTURE_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>picture_type</name></name> <operator>=</operator> <name>VAEncPictureTypePredictive</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>forward_reference_picture</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>recon_surface</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PICTURE_TYPE_B</name></expr>:</case>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>picture_type</name></name> <operator>=</operator> <name>VAEncPictureTypeBidirectional</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>forward_reference_picture</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>recon_surface</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>backward_reference_picture</name></name> <operator>=</operator> <name><name>pic</name><operator>-&gt;</operator><name>refs</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name>recon_surface</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"invalid picture type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>temporal_reference</name></name> <operator>=</operator> <name><name>ph</name><operator>-&gt;</operator><name>temporal_reference</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vpic</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>pce</name><operator>-&gt;</operator><name>f_code</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vaapi_encode_mpeg2_init_slice_params</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodePicture</name> <modifier>*</modifier></type><name>pic</name></decl></parameter>,

<parameter><decl><type><name>VAAPIEncodeSlice</name> <modifier>*</modifier></type><name>slice</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAEncSliceParameterBufferMPEG2</name> <modifier>*</modifier></type><name>vslice</name> <init>= <expr><name><name>slice</name><operator>-&gt;</operator><name>codec_slice_params</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>qp</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>macroblock_address</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_start</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>num_macroblocks</name></name> <operator>=</operator> <name><name>slice</name><operator>-&gt;</operator><name>block_size</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>pic</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>PICTURE_TYPE_IDR</name></expr>:</case>

<case>case <expr><name>PICTURE_TYPE_I</name></expr>:</case>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>quant_i</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PICTURE_TYPE_P</name></expr>:</case>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>PICTURE_TYPE_B</name></expr>:</case>

<expr_stmt><expr><name>qp</name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>quant_b</name></name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"invalid picture type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>quantiser_scale_code</name></name> <operator>=</operator> <name>qp</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>vslice</name><operator>-&gt;</operator><name>is_intra_slice</name></name> <operator>=</operator> <operator>(</operator><name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_IDR</name> <operator>||</operator>

<name><name>pic</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>PICTURE_TYPE_I</name><operator>)</operator></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_mpeg2_configure</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>ff_cbs_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><name>AV_CODEC_ID_MPEG2VIDEO</name></expr></argument>, <argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>err</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>va_rc_mode</name></name> <operator>==</operator> <name>VA_RC_CQP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>rc_quality</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_i</name></name> <operator>=</operator>

<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>i_quant_factor</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name> <operator>+</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>i_quant_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_i</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>&gt;</operator> <literal type="number">0.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_b</name></name> <operator>=</operator>

<call><name>av_clip</name><argument_list>(<argument><expr><operator>(</operator><name><name>avctx</name><operator>-&gt;</operator><name>b_quant_factor</name></name> <operator>*</operator> <name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name> <operator>+</operator>

<name><name>avctx</name><operator>-&gt;</operator><name>b_quant_offset</name></name><operator>)</operator> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_b</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using fixed quantiser "</literal>

<literal type="string">"%d / %d / %d for I- / P- / B-frames.\n"</literal></expr></argument>,

<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_i</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name></expr></argument>, <argument><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_i</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_p</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>priv</name><operator>-&gt;</operator><name>quant_b</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_block_cols</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>nb_slices</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>slice_block_rows</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>slice_size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>roi_quant_range</name></name> <operator>=</operator> <literal type="number">31</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeProfile</name></type> <name><name>vaapi_encode_mpeg2_profiles</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>FF_PROFILE_MPEG2_MAIN</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileMPEG2Main</name></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_MPEG2_SIMPLE</name></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>VAProfileMPEG2Simple</name></expr> }</block></expr>,

<expr><block>{ <expr><name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VAAPIEncodeType</name></type> <name>vaapi_encode_type_mpeg2</name> <init>= <expr><block>{

<expr><operator>.</operator><name>profiles</name> <operator>=</operator> <name>vaapi_encode_mpeg2_profiles</name></expr>,

<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name>FLAG_B_PICTURES</name></expr>,

<expr><operator>.</operator><name>configure</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_configure</name></expr>,

<expr><operator>.</operator><name>default_quality</name> <operator>=</operator> <literal type="number">10</literal></expr>,

<expr><operator>.</operator><name>sequence_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSequenceParameterBufferMPEG2</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init_sequence_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_init_sequence_params</name></expr>,

<expr><operator>.</operator><name>picture_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncPictureParameterBufferMPEG2</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init_picture_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_init_picture_params</name></expr>,

<expr><operator>.</operator><name>slice_params_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAEncSliceParameterBufferMPEG2</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init_slice_params</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_init_slice_params</name></expr>,

<expr><operator>.</operator><name>sequence_header_type</name> <operator>=</operator> <name>VAEncPackedHeaderSequence</name></expr>,

<expr><operator>.</operator><name>write_sequence_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_write_sequence_header</name></expr>,

<expr><operator>.</operator><name>picture_header_type</name> <operator>=</operator> <name>VAEncPackedHeaderPicture</name></expr>,

<expr><operator>.</operator><name>write_picture_header</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_write_picture_header</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_mpeg2_init</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeContext</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_type_mpeg2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>==</operator> <name>FF_PROFILE_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>profile</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>profile</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>FF_LEVEL_UNKNOWN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name><name>priv</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">4</literal></expr>:</case> 

<case>case <expr><literal type="number">6</literal></expr>:</case> 

<case>case <expr><literal type="number">8</literal></expr>:</case> 

<case>case <expr><literal type="number">10</literal></expr>:</case> 

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unknown MPEG-2 level %d.\n"</literal></expr></argument>,

<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name> <operator>%</operator> <literal type="number">4096</literal> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avctx</name><operator>-&gt;</operator><name>width</name></name> <operator>%</operator> <literal type="number">4096</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"MPEG-2 does not support picture "</literal>

<literal type="string">"height or width divisible by 4096.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>desired_packed_headers</name></name> <operator>=</operator> <name>VA_ENC_PACKED_HEADER_SEQUENCE</name> <operator>|</operator>

<name>VA_ENC_PACKED_HEADER_PICTURE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_width</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>surface_height</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>avctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_encode_init</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>int</name></type> <name>vaapi_encode_mpeg2_close</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>VAAPIEncodeMPEG2Context</name> <modifier>*</modifier></type><name>priv</name> <init>= <expr><name><name>avctx</name><operator>-&gt;</operator><name>priv_data</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_cbs_fragment_free</name><argument_list>(<argument><expr><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>current_fragment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_cbs_close</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>priv</name><operator>-&gt;</operator><name>cbc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_vaapi_encode_close</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(VAAPIEncodeMPEG2Context, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FLAGS</name></cpp:macro> <cpp:value>(AV_OPT_FLAG_VIDEO_PARAM | AV_OPT_FLAG_ENCODING_PARAM)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>vaapi_encode_mpeg2_options</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>VAAPI_ENCODE_COMMON_OPTIONS</name></expr>,

<expr><name>VAAPI_ENCODE_RC_OPTIONS</name></expr>,

<expr><block>{ <expr><literal type="string">"profile"</literal></expr>, <expr><literal type="string">"Set profile (in profile_and_level_indication)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>profile</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>FF_PROFILE_UNKNOWN</name></expr> }</block></expr>, <expr><name>FF_PROFILE_UNKNOWN</name></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"profile"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROFILE</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, 0, 0, FLAGS, "profile"</cpp:value></cpp:define>

<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"simple"</literal></argument>, <argument>FF_PROFILE_MPEG2_SIMPLE</argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>PROFILE</name><argument_list>(<argument><literal type="string">"main"</literal></argument>, <argument>FF_PROFILE_MPEG2_MAIN</argument>)</argument_list></macro> }</block></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>PROFILE</name></cpp:undef>

<expr><block>{ <expr><literal type="string">"level"</literal></expr>, <expr><literal type="string">"Set level (in profile_and_level_indication)"</literal></expr>,

<expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>,

<expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">4</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>FLAGS</name></expr>, <expr><literal type="string">"level"</literal></expr> }</block></expr>,

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEVEL</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name, NULL, 0, AV_OPT_TYPE_CONST, { .i64 = value }, 0, 0, FLAGS, "level"</cpp:value></cpp:define>

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"low"</literal></argument>, <argument><literal type="number">10</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"main"</literal></argument>, <argument><literal type="number">8</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"high_1440"</literal></argument>, <argument><literal type="number">6</literal></argument>)</argument_list></macro> }</block></expr>,

<expr><block>{ <macro><name>LEVEL</name><argument_list>(<argument><literal type="string">"high"</literal></argument>, <argument><literal type="number">4</literal></argument>)</argument_list></macro> }</block></expr>,

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>LEVEL</name></cpp:undef>

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVCodecDefault</name></type> <name><name>vaapi_encode_mpeg2_defaults</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"bf"</literal></expr>, <expr><literal type="string">"1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"g"</literal></expr>, <expr><literal type="string">"120"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"i_qfactor"</literal></expr>, <expr><literal type="string">"1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"i_qoffset"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b_qfactor"</literal></expr>, <expr><literal type="string">"6/5"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"b_qoffset"</literal></expr>, <expr><literal type="string">"0"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qmin"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qmax"</literal></expr>, <expr><literal type="string">"-1"</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>vaapi_encode_mpeg2_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"mpeg2_vaapi"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>av_default_item_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>vaapi_encode_mpeg2_options</name></expr>,

<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>LIBAVUTIL_VERSION_INT</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodec</name></type> <name>ff_mpeg2_vaapi_encoder</name> <init>= <expr><block>{

<expr><operator>.</operator><name>name</name> <operator>=</operator> <literal type="string">"mpeg2_vaapi"</literal></expr>,

<expr><operator>.</operator><name>long_name</name> <operator>=</operator> <call><name>NULL_IF_CONFIG_SMALL</name><argument_list>(<argument><expr><literal type="string">"MPEG-2 (VAAPI)"</literal></expr></argument>)</argument_list></call></expr>,

<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>AVMEDIA_TYPE_VIDEO</name></expr>,

<expr><operator>.</operator><name>id</name> <operator>=</operator> <name>AV_CODEC_ID_MPEG2VIDEO</name></expr>,

<expr><operator>.</operator><name>priv_data_size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>VAAPIEncodeMPEG2Context</name></expr></argument>)</argument_list></sizeof></expr>,

<expr><operator>.</operator><name>init</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_init</name></expr>,

<expr><operator>.</operator><name>send_frame</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_send_frame</name></expr>,

<expr><operator>.</operator><name>receive_packet</name> <operator>=</operator> <operator>&amp;</operator><name>ff_vaapi_encode_receive_packet</name></expr>,

<expr><operator>.</operator><name>close</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_close</name></expr>,

<expr><operator>.</operator><name>priv_class</name> <operator>=</operator> <operator>&amp;</operator><name>vaapi_encode_mpeg2_class</name></expr>,

<expr><operator>.</operator><name>capabilities</name> <operator>=</operator> <name>AV_CODEC_CAP_DELAY</name> <operator>|</operator> <name>AV_CODEC_CAP_HARDWARE</name></expr>,

<expr><operator>.</operator><name>defaults</name> <operator>=</operator> <name>vaapi_encode_mpeg2_defaults</name></expr>,

<expr><operator>.</operator><name>pix_fmts</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> enum <name><name>AVPixelFormat</name><index>[]</index></name><operator>)</operator> <block>{

<expr><name>AV_PIX_FMT_VAAPI</name></expr>,

<expr><name>AV_PIX_FMT_NONE</name></expr>,

}</block></expr>,

<expr><operator>.</operator><name>wrapper_name</name> <operator>=</operator> <literal type="string">"vaapi"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

</unit>
