<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tools\qt-faststart.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fseeko</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fseeko</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fseeko64(x, y, z)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ftello</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ftello</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ftello64(x)</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>fseeko</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>fseeko</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>z</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_fseeki64(x, y, z)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ftello</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ftello</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_ftelli64(x)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MIN</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) &gt; (b) ? (b) : (a))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE_32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint32_t)(((uint8_t*)(x))[0]) &lt;&lt; 24) | (((uint8_t*)(x))[1] &lt;&lt; 16) | (((uint8_t*)(x))[2] &lt;&lt; 8) | ((uint8_t*)(x))[3])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE_64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((uint64_t)(((uint8_t*)(x))[0]) &lt;&lt; 56) | ((uint64_t)(((uint8_t*)(x))[1]) &lt;&lt; 48) | ((uint64_t)(((uint8_t*)(x))[2]) &lt;&lt; 40) | ((uint64_t)(((uint8_t*)(x))[3]) &lt;&lt; 32) | ((uint64_t)(((uint8_t*)(x))[4]) &lt;&lt; 24) | ((uint64_t)(((uint8_t*)(x))[5]) &lt;&lt; 16) | ((uint64_t)(((uint8_t*)(x))[6]) &lt;&lt; 8) | ((uint64_t)( (uint8_t*)(x))[7]))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB32</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ ((uint8_t*)(p))[0] = ((val) &gt;&gt; 24) &amp; 0xff; ((uint8_t*)(p))[1] = ((val) &gt;&gt; 16) &amp; 0xff; ((uint8_t*)(p))[2] = ((val) &gt;&gt; 8) &amp; 0xff; ((uint8_t*)(p))[3] = (val) &amp; 0xff; }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB64</name><parameter_list>(<parameter><type><name>p</name></type></parameter>, <parameter><type><name>val</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{ AV_WB32(p, (val) &gt;&gt; 32) AV_WB32(p + 4, val) }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BE_FOURCC</name><parameter_list>(<parameter><type><name>ch0</name></type></parameter>, <parameter><type><name>ch1</name></type></parameter>, <parameter><type><name>ch2</name></type></parameter>, <parameter><type><name>ch3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>( (uint32_t)(unsigned char)(ch3) | ((uint32_t)(unsigned char)(ch2) &lt;&lt; 8) | ((uint32_t)(unsigned char)(ch1) &lt;&lt; 16) | ((uint32_t)(unsigned char)(ch0) &lt;&lt; 24) )</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>QT_ATOM</name></cpp:macro> <cpp:value>BE_FOURCC</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FREE_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('f', 'r', 'e', 'e')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUNK_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('j', 'u', 'n', 'k')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDAT_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('m', 'd', 'a', 't')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MOOV_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('m', 'o', 'o', 'v')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PNOT_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('p', 'n', 'o', 't')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SKIP_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('s', 'k', 'i', 'p')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDE_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('w', 'i', 'd', 'e')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PICT_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('P', 'I', 'C', 'T')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FTYP_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('f', 't', 'y', 'p')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UUID_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('u', 'u', 'i', 'd')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMOV_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('c', 'm', 'o', 'v')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRAK_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('t', 'r', 'a', 'k')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MDIA_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('m', 'd', 'i', 'a')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MINF_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('m', 'i', 'n', 'f')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STBL_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('s', 't', 'b', 'l')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STCO_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('s', 't', 'c', 'o')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CO64_ATOM</name></cpp:macro> <cpp:value>QT_ATOM('c', 'o', '6', '4')</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ATOM_PREAMBLE_SIZE</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BUFFER_SIZE</name></cpp:macro> <cpp:value>33554432</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FTYP_ATOM_SIZE</name></cpp:macro> <cpp:value>1048576</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>header_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

}</block></struct></type> <name>atom_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>moov_atom_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>stco_offset_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>stco_data_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>stco_overflow</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>depth</name></decl>;</decl_stmt>

}</block></struct></type> <name>update_chunk_offsets_context_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>original_moov_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>new_moov_size</name></decl>;</decl_stmt>

}</block></struct></type> <name>upgrade_stco_context_t</name>;</typedef>

<typedef>typedef <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>parse_atoms_callback_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>atom_t</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_atoms</name><parameter_list>(

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>,

<parameter><decl><type><name>parse_atoms_callback_t</name></type> <name>callback</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>pos</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>atom_t</name></type> <name>atom</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<while>while <condition>(<expr><name>end</name> <operator>-</operator> <name>pos</name> <operator>&gt;=</operator> <name>ATOM_PREAMBLE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>type</name></name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><name>pos</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>ATOM_PREAMBLE_SIZE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>header_size</name></name> <operator>=</operator> <name>ATOM_PREAMBLE_SIZE</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>atom</name><operator>.</operator><name>size</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>end</name> <operator>-</operator> <name>pos</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"not enough room for 64 bit atom size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>BE_64</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>header_size</name></name> <operator>=</operator> <name>ATOM_PREAMBLE_SIZE</name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>ATOM_PREAMBLE_SIZE</name> <operator>+</operator> <name>end</name> <operator>-</operator> <name>pos</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name><name>atom</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <name><name>atom</name><operator>.</operator><name>header_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"atom size %"</literal><name>PRIu64</name><literal type="string">" too small\n"</literal></expr></argument>, <argument><expr><name><name>atom</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name><name>atom</name><operator>.</operator><name>header_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atom</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <name>end</name> <operator>-</operator> <name>pos</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"atom size %"</literal><name>PRIu64</name><literal type="string">" too big\n"</literal></expr></argument>, <argument><expr><name><name>atom</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>atom</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>callback</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <name><name>atom</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_stco_offsets</name><parameter_list>(<parameter><decl><type><name>update_chunk_offsets_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>atom_t</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>current_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" patching stco atom...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atom</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"stco atom size %"</literal><name>PRIu64</name><literal type="string">" too small\n"</literal></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset_count</name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset_count</name> <operator>&gt;</operator> <operator>(</operator><name><name>atom</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"stco offset count %"</literal><name>PRIu32</name><literal type="string">" too big\n"</literal></expr></argument>, <argument><expr><name>offset_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stco_offset_count</name></name> <operator>+=</operator> <name>offset_count</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stco_data_size</name></name> <operator>+=</operator> <name><name>atom</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>offset_count</name> <operator>*</operator> <literal type="number">4</literal></expr>;</init>

<condition><expr><name>pos</name> <operator>&lt;</operator> <name>end</name></expr>;</condition>

<incr><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>current_offset</name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>current_offset</name> <operator>&gt;</operator> <name>UINT_MAX</name> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>moov_atom_size</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>stco_overflow</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_offset</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>moov_atom_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>current_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_co64_offsets</name><parameter_list>(<parameter><decl><type><name>update_chunk_offsets_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>atom_t</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>current_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" patching co64 atom...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>atom</name><operator>-&gt;</operator><name>size</name></name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"co64 atom size %"</literal><name>PRIu64</name><literal type="string">" too small\n"</literal></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>offset_count</name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>offset_count</name> <operator>&gt;</operator> <operator>(</operator><name><name>atom</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">8</literal><operator>)</operator> <operator>/</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"co64 offset count %"</literal><name>PRIu32</name><literal type="string">" too big\n"</literal></expr></argument>, <argument><expr><name>offset_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>offset_count</name> <operator>*</operator> <literal type="number">8</literal></expr>;</init>

<condition><expr><name>pos</name> <operator>&lt;</operator> <name>end</name></expr>;</condition>

<incr><expr><name>pos</name> <operator>+=</operator> <literal type="number">8</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>current_offset</name> <operator>=</operator> <call><name>BE_64</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>current_offset</name> <operator>+=</operator> <name><name>context</name><operator>-&gt;</operator><name>moov_atom_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>pos</name></expr></argument>, <argument><expr><name>current_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_chunk_offsets_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>atom_t</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>update_chunk_offsets_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>atom</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STCO_ATOM</name></expr>:</case>

<return>return <expr><call><name>update_stco_offsets</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>CO64_ATOM</name></expr>:</case>

<return>return <expr><call><name>update_co64_offsets</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>MOOV_ATOM</name></expr>:</case>

<case>case <expr><name>TRAK_ATOM</name></expr>:</case>

<case>case <expr><name>MDIA_ATOM</name></expr>:</case>

<case>case <expr><name>MINF_ATOM</name></expr>:</case>

<case>case <expr><name>STBL_ATOM</name></expr>:</case>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>depth</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>context</name><operator>-&gt;</operator><name>depth</name></name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"atoms too deeply nested\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>parse_atoms</name><argument_list>(

<argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>atom</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>update_chunk_offsets_callback</name></expr></argument>,

<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>depth</name></name><operator>--</operator></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_atom_size</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>header</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>header_size</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name>header_size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">8</literal></expr>:</case>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">16</literal></expr>:</case>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>header</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>upgrade_stco_atom</name><parameter_list>(<parameter><decl><type><name>upgrade_stco_context_t</name> <modifier>*</modifier></type><name>context</name></decl></parameter>, <parameter><decl><type><name>atom_t</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>new_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>offset_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>original_offset</name></decl>;</decl_stmt>

<expr_stmt><expr><name>offset_count</name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>CO64_ATOM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>set_atom_size</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <literal type="number">8</literal> <operator>+</operator> <name>offset_count</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name> <operator>+=</operator> <name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>pos</name> <operator>=</operator> <name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <literal type="number">8</literal></expr><operator>,</operator> <expr><name>end</name> <operator>=</operator> <name>pos</name> <operator>+</operator> <name>offset_count</name> <operator>*</operator> <literal type="number">4</literal></expr>;</init>

<condition><expr><name>pos</name> <operator>&lt;</operator> <name>end</name></expr>;</condition>

<incr><expr><name>pos</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>original_offset</name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>context</name><operator>-&gt;</operator><name>original_moov_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_offset</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>original_offset</name> <operator>+</operator> <name><name>context</name><operator>-&gt;</operator><name>new_moov_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name>new_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>upgrade_stco_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>atom_t</name> <modifier>*</modifier></type><name>atom</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>upgrade_stco_context_t</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>ctx</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>start_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>copy_size</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name><name>atom</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>STCO_ATOM</name></expr>:</case>

<expr_stmt><expr><call><name>upgrade_stco_atom</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>MOOV_ATOM</name></expr>:</case>

<case>case <expr><name>TRAK_ATOM</name></expr>:</case>

<case>case <expr><name>MDIA_ATOM</name></expr>:</case>

<case>case <expr><name>MINF_ATOM</name></expr>:</case>

<case>case <expr><name>STBL_ATOM</name></expr>:</case>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>start_pos</name> <operator>=</operator> <name><name>context</name><operator>-&gt;</operator><name>dest</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name> <operator>+=</operator> <name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_atoms</name><argument_list>(

<argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><name><name>atom</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,

<argument><expr><name>upgrade_stco_callback</name></expr></argument>,

<argument><expr><name>context</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>set_atom_size</name><argument_list>(<argument><expr><name>start_pos</name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>, <argument><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name> <operator>-</operator> <name>start_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>copy_size</name> <operator>=</operator> <name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name> <operator>+</operator> <name><name>atom</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name></expr></argument>, <argument><expr><name><name>atom</name><operator>-&gt;</operator><name>data</name></name> <operator>-</operator> <name><name>atom</name><operator>-&gt;</operator><name>header_size</name></name></expr></argument>, <argument><expr><name>copy_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>context</name><operator>-&gt;</operator><name>dest</name></name> <operator>+=</operator> <name>copy_size</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>update_moov_atom</name><parameter_list>(

<parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>moov_atom</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>moov_atom_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>update_chunk_offsets_context_t</name></type> <name>update_context</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>upgrade_stco_context_t</name></type> <name>upgrade_context</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>new_moov_atom</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>update_context</name><operator>.</operator><name>moov_atom_size</name></name> <operator>=</operator> <operator>*</operator><name>moov_atom_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_atoms</name><argument_list>(

<argument><expr><operator>*</operator><name>moov_atom</name></expr></argument>,

<argument><expr><operator>*</operator><name>moov_atom_size</name></expr></argument>,

<argument><expr><name>update_chunk_offsets_callback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>update_context</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>update_context</name><operator>.</operator><name>stco_overflow</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" upgrading stco atoms to co64...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>upgrade_context</name><operator>.</operator><name>new_moov_size</name></name> <operator>=</operator> <operator>*</operator><name>moov_atom_size</name> <operator>+</operator>

<name><name>update_context</name><operator>.</operator><name>stco_offset_count</name></name> <operator>*</operator> <literal type="number">8</literal> <operator>-</operator>

<name><name>update_context</name><operator>.</operator><name>stco_data_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>new_moov_atom</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>upgrade_context</name><operator>.</operator><name>new_moov_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>new_moov_atom</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not allocate %"</literal><name>PRIu64</name><literal type="string">" bytes for updated moov atom\n"</literal></expr></argument>,

<argument><expr><name><name>upgrade_context</name><operator>.</operator><name>new_moov_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>upgrade_context</name><operator>.</operator><name>original_moov_size</name></name> <operator>=</operator> <operator>*</operator><name>moov_atom_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>upgrade_context</name><operator>.</operator><name>dest</name></name> <operator>=</operator> <name>new_moov_atom</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>parse_atoms</name><argument_list>(

<argument><expr><operator>*</operator><name>moov_atom</name></expr></argument>,

<argument><expr><operator>*</operator><name>moov_atom_size</name></expr></argument>,

<argument><expr><name>upgrade_stco_callback</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name>upgrade_context</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>new_moov_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><operator>*</operator><name>moov_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>moov_atom</name> <operator>=</operator> <name>new_moov_atom</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>moov_atom_size</name> <operator>=</operator> <name><name>upgrade_context</name><operator>.</operator><name>new_moov_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>upgrade_context</name><operator>.</operator><name>dest</name></name> <operator>!=</operator> <operator>*</operator><name>moov_atom</name> <operator>+</operator> <operator>*</operator><name>moov_atom_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unexpected - wrong number of moov bytes written\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>infile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>outfile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>atom_bytes</name><index>[<expr><name>ATOM_PREAMBLE_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>atom_type</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>atom_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>atom_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>last_offset</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>moov_atom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>ftyp_atom</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>moov_atom_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ftyp_atom_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>start_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>copy_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_to_copy</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>free_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>moov_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: qt-faststart &lt;infile.mov&gt; &lt;outfile.mov&gt;\n"</literal>

<literal type="string">"Note: alternatively you can use -movflags +faststart in ffmpeg\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"input and output files need to be different\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>atom_bytes</name></expr></argument>, <argument><expr><name>ATOM_PREAMBLE_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>atom_size</name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atom_bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>atom_type</name> <operator>=</operator> <call><name>BE_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atom_bytes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>atom_type</name> <operator>==</operator> <name>FTYP_ATOM</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>atom_size</name> <operator>&gt;</operator> <name>MAX_FTYP_ATOM_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"ftyp atom size %"</literal><name>PRIu64</name><literal type="string">" too big\n"</literal></expr></argument>,

<argument><expr><name>atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ftyp_atom_size</name> <operator>=</operator> <name>atom_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ftyp_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ftyp_atom</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>ftyp_atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ftyp_atom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not allocate %"</literal><name>PRIu64</name><literal type="string">" bytes for ftyp atom\n"</literal></expr></argument>,

<argument><expr><name>atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fseeko</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><operator>-</operator><name>ATOM_PREAMBLE_SIZE</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>fread</name><argument_list>(<argument><expr><name>ftyp_atom</name></expr></argument>, <argument><expr><name>atom_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><name>start_offset</name> <operator>=</operator> <call><name>ftello</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>atom_size</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>atom_bytes</name></expr></argument>, <argument><expr><name>ATOM_PREAMBLE_SIZE</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>atom_size</name> <operator>=</operator> <call><name>BE_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>atom_bytes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fseeko</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>atom_size</name> <operator>-</operator> <name>ATOM_PREAMBLE_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fseeko</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>atom_size</name> <operator>-</operator> <name>ATOM_PREAMBLE_SIZE</name></expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c%c%c%c %10"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>atom_type</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>,

<argument><expr><operator>(</operator><name>atom_type</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>,

<argument><expr><operator>(</operator><name>atom_type</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>,

<argument><expr><operator>(</operator><name>atom_type</name> <operator>&gt;&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr></argument>,

<argument><expr><name>atom_offset</name></expr></argument>,

<argument><expr><name>atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>FREE_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>JUNK_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>MDAT_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>MOOV_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>PNOT_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>SKIP_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>WIDE_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>PICT_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>UUID_ATOM</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>(</operator><name>atom_type</name> <operator>!=</operator> <name>FTYP_ATOM</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"encountered non-QT top-level atom (is this a QuickTime file?)\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>atom_offset</name> <operator>+=</operator> <name>atom_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>atom_size</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atom_type</name> <operator>==</operator> <name>MOOV_ATOM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>moov_size</name> <operator>=</operator> <name>atom_size</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>moov_size</name> <operator>&amp;&amp;</operator> <name>atom_type</name> <operator>==</operator> <name>FREE_ATOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>free_size</name> <operator>+=</operator> <name>atom_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>atom_type</name> <operator>=</operator> <name>MOOV_ATOM</name></expr>;</expr_stmt>

<expr_stmt><expr><name>atom_size</name> <operator>=</operator> <name>moov_size</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>atom_type</name> <operator>!=</operator> <name>MOOV_ATOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"last atom in file was not a moov atom\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ftyp_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>atom_size</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"bad moov atom size\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fseeko</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><operator>-</operator><operator>(</operator><name>atom_size</name> <operator>+</operator> <name>free_size</name><operator>)</operator></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_offset</name> <operator>=</operator> <call><name>ftello</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>last_offset</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>moov_atom_size</name> <operator>=</operator> <name>atom_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>moov_atom</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>moov_atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>moov_atom</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not allocate %"</literal><name>PRIu64</name><literal type="string">" bytes for moov atom\n"</literal></expr></argument>, <argument><expr><name>atom_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>moov_atom</name></expr></argument>, <argument><expr><name>atom_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>BE_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>moov_atom</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CMOV_ATOM</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"this utility does not support compressed moov atoms yet\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>infile</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>update_moov_atom</name><argument_list>(<argument><expr><operator>&amp;</operator><name>moov_atom</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>moov_atom_size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>infile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>infile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>start_offset</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content> 

<if_stmt><if>if <condition>(<expr><call><name>fseeko</name><argument_list>(<argument><expr><name>infile</name></expr></argument>, <argument><expr><name>start_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_offset</name> <operator>-=</operator> <name>start_offset</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>outfile</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>outfile</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ftyp_atom_size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" writing ftyp atom...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>ftyp_atom</name></expr></argument>, <argument><expr><name>ftyp_atom_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" writing moov atom...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>moov_atom</name></expr></argument>, <argument><expr><name>moov_atom_size</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bytes_to_copy</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>COPY_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>last_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>copy_buffer</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>bytes_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>copy_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not allocate %d bytes for copy_buffer\n"</literal></expr></argument>, <argument><expr><name>bytes_to_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" copying rest of file...\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>last_offset</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bytes_to_copy</name> <operator>=</operator> <call><name>MIN</name><argument_list>(<argument><expr><name>bytes_to_copy</name></expr></argument>, <argument><expr><name>last_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><name>copy_buffer</name></expr></argument>, <argument><expr><name>bytes_to_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>infile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>copy_buffer</name></expr></argument>, <argument><expr><name>bytes_to_copy</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>outfile</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error_out</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>last_offset</name> <operator>-=</operator> <name>bytes_to_copy</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>moov_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ftyp_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>copy_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error_out</name>:</label>

<if_stmt><if>if <condition>(<expr><name>infile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>infile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>outfile</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>outfile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>moov_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ftyp_atom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>copy_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

</unit>
