<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tools\target_dec_fuzzer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/bytestream.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/internal.h"</cpp:file></cpp:include>

<function_decl><type><name>int</name></type> <name>LLVMFuzzerTestOneInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodec</name> <modifier>*</modifier></type> <name><name>codec_list</name><index>[]</index></name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>AVCodec</name> <modifier>*</modifier></type><name>AVCodecInitialize</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVCodecID</name></name></type> <name>codec_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name>codec_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>res</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Failed to find decoder"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>subtitle_handler</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_sub_ptr</name></decl></parameter>, <parameter><decl><type><name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVSubtitle</name></type> <name>sub</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>avcodec_decode_subtitle2</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>, <argument><expr><name>got_sub_ptr</name></expr></argument>, <argument><expr><name>avpkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>got_sub_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avsubtitle_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>maxiteration</name> <init>= <expr><literal type="number">8096</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>maxpixels_per_frame</name> <init>= <expr><literal type="number">4096</literal> <operator>*</operator> <literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxpixels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxsamples_per_frame</name> <init>= <expr><literal type="number">256</literal><operator>*</operator><literal type="number">1024</literal><operator>*</operator><literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>maxsamples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>FUZZ_TAG</name> <init>= <expr><literal type="number">0x4741542D5A5A5546ULL</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>LLVMFuzzerTestOneInput</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>fuzz_tag</name> <init>= <expr><name>FUZZ_TAG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>last</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>data</name> <operator>+</operator> <name>size</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>it</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>ec_pixels</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>decode_handler</name>)<parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>picture</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>got_picture_ptr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVPacket</name> <modifier>*</modifier></type><name>avpkt</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<decl_stmt><decl><type><name>AVCodecParserContext</name> <modifier>*</modifier></type><name>parser</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>keyframes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition> <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>FFMPEG_DECODER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_SYMBOL0</name><parameter_list>(<parameter><type><name>CODEC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_##CODEC##_decoder</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECODER_SYMBOL</name><parameter_list>(<parameter><type><name>CODEC</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DECODER_SYMBOL0(CODEC)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>AVCodec</name></type> <name>DECODER_SYMBOL</name><argument_list>(<argument><expr><name>FFMPEG_DECODER</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<expr_stmt><expr><name><name>codec_list</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><call><name>DECODER_SYMBOL</name><argument_list>(<argument><expr><name>FFMPEG_DECODER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_register</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>DECODER_SYMBOL</name><argument_list>(<argument><expr><name>FFMPEG_DECODER</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>&amp;</operator><call><name>DECODER_SYMBOL</name><argument_list>(<argument><expr><name>FFMPEG_DECODER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><call><name>avcodec_register_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>AVCodecInitialize</name><argument_list>(<argument><expr><name>FFMPEG_CODEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_PANIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVMEDIA_TYPE_AUDIO</name></expr> :</case> <expr_stmt><expr><name>decode_handler</name> <operator>=</operator> <name>avcodec_decode_audio4</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_VIDEO</name></expr> :</case> <expr_stmt><expr><name>decode_handler</name> <operator>=</operator> <name>avcodec_decode_video2</name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AVMEDIA_TYPE_SUBTITLE</name></expr>:</case> <expr_stmt><expr><name>decode_handler</name> <operator>=</operator> <name>subtitle_handler</name></expr> ;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_APE</name></expr>:</case> <expr_stmt><expr><name>maxsamples_per_frame</name> <operator>/=</operator> <literal type="number">256</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>maxpixels</name> <operator>=</operator> <name>maxpixels_per_frame</name> <operator>*</operator> <name>maxiteration</name></expr>;</expr_stmt>

<expr_stmt><expr><name>maxsamples</name> <operator>=</operator> <name>maxsamples_per_frame</name> <operator>*</operator> <name>maxiteration</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_BINKVIDEO</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_CFHD</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">128</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_DIRAC</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">8192</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_DST</name></expr>:</case> <expr_stmt><expr><name>maxsamples</name> <operator>/=</operator> <literal type="number">8192</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_DXV</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_FFWAVESYNTH</name></expr>:</case> <expr_stmt><expr><name>maxsamples</name> <operator>/=</operator> <literal type="number">16384</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_G2M</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_GDV</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">512</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_GIF</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_HNM4_VIDEO</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">128</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_IFF_ILBM</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">128</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_INDEO4</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">128</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_LSCR</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MOTIONPIXELS</name></expr>:</case><expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">256</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MP4ALS</name></expr>:</case> <expr_stmt><expr><name>maxsamples</name> <operator>/=</operator> <literal type="number">65536</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MSRLE</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MSS2</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">16384</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_MSZH</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">128</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_QTRLE</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_RASC</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SANM</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SCPR</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SMACKVIDEO</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">64</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_SNOW</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">128</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_TGV</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">32</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_TRUEMOTION2</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">1024</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_VP7</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">256</literal></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><name>AV_CODEC_ID_VP9</name></expr>:</case> <expr_stmt><expr><name>maxpixels</name> <operator>/=</operator> <literal type="number">4096</literal></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<decl_stmt><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>ctx</name> <init>= <expr><call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name><modifier>*</modifier></type> <name>parser_avctx</name> <init>= <expr><call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name> <operator>||</operator> <operator>!</operator><name>parser_avctx</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Failed memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>max_pixels</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_pixels</name></name> <operator>&gt;</operator> <name>maxpixels_per_frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_pixels</name></name> <operator>=</operator> <name>maxpixels_per_frame</name></expr>;</expr_stmt></block_content></block></if></if_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>refcounted_frames</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>max_samples</name></name> <operator>=</operator> <name>maxsamples_per_frame</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>GetByteContext</name></type> <name>gbc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>extradata_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bytestream2_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bit_rate</name></name> <operator>=</operator> <call><name>bytestream2_get_le64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>bits_per_coded_sample</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>flags</name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>parser</name> <operator>=</operator> <call><name>av_parser_init</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>strict_std_compliance</name></name> <operator>=</operator> <name>FF_COMPLIANCE_EXPERIMENTAL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>=</operator> <name>AV_EF_AGGRESSIVE</name> <operator>|</operator> <name>AV_EF_COMPLIANT</name> <operator>|</operator> <name>AV_EF_CAREFUL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>err_recognition</name></name> <operator>|=</operator> <name>AV_EF_EXPLODE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x10</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags2</name></name> <operator>|=</operator> <name>AV_CODEC_FLAG2_FAST</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x40</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_force_cpu_flags</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>extradata_size</name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <name>FF_SANE_NB_CHANNELS</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>block_align</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x7FFFFFFF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <call><name>bytestream2_get_le32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>codec_tags</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>c</name><operator>-&gt;</operator><name>codec_tags</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <name>FF_CODEC_TAGS_END</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>codec_tags</name><index>[<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_tag</name></name> <operator>%</operator> <name>n</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>keyframes</name> <operator>=</operator> <call><name>bytestream2_get_le64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>request_channel_layout</name></name> <operator>=</operator> <call><name>bytestream2_get_le64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>idct_algo</name></name> <operator>=</operator> <call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">25</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <literal type="number">0x20</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_CODEC_ID_AC3</name></expr>:</case>

<case>case <expr><name>AV_CODEC_ID_EAC3</name></expr>:</case>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"cons_noisegen"</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"heavy_compr"</literal></expr></argument>, <argument><expr><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"target_level"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_set_int</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><literal type="string">"dmix_mode"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><call><name>bytestream2_get_byte</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbc</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>extradata_size</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>extradata_size</name> <operator>+</operator> <name>AV_INPUT_BUFFER_PADDING_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata_size</name></name> <operator>=</operator> <name>extradata_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>-=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata</name></name></expr></argument>, <argument><expr><name>data</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>extradata_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_image_check_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name> <init>= <expr><call><name>avcodec_open2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>parser_avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_parser_close</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return> 

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>parser_avctx</name><operator>-&gt;</operator><name>codec_id</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>codec_id</name></name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name> <init>= <expr><call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>frame</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Failed memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>avpkt</name></decl>, <decl><type ref="prev"/><name>parsepkt</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsepkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>data</name> <operator>&lt;</operator> <name>end</name> <operator>&amp;&amp;</operator> <name>it</name> <operator>&lt;</operator> <name>maxiteration</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fuzz_tag</name></expr></argument>)</argument_list></sizeof> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <operator>(</operator><name>fuzz_tag</name> <operator>&amp;</operator> <literal type="number">0xFF</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>AV_RN64</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>fuzz_tag</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>data</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>data</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fuzz_tag</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>data</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_new_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsepkt</name></expr></argument>, <argument><expr><name>data</name> <operator>-</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Failed memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>parsepkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>data</name> <operator>-</operator> <name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsepkt</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <operator>(</operator><name>keyframes</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>AV_PKT_FLAG_DISCARD</name> <operator>+</operator> <operator>(</operator><operator>!</operator><operator>!</operator><operator>(</operator><name>keyframes</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt>

<expr_stmt><expr><name>keyframes</name> <operator>=</operator> <operator>(</operator><name>keyframes</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>keyframes</name><operator>&lt;&lt;</operator><literal type="number">62</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>data</name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>fuzz_tag</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

<expr_stmt><expr><name>last</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>

<while>while <condition>(<expr><name><name>parsepkt</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>parser</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_parser_parse2</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>parser_avctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>avpkt</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>parsepkt</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>parsepkt</name><operator>.</operator><name>size</name></name></expr></argument>,

<argument><expr><name><name>parsepkt</name><operator>.</operator><name>pts</name></name></expr></argument>, <argument><expr><name><name>parsepkt</name><operator>.</operator><name>dts</name></name></expr></argument>, <argument><expr><name><name>parsepkt</name><operator>.</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avpkt</name><operator>.</operator><name>data</name></name> <operator>==</operator> <name><name>parsepkt</name><operator>.</operator><name>data</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>buf</name></name> <operator>=</operator> <call><name>av_buffer_ref</name><argument_list>(<argument><expr><name><name>parsepkt</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avpkt</name><operator>.</operator><name>buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Failed memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_packet_make_refcounted</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>error</name><argument_list>(<argument><expr><literal type="string">"Failed memory allocation"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>parsepkt</name><operator>.</operator><name>data</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsepkt</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>parsepkt</name><operator>.</operator><name>pos</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>pts</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>dts</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>dts</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>pos</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name><name>parser</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>||</operator>

<operator>(</operator><name><name>parser</name><operator>-&gt;</operator><name>key_frame</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>pict_type</name></name> <operator>==</operator> <name>AV_PICTURE_TYPE_I</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name>AV_PKT_FLAG_KEY</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>flags</name></name> <operator>|=</operator> <name><name>parsepkt</name><operator>.</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_PKT_FLAG_DISCARD</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_packet_move_ref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parsepkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<while>while <condition>(<expr><name><name>avpkt</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>it</name><operator>++</operator> <operator>&lt;</operator> <name>maxiteration</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>decode_handler</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ec_pixels</name> <operator>+=</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>+</operator> <literal type="number">32LL</literal><operator>)</operator> <operator>*</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <literal type="number">32LL</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>it</name> <operator>&gt;</operator> <literal type="number">20</literal> <operator>||</operator> <name>ec_pixels</name> <operator>&gt;</operator> <literal type="number">4</literal> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>max_pixels</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>error_concealment</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ec_pixels</name> <operator>&gt;</operator> <name>maxpixels</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>maximums_reached</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>nb_samples</name> <operator>+=</operator> <name><name>frame</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_samples</name> <operator>&gt;</operator> <name>maxsamples</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>maximums_reached</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>ret</name> <operator>&gt;</operator> <name><name>avpkt</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>codec_type</name></name> <operator>!=</operator> <name>AVMEDIA_TYPE_AUDIO</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>avpkt</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>data</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avpkt</name><operator>.</operator><name>size</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsepkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<label><name>maximums_reached</name>:</label>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_unref</name><argument_list>(<argument><expr><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>decode_handler</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>avpkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>got_frame</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>it</name><operator>++</operator> <operator>&lt;</operator> <name>maxiteration</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"pixels decoded: %"</literal><name>PRId64</name><literal type="string">", samples decoded: %"</literal><name>PRId64</name><literal type="string">", iterations: %d\n"</literal></expr></argument>, <argument><expr><name>ec_pixels</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name>it</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser_avctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_parser_close</name><argument_list>(<argument><expr><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parsepkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
