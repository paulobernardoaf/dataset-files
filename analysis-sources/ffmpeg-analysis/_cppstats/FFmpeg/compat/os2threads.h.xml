<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\compat\os2threads.h"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOS</name></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INCL_DOSERRORS</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__STRICT_ANSI__</name></cpp:undef> 

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/builtin.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/fmutex.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>TID</name></type> <name>tid</name></decl>;</decl_stmt>

<function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

}</block></struct></type> <name>pthread_t</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>pthread_attr_t</name>;</typedef>

<typedef>typedef <type><name>_fmutex</name></type> <name>pthread_mutex_t</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>pthread_mutexattr_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_MUTEX_INITIALIZER</name></cpp:macro> <cpp:value>_FMUTEX_INITIALIZER</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><name>HEV</name></type> <name>event_sem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>HEV</name></type> <name>ack_sem</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name></type> <name>wait_count</name></decl>;</decl_stmt>

}</block></struct></type> <name>pthread_cond_t</name>;</typedef>

<typedef>typedef <type><name>void</name></type> <name>pthread_condattr_t</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>done</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>_fmutex</name></type> <name>mtx</name></decl>;</decl_stmt>

}</block></struct></type> <name>pthread_once_t</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PTHREAD_ONCE_INIT</name></cpp:macro> <cpp:value>{0, _FMUTEX_INITIALIZER}</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>thread_entry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>thread</name> <init>= <expr><name>arg</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <call><name><name>thread</name><operator>-&gt;</operator><name>start_routine</name></name><argument_list>(<argument><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_create</name><parameter_list>(<parameter><decl><type><name>pthread_t</name> <modifier>*</modifier></type><name>thread</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_attr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>,

<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>start_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>start_routine</name></name> <operator>=</operator> <name>start_routine</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>result</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>thread</name><operator>-&gt;</operator><name>tid</name></name> <operator>=</operator> <call><name>_beginthread</name><argument_list>(<argument><expr><name>thread_entry</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_join</name><parameter_list>(<parameter><decl><type><name>pthread_t</name></type> <name>thread</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>value_ptr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DosWaitThread</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>thread</name><operator>.</operator><name>tid</name></name></expr></argument>, <argument><expr><name>DCWW_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>value_ptr</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>value_ptr</name> <operator>=</operator> <name><name>thread</name><operator>.</operator><name>result</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_mutex_init</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_mutexattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_fmutex_create</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_mutex_destroy</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_fmutex_close</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_mutex_lock</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_fmutex_request</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_mutex_unlock</name><parameter_list>(<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>_fmutex_release</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_cond_init</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>pthread_condattr_t</name> <modifier>*</modifier></type><name>attr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DosCreateEventSem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>event_sem</name></name></expr></argument>, <argument><expr><name>DCE_POSTONE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosCreateEventSem</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>ack_sem</name></name></expr></argument>, <argument><expr><name>DCE_POSTONE</name></expr></argument>, <argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>cond</name><operator>-&gt;</operator><name>wait_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_cond_destroy</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>event_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosCloseEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>ack_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_cond_signal</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>__atomic_cmpxchg32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>event_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosWaitEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>ack_sem</name></name></expr></argument>, <argument><expr><name>SEM_INDEFINITE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_cond_broadcast</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><operator>!</operator><call><name>__atomic_cmpxchg32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_count</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><name>cond</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_cond_timedwait</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>,

<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>timespec</name></name> <modifier>*</modifier></type><name>abstime</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>abs_milli</name> <init>= <expr><name><name>abstime</name><operator>-&gt;</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <name><name>abstime</name><operator>-&gt;</operator><name>tv_nsec</name></name> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ULONG</name></type> <name>t</name> <init>= <expr><call><name>av_clip64</name><argument_list>(<argument><expr><name>abs_milli</name> <operator>-</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call> <operator>/</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ULONG_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__atomic_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>APIRET</name></type> <name>ret</name> <init>= <expr><call><name>DosWaitEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>event_sem</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>__atomic_decrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>ack_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>ERROR_TIMEOUT</name><operator>)</operator></expr> ?</condition><then> <expr><name>ETIMEDOUT</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_cond_wait</name><parameter_list>(<parameter><decl><type><name>pthread_cond_t</name> <modifier>*</modifier></type><name>cond</name></decl></parameter>,

<parameter><decl><type><name>pthread_mutex_t</name> <modifier>*</modifier></type><name>mutex</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>__atomic_increment</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosWaitEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>event_sem</name></name></expr></argument>, <argument><expr><name>SEM_INDEFINITE_WAIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>__atomic_decrement</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cond</name><operator>-&gt;</operator><name>wait_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>DosPostEventSem</name><argument_list>(<argument><expr><name><name>cond</name><operator>-&gt;</operator><name>ack_sem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>pthread_once</name><parameter_list>(<parameter><decl><type><name>pthread_once_t</name> <modifier>*</modifier></type><name>once_control</name></decl></parameter>,

<parameter><function_decl><type><name>void</name></type> (<modifier>*</modifier><name>init_routine</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>once_control</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>_fmutex_request</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once_control</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>once_control</name><operator>-&gt;</operator><name>done</name></name></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>init_routine</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>once_control</name><operator>-&gt;</operator><name>done</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>_fmutex_release</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>once_control</name><operator>-&gt;</operator><name>mtx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
