<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\compat\avisynth\avisynth_c.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avs/config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avs/capi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avs/types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVS_FRAME_ALIGN</name></cpp:macro> <cpp:value>FRAME_ALIGN</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>__AVISYNTH_6_H__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<enum>enum <block>{ <decl><name>AVISYNTH_INTERFACE_VERSION</name> <init>= <expr><literal type="number">6</literal></expr></init></decl> }</block>;</enum>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <block>{<decl><name>AVS_SAMPLE_INT8</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,

<decl><name>AVS_SAMPLE_INT16</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>AVS_SAMPLE_INT24</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>AVS_SAMPLE_INT32</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></init></decl>,

<decl><name>AVS_SAMPLE_FLOAT</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{<decl><name>AVS_PLANAR_Y</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_U</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_V</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_ALIGNED</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">3</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_Y_ALIGNED</name><init>=<expr><name>AVS_PLANAR_Y</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,

<decl><name>AVS_PLANAR_U_ALIGNED</name><init>=<expr><name>AVS_PLANAR_U</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,

<decl><name>AVS_PLANAR_V_ALIGNED</name><init>=<expr><name>AVS_PLANAR_V</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,

<decl><name>AVS_PLANAR_A</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">4</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_R</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_G</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">6</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_B</name><init>=<expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">7</literal></expr></init></decl>,

<decl><name>AVS_PLANAR_A_ALIGNED</name><init>=<expr><name>AVS_PLANAR_A</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,

<decl><name>AVS_PLANAR_R_ALIGNED</name><init>=<expr><name>AVS_PLANAR_R</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,

<decl><name>AVS_PLANAR_G_ALIGNED</name><init>=<expr><name>AVS_PLANAR_G</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>,

<decl><name>AVS_PLANAR_B_ALIGNED</name><init>=<expr><name>AVS_PLANAR_B</name><operator>|</operator><name>AVS_PLANAR_ALIGNED</name></expr></init></decl>}</block>;</enum>

<enum>enum <block>{

<decl><name>AVS_CS_YUVA</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">27</literal></expr></init></decl>,

<decl><name>AVS_CS_BGR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">28</literal></expr></init></decl>,

<decl><name>AVS_CS_YUV</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">29</literal></expr></init></decl>,

<decl><name>AVS_CS_INTERLEAVED</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">30</literal></expr></init></decl>,

<decl><name>AVS_CS_PLANAR</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal></expr></init></decl>,

<decl><name>AVS_CS_SHIFT_SUB_WIDTH</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AVS_CS_SHIFT_SUB_HEIGHT</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>AVS_CS_SHIFT_SAMPLE_BITS</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>,

<decl><name>AVS_CS_SUB_WIDTH_MASK</name> <init>= <expr><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_WIDTH</name></expr></init></decl>,

<decl><name>AVS_CS_SUB_WIDTH_1</name> <init>= <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_WIDTH</name></expr></init></decl>, 

<decl><name>AVS_CS_SUB_WIDTH_2</name> <init>= <expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_WIDTH</name></expr></init></decl>, 

<decl><name>AVS_CS_SUB_WIDTH_4</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_WIDTH</name></expr></init></decl>, 

<decl><name>AVS_CS_VPLANEFIRST</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>, 

<decl><name>AVS_CS_UPLANEFIRST</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">4</literal></expr></init></decl>, 

<decl><name>AVS_CS_SUB_HEIGHT_MASK</name> <init>= <expr><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_HEIGHT</name></expr></init></decl>,

<decl><name>AVS_CS_SUB_HEIGHT_1</name> <init>= <expr><literal type="number">3</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_HEIGHT</name></expr></init></decl>, 

<decl><name>AVS_CS_SUB_HEIGHT_2</name> <init>= <expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_HEIGHT</name></expr></init></decl>, 

<decl><name>AVS_CS_SUB_HEIGHT_4</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SUB_HEIGHT</name></expr></init></decl>, 

<decl><name>AVS_CS_SAMPLE_BITS_MASK</name> <init>= <expr><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SAMPLE_BITS</name></expr></init></decl>,

<decl><name>AVS_CS_SAMPLE_BITS_8</name> <init>= <expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SAMPLE_BITS</name></expr></init></decl>,

<decl><name>AVS_CS_SAMPLE_BITS_10</name> <init>= <expr><literal type="number">5</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SAMPLE_BITS</name></expr></init></decl>,

<decl><name>AVS_CS_SAMPLE_BITS_12</name> <init>= <expr><literal type="number">6</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SAMPLE_BITS</name></expr></init></decl>,

<decl><name>AVS_CS_SAMPLE_BITS_14</name> <init>= <expr><literal type="number">7</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SAMPLE_BITS</name></expr></init></decl>,

<decl><name>AVS_CS_SAMPLE_BITS_16</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SAMPLE_BITS</name></expr></init></decl>,

<decl><name>AVS_CS_SAMPLE_BITS_32</name> <init>= <expr><literal type="number">2</literal> <operator>&lt;&lt;</operator> <name>AVS_CS_SHIFT_SAMPLE_BITS</name></expr></init></decl>,

<decl><name>AVS_CS_PLANAR_MASK</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_YUVA</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_MASK</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_MASK</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_MASK</name></expr></init></decl>,

<decl><name>AVS_CS_PLANAR_FILTER</name> <init>= <expr><operator>~</operator><operator>(</operator><name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_UPLANEFIRST</name><operator>)</operator></expr></init></decl>,

<decl><name>AVS_CS_RGB_TYPE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>AVS_CS_RGBA_TYPE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>AVS_CS_GENERIC_YUV420</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_2</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_2</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_YUV422</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_1</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_2</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_YUV444</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_1</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_1</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_Y</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name> <operator>|</operator> <name>AVS_CS_YUV</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_RGBP</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_RGB_TYPE</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_RGBAP</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_RGBA_TYPE</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_YUVA420</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUVA</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_2</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_2</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_YUVA422</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUVA</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_1</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_2</name></expr></init></decl>, 

<decl><name>AVS_CS_GENERIC_YUVA444</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUVA</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_1</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_1</name></expr></init></decl> }</block>;</enum> 

<enum>enum <block>{

<decl><name>AVS_CS_UNKNOWN</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>,

<decl><name>AVS_CS_BGR24</name> <init>= <expr><name>AVS_CS_RGB_TYPE</name> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name></expr></init></decl>,

<decl><name>AVS_CS_BGR32</name> <init>= <expr><name>AVS_CS_RGBA_TYPE</name> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name></expr></init></decl>,

<decl><name>AVS_CS_YUY2</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name></expr></init></decl>,

<decl><name>AVS_CS_RAW32</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">5</literal> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name></expr></init></decl>,

<decl><name>AVS_CS_YV24</name> <init>= <expr><name>AVS_CS_GENERIC_YUV444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_YV16</name> <init>= <expr><name>AVS_CS_GENERIC_YUV422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_YV12</name> <init>= <expr><name>AVS_CS_GENERIC_YUV420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_I420</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name> <operator>|</operator> <name>AVS_CS_UPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_2</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_2</name></expr></init></decl>, 

<decl><name>AVS_CS_IYUV</name> <init>= <expr><name>AVS_CS_I420</name></expr></init></decl>,

<decl><name>AVS_CS_YV411</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_1</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_4</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV9</name> <init>= <expr><name>AVS_CS_PLANAR</name> <operator>|</operator> <name>AVS_CS_YUV</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name> <operator>|</operator> <name>AVS_CS_VPLANEFIRST</name> <operator>|</operator> <name>AVS_CS_SUB_HEIGHT_4</name> <operator>|</operator> <name>AVS_CS_SUB_WIDTH_4</name></expr></init></decl>, 

<decl><name>AVS_CS_Y8</name> <init>= <expr><name>AVS_CS_GENERIC_Y</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV444P10</name> <init>= <expr><name>AVS_CS_GENERIC_YUV444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV422P10</name> <init>= <expr><name>AVS_CS_GENERIC_YUV422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV420P10</name> <init>= <expr><name>AVS_CS_GENERIC_YUV420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_Y10</name> <init>= <expr><name>AVS_CS_GENERIC_Y</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV444P12</name> <init>= <expr><name>AVS_CS_GENERIC_YUV444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV422P12</name> <init>= <expr><name>AVS_CS_GENERIC_YUV422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV420P12</name> <init>= <expr><name>AVS_CS_GENERIC_YUV420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_Y12</name> <init>= <expr><name>AVS_CS_GENERIC_Y</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV444P14</name> <init>= <expr><name>AVS_CS_GENERIC_YUV444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV422P14</name> <init>= <expr><name>AVS_CS_GENERIC_YUV422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV420P14</name> <init>= <expr><name>AVS_CS_GENERIC_YUV420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_Y14</name> <init>= <expr><name>AVS_CS_GENERIC_Y</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV444P16</name> <init>= <expr><name>AVS_CS_GENERIC_YUV444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV422P16</name> <init>= <expr><name>AVS_CS_GENERIC_YUV422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV420P16</name> <init>= <expr><name>AVS_CS_GENERIC_YUV420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_Y16</name> <init>= <expr><name>AVS_CS_GENERIC_Y</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV444PS</name> <init>= <expr><name>AVS_CS_GENERIC_YUV444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV422PS</name> <init>= <expr><name>AVS_CS_GENERIC_YUV422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_YUV420PS</name> <init>= <expr><name>AVS_CS_GENERIC_YUV420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_Y32</name> <init>= <expr><name>AVS_CS_GENERIC_Y</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_BGR48</name> <init>= <expr><name>AVS_CS_RGB_TYPE</name> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_BGR64</name> <init>= <expr><name>AVS_CS_RGBA_TYPE</name> <operator>|</operator> <name>AVS_CS_BGR</name> <operator>|</operator> <name>AVS_CS_INTERLEAVED</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBP</name> <init>= <expr><name>AVS_CS_GENERIC_RGBP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBP10</name> <init>= <expr><name>AVS_CS_GENERIC_RGBP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBP12</name> <init>= <expr><name>AVS_CS_GENERIC_RGBP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBP14</name> <init>= <expr><name>AVS_CS_GENERIC_RGBP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBP16</name> <init>= <expr><name>AVS_CS_GENERIC_RGBP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBPS</name> <init>= <expr><name>AVS_CS_GENERIC_RGBP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBAP</name> <init>= <expr><name>AVS_CS_GENERIC_RGBAP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBAP10</name> <init>= <expr><name>AVS_CS_GENERIC_RGBAP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBAP12</name> <init>= <expr><name>AVS_CS_GENERIC_RGBAP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBAP14</name> <init>= <expr><name>AVS_CS_GENERIC_RGBAP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBAP16</name> <init>= <expr><name>AVS_CS_GENERIC_RGBAP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_RGBAPS</name> <init>= <expr><name>AVS_CS_GENERIC_RGBAP</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA444</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA422</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA420</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_8</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA444P10</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA422P10</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA420P10</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_10</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA444P12</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA422P12</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA420P12</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_12</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA444P14</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA422P14</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA420P14</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_14</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA444P16</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA422P16</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA420P16</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_16</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA444PS</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA444</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA422PS</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA422</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

<decl><name>AVS_CS_YUVA420PS</name> <init>= <expr><name>AVS_CS_GENERIC_YUVA420</name> <operator>|</operator> <name>AVS_CS_SAMPLE_BITS_32</name></expr></init></decl>, 

}</block>;</enum>

<enum>enum <block>{

<decl><name>AVS_IT_BFF</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">0</literal></expr></init></decl>,

<decl><name>AVS_IT_TFF</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">1</literal></expr></init></decl>,

<decl><name>AVS_IT_FIELDBASED</name> <init>= <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">2</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{

<decl><name>AVS_FILTER_TYPE</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>AVS_FILTER_INPUT_COLORSPACE</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>AVS_FILTER_OUTPUT_TYPE</name><init>=<expr><literal type="number">9</literal></expr></init></decl>,

<decl><name>AVS_FILTER_NAME</name><init>=<expr><literal type="number">4</literal></expr></init></decl>,

<decl><name>AVS_FILTER_AUTHOR</name><init>=<expr><literal type="number">5</literal></expr></init></decl>,

<decl><name>AVS_FILTER_VERSION</name><init>=<expr><literal type="number">6</literal></expr></init></decl>,

<decl><name>AVS_FILTER_ARGS</name><init>=<expr><literal type="number">7</literal></expr></init></decl>,

<decl><name>AVS_FILTER_ARGS_INFO</name><init>=<expr><literal type="number">8</literal></expr></init></decl>,

<decl><name>AVS_FILTER_ARGS_DESCRIPTION</name><init>=<expr><literal type="number">10</literal></expr></init></decl>,

<decl><name>AVS_FILTER_DESCRIPTION</name><init>=<expr><literal type="number">11</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{ 

<decl><name>AVS_FILTER_TYPE_AUDIO</name><init>=<expr><literal type="number">1</literal></expr></init></decl>,

<decl><name>AVS_FILTER_TYPE_VIDEO</name><init>=<expr><literal type="number">2</literal></expr></init></decl>,

<decl><name>AVS_FILTER_OUTPUT_TYPE_SAME</name><init>=<expr><literal type="number">3</literal></expr></init></decl>,

<decl><name>AVS_FILTER_OUTPUT_TYPE_DIFFERENT</name><init>=<expr><literal type="number">4</literal></expr></init></decl>}</block>;</enum>

<enum>enum <block>{

<decl><name>AVS_CACHE_NOTHING</name><init>=<expr><literal type="number">10</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_WINDOW</name><init>=<expr><literal type="number">11</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GENERIC</name><init>=<expr><literal type="number">12</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_FORCE_GENERIC</name><init>=<expr><literal type="number">13</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GET_POLICY</name><init>=<expr><literal type="number">30</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GET_WINDOW</name><init>=<expr><literal type="number">31</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GET_RANGE</name><init>=<expr><literal type="number">32</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_AUDIO</name><init>=<expr><literal type="number">50</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_AUDIO_NOTHING</name><init>=<expr><literal type="number">51</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_AUDIO_NONE</name><init>=<expr><literal type="number">52</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_AUDIO_AUTO</name><init>=<expr><literal type="number">53</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GET_AUDIO_POLICY</name><init>=<expr><literal type="number">70</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GET_AUDIO_SIZE</name><init>=<expr><literal type="number">71</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_FRAME</name><init>=<expr><literal type="number">100</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_GO</name><init>=<expr><literal type="number">101</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_AUDIO_BEGIN</name><init>=<expr><literal type="number">120</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_AUDIO_STARTLO</name><init>=<expr><literal type="number">121</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_AUDIO_STARTHI</name><init>=<expr><literal type="number">122</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_AUDIO_COUNT</name><init>=<expr><literal type="number">123</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_AUDIO_COMMIT</name><init>=<expr><literal type="number">124</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_PREFETCH_AUDIO_GO</name><init>=<expr><literal type="number">125</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GETCHILD_CACHE_MODE</name><init>=<expr><literal type="number">200</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GETCHILD_CACHE_SIZE</name><init>=<expr><literal type="number">201</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GETCHILD_AUDIO_MODE</name><init>=<expr><literal type="number">202</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GETCHILD_AUDIO_SIZE</name><init>=<expr><literal type="number">203</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GETCHILD_COST</name><init>=<expr><literal type="number">220</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_COST_ZERO</name><init>=<expr><literal type="number">221</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_COST_UNIT</name><init>=<expr><literal type="number">222</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_COST_LOW</name><init>=<expr><literal type="number">223</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_COST_MED</name><init>=<expr><literal type="number">224</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_COST_HI</name><init>=<expr><literal type="number">225</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GETCHILD_THREAD_MODE</name><init>=<expr><literal type="number">240</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_THREAD_UNSAFE</name><init>=<expr><literal type="number">241</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_THREAD_CLASS</name><init>=<expr><literal type="number">242</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_THREAD_SAFE</name><init>=<expr><literal type="number">243</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_THREAD_OWN</name><init>=<expr><literal type="number">244</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_GETCHILD_ACCESS_COST</name><init>=<expr><literal type="number">260</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_ACCESS_RAND</name><init>=<expr><literal type="number">261</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_ACCESS_SEQ0</name><init>=<expr><literal type="number">262</literal></expr></init></decl>, 

<decl><name>AVS_CACHE_ACCESS_SEQ1</name><init>=<expr><literal type="number">263</literal></expr></init></decl>, 

}</block>;</enum>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>BUILDING_AVSCORE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function_decl><type><name>AVSValue</name></type> <name>create_c_video_filter</name><parameter_list>(<parameter><decl><type><name>AVSValue</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>, <parameter><decl><type><name>IScriptEnvironment</name> <modifier>*</modifier></type> <name>e0</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>AVS_ScriptEnvironment</name> <block>{

<decl_stmt><decl><type><name>IScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>error</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVS_ScriptEnvironment</name><argument_list>(<argument><expr><name>IScriptEnvironment</name> <operator>*</operator> <name>e</name> <operator>=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call>

<operator>:</operator> <call><name>env</name><argument_list>(<argument><expr><name>e</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <macro><name>error</name><argument_list>(<argument><literal type="number">0</literal></argument>)</argument_list></macro> <expr><block>{}</block></expr></expr_stmt>

}</block>;</struct>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>AVS_Clip</name></name></type> <name>AVS_Clip</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>AVS_ScriptEnvironment</name></name></type> <name>AVS_ScriptEnvironment</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVS_VideoInfo</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>fps_numerator</name></decl>, <name>fps_denominator</name>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_frames</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>pixel_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>audio_samples_per_second</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>sample_type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INT64</name></type> <name>num_audio_samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nchannels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>image_type</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVS_VideoInfo</name>;</typedef>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_has_video</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>width</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_has_audio</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name><operator>!=</operator><literal type="number">0</literal><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_rgb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>&amp;</operator><name>AVS_CS_BGR</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_rgb24</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>&amp;</operator><name>AVS_CS_BGR24</name><operator>)</operator><operator>==</operator><name>AVS_CS_BGR24</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_SAMPLE_BITS_MASK</name><operator>)</operator> <operator>==</operator> <name>AVS_CS_SAMPLE_BITS_8</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_rgb32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>&amp;</operator><name>AVS_CS_BGR32</name><operator>)</operator><operator>==</operator><name>AVS_CS_BGR32</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_SAMPLE_BITS_MASK</name><operator>)</operator> <operator>==</operator> <name>AVS_CS_SAMPLE_BITS_8</name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_yuv</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>&amp;</operator><name>AVS_CS_YUV</name> <operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_yuy2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_YUY2</name><operator>)</operator> <operator>==</operator> <name>AVS_CS_YUY2</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yv24</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yv16</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yv12</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yv411</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_y8</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_plane_width_subsampling</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_plane_height_subsampling</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_bits_per_pixel</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_bytes_from_pixels</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>pixels</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_row_size</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_bmp_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>vi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_is_color_space</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>c_space</name><operator>)</operator></expr>;</expr_stmt>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_property</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>property</name><operator>)</operator> <operator>==</operator> <name>property</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_planar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>&amp;</operator> <name>AVS_CS_PLANAR</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_field_based</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_FIELDBASED</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_parity_known</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_FIELDBASED</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <operator>(</operator><name>AVS_IT_BFF</name> <operator>|</operator> <name>AVS_IT_TFF</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_bff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_BFF</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_tff</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name> <operator>&amp;</operator> <name>AVS_IT_TFF</name><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_samples_per_second</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bytes_per_channel_sample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>sample_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVS_SAMPLE_INT8</name></expr>:</case> <return>return <expr>sizeof<operator>(</operator><name>signed</name> <name>char</name><operator>)</operator></expr>;</return>

<case>case <expr><name>AVS_SAMPLE_INT16</name></expr>:</case> <return>return <expr>sizeof<operator>(</operator><name>signed</name> <name>short</name><operator>)</operator></expr>;</return>

<case>case <expr><name>AVS_SAMPLE_INT24</name></expr>:</case> <return>return <expr><literal type="number">3</literal></expr>;</return>

<case>case <expr><name>AVS_SAMPLE_INT32</name></expr>:</case> <return>return <expr>sizeof<operator>(</operator><name>signed</name> <name>int</name><operator>)</operator></expr>;</return>

<case>case <expr><name>AVS_SAMPLE_FLOAT</name></expr>:</case> <return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<default>default:</default> <return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bytes_per_audio_sample</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nchannels</name></name><operator>*</operator><call><name>avs_bytes_per_channel_sample</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>INT64</name></type> <name>avs_audio_samples_from_frames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>frames</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><name>INT64</name><operator>)</operator><operator>(</operator><name>frames</name><operator>)</operator> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name> <operator>*</operator> <name><name>p</name><operator>-&gt;</operator><name>fps_denominator</name></name> <operator>/</operator> <name><name>p</name><operator>-&gt;</operator><name>fps_numerator</name></name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_frames_from_audio_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>samples</name> <operator>*</operator> <operator>(</operator><name>INT64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>fps_numerator</name></name> <operator>/</operator> <operator>(</operator><name>INT64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>fps_denominator</name></name> <operator>/</operator> <operator>(</operator><name>INT64</name><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>audio_samples_per_second</name></name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>INT64</name></type> <name>avs_audio_samples_from_bytes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>bytes</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name>bytes</name> <operator>/</operator> <call><name>avs_bytes_per_audio_sample</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>INT64</name></type> <name>avs_bytes_from_audio_samples</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>samples</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name>samples</name> <operator>*</operator> <call><name>avs_bytes_per_audio_sample</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_audio_channels</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>nchannels</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_sample_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name><name>p</name><operator>-&gt;</operator><name>sample_type</name></name></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_set_property</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>

<block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>|=</operator><name>property</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_clear_property</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>property</name></decl></parameter>)</parameter_list>

<block>{<block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>&amp;=</operator><operator>~</operator><name>property</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_set_field_based</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>isfieldbased</name></decl></parameter>)</parameter_list>

<block>{<block_content> <if_stmt><if>if <condition>(<expr><name>isfieldbased</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>|=</operator><name>AVS_IT_FIELDBASED</name></expr>;</expr_stmt></block_content></block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>image_type</name></name><operator>&amp;=</operator><operator>~</operator><name>AVS_IT_FIELDBASED</name></expr>;</expr_stmt></block_content></block></else></if_stmt> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_set_fps</name><parameter_list>(<parameter><decl><type><name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>numerator</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>denominator</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name><init>=<expr><name>numerator</name></expr></init></decl>, <decl><type ref="prev"/><name>y</name><init>=<expr><name>denominator</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>y</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>t</name> <init>= <expr><name>x</name><operator>%</operator><name>y</name></expr></init></decl>;</decl_stmt> <expr_stmt><expr><name>x</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fps_numerator</name></name> <operator>=</operator> <name>numerator</name><operator>/</operator><name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>fps_denominator</name></name> <operator>=</operator> <name>denominator</name><operator>/</operator><name>x</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_same_colorspace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>x</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name><name>x</name><operator>-&gt;</operator><name>pixel_type</name></name> <operator>==</operator> <name><name>y</name><operator>-&gt;</operator><name>pixel_type</name></name><operator>)</operator>

<operator>||</operator> <operator>(</operator><call><name>avs_is_yv12</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>avs_is_yv12</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_rgb48</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_rgb64</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yuv444p16</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yuv422p16</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yuv420p16</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_y16</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yuv444ps</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yuv422ps</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yuv420ps</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_y32</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_444</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_422</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_420</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_y</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_yuva</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_planar_rgb</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_planar_rgba</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_num_components</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_component_size</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_bits_per_component</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>AVS_VideoFrameBuffer</name> <block>{

<decl_stmt><decl><type><name>BYTE</name> <modifier>*</modifier></type> <name>data</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIZETMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>data_size</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>data_size</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>sequence_number</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>refcount</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVS_VideoFrameBuffer</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVS_VideoFrame</name> <block>{

<decl_stmt><decl><type><specifier>volatile</specifier> <name>long</name></type> <name>refcount</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVS_VideoFrameBuffer</name> <modifier>*</modifier></type> <name>vfb</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIZETMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>offset</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>pitch</name></decl>, <name>row_size</name>, <name>height</name>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIZETMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>offsetU</name></decl>, <name>offsetV</name>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>offsetU</name></decl>, <name>offsetV</name>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>pitchUV</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>row_sizeUV</name></decl>, <name>heightUV</name>;</decl_stmt> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SIZETMOD</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>size_t</name></type> <name>offsetA</name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>int</name></type> <name>offsetA</name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>pitchA</name></decl>, <name>row_sizeA</name>;</decl_stmt> 

}</block></struct></type> <name>AVS_VideoFrame</name>;</typedef>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_pitch_p</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoFrame</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_row_size_p</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoFrame</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_height_p</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoFrame</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>const BYTE *</argument>, <argument>avs_get_read_ptr_p</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoFrame</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_is_writable</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoFrame</name> <operator>*</operator> <name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>BYTE *</argument>, <argument>avs_get_write_ptr_p</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><specifier>const</specifier> <name>AVS_VideoFrame</name> <operator>*</operator> <name>p</name><operator>,</operator> <name>int</name> <name>plane</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_release_video_frame</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_VideoFrame</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_VideoFrame</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_copy_video_frame</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_VideoFrame</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_pitch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>avs_get_pitch_p</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_row_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>avs_get_row_size_p</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_get_height</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>avs_get_height_p</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>avs_get_read_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>avs_get_read_ptr_p</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>BYTE</name><modifier>*</modifier></type> <name>avs_get_write_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>

<return>return <expr><call><name>avs_get_write_ptr_p</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_release_frame</name><parameter_list>(<parameter><decl><type><name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content><expr_stmt><expr><call><name>avs_release_video_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>avs_copy_frame</name><parameter_list>(<parameter><decl><type><name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content><return>return <expr><call><name>avs_copy_video_frame</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <type><name><name>struct</name> <name>AVS_Value</name></name></type> <name>AVS_Value</name>;</typedef>

<struct>struct <name>AVS_Value</name> <block>{

<decl_stmt><decl><type><name>short</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>short</name></type> <name>array_size</name></decl>;</decl_stmt>

<union>union <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>clip</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>char</name></type> <name>boolean</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>integer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>floating_pt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVS_Value</name> <modifier>*</modifier></type> <name>array</name></decl>;</decl_stmt>

}</block> <decl><name>d</name></decl>;</union>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVS_Value</name></type> <name>avs_void</name> <init>= <expr><block>{<expr><literal type="char">'v'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>void</argument>, <argument>avs_copy_value</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Value</name> <operator>*</operator> <name>dest</name><operator>,</operator> <name>AVS_Value</name> <name>src</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_release_value</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_take_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Value</name></expr></argument>, <argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_set_to_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Value</name> <operator>*</operator></expr></argument>, <argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_defined</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <literal type="char">'v'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_clip</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'c'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_bool</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'b'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_int</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'i'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_float</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'i'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_string</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'s'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_array</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'a'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_error</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="char">'e'</literal></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_as_bool</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>boolean</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_as_int</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>integer</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>avs_as_string</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_error</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>avs_is_string</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>double</name></type> <name>avs_as_float</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_int</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>integer</name></name></expr> </then><else>: <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>floating_pt</name></name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>avs_as_error</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_error</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <specifier>const</specifier> <name>AVS_Value</name> <modifier>*</modifier></type> <name>avs_as_array</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>array</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_array_size</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_array</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>array_size</name></name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_array_elt</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name></type> <name>v</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content> <return>return <expr><ternary><condition><expr><call><name>avs_is_array</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>array</name><index>[<expr><name>index</name></expr>]</index></name></expr> </then><else>: <expr><name>v</name></expr></else></ternary></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_bool</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v0</name></decl></parameter>)</parameter_list>

<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'b'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>boolean</name></name> <operator>=</operator> <ternary><condition><expr><name>v0</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_int</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>v0</name></decl></parameter>)</parameter_list>

<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'i'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>)</parameter_list>

<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'s'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_float</name><parameter_list>(<parameter><decl><type><name>float</name></type> <name>v0</name></decl></parameter>)</parameter_list>

<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'f'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>floating_pt</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_error</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>)</parameter_list>

<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'e'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>string</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_clip</name><parameter_list>(<parameter><decl><type><name>AVS_Clip</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>)</parameter_list>

<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name></decl>;</decl_stmt> <expr_stmt><expr><call><name>avs_set_to_clip</name><argument_list>(<argument><expr><operator>&amp;</operator><name>v</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>AVSC_INLINE</name> <name>AVS_Value</name></type> <name>avs_new_value_array</name><parameter_list>(<parameter><decl><type><name>AVS_Value</name> <modifier>*</modifier></type> <name>v0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content> <decl_stmt><decl><type><name>AVS_Value</name></type> <name>v</name></decl>;</decl_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>d</name><operator>.</operator><name>array</name></name> <operator>=</operator> <name>v0</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>v</name><operator>.</operator><name>array_size</name></name> <operator>=</operator> <operator>(</operator><name>short</name><operator>)</operator><name>size</name></expr>;</expr_stmt> <return>return <expr><name>v</name></expr>;</return> </block_content>}</block></function>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_release_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_copy_clip</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_clip_get_error</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_get_video_info</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_get_version</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_Clip</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_get_frame</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>n</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_parity</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>n</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_get_audio</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator> <name>void</name> <operator>*</operator> <name>buf</name><operator>,</operator>

<name>INT64</name> <name>start</name><operator>,</operator> <name>INT64</name> <name>count</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_cache_hints</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_Clip</name> <operator>*</operator><operator>,</operator>

<name>int</name> <name>cachehints</name><operator>,</operator> <name>int</name> <name>frame_range</name><operator>)</operator></expr>;</expr_stmt>

<typedef>typedef <function_decl><type><name>AVS_Value</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>AVS_ApplyFunc</name>)

<parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>AVS_Value</name></type> <name>args</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><name><name>struct</name> <name>AVS_FilterInfo</name></name></type> <name>AVS_FilterInfo</name>;</typedef>

<struct>struct <name>AVS_FilterInfo</name>

<block>{

<decl_stmt><decl><type><name>AVS_Clip</name> <modifier>*</modifier></type> <name>child</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVS_VideoInfo</name></type> <name>vi</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl>;</decl_stmt>

<function_decl><type><name>AVS_VideoFrame</name> <modifier>*</modifier></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>get_frame</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>get_parity</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>get_audio</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type> <name>buf</name></decl></parameter>,

<parameter><decl><type><name>INT64</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>INT64</name></type> <name>count</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>set_cache_hints</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cachehints</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>frame_range</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> (<name>AVSC_CC</name> <modifier>*</modifier> <name>free_filter</name>)<parameter_list>(<parameter><decl><type><name>AVS_FilterInfo</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>error</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type> <name>user_data</name></decl>;</decl_stmt>

}</block>;</struct>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_Clip *</argument>, <argument>avs_new_c_filter</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator> <name>e</name><operator>,</operator>

<name>AVS_FilterInfo</name> <operator>*</operator> <operator>*</operator> <name>fi</name><operator>,</operator>

<name>AVS_Value</name> <name>child</name><operator>,</operator> <name>int</name> <name>store_child</name><operator>)</operator></expr>;</expr_stmt>

<enum>enum <block>{

<decl><name>AVS_CPU_FORCE</name> <init>= <expr><literal type="number">0x01</literal></expr></init></decl>, 

<decl><name>AVS_CPU_FPU</name> <init>= <expr><literal type="number">0x02</literal></expr></init></decl>, 

<decl><name>AVS_CPU_MMX</name> <init>= <expr><literal type="number">0x04</literal></expr></init></decl>, 

<decl><name>AVS_CPU_INTEGER_SSE</name> <init>= <expr><literal type="number">0x08</literal></expr></init></decl>, 

<decl><name>AVS_CPU_SSE</name> <init>= <expr><literal type="number">0x10</literal></expr></init></decl>, 

<decl><name>AVS_CPU_SSE2</name> <init>= <expr><literal type="number">0x20</literal></expr></init></decl>, 

<decl><name>AVS_CPU_3DNOW</name> <init>= <expr><literal type="number">0x40</literal></expr></init></decl>, 

<decl><name>AVS_CPU_3DNOW_EXT</name> <init>= <expr><literal type="number">0x80</literal></expr></init></decl>, 

<decl><name>AVS_CPU_X86_64</name> <init>= <expr><literal type="number">0xA0</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_SSE3</name> <init>= <expr><literal type="number">0x100</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_SSSE3</name> <init>= <expr><literal type="number">0x200</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_SSE4</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_SSE4_1</name> <init>= <expr><literal type="number">0x400</literal></expr></init></decl>,

<decl><name>AVS_CPUF_AVX</name> <init>= <expr><literal type="number">0x800</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_SSE4_2</name> <init>= <expr><literal type="number">0x1000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX2</name> <init>= <expr><literal type="number">0x2000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_FMA3</name> <init>= <expr><literal type="number">0x4000</literal></expr></init></decl>,

<decl><name>AVS_CPUF_F16C</name> <init>= <expr><literal type="number">0x8000</literal></expr></init></decl>,

<decl><name>AVS_CPUF_MOVBE</name> <init>= <expr><literal type="number">0x10000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_POPCNT</name> <init>= <expr><literal type="number">0x20000</literal></expr></init></decl>,

<decl><name>AVS_CPUF_AES</name> <init>= <expr><literal type="number">0x40000</literal></expr></init></decl>,

<decl><name>AVS_CPUF_FMA4</name> <init>= <expr><literal type="number">0x80000</literal></expr></init></decl>,

<decl><name>AVS_CPUF_AVX512F</name> <init>= <expr><literal type="number">0x100000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512DQ</name> <init>= <expr><literal type="number">0x200000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512PF</name> <init>= <expr><literal type="number">0x400000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512ER</name> <init>= <expr><literal type="number">0x800000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512CD</name> <init>= <expr><literal type="number">0x1000000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512BW</name> <init>= <expr><literal type="number">0x2000000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512VL</name> <init>= <expr><literal type="number">0x4000000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512IFMA</name> <init>= <expr><literal type="number">0x8000000</literal></expr></init></decl>, 

<decl><name>AVS_CPUF_AVX512VBMI</name> <init>= <expr><literal type="number">0x10000000</literal></expr></init></decl> 

}</block>;</enum>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_get_error</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_get_cpu_flags</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_check_version</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>version</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>char *</argument>, <argument>avs_save_string</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>s</name><operator>,</operator> <name>int</name> <name>length</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_sprintf</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>, <argument><expr><name>avs_vsprintf</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>fmt</name></expr></argument>, <argument><expr><name>void</name><operator>*</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_add_function</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator>

<specifier>const</specifier> <name>char</name> <operator>*</operator> <name>name</name><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <name>params</name><operator>,</operator>

<name>AVS_ApplyFunc</name> <name>apply</name><operator>,</operator> <name>void</name> <operator>*</operator> <name>user_data</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_function_exists</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_Value</argument>, <argument>avs_invoke</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name> <operator>*</operator> <name>name</name><operator>,</operator>

<name>AVS_Value</name> <name>args</name><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator> <name>arg_names</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>AVS_Value</name></expr></argument>, <argument><expr><name>avs_get_var</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_var</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name><operator>,</operator> <name>AVS_Value</name> <name>val</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_global_var</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <specifier>const</specifier> <name>char</name><operator>*</operator> <name>name</name><operator>,</operator> <specifier>const</specifier> <name>AVS_Value</name> <name>val</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_new_video_frame_a</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator>

<specifier>const</specifier> <name>AVS_VideoInfo</name> <operator>*</operator> <name>vi</name><operator>,</operator> <name>int</name> <name>align</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>AVSC_INLINE</name> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>avs_new_video_frame</name><parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>vi</name></decl></parameter>)</parameter_list>

<block>{<block_content><return>return <expr><call><name>avs_new_video_frame_a</name><argument_list>(<argument><expr><name>env</name></expr></argument>,<argument><expr><name>vi</name></expr></argument>,<argument><expr><name>AVS_FRAME_ALIGN</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_VideoFrame</name> <modifier>*</modifier></type> <name>avs_new_frame</name><parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>vi</name></decl></parameter>)</parameter_list>

<block>{<block_content><return>return <expr><call><name>avs_new_video_frame_a</name><argument_list>(<argument><expr><name>env</name></expr></argument>,<argument><expr><name>vi</name></expr></argument>,<argument><expr><name>AVS_FRAME_ALIGN</name></expr></argument>)</argument_list></call></expr>;</return></block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_make_writable</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><name>AVS_VideoFrame</name> <operator>*</operator> <operator>*</operator> <name>pvf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>void</argument>, <argument>avs_bit_blt</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>BYTE</name><operator>*</operator> <name>dstp</name><operator>,</operator> <name>int</name> <name>dst_pitch</name><operator>,</operator> <specifier>const</specifier> <name>BYTE</name><operator>*</operator> <name>srcp</name><operator>,</operator> <name>int</name> <name>src_pitch</name><operator>,</operator> <name>int</name> <name>row_size</name><operator>,</operator> <name>int</name> <name>height</name><operator>)</operator></expr>;</expr_stmt>

<typedef>typedef <function_decl><type><name>void</name></type> (<name>AVSC_CC</name> <modifier>*</modifier><name>AVS_ShutdownFunc</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>user_data</name></decl></parameter>, <parameter><decl><type><name>AVS_ScriptEnvironment</name> <modifier>*</modifier></type> <name>env</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<macro><name>AVSC_API</name><argument_list>(<argument>void</argument>, <argument>avs_at_exit</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>AVS_ShutdownFunc</name> <name>function</name><operator>,</operator> <name>void</name> <operator>*</operator> <name>user_data</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_subframe</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>AVS_VideoFrame</name> <operator>*</operator> <name>src</name><operator>,</operator> <name>int</name> <name>rel_offset</name><operator>,</operator> <name>int</name> <name>new_pitch</name><operator>,</operator> <name>int</name> <name>new_row_size</name><operator>,</operator> <name>int</name> <name>new_height</name><operator>)</operator></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>int</argument>, <argument>avs_set_memory_max</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>int</name> <name>mem</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>int</name></expr></argument>, <argument><expr><name>avs_set_working_dir</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator> <name>newdir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_ScriptEnvironment *</argument>, <argument>avs_create_script_environment</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>int</name> <name>version</name><operator>)</operator></expr>;</expr_stmt>

<function_decl><type><name>AVSC_EXPORT</name>

<specifier>const</specifier> <name>char</name> <modifier>*</modifier> <name>AVSC_CC</name></type> <name>avisynth_c_plugin_init</name><parameter_list>(<parameter><decl><type><name>AVS_ScriptEnvironment</name><modifier>*</modifier></type> <name>env</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><call><name>AVSC_API</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>avs_delete_script_environment</name></expr></argument>)</argument_list></call><argument_list>(<argument><expr><name>AVS_ScriptEnvironment</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>AVSC_API</name><argument_list>(<argument>AVS_VideoFrame *</argument>, <argument>avs_subframe_planar</argument>)</argument_list></macro><expr_stmt><expr><operator>(</operator><name>AVS_ScriptEnvironment</name> <operator>*</operator><operator>,</operator> <name>AVS_VideoFrame</name> <operator>*</operator> <name>src</name><operator>,</operator> <name>int</name> <name>rel_offset</name><operator>,</operator> <name>int</name> <name>new_pitch</name><operator>,</operator> <name>int</name> <name>new_row_size</name><operator>,</operator> <name>int</name> <name>new_height</name><operator>,</operator> <name>int</name> <name>rel_offsetU</name><operator>,</operator> <name>int</name> <name>rel_offsetV</name><operator>,</operator> <name>int</name> <name>new_pitchUV</name><operator>)</operator></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>AVSC_NO_DECLSPEC</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name><name>struct</name> <name>AVS_Library</name></name></type> <name>AVS_Library</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_DECLARE_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>name##_func name</cpp:value></cpp:define>

<struct>struct <name>AVS_Library</name> <block>{

<decl_stmt><decl><type><name>HMODULE</name></type> <name>handle</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_add_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_at_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_bit_blt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_check_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_clip_get_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_copy_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_copy_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_copy_video_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_create_script_environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_delete_script_environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_function_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_parity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_video_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_invoke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_make_writable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_new_c_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_new_video_frame_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_release_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_release_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_release_video_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_save_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_set_cache_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_set_global_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_set_memory_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_set_to_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_set_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_set_working_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_sprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_subframe_planar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_take_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_vsprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv411</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_y8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_color_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_plane_width_subsampling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_plane_height_subsampling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_bits_per_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_bytes_from_pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_row_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_bmp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_pitch_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_row_size_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_height_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_read_ptr_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_writable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_get_write_ptr_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_rgb48</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_rgb64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yuv444p16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yuv422p16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yuv420p16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_y16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yuv444ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yuv422ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yuv420ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_y32</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_444</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_422</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_420</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_yuva</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_planar_rgb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_is_planar_rgba</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_num_components</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_component_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_DECLARE_FUNC</name><argument_list>(<argument><expr><name>avs_bits_per_component</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

}</block>;</struct>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVSC_DECLARE_FUNC</name></cpp:undef>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_is_xx_fallback_return_false</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_num_components_fallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pixel_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AVS_CS_UNKNOWN</name></expr>:</case>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AVS_CS_RAW32</name></expr>:</case>

<case>case <expr><name>AVS_CS_Y8</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AVS_CS_BGR32</name></expr>:</case>

<return>return <expr><literal type="number">4</literal></expr>;</return> 

<default>default:</default>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_component_size_fallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>int</name></type> <name>avs_bits_per_component_fallback</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVS_VideoInfo</name> <modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">8</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>AVS_Library</name> <modifier>*</modifier></type> <name>avs_load_library</name><parameter_list>()</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>AVS_Library</name> <modifier>*</modifier></type><name>library</name> <init>= <expr><operator>(</operator><name>AVS_Library</name> <operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVS_Library</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>library</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>library</name><operator>-&gt;</operator><name>handle</name></name> <operator>=</operator> <call><name>LoadLibraryA</name><argument_list>(<argument><expr><literal type="string">"avisynth"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>library</name><operator>-&gt;</operator><name>handle</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__AVSC_STRINGIFY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#x</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_STRINGIFY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__AVSC_STRINGIFY(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_LOAD_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{library-&gt;name = (name##_func) GetProcAddress(library-&gt;handle, AVSC_STRINGIFY(name));if (library-&gt;name == NULL)goto fail;}</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_LOAD_FUNC_FALLBACK</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>name2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{library-&gt;name = (name##_func) GetProcAddress(library-&gt;handle, AVSC_STRINGIFY(name));if (library-&gt;name == NULL)library-&gt;name = (name##_func) GetProcAddress(library-&gt;handle, AVSC_STRINGIFY(name2));if (library-&gt;name == NULL)goto fail;}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AVSC_LOAD_FUNC_FALLBACK_SIMULATED</name><parameter_list>(<parameter><type><name>name</name></type></parameter>,<parameter><type><name>name2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>{library-&gt;name = (name##_func) GetProcAddress(library-&gt;handle, AVSC_STRINGIFY(name));if (library-&gt;name == NULL)library-&gt;name = name2;if (library-&gt;name == NULL)goto fail;}</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_add_function</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_at_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_bit_blt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_check_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_clip_get_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_copy_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_copy_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_copy_video_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_create_script_environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_delete_script_environment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_function_exists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_audio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_cpu_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_parity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_video_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_invoke</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_make_writable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_new_c_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_new_video_frame_a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_release_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_release_value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_release_video_frame</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_save_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_set_cache_hints</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_set_global_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_set_memory_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_set_to_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_set_var</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_set_working_dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_sprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_subframe</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_subframe_planar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_take_clip</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_vsprintf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv24</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv16</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv12</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_is_yv411</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_is_y8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_is_color_space</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_plane_width_subsampling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_plane_height_subsampling</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_bits_per_pixel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_bytes_from_pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_row_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_bmp_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_pitch_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_row_size_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_height_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_read_ptr_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_is_writable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AVSC_LOAD_FUNC</name><argument_list>(<argument><expr><name>avs_get_write_ptr_p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_rgb48, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_rgb64, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_yuv444p16, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_yuv422p16, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_yuv420p16, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_y16, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_yuv444ps, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_yuv422ps, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_yuv420ps, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_y32, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK(avs_is_444, avs_is_yv24);

AVSC_LOAD_FUNC_FALLBACK(avs_is_422, avs_is_yv16);

AVSC_LOAD_FUNC_FALLBACK(avs_is_420, avs_is_yv12);

AVSC_LOAD_FUNC_FALLBACK(avs_is_y, avs_is_y8);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_yuva, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_planar_rgb, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_is_planar_rgba, avs_is_xx_fallback_return_false);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_num_components, avs_num_components_fallback);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_component_size, avs_component_size_fallback);

AVSC_LOAD_FUNC_FALLBACK_SIMULATED(avs_bits_per_component, avs_bits_per_component_fallback);

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>__AVSC_STRINGIFY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVSC_STRINGIFY</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVSC_LOAD_FUNC</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVSC_LOAD_FUNC_FALLBACK</name></cpp:undef>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>AVSC_LOAD_FUNC_FALLBACK_SIMULATED</name></cpp:undef>

<return>return <expr><name>library</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVSC_INLINE</name> <name>void</name></type> <name>avs_free_library</name><parameter_list>(<parameter><decl><type><name>AVS_Library</name> <modifier>*</modifier></type><name>library</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>library</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>FreeLibrary</name><argument_list>(<argument><expr><name><name>library</name><operator>-&gt;</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>library</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
