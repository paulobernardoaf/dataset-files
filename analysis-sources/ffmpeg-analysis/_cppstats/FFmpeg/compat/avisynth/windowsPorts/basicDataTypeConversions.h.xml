<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\compat\avisynth\windowsPorts\basicDataTypeConversions.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>namespace</name></type> <name>avxsynth</name> <block>{<block_content>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>int64_t</name></type> <name>__int64</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>__int32</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<typedef>typedef <type><name>bool</name></type> <name>BOOL</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>uint32_t</name></type> <name>BOOL</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HMODULE</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>LPVOID</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>PVOID</name>;</typedef>

<typedef>typedef <type><name>PVOID</name></type> <name>HANDLE</name>;</typedef>

<typedef>typedef <type><name>HANDLE</name></type> <name>HWND</name>;</typedef>

<typedef>typedef <type><name>HANDLE</name></type> <name>HINSTANCE</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HDC</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HBITMAP</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HICON</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HFONT</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HGDIOBJ</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HBRUSH</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HMMIO</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HACMSTREAM</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HACMDRIVER</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HIC</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HACMOBJ</name>;</typedef>

<typedef>typedef <type><name>HACMSTREAM</name><modifier>*</modifier></type> <name>LPHACMSTREAM</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>HACMDRIVERID</name>;</typedef>

<typedef>typedef <type><name>void</name><modifier>*</modifier></type> <name>LPHACMDRIVER</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>char</name></type> <name>BYTE</name>;</typedef>

<typedef>typedef <type><name>BYTE</name><modifier>*</modifier></type> <name>LPBYTE</name>;</typedef>

<typedef>typedef <type><name>char</name></type> <name>TCHAR</name>;</typedef>

<typedef>typedef <type><name>TCHAR</name><modifier>*</modifier></type> <name>LPTSTR</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>TCHAR</name><modifier>*</modifier></type> <name>LPCTSTR</name>;</typedef>

<typedef>typedef <type><name>char</name><modifier>*</modifier></type> <name>LPSTR</name>;</typedef>

<typedef>typedef <type><name>LPSTR</name></type> <name>LPOLESTR</name>;</typedef>

<typedef>typedef <type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>LPCSTR</name>;</typedef>

<typedef>typedef <type><name>LPCSTR</name></type> <name>LPCOLESTR</name>;</typedef>

<typedef>typedef <type><name>wchar_t</name></type> <name>WCHAR</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>short</name></type> <name>WORD</name>;</typedef>

<typedef>typedef <type><name>unsigned</name> <name>int</name></type> <name>UINT</name>;</typedef>

<typedef>typedef <type><name>UINT</name></type> <name>MMRESULT</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>DWORD</name>;</typedef>

<typedef>typedef <type><name>DWORD</name></type> <name>COLORREF</name>;</typedef>

<typedef>typedef <type><name>DWORD</name></type> <name>FOURCC</name>;</typedef>

<typedef>typedef <type><name>DWORD</name></type> <name>HRESULT</name>;</typedef>

<typedef>typedef <type><name>DWORD</name><modifier>*</modifier></type> <name>LPDWORD</name>;</typedef>

<typedef>typedef <type><name>DWORD</name><modifier>*</modifier></type> <name>DWORD_PTR</name>;</typedef>

<typedef>typedef <type><name>int32_t</name></type> <name>LONG</name>;</typedef>

<typedef>typedef <type><name>int32_t</name><modifier>*</modifier></type> <name>LONG_PTR</name>;</typedef>

<typedef>typedef <type><name>LONG_PTR</name></type> <name>LRESULT</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name></type> <name>ULONG</name>;</typedef>

<typedef>typedef <type><name>uint32_t</name><modifier>*</modifier></type> <name>ULONG_PTR</name>;</typedef>

<typedef>typedef <type><name>uint64_t</name></type> <name>_fsize_t</name>;</typedef>

<typedef>typedef <type><struct>struct <name>_GUID</name> <block>{

<decl_stmt><decl><type><name>DWORD</name></type> <name>Data1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>Data2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>WORD</name></type> <name>Data3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>BYTE</name></type> <name><name>Data4</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>GUID</name>;</typedef>

<typedef>typedef <type><name>GUID</name></type> <name>REFIID</name>;</typedef>

<typedef>typedef <type><name>GUID</name></type> <name>CLSID</name>;</typedef>

<typedef>typedef <type><name>CLSID</name><modifier>*</modifier></type> <name>LPCLSID</name>;</typedef>

<typedef>typedef <type><name>GUID</name></type> <name>IID</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></decl></decl_stmt><empty_stmt>;</empty_stmt> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
