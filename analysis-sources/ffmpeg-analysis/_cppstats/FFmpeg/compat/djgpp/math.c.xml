<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\compat\djgpp\math.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUN</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>op</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>type name(type x, type y) { if (fpclassify(x) == FP_NAN) return y; if (fpclassify(y) == FP_NAN) return x; return x op y ? x : y; }</cpp:value></cpp:define>

<macro><name>FUN</name><argument_list>(<argument>fmin</argument>, <argument>double</argument>, <argument>&lt;</argument>)</argument_list></macro>

<macro><name>FUN</name><argument_list>(<argument>fmax</argument>, <argument>double</argument>, <argument>&gt;</argument>)</argument_list></macro>

<macro><name>FUN</name><argument_list>(<argument>fminf</argument>, <argument>float</argument>, <argument>&lt;</argument>)</argument_list></macro>

<macro><name>FUN</name><argument_list>(<argument>fmaxf</argument>, <argument>float</argument>, <argument>&gt;</argument>)</argument_list></macro>

<function><type><name>long</name> <name>double</name></type> <name>fmodl</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>fmod</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>double</name></type> <name>scalbnl</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>exp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>scalbn</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>exp</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>long</name> <name>double</name></type> <name>copysignl</name><parameter_list>(<parameter><decl><type><name>long</name> <name>double</name></type> <name>x</name></decl></parameter>, <parameter><decl><type><name>long</name> <name>double</name></type> <name>y</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>copysign</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
