<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\compat\w32dlfcn.h"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x0602</literal><operator>)</operator> <operator>||</operator> <name>HAVE_WINRT</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/wchar_filename.h"</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>HMODULE</name></type> <name>win32_dlopen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>_WIN32_WINNT</name> <operator>&lt;</operator> <literal type="number">0x0602</literal></expr></cpp:if>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>GetProcAddress</name><argument_list>(<argument><expr><call><name>GetModuleHandleW</name><argument_list>(<argument><expr><literal type="string">L"kernel32.dll"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"SetDefaultDllDirectories"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>HMODULE</name></type> <name>module</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>name_w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DWORD</name></type> <name>pathlen</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf8towchar</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>path</name> <operator>=</operator> <operator>(</operator><name>wchar_t</name> <operator>*</operator><operator>)</operator><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>MAX_PATH</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>GetModuleFileNameW</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>wcsrchr</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="char">'\\'</literal></expr></argument>)</argument_list></call> <operator>-</operator> <name>path</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pathlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pathlen</name> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>name_w</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>MAX_PATH</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>pathlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <name>pathlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>LoadLibraryExW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LOAD_WITH_ALTERED_SEARCH_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>module</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>pathlen</name> <operator>=</operator> <call><name>GetSystemDirectoryW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>MAX_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pathlen</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>pathlen</name> <operator>+</operator> <call><name>wcslen</name><argument_list>(<argument><expr><name>name_w</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal> <operator>&gt;</operator> <name>MAX_PATH</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>exit</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>path</name><index>[<expr><name>pathlen</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\\'</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>wcscpy</name><argument_list>(<argument><expr><name>path</name> <operator>+</operator> <name>pathlen</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>name_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>module</name> <operator>=</operator> <call><name>LoadLibraryExW</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LOAD_WITH_ALTERED_SEARCH_PATH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<label><name>exit</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>name_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>module</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LOAD_LIBRARY_SEARCH_APPLICATION_DIR</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LIBRARY_SEARCH_APPLICATION_DIR</name></cpp:macro> <cpp:value>0x00000200</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></cpp:macro> <cpp:value>0x00000800</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_WINRT</name></expr></cpp:if>

<decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>name_w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>utf8towchar</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name_w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>LoadPackagedLibrary</name><argument_list>(<argument><expr><name>name_w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>name_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><call><name>LoadLibraryExA</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LOAD_LIBRARY_SEARCH_APPLICATION_DIR</name> <operator>|</operator> <name>LOAD_LIBRARY_SEARCH_SYSTEM32</name></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlopen</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>flags</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>win32_dlopen(name)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlclose</name></cpp:macro> <cpp:value>FreeLibrary</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dlsym</name></cpp:macro> <cpp:value>GetProcAddress</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
