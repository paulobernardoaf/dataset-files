<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavresample\tests\avresample.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavresample/avresample.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>double</name></type> <name>dbl_rand</name><parameter_list>(<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>lfg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="number">2.0</literal> <operator>*</operator> <operator>(</operator><call><name>av_lfg_get</name><argument_list>(<argument><expr><name>lfg</name></expr></argument>)</argument_list></call> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT_MAX</name><operator>)</operator> <operator>-</operator> <literal type="number">1.0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_FUNC</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>expr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static void put_sample_ ##name(void **data, enum AVSampleFormat sample_fmt,int channels, int sample, int ch, double v_dbl) { type v = expr; type **out = (type **)data; if (av_sample_fmt_is_planar(sample_fmt)) out[ch][sample] = v; else out[0][sample * channels + ch] = v; }</cpp:value></cpp:define>

<macro><name>PUT_FUNC</name><argument_list>(<argument>u8</argument>, <argument>AV_SAMPLE_FMT_U8</argument>, <argument>uint8_t</argument>, <argument>av_clip_uint8 ( lrint(v_dbl * (<literal type="number">1</literal> &lt;&lt; <literal type="number">7</literal>)) + <literal type="number">128</literal>)</argument>)</argument_list></macro>

<macro><name>PUT_FUNC</name><argument_list>(<argument>s16</argument>, <argument>AV_SAMPLE_FMT_S16</argument>, <argument>int16_t</argument>, <argument>av_clip_int16 ( lrint(v_dbl * (<literal type="number">1</literal> &lt;&lt; <literal type="number">15</literal>)))</argument>)</argument_list></macro>

<macro><name>PUT_FUNC</name><argument_list>(<argument>s32</argument>, <argument>AV_SAMPLE_FMT_S32</argument>, <argument>int32_t</argument>, <argument>av_clipl_int32(llrint(v_dbl * (<literal type="number">1U</literal> &lt;&lt; <literal type="number">31</literal>)))</argument>)</argument_list></macro>

<macro><name>PUT_FUNC</name><argument_list>(<argument>flt</argument>, <argument>AV_SAMPLE_FMT_FLT</argument>, <argument>float</argument>, <argument>v_dbl</argument>)</argument_list></macro>

<macro><name>PUT_FUNC</name><argument_list>(<argument>dbl</argument>, <argument>AV_SAMPLE_FMT_DBL</argument>, <argument>double</argument>, <argument>v_dbl</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_sample</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>ch</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>v_dbl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_U8</name></expr>:</case>

<expr_stmt><expr><call><name>put_sample_u8</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>v_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16</name></expr>:</case>

<expr_stmt><expr><call><name>put_sample_s16</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>v_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32</name></expr>:</case>

<expr_stmt><expr><call><name>put_sample_s32</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>v_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLT</name></expr>:</case>

<expr_stmt><expr><call><name>put_sample_flt</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>v_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_DBL</name></expr>:</case>

<expr_stmt><expr><call><name>put_sample_dbl</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>sample_fmt</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>, <argument><expr><name>v_dbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>audiogen</name><parameter_list>(<parameter><decl><type><name>AVLFG</name> <modifier>*</modifier></type><name>rnd</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>v</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>ampa</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>tabf1</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>tabf2</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>taba</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PUT_SAMPLE</name></cpp:macro> <cpp:value>put_sample(data, sample_fmt, channels, k, ch, v);</cpp:value></cpp:define>

<expr_stmt><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>PUT_SAMPLE</name>

<name>a</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<decl_stmt><decl><type><name>PUT_SAMPLE</name></type>

<name>f</name> <init>= <expr><literal type="number">100.0</literal> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><literal type="number">10000.0</literal> <operator>-</operator> <literal type="number">100.0</literal><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name><operator>)</operator></expr></init></decl>;</decl_stmt></block_content></block></for>

<expr_stmt><expr><name>a</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <name>f</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>dbl_rand</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>PUT_SAMPLE</name></expr></expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>dbl_rand</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>PUT_SAMPLE</name></expr></expr_stmt></block_content></block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>taba</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tabf1</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">5000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tabf2</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">100</literal> <operator>+</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><name>rnd</name></expr></argument>)</argument_list></call> <operator>%</operator> <literal type="number">5000</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name><name>taba</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">0.30</literal></expr>;</expr_stmt>

<decl_stmt><decl><type><name>PUT_SAMPLE</name></type>

<name>f</name> <init>= <expr><name><name>tabf1</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <operator>(</operator><operator>(</operator><operator>(</operator><name><name>tabf2</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>-</operator> <name><name>tabf1</name><index>[<expr><name>ch</name></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>i</name><operator>)</operator> <operator>/</operator> <name>sample_rate</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>taba</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <name>f</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ampa</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>sample_rate</name> <operator>&amp;&amp;</operator> <name>k</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>amp</name> <init>= <expr><operator>(</operator><literal type="number">1.0</literal> <operator>+</operator> <call><name>sin</name><argument_list>(<argument><expr><name>ampa</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <literal type="number">0.15</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>amp</name> <operator>=</operator> <literal type="number">0.30</literal> <operator>-</operator> <name>amp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>amp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>PUT_SAMPLE</name>

<name>a</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">500.0</literal> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ampa</name> <operator>+=</operator> <name>M_PI</name> <operator>*</operator> <literal type="number">2.0</literal> <operator>/</operator> <name>sample_rate</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>enum</name> <name>AVSampleFormat</name></name></type> <name><name>formats</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_SAMPLE_FMT_S16</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLTP</name></expr>,

<expr><name>AV_SAMPLE_FMT_S16P</name></expr>,

<expr><name>AV_SAMPLE_FMT_FLT</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32P</name></expr>,

<expr><name>AV_SAMPLE_FMT_S32</name></expr>,

<expr><name>AV_SAMPLE_FMT_U8P</name></expr>,

<expr><name>AV_SAMPLE_FMT_U8</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBLP</name></expr>,

<expr><name>AV_SAMPLE_FMT_DBL</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>rates</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">48000</literal></expr>,

<expr><literal type="number">44100</literal></expr>,

<expr><literal type="number">16000</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name><name>layouts</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>AV_CH_LAYOUT_STEREO</name></expr>,

<expr><name>AV_CH_LAYOUT_MONO</name></expr>,

<expr><name>AV_CH_LAYOUT_5POINT1</name></expr>,

<expr><name>AV_CH_LAYOUT_7POINT1</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>rnd</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>in_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>in_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>out_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>in_data</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>out_data</name><index>[<expr><name>AVRESAMPLE_MAX_CHANNELS</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_linesize</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>in_ch_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>out_ch_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num_formats</name></decl>, <decl><type ref="prev"/><name>num_rates</name></decl>, <decl><type ref="prev"/><name>num_layouts</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>num_formats</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rates</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>num_layouts</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Usage: avresample-test [&lt;num formats&gt; "</literal>

<literal type="string">"[&lt;num sample rates&gt; [&lt;num channel layouts&gt;]]]\n"</literal>

<literal type="string">"Default is 2 2 2\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>num_formats</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_formats</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>num_formats</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>formats</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_rates</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_rates</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>num_rates</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>rates</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num_layouts</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_layouts</name> <operator>=</operator> <call><name>av_clip</name><argument_list>(<argument><expr><name>num_layouts</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>layouts</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rnd</name></expr></argument>, <argument><expr><literal type="number">0xC0FFEE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>in_buf_size</name> <operator>=</operator> <call><name>av_samples_get_buffer_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_linesize</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">48000</literal> <operator>*</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name>AV_SAMPLE_FMT_DBLP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_buf_size</name> <operator>=</operator> <name>in_buf_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>in_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_buf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>out_buf</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>out_buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_buf</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>end</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>avresample_alloc_context</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>s</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error allocating AVAudioResampleContext\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_formats</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>in_fmt</name> <operator>=</operator> <name><name>formats</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num_layouts</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>in_ch_layout</name> <operator>=</operator> <name><name>layouts</name><index>[<expr><name>k</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>in_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>m</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <name>num_rates</name></expr>;</condition> <incr><expr><name>m</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>in_rate</name> <operator>=</operator> <name><name>rates</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_samples_fill_arrays</name><argument_list>(<argument><expr><name>in_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>in_linesize</name></expr></argument>, <argument><expr><name>in_buf</name></expr></argument>,

<argument><expr><name>in_channels</name></expr></argument>, <argument><expr><name>in_rate</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed in_data fill arrays\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>audiogen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rnd</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>in_data</name></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><name>in_channels</name></expr></argument>, <argument><expr><name>in_rate</name></expr></argument>, <argument><expr><name>in_rate</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_formats</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>out_fmt</name> <operator>=</operator> <name><name>formats</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>l</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>num_layouts</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>out_ch_layout</name> <operator>=</operator> <name><name>layouts</name><index>[<expr><name>l</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>out_ch_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>num_rates</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>out_rate</name> <operator>=</operator> <name><name>rates</name><index>[<expr><name>n</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s to %s, %d to %d channels, %d Hz to %d Hz\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name>in_channels</name></expr></argument>, <argument><expr><name>out_channels</name></expr></argument>, <argument><expr><name>in_rate</name></expr></argument>, <argument><expr><name>out_rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_samples_fill_arrays</name><argument_list>(<argument><expr><name>out_data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>out_linesize</name></expr></argument>,

<argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name>out_channels</name></expr></argument>,

<argument><expr><name>out_rate</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"failed out_data fill arrays\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"in_channel_layout"</literal></expr></argument>, <argument><expr><name>in_ch_layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"in_sample_fmt"</literal></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"in_sample_rate"</literal></expr></argument>, <argument><expr><name>in_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"out_channel_layout"</literal></expr></argument>, <argument><expr><name>out_ch_layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"out_sample_fmt"</literal></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"out_sample_rate"</literal></expr></argument>, <argument><expr><name>out_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_int</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="string">"internal_sample_fmt"</literal></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avresample_open</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error opening context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avresample_convert</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>, <argument><expr><name>out_linesize</name></expr></argument>, <argument><expr><name>out_rate</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>,

<argument><expr><name>in_data</name></expr></argument>, <argument><expr><name>in_linesize</name></expr></argument>, <argument><expr><name>in_rate</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>errbuf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>errbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>end</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"Converted %d samples to %d samples\n"</literal></expr></argument>,

<argument><expr><name>in_rate</name> <operator>*</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avresample_get_delay</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%d delay samples not converted\n"</literal></expr></argument>,

<argument><expr><call><name>avresample_get_delay</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avresample_available</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%d samples available for output\n"</literal></expr></argument>,

<argument><expr><call><name>avresample_available</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avresample_close</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>end</name>:</label>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>in_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avresample_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
