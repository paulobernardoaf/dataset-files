<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavresample\dither.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dither.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>DitherState</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>mute</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>lfg</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>noise_buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise_buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise_buf_ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>dither_a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>dither_b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>DitherState</name>;</typedef>

<struct>struct <name>DitherContext</name> <block>{

<decl_stmt><decl><type><name>DitherDSPContext</name></type> <name>ddsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVResampleDitherMethod</name></name></type> <name>method</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>apply_map</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ChannelMapInfo</name> <modifier>*</modifier></type><name>ch_map_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>mute_dither_threshold</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>mute_reset_threshold</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ns_coef_b</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>ns_coef_a</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DitherState</name> <modifier>*</modifier></type><name>state</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>flt_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>s16_data</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ac_in</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>AudioConvert</name> <modifier>*</modifier></type><name>ac_out</name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>quantize</name>)<parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int</name></type> <name>samples_align</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MUTE_THRESHOLD_SEC</name></cpp:macro> <cpp:value>0.000333</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S16_SCALE</name></cpp:macro> <cpp:value>32753.0f</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LFG_SCALE</name></cpp:macro> <cpp:value>(1.0f / (2.0f * INT32_MAX))</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>ns_48_coef_b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">2.2374f</literal></expr>, <expr><operator>-</operator><literal type="number">0.7339f</literal></expr>, <expr><operator>-</operator><literal type="number">0.1251f</literal></expr>, <expr><operator>-</operator><literal type="number">0.6033f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>ns_48_coef_a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.9030f</literal></expr>, <expr><literal type="number">0.0116f</literal></expr>, <expr><operator>-</operator><literal type="number">0.5853f</literal></expr>, <expr><operator>-</operator><literal type="number">0.2571f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>ns_44_coef_b</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">2.2061f</literal></expr>, <expr><operator>-</operator><literal type="number">0.4707f</literal></expr>, <expr><operator>-</operator><literal type="number">0.2534f</literal></expr>, <expr><operator>-</operator><literal type="number">0.6213f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>float</name></type> <name><name>ns_44_coef_a</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">1.0587f</literal></expr>, <expr><literal type="number">0.0676f</literal></expr>, <expr><operator>-</operator><literal type="number">0.6054f</literal></expr>, <expr><operator>-</operator><literal type="number">0.2738f</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dither_int_to_float_rectangular_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>LFG_SCALE</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dither_int_to_float_triangular_c</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>src1</name> <init>= <expr><name>src0</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>r</name> <init>= <expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>LFG_SCALE</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>LFG_SCALE</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_c</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>dither</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>S16_SCALE</name> <operator>+</operator> <name><name>dither</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQRT_1_6</name></cpp:macro> <cpp:value>0.40824829046386301723f</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dither_highpass_filter</name><parameter_list>(<parameter><decl><type><name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name> <operator>-</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>-</operator><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>src</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <name>SQRT_1_6</name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>generate_dither_noise</name><parameter_list>(<parameter><decl><type><name>DitherContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>DitherState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>min_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_samples</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>min_samples</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>buf_samples</name> <init>= <expr><name>nb_samples</name> <operator>*</operator>

<operator>(</operator><ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_RESAMPLE_DITHER_RECTANGULAR</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>noise_buf_ui</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_size</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>noise_buf_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>buf_samples</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_size</name></name> <operator>=</operator> <call><name>FFALIGN</name><argument_list>(<argument><expr><name>min_samples</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>noise_buf_ui</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>int</name> <operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>lfg</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>buf_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>noise_buf_ui</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>lfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>ddsp</name><operator>.</operator><name>dither_int_to_float</name></name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name></name></expr></argument>, <argument><expr><name>noise_buf_ui</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_RESAMPLE_DITHER_TRIANGULAR_HP</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>dither_highpass_filter</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>quantize_triangular_ns</name><parameter_list>(<parameter><decl><type><name>DitherContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>DitherState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>,

<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>dither</name> <init>= <expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_ptr</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mute</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>mute_reset_threshold</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>dither_a</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>dither_a</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nb_samples</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>sample</name> <init>= <expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name>S16_SCALE</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>err</name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>ns_coef_b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>dither_b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>-</operator>

<name><name>c</name><operator>-&gt;</operator><name>ns_coef_a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>*</operator> <name><name>state</name><operator>-&gt;</operator><name>dither_a</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">3</literal></expr>;</init> <condition><expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>j</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dither_a</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>dither_a</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dither_b</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>dither_b</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dither_a</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>err</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sample</name> <operator>-=</operator> <name>err</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>mute</name></name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>mute_dither_threshold</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name>sample</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dither_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_clip_int16</name><argument_list>(<argument><expr><call><name>lrintf</name><argument_list>(<argument><expr><name>sample</name> <operator>+</operator> <name><name>dither</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>dither_b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>av_clipf</name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>sample</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.5f</literal></expr></argument>, <argument><expr><literal type="number">1.5f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mute</name></name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>convert_samples</name><parameter_list>(<parameter><decl><type><name>DitherContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>float</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aligned_samples</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DitherState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_size</name></name> <operator>&lt;</operator> <name>aligned_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>generate_dither_noise</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_size</name></name> <operator>-</operator> <name><name>state</name><operator>-&gt;</operator><name>noise_buf_ptr</name></name> <operator>&lt;</operator> <name>aligned_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_ptr</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_RESAMPLE_DITHER_TRIANGULAR_NS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>quantize_triangular_ns</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>quantize</name></name><argument_list>(<argument><expr><name><name>dst</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>noise_buf</name><index>[<expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_ptr</name></name></expr>]</index></name></expr></argument>,

<argument><expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name>nb_samples</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>noise_buf_ptr</name></name> <operator>+=</operator> <name>aligned_samples</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_convert_dither</name><parameter_list>(<parameter><decl><type><name>DitherContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>flt_data</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name></name> <operator>=</operator> <name>dst</name></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_realloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>apply_map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_realloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>flt_data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>flt_data</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>flt_data</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>src</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_convert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ac_in</name></name></expr></argument>, <argument><expr><name>flt_data</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>apply_map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_copy</name><argument_list>(<argument><expr><name>flt_data</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>flt_data</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name> <operator>!=</operator> <name>AV_RESAMPLE_DITHER_TRIANGULAR_NS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ptr_align</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>flt_data</name><operator>-&gt;</operator><name>ptr_align</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name><operator>-&gt;</operator><name>ptr_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>samples_align</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name><name>flt_data</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name><operator>-&gt;</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>aligned_len</name> <init>= <expr><call><name>FFALIGN</name><argument_list>(<argument><expr><name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>ddsp</name><operator>.</operator><name>samples_align</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ptr_align</name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>ddsp</name><operator>.</operator><name>ptr_align</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>samples_align</name> <operator>&gt;=</operator> <name>aligned_len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>quantize</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ddsp</name><operator>.</operator><name>quantize</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ddsp</name><operator>.</operator><name>samples_align</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>quantize</name></name> <operator>=</operator> <name>quantize_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>convert_samples</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>s16_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,

<argument><expr><operator>(</operator><name>float</name> <operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>flt_data</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>,

<argument><expr><name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_S16</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_convert</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>ac_out</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_dither_free</name><parameter_list>(<parameter><decl><type><name>DitherContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>cp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DitherContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>*</operator><name>cp</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_audio_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>flt_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>s16_data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_convert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ac_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_convert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ac_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>ch</name></expr>]</index></name><operator>.</operator><name>noise_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>av_cold</name> <name>void</name></type> <name>dither_init</name><parameter_list>(<parameter><decl><type><name>DitherDSPContext</name> <modifier>*</modifier></type><name>ddsp</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVResampleDitherMethod</name></name></type> <name>method</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ddsp</name><operator>-&gt;</operator><name>quantize</name></name> <operator>=</operator> <name>quantize_c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ddsp</name><operator>-&gt;</operator><name>ptr_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ddsp</name><operator>-&gt;</operator><name>samples_align</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>method</name> <operator>==</operator> <name>AV_RESAMPLE_DITHER_RECTANGULAR</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ddsp</name><operator>-&gt;</operator><name>dither_int_to_float</name></name> <operator>=</operator> <name>dither_int_to_float_rectangular_c</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ddsp</name><operator>-&gt;</operator><name>dither_int_to_float</name></name> <operator>=</operator> <name>dither_int_to_float_triangular_c</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_X86</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_dither_init_x86</name><argument_list>(<argument><expr><name>ddsp</name></expr></argument>, <argument><expr><name>method</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>DitherContext</name> <modifier>*</modifier></type><name>ff_dither_alloc</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>apply_map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>seed_gen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DitherContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_get_packed_sample_fmt</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16</name> <operator>||</operator>

<call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"dithering %s to %s is not supported\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>apply_map</name></name> <operator>=</operator> <name>apply_map</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>apply_map</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ch_map_info</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>dither_method</name></name> <operator>==</operator> <name>AV_RESAMPLE_DITHER_TRIANGULAR_NS</name> <operator>&amp;&amp;</operator>

<name>sample_rate</name> <operator>!=</operator> <literal type="number">48000</literal> <operator>&amp;&amp;</operator> <name>sample_rate</name> <operator>!=</operator> <literal type="number">44100</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"sample rate must be 48000 or 44100 Hz "</literal>

<literal type="string">"for triangular_ns dither. using triangular_hp instead.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>dither_method</name></name> <operator>=</operator> <name>AV_RESAMPLE_DITHER_TRIANGULAR_HP</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>dither_method</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dither_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>ddsp</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>method</name></name> <operator>==</operator> <name>AV_RESAMPLE_DITHER_TRIANGULAR_NS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>sample_rate</name> <operator>==</operator> <literal type="number">48000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ns_coef_b</name></name> <operator>=</operator> <name>ns_48_coef_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ns_coef_a</name></name> <operator>=</operator> <name>ns_48_coef_a</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ns_coef_b</name></name> <operator>=</operator> <name>ns_44_coef_b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ns_coef_a</name></name> <operator>=</operator> <name>ns_44_coef_a</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out_fmt</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>s16_data</name></name> <operator>=</operator> <call><name>ff_audio_data_alloc</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>,

<argument><expr><literal type="string">"dither s16 buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>s16_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac_out</name></name> <operator>=</operator> <call><name>ff_audio_convert_alloc</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_S16P</name></expr></argument>,

<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>ac_out</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_fmt</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator> <name><name>c</name><operator>-&gt;</operator><name>apply_map</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>flt_data</name></name> <operator>=</operator> <call><name>ff_audio_data_alloc</name><argument_list>(<argument><expr><name>channels</name></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>,

<argument><expr><literal type="string">"dither flt buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>flt_data</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in_fmt</name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ac_in</name></name> <operator>=</operator> <call><name>ff_audio_convert_alloc</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_FLTP</name></expr></argument>, <argument><expr><name>in_fmt</name></expr></argument>,

<argument><expr><name>channels</name></expr></argument>, <argument><expr><name>sample_rate</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>apply_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>ac_in</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>channels</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>channels</name></name> <operator>=</operator> <name>channels</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mute_dither_threshold</name></name> <operator>=</operator> <call><name>lrintf</name><argument_list>(<argument><expr><name>sample_rate</name> <operator>*</operator> <name>MUTE_THRESHOLD_SEC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>mute_reset_threshold</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mute_dither_threshold</name></name> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed_gen</name></expr></argument>, <argument><expr><literal type="number">0xC0FFEE</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>DitherState</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>ch</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>mute</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>mute_reset_threshold</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>seed_gen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>generate_dither_noise</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>state</name></expr></argument>, <argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">32768</literal></expr></argument>, <argument><expr><name>sample_rate</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>c</name></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>ff_dither_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

</unit>
