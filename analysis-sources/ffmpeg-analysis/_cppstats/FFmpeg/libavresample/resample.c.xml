<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavresample\resample.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_data.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_RESAMPLE_DBL</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resample_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONFIG_RESAMPLE_DBL</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_RESAMPLE_FLT</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resample_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONFIG_RESAMPLE_FLT</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_RESAMPLE_S32</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resample_template.c"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>CONFIG_RESAMPLE_S32</name></cpp:undef>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resample_template.c"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>double</name></type> <name>bessel</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>v</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>lastv</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name> <operator>*</operator> <name>x</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>v</name> <operator>!=</operator> <name>lastv</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>lastv</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>*=</operator> <name>x</name> <operator>/</operator> <operator>(</operator><name>i</name> <operator>*</operator> <name>i</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>+=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>build_filter</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>factor</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ph</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>, <decl><type ref="prev"/><name>w</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name> <modifier>*</modifier></type><name>tab</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tap_count</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>phase_count</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>center</name> <init>= <expr><operator>(</operator><name>tap_count</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>tab</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>tap_count</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tab</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>ph</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ph</name> <operator>&lt;</operator> <name>phase_count</name></expr>;</condition> <incr><expr><name>ph</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>norm</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tap_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>M_PI</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>center</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>ph</name> <operator>/</operator> <name>phase_count</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>sin</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>x</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>filter_type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_RESAMPLE_FILTER_TYPE_CUBIC</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name>d</name> <init>= <expr><operator>-</operator><literal type="number">0.5</literal></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>fabs</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name> <operator>-</operator> <name>center</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>ph</name> <operator>/</operator> <name>phase_count</name><operator>)</operator> <operator>*</operator> <name>factor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1</literal> <operator>-</operator> <literal type="number">3</literal> <operator>*</operator> <name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>d</name> <operator>*</operator> <operator>(</operator> <operator>-</operator><name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>y</name> <operator>=</operator> <name>d</name> <operator>*</operator> <operator>(</operator><operator>-</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <name>x</name> <operator>-</operator> <literal type="number">5</literal> <operator>*</operator> <name>x</name><operator>*</operator><name>x</name> <operator>+</operator> <name>x</name><operator>*</operator><name>x</name><operator>*</operator><name>x</name><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AV_RESAMPLE_FILTER_TYPE_BLACKMAN_NUTTALL</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>x</name> <operator>/</operator> <operator>(</operator><name>factor</name> <operator>*</operator> <name>tap_count</name><operator>)</operator> <operator>+</operator> <name>M_PI</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">0.3635819</literal> <operator>-</operator> <literal type="number">0.4891775</literal> <operator>*</operator> <call><name>cos</name><argument_list>( <argument><expr><name>w</name></expr></argument>)</argument_list></call> <operator>+</operator>

<literal type="number">0.1365995</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">2</literal> <operator>*</operator> <name>w</name></expr></argument>)</argument_list></call> <operator>-</operator>

<literal type="number">0.0106411</literal> <operator>*</operator> <call><name>cos</name><argument_list>(<argument><expr><literal type="number">3</literal> <operator>*</operator> <name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_RESAMPLE_FILTER_TYPE_KAISER</name></expr>:</case>

<expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">2.0</literal> <operator>*</operator> <name>x</name> <operator>/</operator> <operator>(</operator><name>factor</name> <operator>*</operator> <name>tap_count</name> <operator>*</operator> <name>M_PI</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <call><name>bessel</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>kaiser_beta</name></name> <operator>*</operator> <call><name>sqrt</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>-</operator> <name>w</name> <operator>*</operator> <name>w</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>norm</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tap_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tab</name><index>[<expr><name>i</name></expr>]</index></name> <operator>/</operator> <name>norm</name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>set_filter</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>, <argument><expr><name>tab</name></expr></argument>, <argument><expr><name>ph</name></expr></argument>, <argument><expr><name>tap_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>tab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>ResampleContext</name> <modifier>*</modifier></type><name>ff_audio_resample_init</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_rate</name> <init>= <expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_rate</name> <init>= <expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>factor</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>out_rate</name> <operator>*</operator> <name><name>avr</name><operator>-&gt;</operator><name>cutoff</name></name> <operator>/</operator> <name>in_rate</name></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>phase_count</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name><name>avr</name><operator>-&gt;</operator><name>phase_shift</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>felem_size</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S16P</name> <operator>&amp;&amp;</operator>

<name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>&amp;&amp;</operator>

<name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>&amp;&amp;</operator>

<name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>!=</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unsupported internal format for "</literal>

<literal type="string">"resampling: %s\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>avr</name></name> <operator>=</operator> <name>avr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>phase_shift</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>phase_shift</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>phase_mask</name></name> <operator>=</operator> <name>phase_count</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>linear</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>linear_interp</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>ceil</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>filter_size</name></name> <operator>/</operator> <name>factor</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>filter_type</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>kaiser_beta</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>kaiser_beta</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_SAMPLE_FMT_DBLP</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_one</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>linear</name></name></expr> ?</condition><then> <expr><name>resample_linear_dbl</name></expr> </then><else>: <expr><name>resample_one_dbl</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_nearest</name></name> <operator>=</operator> <name>resample_nearest_dbl</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>set_filter</name></name> <operator>=</operator> <name>set_filter_dbl</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_FLTP</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_one</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>linear</name></name></expr> ?</condition><then> <expr><name>resample_linear_flt</name></expr> </then><else>: <expr><name>resample_one_flt</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_nearest</name></name> <operator>=</operator> <name>resample_nearest_flt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>set_filter</name></name> <operator>=</operator> <name>set_filter_flt</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S32P</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_one</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>linear</name></name></expr> ?</condition><then> <expr><name>resample_linear_s32</name></expr> </then><else>: <expr><name>resample_one_s32</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_nearest</name></name> <operator>=</operator> <name>resample_nearest_s32</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>set_filter</name></name> <operator>=</operator> <name>set_filter_s32</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_SAMPLE_FMT_S16P</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_one</name></name> <operator>=</operator> <ternary><condition><expr><name><name>c</name><operator>-&gt;</operator><name>linear</name></name></expr> ?</condition><then> <expr><name>resample_linear_s16</name></expr> </then><else>: <expr><name>resample_one_s16</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>resample_nearest</name></name> <operator>=</operator> <name>resample_nearest_s16</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>set_filter</name></name> <operator>=</operator> <name>set_filter_s16</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ARCH_AARCH64</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_audio_resample_init_aarch64</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ARCH_ARM</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>ff_audio_resample_init_arm</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>felem_size</name> <operator>=</operator> <call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>*</operator> <operator>(</operator><name>phase_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>felem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>build_filter</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>factor</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name><index>[<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>*</operator> <name>phase_count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>felem_size</name></expr>]</index></name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>felem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>*</operator> <name>phase_count</name> <operator>*</operator> <name>felem_size</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name><index>[<expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>felem_size</name></expr>]</index></name></expr></argument>, <argument><expr><name>felem_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr></argument>, <argument><expr><name>out_rate</name></expr></argument>,

<argument><expr><name>in_rate</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>phase_count</name></expr></argument>, <argument><expr><name>INT32_MAX</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name> <operator>=</operator> <operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>initial_padding_filled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>ff_audio_data_alloc</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>resample_channels</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>,

<argument><expr><literal type="string">"resample buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>buffer</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>initial_padding_samples</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"resample: %s from %d Hz to %d Hz\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>c</name></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>ff_audio_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>ff_audio_resample_free</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>ff_audio_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>c</name><operator>)</operator><operator>-&gt;</operator><name>filter_bank</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_set_compensation</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sample_delta</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>compensation_distance</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>compensation_distance</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>compensation_distance</name> <operator>&amp;&amp;</operator> <name>sample_delta</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to set resampling compensation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>resample</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name> <operator>=</operator> <name>compensation_distance</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compensation_distance</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>*</operator>

<operator>(</operator><name>int64_t</name><operator>)</operator><name>sample_delta</name> <operator>/</operator> <name>compensation_distance</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>resample</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>consumed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>src_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dst_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>update_ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nearest_neighbour</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>dst_index</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>frac</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_incr_frac</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dst_incr</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>compensation_distance</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name> <operator>!=</operator> <operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>nearest_neighbour</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>index2</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>index</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>incr</name> <init>= <expr><operator>(</operator><literal type="number">1LL</literal> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>dst_size</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>dst_size</name></expr></argument>,

<argument><expr><operator>(</operator><name>src_size</name><operator>-</operator><literal type="number">1</literal><operator>-</operator><name>index</name><operator>)</operator> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name> <operator>/</operator>

<name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition> <block>{<block_content>

<for>for<control>(<init><expr><name>dst_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dst_index</name> <operator>&lt;</operator> <name>dst_size</name></expr>;</condition> <incr><expr><name>dst_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>resample_nearest</name></name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_index</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>index2</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>index2</name> <operator>+=</operator> <name>incr</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dst_index</name> <operator>=</operator> <name>dst_size</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>dst_index</name> <operator>*</operator> <name>dst_incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <operator>(</operator><name>frac</name> <operator>+</operator> <name>dst_index</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>dst_incr_frac</name><operator>)</operator> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>frac</name> <operator>=</operator> <operator>(</operator><name>frac</name> <operator>+</operator> <name>dst_index</name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>dst_incr_frac</name><operator>)</operator> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>dst_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dst_index</name> <operator>&lt;</operator> <name>dst_size</name></expr>;</condition> <incr><expr><name>dst_index</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sample_index</name> <init>= <expr><name>index</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_shift</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>sample_index</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>&gt;</operator> <name>src_size</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>resample_one</name></name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_index</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>frac</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>frac</name> <operator>+=</operator> <name>dst_incr_frac</name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name> <operator>+=</operator> <name>dst_incr</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>frac</name> <operator>&gt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>frac</name> <operator>-=</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dst_index</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>compensation_distance</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>compensation_distance</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_incr_frac</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>%</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dst_incr</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>ideal_dst_incr</name></name> <operator>/</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>consumed</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>consumed</name> <operator>=</operator> <name>index</name> <operator>&gt;&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_shift</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>update_ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>index</name> <operator>&amp;=</operator> <name><name>c</name><operator>-&gt;</operator><name>phase_mask</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compensation_distance</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>compensation_distance</name> <operator>-=</operator> <name>dst_index</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>compensation_distance</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_BUG</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>frac</name></name> <operator>=</operator> <name>frac</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>dst_incr</name></name> <operator>=</operator> <name>dst_incr_frac</name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>src_incr</name></name><operator>*</operator><name>dst_incr</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name> <operator>=</operator> <name>compensation_distance</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>dst_index</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>ff_audio_resample</name><parameter_list>(<parameter><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>, <decl><type ref="prev"/><name>in_samples</name></decl>, <decl><type ref="prev"/><name>in_leftover</name></decl>, <decl><type ref="prev"/><name>consumed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>out_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nearest_neighbour</name> <init>= <expr><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>compensation_distance</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<name><name>c</name><operator>-&gt;</operator><name>filter_length</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator>

<name><name>c</name><operator>-&gt;</operator><name>phase_shift</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>in_samples</name> <operator>=</operator> <ternary><condition><expr><name>src</name></expr> ?</condition><then> <expr><name><name>src</name><operator>-&gt;</operator><name>nb_samples</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>in_leftover</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_combine</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>in_leftover</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>in_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>in_leftover</name> <operator>&lt;=</operator> <name><name>c</name><operator>-&gt;</operator><name>final_padding_samples</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>initial_padding_filled</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bps</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>src</name> <operator>&amp;&amp;</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>&gt;</operator> <literal type="number">2</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name> <operator>-</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bps</name> <operator>*</operator> <name>i</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bps</name> <operator>*</operator> <operator>(</operator><literal type="number">2</literal> <operator>*</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name> <operator>-</operator> <name>i</name><operator>)</operator></expr></argument>, <argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bps</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>initial_padding_filled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>final_padding_filled</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bps</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_realloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>,

<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>in_samples</name></expr></argument>, <argument><expr><name>in_leftover</name></expr></argument>)</argument_list></call> <operator>+</operator>

<name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error reallocating resampling buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_leftover</name> <operator>&gt;</operator> <name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bps</name> <operator>*</operator> <operator>(</operator><name>in_leftover</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bps</name> <operator>*</operator> <operator>(</operator><name>in_leftover</name> <operator>-</operator> <name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>,

<argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>+</operator> <name>bps</name> <operator>*</operator> <operator>(</operator><name>in_leftover</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>bps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for></block_content></block></for>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>+=</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final_padding_samples</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final_padding_filled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>dst</name><operator>-&gt;</operator><name>read_only</name></name> <operator>&amp;&amp;</operator> <name><name>dst</name><operator>-&gt;</operator><name>allow_realloc</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_samples</name> <operator>=</operator> <call><name>resample</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>,

<argument><expr><name>INT_MAX</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nearest_neighbour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_realloc</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>out_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error reallocating output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>out_samples</name> <operator>=</operator> <call><name>resample</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>dst</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>)</operator><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>consumed</name></expr></argument>,

<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>allocated_samples</name></name></expr></argument>,

<argument><expr><name>ch</name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>channels</name></name></expr></argument>, <argument><expr><name>nearest_neighbour</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>out_samples</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"error during resampling\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>out_samples</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>ff_audio_data_drain</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name>consumed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>initial_padding_samples</name></name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>initial_padding_samples</name></name> <operator>-</operator> <name>consumed</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>avr</name></name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"resampled %d in + %d leftover to %d out + %d leftover\n"</literal></expr></argument>,

<argument><expr><name>in_samples</name></expr></argument>, <argument><expr><name>in_leftover</name></expr></argument>, <argument><expr><name>out_samples</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>out_samples</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_get_delay</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ResampleContext</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name><name>avr</name><operator>-&gt;</operator><name>resample</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name> <operator>||</operator> <operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>padding_size</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
