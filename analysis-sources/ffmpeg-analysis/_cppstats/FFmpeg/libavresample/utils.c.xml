<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavresample\utils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_convert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_mix.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"resample.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>avresample_open</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>avresample_is_open</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"The resampling context is already open.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid input channel layout: %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid output channel layout: %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>resample_channels</name></name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>downmix_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>&gt;</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>upmix_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name> <operator>&gt;</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>downmix_needed</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name> <operator>||</operator>

<name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name> <operator>!=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>downmix_needed</name></name> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>upmix_needed</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>!=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>||</operator>

<name><name>avr</name><operator>-&gt;</operator><name>force_resampling</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>==</operator> <name>AV_SAMPLE_FMT_NONE</name> <operator>&amp;&amp;</operator>

<operator>(</operator><name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>in_fmt</name> <init>= <expr><call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>out_fmt</name> <init>= <expr><call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_bps</name> <init>= <expr><call><name>FFMAX</name><argument_list>(<argument><expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>in_fmt</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name>out_fmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>max_bps</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16P</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>max_bps</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name> <operator>||</operator>

<name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name> <operator>||</operator>

<name>out_fmt</name> <operator>==</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_S32P</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_FLTP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>=</operator> <name>AV_SAMPLE_FMT_DBLP</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Using %s as internal sample format\n"</literal></expr></argument>,

<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>use_channel_map</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ff_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>=</operator> <call><name>av_get_planar_sample_fmt</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name> <operator>!=</operator> <name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>use_channel_map</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>ff_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name> <operator>!=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name> <operator>!=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_copy_needed</name></name> <operator>=</operator> <operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name> <operator>||</operator>

<operator>(</operator><name><name>avr</name><operator>-&gt;</operator><name>use_channel_map</name></name> <operator>&amp;&amp;</operator> <name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>use_channel_map</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_copy_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>=</operator> <name>REMAP_IN_COPY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"remap channels during in_copy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>=</operator> <name>REMAP_IN_CONVERT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"remap channels during in_convert\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>=</operator> <name>REMAP_OUT_CONVERT</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"remap channels during out_convert\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>=</operator> <name>REMAP_OUT_COPY</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"remap channels during out_copy\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DEBUG</name></expr></argument>)</argument_list></call></expr></cpp:if>
<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"output map: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name><operator>.</operator><name>do_remap</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">" % 2d"</literal></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name><operator>.</operator><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"copy map: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name><operator>.</operator><name>do_copy</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">" % 2d"</literal></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name><operator>.</operator><name>channel_copy</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"zero map: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name><operator>.</operator><name>do_zero</name></name></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">" % 2d"</literal></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name><operator>.</operator><name>channel_zero</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"n/a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"input map: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">" % 2d"</literal></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name><operator>.</operator><name>input_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>=</operator> <name>REMAP_NONE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_copy_needed</name></name> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name> <operator>=</operator> <call><name>ff_audio_data_alloc</name><argument_list>(<argument><expr><call><name>FFMAX</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>,

<argument><expr><literal type="string">"in_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name></name> <operator>=</operator> <call><name>ff_audio_data_alloc</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>,

<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>,

<argument><expr><literal type="string">"resample_out_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name> <operator>=</operator> <call><name>ff_audio_data_alloc</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>, <argument><expr><literal type="string">"out_buffer"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name> <operator>=</operator> <call><name>av_audio_fifo_alloc</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>,

<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>ac_in</name></name> <operator>=</operator> <call><name>ff_audio_convert_alloc</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>==</operator> <name>REMAP_IN_CONVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>ac_in</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>src_fmt</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>src_fmt</name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>internal_sample_fmt</name></name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>src_fmt</name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>ac_out</name></name> <operator>=</operator> <call><name>ff_audio_convert_alloc</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>, <argument><expr><name>src_fmt</name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>==</operator> <name>REMAP_OUT_CONVERT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>ac_out</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>resample</name></name> <operator>=</operator> <call><name>ff_audio_resample_init</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>mixing_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>am</name></name> <operator>=</operator> <call><name>ff_audio_mix_alloc</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>error</name>;</goto>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><call><name>avresample_close</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_is_open</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>!</operator><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>avresample_close</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>ff_audio_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_data_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_audio_fifo_free</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_convert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ac_in</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_convert_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ac_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_resample_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_mix_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>use_channel_map</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>avresample_free</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier><modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>avr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>avresample_close</name><argument_list>(<argument><expr><operator>*</operator><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>*</operator><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>handle_buffered_output</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,

<parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>converted</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name> <operator>||</operator> <call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator>

<operator>(</operator><name>converted</name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>allocated_samples</name></name> <operator>&lt;</operator> <name><name>converted</name><operator>-&gt;</operator><name>nb_samples</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>converted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[FIFO] add %s to out_fifo\n"</literal></expr></argument>, <argument><expr><name><name>converted</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_add_to_fifo</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>, <argument><expr><name>converted</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name><name>converted</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name> <operator>&amp;&amp;</operator> <name><name>output</name><operator>-&gt;</operator><name>allocated_samples</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[FIFO] read from out_fifo to output\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[end conversion]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>ff_audio_data_read_from_fifo</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>, <argument><expr><name>output</name></expr></argument>,

<argument><expr><name><name>output</name><operator>-&gt;</operator><name>allocated_samples</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>converted</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[copy] %s to output\n"</literal></expr></argument>, <argument><expr><name><name>converted</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>output</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_copy</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>converted</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>==</operator> <name>REMAP_OUT_COPY</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[end conversion]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>output</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[end conversion]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name> <name>attribute_align_arg</name></type> <name>avresample_convert</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>out_plane_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>out_samples</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier> <specifier>const</specifier> <modifier>*</modifier></type><name>input</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>in_plane_size</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioData</name></type> <name>input_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name></type> <name>output_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>current_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>direct_output</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_data_set_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name><operator>-&gt;</operator><name>allocated_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_data_set_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name><operator>-&gt;</operator><name>allocated_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_audio_data_set_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name><operator>-&gt;</operator><name>allocated_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[start conversion]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>direct_output</name> <operator>=</operator> <name>output</name> <operator>&amp;&amp;</operator> <call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>output</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>out_plane_size</name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channels</name></name></expr></argument>, <argument><expr><name>out_samples</name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"output"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>output_buffer</name><operator>.</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>input</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>input_buffer</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>in_plane_size</name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>, <argument><expr><name>in_samples</name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>input_buffer</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>upmix_needed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name> <operator>&amp;&amp;</operator> <name>direct_output</name> <operator>&amp;&amp;</operator> <name>out_samples</name> <operator>&gt;=</operator> <name>in_samples</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[copy] %s to output\n"</literal></expr></argument>, <argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_copy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>, <argument><expr><name>current_buffer</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>==</operator> <name>REMAP_OUT_COPY</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_buffer</name> <operator>=</operator> <operator>&amp;</operator><name>output_buffer</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>==</operator> <name>REMAP_OUT_COPY</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>direct_output</name> <operator>||</operator> <name>out_samples</name> <operator>&lt;</operator> <name>in_samples</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[copy] %s to out_buffer\n"</literal></expr></argument>, <argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_copy</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>, <argument><expr><name>current_buffer</name></expr></argument>,

<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_buffer</name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_copy_needed</name></name> <operator>||</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_realloc</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>,

<argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[convert] %s to in_buffer\n"</literal></expr></argument>, <argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_convert</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>ac_in</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>,

<argument><expr><name>current_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[copy] %s to in_buffer\n"</literal></expr></argument>, <argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_copy</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name>current_buffer</name></expr></argument>,

<argument><expr><ternary><condition><expr><name><name>avr</name><operator>-&gt;</operator><name>remap_point</name></name> <operator>==</operator> <name>REMAP_IN_COPY</name></expr> ?</condition><then>

<expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>ff_audio_data_set_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channels</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>downmix_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[downmix] in_buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_mix</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_buffer</name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>in_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>handle_buffered_output</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>output</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>output_buffer</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AudioData</name> <modifier>*</modifier></type><name>resample_out</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name> <operator>&amp;&amp;</operator> <name>direct_output</name> <operator>&amp;&amp;</operator> <name>out_samples</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>resample_out</name> <operator>=</operator> <operator>&amp;</operator><name>output_buffer</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>resample_out</name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>resample_out_buffer</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[resample] %s to %s\n"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>current_buffer</name></expr> ?</condition><then> <expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>resample_out</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_resample</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>resample</name></name></expr></argument>, <argument><expr><name>resample_out</name></expr></argument>,

<argument><expr><name>current_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>resample_out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[end conversion]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>current_buffer</name> <operator>=</operator> <name>resample_out</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>upmix_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[upmix] %s\n"</literal></expr></argument>, <argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_mix</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr></argument>, <argument><expr><name>current_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>current_buffer</name> <operator>==</operator> <operator>&amp;</operator><name>output_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[end conversion]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>current_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>out_convert_needed</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>direct_output</name> <operator>&amp;&amp;</operator> <name>out_samples</name> <operator>&gt;=</operator> <name><name>current_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[convert] %s to output\n"</literal></expr></argument>, <argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_convert</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>ac_out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>output_buffer</name></expr></argument>, <argument><expr><name>current_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[end conversion]\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>output_buffer</name><operator>.</operator><name>nb_samples</name></name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_data_realloc</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>,

<argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"[convert] %s to out_buffer\n"</literal></expr></argument>, <argument><expr><name><name>current_buffer</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_audio_convert</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>ac_out</name></name></expr></argument>, <argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr></argument>,

<argument><expr><name>current_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>current_buffer</name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>out_buffer</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>handle_buffered_output</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><ternary><condition><expr><name>output</name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>output_buffer</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>,

<argument><expr><name>current_buffer</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_config</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>avresample_is_open</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>avresample_close</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>channel_layout</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>sample_rate</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>config_changed</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>||</operator>

<name><name>avr</name><operator>-&gt;</operator><name>in_sample_rate</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>

<name><name>avr</name><operator>-&gt;</operator><name>in_sample_fmt</name></name> <operator>!=</operator> <name><name>in</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>AVERROR_INPUT_CHANGED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>channel_layout</name></name> <operator>||</operator>

<name><name>avr</name><operator>-&gt;</operator><name>out_sample_rate</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>sample_rate</name></name> <operator>||</operator>

<name><name>avr</name><operator>-&gt;</operator><name>out_sample_fmt</name></name> <operator>!=</operator> <name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>|=</operator> <name>AVERROR_OUTPUT_CHANGED</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>convert_frame</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_data</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier><modifier>*</modifier></type><name>in_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_linesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>in_linesize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>out_nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>in_nb_samples</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_data</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_linesize</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>out_nb_samples</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>in</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>in_data</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>extended_data</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_linesize</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_nb_samples</name> <operator>=</operator> <name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>avresample_convert</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>out_data</name></expr></argument>, <argument><expr><name>out_linesize</name></expr></argument>,

<argument><expr><name>out_nb_samples</name></expr></argument>,

<argument><expr><name>in_data</name></expr></argument>, <argument><expr><name>in_linesize</name></expr></argument>,

<argument><expr><name>in_nb_samples</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>available_samples</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>samples</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bytes_per_sample</name> <init>= <expr><call><name>av_get_bytes_per_sample</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>bytes_per_sample</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name>bytes_per_sample</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_sample_fmt_is_planar</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>format</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<return>return <expr><name>samples</name></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>channels</name> <init>= <expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>out</name><operator>-&gt;</operator><name>channel_layout</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<return>return <expr><name>samples</name> <operator>/</operator> <name>channels</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_convert_frame</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,

<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>in</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>setup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>avresample_is_open</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avresample_config</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>avresample_open</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>setup</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>config_changed</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>out</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <call><name>avresample_get_out_samples</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name><name>in</name><operator>-&gt;</operator><name>nb_samples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_frame_get_buffer</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>setup</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>avresample_close</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>out</name><operator>-&gt;</operator><name>nb_samples</name></name> <operator>=</operator> <call><name>available_samples</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>convert_frame</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_get_matrix</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_channels</name></decl>, <decl><type ref="prev"/><name>out_channels</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_audio_mix_get_matrix</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>in_channels</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>in_channels</name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name> <operator>||</operator>

<name>out_channels</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>out_channels</name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel layouts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"matrix is not set\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>out_channels</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>in_channels</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_set_matrix</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>matrix</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>in_channels</name></decl>, <decl><type ref="prev"/><name>out_channels</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>o</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>ff_audio_mix_set_matrix</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>am</name></name></expr></argument>, <argument><expr><name>matrix</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>in_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>( <expr><name>in_channels</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>in_channels</name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name> <operator>||</operator>

<name>out_channels</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>out_channels</name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel layouts\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>in_channels</name> <operator>*</operator> <name>out_channels</name> <operator>*</operator>

<sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>o</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>o</name> <operator>&lt;</operator> <name>out_channels</name></expr>;</condition> <incr><expr><name>o</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>in_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>mix_matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>in_channels</name> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><name>o</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_set_channel_mapping</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>channel_map</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ChannelMapInfo</name> <modifier>*</modifier></type><name>info</name> <init>= <expr><operator>&amp;</operator><name><name>avr</name><operator>-&gt;</operator><name>ch_map_info</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_channels</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>in_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_channel_layout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_channels</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>in_channels</name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid input channel layout\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>input_map</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>input_map</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>in_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&gt;=</operator> <name>in_channels</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avr</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid channel map\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>channel_zero</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>do_zero</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>input_map</name><index>[<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>channel_copy</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>input_map</name><index>[<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>do_copy</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>input_map</name><index>[<expr><name><name>channel_map</name><index>[<expr><name>ch</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>ch</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>do_remap</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>ch</name> <operator>&lt;</operator> <name>in_channels</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>in_channels</name></expr>;</condition> <incr><expr><name>ch</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<while>while <condition>(<expr><name>ch</name> <operator>&lt;</operator> <name>in_channels</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>input_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ch</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>in_channels</name> <operator>&amp;&amp;</operator> <name><name>info</name><operator>-&gt;</operator><name>channel_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;=</operator> <name>in_channels</name> <operator>||</operator> <name>i</name> <operator>&gt;=</operator> <name>in_channels</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>input_map</name><index>[<expr><name>ch</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name><name>avr</name><operator>-&gt;</operator><name>use_channel_map</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_available</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_audio_fifo_size</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_get_out_samples</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>in_nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>samples</name> <init>= <expr><call><name>avresample_get_delay</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>in_nb_samples</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>avr</name><operator>-&gt;</operator><name>resample_needed</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>samples</name> <operator>=</operator> <call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>samples</name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_sample_rate</name></name></expr></argument>,

<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>in_sample_rate</name></name></expr></argument>,

<argument><expr><name>AV_ROUND_UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>samples</name> <operator>+=</operator> <call><name>avresample_available</name><argument_list>(<argument><expr><name>avr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>samples</name> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>samples</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_read</name><parameter_list>(<parameter><decl><type><name>AVAudioResampleContext</name> <modifier>*</modifier></type><name>avr</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_samples</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>output</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>av_audio_fifo_drain</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_audio_fifo_read</name><argument_list>(<argument><expr><name><name>avr</name><operator>-&gt;</operator><name>out_fifo</name></name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>*</operator><operator>)</operator><name>output</name></expr></argument>, <argument><expr><name>nb_samples</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>unsigned</name></type> <name>avresample_version</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>LIBAVRESAMPLE_VERSION_INT</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avresample_license</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LICENSE_PREFIX</name></cpp:macro> <cpp:value>"libavresample license: "</cpp:value></cpp:define>

<return>return <expr><name>LICENSE_PREFIX</name> <name>FFMPEG_LICENSE</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>LICENSE_PREFIX</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>avresample_configuration</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><name>FFMPEG_CONFIGURATION</name></expr>;</return>

</block_content>}</block></function>

</unit>
