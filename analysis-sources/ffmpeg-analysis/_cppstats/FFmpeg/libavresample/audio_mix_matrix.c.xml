<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavresample\audio_mix_matrix.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avresample.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_data.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"audio_mix.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_LEFT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_RIGHT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_CENTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOW_FREQUENCY</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK_LEFT</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK_RIGHT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_LEFT_OF_CENTER</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FRONT_RIGHT_OF_CENTER</name></cpp:macro> <cpp:value>7</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BACK_CENTER</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIDE_LEFT</name></cpp:macro> <cpp:value>9</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIDE_RIGHT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_CENTER</name></cpp:macro> <cpp:value>11</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_FRONT_LEFT</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_FRONT_CENTER</name></cpp:macro> <cpp:value>13</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_FRONT_RIGHT</name></cpp:macro> <cpp:value>14</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_BACK_LEFT</name></cpp:macro> <cpp:value>15</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_BACK_CENTER</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TOP_BACK_RIGHT</name></cpp:macro> <cpp:value>17</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEREO_LEFT</name></cpp:macro> <cpp:value>29</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STEREO_RIGHT</name></cpp:macro> <cpp:value>30</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDE_LEFT</name></cpp:macro> <cpp:value>31</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDE_RIGHT</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROUND_DIRECT_LEFT</name></cpp:macro> <cpp:value>33</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SURROUND_DIRECT_RIGHT</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOW_FREQUENCY_2</name></cpp:macro> <cpp:value>35</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQRT3_2</name></cpp:macro> <cpp:value>1.22474487139158904909</cpp:value></cpp:define> 

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>even</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><operator>!</operator><name>layout</name> <operator>||</operator> <operator>!</operator><operator>!</operator><operator>(</operator><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>layout</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sane_layout</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_SURROUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_FRONT_LEFT</name> <operator>|</operator> <name>AV_CH_FRONT_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_SIDE_LEFT</name> <operator>|</operator> <name>AV_CH_SIDE_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_BACK_LEFT</name> <operator>|</operator> <name>AV_CH_BACK_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_FRONT_LEFT_OF_CENTER</name> <operator>|</operator> <name>AV_CH_FRONT_RIGHT_OF_CENTER</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_TOP_FRONT_LEFT</name> <operator>|</operator> <name>AV_CH_TOP_FRONT_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_TOP_BACK_LEFT</name> <operator>|</operator> <name>AV_CH_TOP_BACK_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_STEREO_LEFT</name> <operator>|</operator> <name>AV_CH_STEREO_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_WIDE_LEFT</name> <operator>|</operator> <name>AV_CH_WIDE_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>even</name><argument_list>(<argument><expr><name>layout</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_SURROUND_DIRECT_LEFT</name> <operator>|</operator> <name>AV_CH_SURROUND_DIRECT_RIGHT</name><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>avresample_build_matrix</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>in_layout</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>out_layout</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>center_mix_level</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>surround_mix_level</name></decl></parameter>,

<parameter><decl><type><name>double</name></type> <name>lfe_mix_level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>normalize</name></decl></parameter>,

<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>matrix_out</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>stride</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVMatrixEncoding</name></name></type> <name>matrix_encoding</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>out_i</name></decl>, <decl><type ref="prev"/><name>out_j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>matrix</name><index>[<expr><literal type="number">64</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>unaccounted</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>maxcoef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>in_channels</name></decl>, <decl><type ref="prev"/><name>out_channels</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO_DOWNMIX</name><operator>)</operator> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO_DOWNMIX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>out_layout</name> <operator>=</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>unaccounted</name> <operator>=</operator> <name>in_layout</name> <operator>&amp;</operator> <operator>~</operator><name>out_layout</name></expr>;</expr_stmt>

<expr_stmt><expr><name>in_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>( <argument><expr><name>in_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>out_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>out_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>matrix_out</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>out_channels</name> <operator>*</operator> <name>stride</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>matrix_out</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>in_layout</name> <operator>||</operator> <name>in_channels</name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>out_layout</name> <operator>||</operator> <name>out_channels</name> <operator>&gt;</operator> <name>AVRESAMPLE_MAX_CHANNELS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sane_layout</name><argument_list>(<argument><expr><name>in_layout</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>sane_layout</name><argument_list>(<argument><expr><name>out_layout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_layout</name> <operator>&amp;</operator> <name>out_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO</name><operator>)</operator> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>in_layout</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO</name><operator>)</operator> <operator>==</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>center_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>center_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_LAYOUT_STEREO</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>FRONT_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>FRONT_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>FRONT_CENTER</name></expr>]</index></name> <operator>=</operator> <name>center_mix_level</name> <operator>*</operator> <name>M_SQRT2</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_LEFT</name></expr> ]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_LEFT</name></expr> ]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DOLBY</name> <operator>||</operator>

<name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DPLII</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <operator>(</operator><name>AV_CH_BACK_LEFT</name> <operator>|</operator> <name>AV_CH_SIDE_LEFT</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>BACK_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_layout</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_LEFT</name></expr> ]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_LEFT</name></expr> ]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>SIDE_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DOLBY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DPLII</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>BACK_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>BACK_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_SIDE_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>in_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_BACK_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>BACK_CENTER</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DOLBY</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>matrix_encoding</name> <operator>==</operator> <name>AV_MATRIX_ENCODING_DPLII</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>-=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>SQRT3_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>SIDE_LEFT</name></expr> ]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>SIDE_RIGHT</name></expr>]</index></name> <operator>+=</operator> <name>surround_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT_OF_CENTER</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>FRONT_LEFT_OF_CENTER</name></expr> ]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>FRONT_RIGHT_OF_CENTER</name></expr>]</index></name> <operator>+=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>FRONT_LEFT_OF_CENTER</name></expr> ]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>FRONT_RIGHT_OF_CENTER</name></expr>]</index></name> <operator>+=</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>unaccounted</name> <operator>&amp;</operator> <name>AV_CH_LOW_FREQUENCY</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_CENTER</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_CENTER</name></expr>]</index><index>[<expr><name>LOW_FREQUENCY</name></expr>]</index></name> <operator>+=</operator> <name>lfe_mix_level</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <name>AV_CH_FRONT_LEFT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_LEFT</name></expr> ]</index><index>[<expr><name>LOW_FREQUENCY</name></expr>]</index></name> <operator>+=</operator> <name>lfe_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>matrix</name><index>[<expr><name>FRONT_RIGHT</name></expr>]</index><index>[<expr><name>LOW_FREQUENCY</name></expr>]</index></name> <operator>+=</operator> <name>lfe_mix_level</name> <operator>*</operator> <name>M_SQRT1_2</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>out_i</name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>out_i</name> <operator>&lt;</operator> <name>out_channels</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>out_j</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>out_j</name> <operator>&lt;</operator> <name>in_channels</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>matrix_out</name><index>[<expr><name>out_i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>out_j</name></expr>]</index></name> <operator>=</operator> <name><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>matrix</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>in_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>j</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_j</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>maxcoef</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>maxcoef</name></expr></argument>, <argument><expr><name>sum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>out_layout</name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>out_i</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>normalize</name> <operator>&amp;&amp;</operator> <name>maxcoef</name> <operator>&gt;</operator> <literal type="number">1.0</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>out_channels</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>in_channels</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>matrix_out</name><index>[<expr><name>i</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>j</name></expr>]</index></name> <operator>/=</operator> <name>maxcoef</name></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
