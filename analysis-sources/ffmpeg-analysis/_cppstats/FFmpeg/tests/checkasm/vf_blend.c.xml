<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\vf_blend.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/blend.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_UNITS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_PER_UNIT</name></cpp:macro> <cpp:value>(WIDTH * HEIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>(BUF_UNITS * SIZE_PER_UNIT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int i, j; for (i = 0; i &lt; HEIGHT; i++) { for (j = 0; j &lt; WIDTH; j++) { top1[i * WIDTH + j] = top2[i * WIDTH + j] = i; bot1[i * WIDTH + j] = bot2[i * WIDTH + j] = j; } } for (i = 0; i &lt; SIZE_PER_UNIT; i += 4) { uint32_t r = rnd(); AV_WN32A(dst1 + i, r); AV_WN32A(dst2 + i, r); } for (; i &lt; BUF_SIZE; i += 4) { uint32_t r = rnd(); AV_WN32A(top1 + i, r); AV_WN32A(top2 + i, r); r = rnd(); AV_WN32A(bot1 + i, r); AV_WN32A(bot2 + i, r); r = rnd(); AV_WN32A(dst1 + i, r); AV_WN32A(dst2 + i, r); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_blend_func</name><parameter_list>(<parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i, w; declare_func(void, const uint8_t *top, ptrdiff_t top_linesize, const uint8_t *bottom, ptrdiff_t bottom_linesize, uint8_t *dst, ptrdiff_t dst_linesize, ptrdiff_t width, ptrdiff_t height, struct FilterParams *param, double *values); w = WIDTH / depth; for (i = 0; i &lt; BUF_UNITS - 1; i++) { int src_offset = i * SIZE_PER_UNIT + (BUF_UNITS - 1 - i) * depth; int dst_offset = i * SIZE_PER_UNIT; randomize_buffers(); call_ref(top1 + src_offset, w, bot1 + src_offset, w, dst1 + dst_offset, w, w, HEIGHT, &amp;param, NULL); call_new(top2 + src_offset, w, bot2 + src_offset, w, dst2 + dst_offset, w, w, HEIGHT, &amp;param, NULL); if (memcmp(top1, top2, BUF_SIZE) || memcmp(bot1, bot2, BUF_SIZE) || memcmp(dst1, dst2, BUF_SIZE)) fail(); } bench_new(top2, w / 4, bot2, w / 4, dst2, w / 4, w / 4, HEIGHT / 4, &amp;param, NULL); } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>checkasm_check_blend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top1</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>top2</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bot1</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bot2</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst1</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst2</name> <init>= <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FilterParams</name></type> <name>param</name> <init>= <expr><block>{

<expr><operator>.</operator><name>opacity</name> <operator>=</operator> <literal type="number">1.0</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_and_report</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>val</name></type></parameter>, <parameter><type><name>depth</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>param.mode = val; ff_blend_init(&amp;param, depth - 1); if (check_func(param.blend, #name)) check_blend_func(depth);</cpp:value></cpp:define>

<macro><name>check_and_report</name><argument_list>(<argument>addition</argument>, <argument>BLEND_ADDITION</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>grainmerge</argument>, <argument>BLEND_GRAINMERGE</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>and</argument>, <argument>BLEND_AND</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>average</argument>, <argument>BLEND_AVERAGE</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>darken</argument>, <argument>BLEND_DARKEN</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>grainextract</argument>, <argument>BLEND_GRAINEXTRACT</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>hardmix</argument>, <argument>BLEND_HARDMIX</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>lighten</argument>, <argument>BLEND_LIGHTEN</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>multiply</argument>, <argument>BLEND_MULTIPLY</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>or</argument>, <argument>BLEND_OR</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>phoenix</argument>, <argument>BLEND_PHOENIX</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>screen</argument>, <argument>BLEND_SCREEN</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>subtract</argument>, <argument>BLEND_SUBTRACT</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>xor</argument>, <argument>BLEND_XOR</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>difference</argument>, <argument>BLEND_DIFFERENCE</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>extremity</argument>, <argument>BLEND_EXTREMITY</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>negation</argument>, <argument>BLEND_NEGATION</argument>, <argument><literal type="number">1</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"8bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>check_and_report</name><argument_list>(<argument>addition_16</argument>, <argument>BLEND_ADDITION</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>grainmerge_16</argument>, <argument>BLEND_GRAINMERGE</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>and_16</argument>, <argument>BLEND_AND</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>average_16</argument>, <argument>BLEND_AVERAGE</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>darken_16</argument>, <argument>BLEND_DARKEN</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>grainextract_16</argument>, <argument>BLEND_GRAINEXTRACT</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>difference_16</argument>, <argument>BLEND_DIFFERENCE</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>extremity_16</argument>, <argument>BLEND_EXTREMITY</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>negation_16</argument>, <argument>BLEND_NEGATION</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>lighten_16</argument>, <argument>BLEND_LIGHTEN</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>or_16</argument>, <argument>BLEND_OR</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>phoenix_16</argument>, <argument>BLEND_PHOENIX</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>subtract_16</argument>, <argument>BLEND_SUBTRACT</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<macro><name>check_and_report</name><argument_list>(<argument>xor_16</argument>, <argument>BLEND_SUBTRACT</argument>, <argument><literal type="number">2</literal></argument>)</argument_list></macro>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"16bit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>top2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bot1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bot2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dst2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
