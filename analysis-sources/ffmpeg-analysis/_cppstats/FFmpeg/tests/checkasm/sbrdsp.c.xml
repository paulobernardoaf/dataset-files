<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\sbrdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/sbrdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; len; i++) { const INTFLOAT f = (INTFLOAT)rnd() / UINT_MAX; (buf)[i] = f; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>0.0001</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_sum64x5</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">256</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">256</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>declare_func</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>INTFLOAT</name> <operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">64</literal> <operator>+</operator> <literal type="number">256</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>+</operator> <literal type="number">256</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_sum_square</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>res0</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>res1</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">256</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<macro><name>declare_func_float</name><argument_list>(<argument>INTFLOAT</argument>, <argument>INTFLOAT (*x)[<literal type="number">2</literal>]</argument>, <argument>int n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">256</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>call_ref</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>call_new</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name>res0</name></expr></argument>, <argument><expr><name>res1</name></expr></argument>, <argument><expr><name>t</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>FLT_EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">256</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_neg_odd_64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>declare_func</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>INTFLOAT</name> <operator>*</operator><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">64</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_qmf_pre_shuffle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>declare_func</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>INTFLOAT</name> <operator>*</operator><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><literal type="number">128</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_qmf_post_shuffle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT W[<literal type="number">32</literal>][<literal type="number">2</literal>]</argument>, <argument>const INTFLOAT *z</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_qmf_deint_neg</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>declare_func</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>INTFLOAT</name> <operator>*</operator><name>v</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <operator>*</operator><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_qmf_deint_bfly</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>declare_func</name><argument_list>(<argument><expr><name>void</name></expr></argument>, <argument><expr><name>INTFLOAT</name> <operator>*</operator><name>v</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <operator>*</operator><name>src0</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>INTFLOAT</name> <operator>*</operator><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src0</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src1</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_autocorrelate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">40</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>const INTFLOAT x[<literal type="number">40</literal>][<literal type="number">2</literal>]</argument>, <argument>INTFLOAT phi[<literal type="number">3</literal>][<literal type="number">2</literal>][<literal type="number">2</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><literal type="number">80</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_hf_gen</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>alpha0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>alpha1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>INTFLOAT</name></type> <name>bw</name> <init>= <expr><operator>(</operator><name>INTFLOAT</name><operator>)</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>/</operator> <name>UINT_MAX</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT (*X_high)[<literal type="number">2</literal>]</argument>, <argument>const INTFLOAT (*X_low)[<literal type="number">2</literal>]</argument>,

<argument>const INTFLOAT alpha0[<literal type="number">2</literal>]</argument>, <argument>const INTFLOAT alpha1[<literal type="number">2</literal>]</argument>,

<argument>INTFLOAT bw</argument>, <argument>int start</argument>, <argument>int end</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>low</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>alpha0</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>alpha1</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>alpha0</name></expr></argument>, <argument><expr><name>alpha1</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>alpha0</name></expr></argument>, <argument><expr><name>alpha1</name></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>low</name></expr></argument>, <argument><expr><name>alpha0</name></expr></argument>, <argument><expr><name>alpha1</name></expr></argument>, <argument><expr><name>bw</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_hf_g_filt</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">40</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>g_filt</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT (*Y)[<literal type="number">2</literal>]</argument>, <argument>const INTFLOAT (*X_high)[<literal type="number">40</literal>][<literal type="number">2</literal>]</argument>,

<argument>const INTFLOAT *g_filt</argument>, <argument>int m_max</argument>, <argument>intptr_t ixh</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>high</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">40</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>g_filt</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>g_filt</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>g_filt</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>high</name></expr></argument>, <argument><expr><name>g_filt</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_hf_apply_noise</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBRDSPContext</name> <modifier>*</modifier></type><name>sbrdsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>AAC_FLOAT</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>AAC_FLOAT</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">128</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>noise</name> <init>= <expr><literal type="number">0x2a</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT (*Y)[<literal type="number">2</literal>]</argument>, <argument>const AAC_FLOAT *s_m</argument>,

<argument>const AAC_FLOAT *q_filt</argument>, <argument>int noise</argument>,

<argument>int kx</argument>, <argument>int m_max</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>ref</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>s_m</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>q_filt</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>-&gt;</operator><name>hf_apply_noise</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"hf_apply_noise_%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><literal type="number">128</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>s_m</name></expr></argument>, <argument><expr><name>q_filt</name></expr></argument>, <argument><expr><name>noise</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_sbrdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>SBRDSPContext</name></type> <name>sbrdsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_sbrdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sbrdsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>sum64x5</name></name></expr></argument>, <argument><expr><literal type="string">"sum64x5"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_sum64x5</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"sum64x5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>sum_square</name></name></expr></argument>, <argument><expr><literal type="string">"sum_square"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_sum_square</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"sum_square"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>neg_odd_64</name></name></expr></argument>, <argument><expr><literal type="string">"neg_odd_64"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_neg_odd_64</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"neg_odd_64"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>qmf_pre_shuffle</name></name></expr></argument>, <argument><expr><literal type="string">"qmf_pre_shuffle"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_qmf_pre_shuffle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"qmf_pre_shuffle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>qmf_post_shuffle</name></name></expr></argument>, <argument><expr><literal type="string">"qmf_post_shuffle"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_qmf_post_shuffle</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"qmf_post_shuffle"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>qmf_deint_neg</name></name></expr></argument>, <argument><expr><literal type="string">"qmf_deint_neg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_qmf_deint_neg</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"qmf_deint_neg"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>qmf_deint_bfly</name></name></expr></argument>, <argument><expr><literal type="string">"qmf_deint_bfly"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_qmf_deint_bfly</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"qmf_deint_bfly"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>autocorrelate</name></name></expr></argument>, <argument><expr><literal type="string">"autocorrelate"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_autocorrelate</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"autocorrelate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>hf_gen</name></name></expr></argument>, <argument><expr><literal type="string">"hf_gen"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_hf_gen</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"hf_gen"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>sbrdsp</name><operator>.</operator><name>hf_g_filt</name></name></expr></argument>, <argument><expr><literal type="string">"hf_g_filt"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_hf_g_filt</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"hf_g_filt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_hf_apply_noise</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sbrdsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"hf_apply_noise"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
