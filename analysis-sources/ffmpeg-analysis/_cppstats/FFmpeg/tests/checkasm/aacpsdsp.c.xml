<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\aacpsdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/aacpsdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>N</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STRIDE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>(N * STRIDE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; len; i++) { const INTFLOAT f = (INTFLOAT)rnd() / UINT_MAX; (buf)[i] = f; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPS</name></cpp:macro> <cpp:value>0.005</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clear_less_significant_bits</name><parameter_list>(<parameter><decl><type><name>INTFLOAT</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name><name>union</name> <name>av_intfloat32</name></name></type> <name>u</name> <init>= <expr><block>{ <expr><operator>.</operator><name>f</name> <operator>=</operator> <name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>u</name><operator>.</operator><name>i</name></name> <operator>&amp;=</operator> <operator>(</operator><literal type="number">0xffffffff</literal> <operator>&lt;&lt;</operator> <name>bits</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>u</name><operator>.</operator><name>f</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_add_squares</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT *dst</argument>,

<argument>const INTFLOAT (*src)[<literal type="number">2</literal>]</argument>, <argument>int n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_mul_pair_single</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT (*dst)[<literal type="number">2</literal>]</argument>,

<argument>INTFLOAT (*src0)[<literal type="number">2</literal>]</argument>, <argument>INTFLOAT *src1</argument>, <argument>int n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>src0</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_hybrid_analysis</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">13</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><index>[<expr><name>N</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT (*out)[<literal type="number">2</literal>]</argument>, <argument>INTFLOAT (*in)[<literal type="number">2</literal>]</argument>,

<argument>const INTFLOAT (*filter)[<literal type="number">8</literal>][<literal type="number">2</literal>]</argument>,

<argument>ptrdiff_t stride</argument>, <argument>int n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">13</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>filter</name></expr></argument>, <argument><expr><name>N</name> <operator>*</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>STRIDE</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>STRIDE</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst0</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><name>filter</name></expr></argument>, <argument><expr><name>STRIDE</name></expr></argument>, <argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_hybrid_analysis_ileave</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">91</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">91</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT (*out)[<literal type="number">32</literal>][<literal type="number">2</literal>]</argument>, <argument>INTFLOAT L[<literal type="number">2</literal>][<literal type="number">38</literal>][<literal type="number">64</literal>]</argument>,

<argument>int i</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>out0</name></expr></argument>, <argument><expr><literal type="number">91</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">38</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><literal type="number">91</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">91</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">91</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_hybrid_synthesis_deint</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">38</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">91</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT out[<literal type="number">2</literal>][<literal type="number">38</literal>][<literal type="number">64</literal>]</argument>, <argument>INTFLOAT (*in)[<literal type="number">32</literal>][<literal type="number">2</literal>]</argument>,

<argument>int i</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>in</name></expr></argument>, <argument><expr><literal type="number">91</literal> <operator>*</operator> <literal type="number">32</literal> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>out0</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">38</literal> <operator>*</operator> <literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>out0</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">38</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">38</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>out0</name></expr></argument>, <argument><expr><name>out1</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">38</literal> <operator>*</operator> <literal type="number">64</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>out1</name></expr></argument>, <argument><expr><name>in</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_stereo_interpolate</name><parameter_list>(<parameter><decl><type><name>PSDSPContext</name> <modifier>*</modifier></type><name>psdsp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>l0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>l1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>, <argument><expr><name>h_step</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>INTFLOAT (*l)[<literal type="number">2</literal>]</argument>, <argument>INTFLOAT (*r)[<literal type="number">2</literal>]</argument>,

<argument>INTFLOAT h[<literal type="number">2</literal>][<literal type="number">4</literal>]</argument>, <argument>INTFLOAT h_step[<literal type="number">2</literal>][<literal type="number">4</literal>]</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>l</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>r</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>psdsp</name><operator>-&gt;</operator><name>stereo_interpolate</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ps_stereo_interpolate%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><literal type="string">"_ipdopd"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r0</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>h</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>h_step</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>clear_less_significant_bits</name><argument_list>(<argument><expr><operator>(</operator><name>INTFLOAT</name> <operator>*</operator><operator>)</operator><name>h_step</name></expr></argument>, <argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>l0</name></expr></argument>, <argument><expr><name>r0</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h_step</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h_step</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>l0</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>l1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>float_near_abs_eps_array</name><argument_list>(<argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>r0</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>r1</name></expr></argument>, <argument><expr><name>EPS</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>r1</name></expr></argument>, <argument><expr><name>r</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>INTFLOAT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>l1</name></expr></argument>, <argument><expr><name>r1</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>h_step</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_aacpsdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>PSDSPContext</name></type> <name>psdsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_psdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psdsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>psdsp</name><operator>.</operator><name>add_squares</name></name></expr></argument>, <argument><expr><literal type="string">"ps_add_squares"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_add_squares</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"add_squares"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>psdsp</name><operator>.</operator><name>mul_pair_single</name></name></expr></argument>, <argument><expr><literal type="string">"ps_mul_pair_single"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_mul_pair_single</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"mul_pair_single"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>psdsp</name><operator>.</operator><name>hybrid_analysis</name></name></expr></argument>, <argument><expr><literal type="string">"ps_hybrid_analysis"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_hybrid_analysis</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"hybrid_analysis"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>psdsp</name><operator>.</operator><name>hybrid_analysis_ileave</name></name></expr></argument>, <argument><expr><literal type="string">"ps_hybrid_analysis_ileave"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_hybrid_analysis_ileave</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"hybrid_analysis_ileave"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>psdsp</name><operator>.</operator><name>hybrid_synthesis_deint</name></name></expr></argument>, <argument><expr><literal type="string">"ps_hybrid_synthesis_deint"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_hybrid_synthesis_deint</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"hybrid_synthesis_deint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_stereo_interpolate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>psdsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"stereo_interpolate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
