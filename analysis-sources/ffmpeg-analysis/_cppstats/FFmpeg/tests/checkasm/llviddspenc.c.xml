<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\llviddspenc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/lossless_videoencdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int j; for (j = 0; j &lt; size; j+=4) AV_WN32(buf + j, rnd()); } while (0)</cpp:value></cpp:define>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{<decl_stmt><decl><type><name>uint8_t</name></type> <name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>s</name></decl>;</decl_stmt>}</block> <decl><name><name>planes</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">21</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">25</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">32</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">48</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">15</literal></expr>,<expr><literal type="number">128</literal></expr>,<expr><literal type="number">16</literal></expr>}</block></expr>, <expr><block>{<expr><literal type="number">128</literal></expr>,<expr><literal type="number">127</literal></expr>,<expr><literal type="number">128</literal></expr>}</block></expr>

}</block></expr></init></decl>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_STRIDE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HEIGHT</name></cpp:macro> <cpp:value>127</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_diff_bytes</name><parameter_list>(<parameter><decl><type><name>LLVidEncDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>void</argument>, <argument>uint8_t *dst</argument>, <argument>const uint8_t *src1</argument>,

<argument>const uint8_t *src2</argument>, <argument>intptr_t w</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_STRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_STRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>MAX_STRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>MAX_STRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src2</name></expr></argument>, <argument><expr><name>MAX_STRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>MAX_STRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>diff_bytes</name></name></expr></argument>, <argument><expr><literal type="string">"diff_bytes"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_sub_left_pred</name><parameter_list>(<parameter><decl><type><name>LLVidEncDSPContext</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>void</argument>, <argument>uint8_t *dst</argument>, <argument>const uint8_t *src</argument>,

<argument>ptrdiff_t stride</argument>, <argument>ptrdiff_t width</argument>, <argument>int height</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>MAX_STRIDE</name> <operator>*</operator> <name>MAX_HEIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>sub_left_predict</name></name></expr></argument>, <argument><expr><literal type="string">"sub_left_predict"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">5</literal></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>w</name> <operator>*</operator> <name><name>planes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<break>break;</break>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>s</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>w</name></expr></argument>, <argument><expr><name><name>planes</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_llviddspenc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>LLVidEncDSPContext</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_llvidencdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_diff_bytes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"diff_bytes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_sub_left_pred</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"sub_left_predict"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
