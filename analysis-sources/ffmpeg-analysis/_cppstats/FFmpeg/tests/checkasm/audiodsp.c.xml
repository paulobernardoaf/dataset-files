<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\audiodsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/audiodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SIZE</name></cpp:macro> <cpp:value>(32 * 128)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_float</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; len; i++) { float f = (float)rnd() / (UINT_MAX &gt;&gt; 5) - 16.0f; buf[i] = f; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_int</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>size</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; len; i++) { uint ##size ##_t r = rnd() &amp; ((1LL &lt;&lt; bits) - 1); AV_WN ##size ##A(buf + i, -(1LL &lt;&lt; (bits - 1)) + r); } } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>checkasm_check_audiodsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AudioDSPContext</name></type> <name>adsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_audiodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>adsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>adsp</name><operator>.</operator><name>scalarproduct_int16</name></name></expr></argument>, <argument><expr><literal type="string">"audiodsp.scalarproduct_int16"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>len_bits_minus4</name></decl>, <decl><type ref="prev"/><name>v1_bits</name></decl>, <decl><type ref="prev"/><name>v2_bits</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>res0</name></decl>, <decl><type ref="prev"/><name>res1</name></decl>;</decl_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>int32_t</argument>, <argument>const int16_t *v1</argument>, <argument>const int16_t *v2</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>len_bits_minus4</name> <operator>=</operator> <call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rnd</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>len_bits_minus4</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1_bits</name> <operator>=</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>v2_bits</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><literal type="number">32</literal> <operator>-</operator> <operator>(</operator><name>len_bits_minus4</name> <operator>+</operator> <literal type="number">4</literal><operator>)</operator> <operator>-</operator> <name>v1_bits</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_int</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>v1_bits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_int</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>v2_bits</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res0</name> <operator>=</operator> <call><name>call_ref</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res1</name> <operator>=</operator> <call><name>call_new</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res0</name> <operator>!=</operator> <name>res1</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><name>v2</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>adsp</name><operator>.</operator><name>vector_clip_int32</name></name></expr></argument>, <argument><expr><literal type="string">"audiodsp.vector_clip_int32"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>int32_t</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>void</argument>, <argument>int32_t *dst</argument>, <argument>const int32_t *src</argument>,

<argument>int32_t min</argument>, <argument>int32_t max</argument>, <argument>unsigned int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>rnd</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>val1</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>val1</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>rnd</name><argument_list>()</argument_list></call><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <call><name>FFSIGN</name><argument_list>(<argument><expr><name>val2</name></expr></argument>)</argument_list></call> <operator>*</operator> <operator>(</operator><name>val2</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_int</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">32</literal> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>adsp</name><operator>.</operator><name>vector_clipf</name></name></expr></argument>, <argument><expr><literal type="string">"audiodsp.vector_clipf"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><name>float</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><name>MAX_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>val1</name></decl>, <decl><type ref="prev"/><name>val2</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>len</name></decl>;</decl_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>void</argument>, <argument>float *dst</argument>, <argument>const float *src</argument>,

<argument>int len</argument>, <argument>float min</argument>, <argument>float max</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>val1</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>UINT_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>val2</name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>/</operator> <operator>(</operator><name>UINT_MAX</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>-</operator> <literal type="number">1.0f</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>val1</name></expr></argument>, <argument><expr><name>val2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_float</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">16</literal> <operator>*</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_ulp_array</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>MAX_SIZE</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"audiodsp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
