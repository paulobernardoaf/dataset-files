<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\float_dsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/float_dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffer</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; double bmg[2], stddev = 10.0, mean = 0.0; for (i = 0; i &lt; LEN; i += 2) { av_bmg_get(&amp;checkasm_lfg, bmg); buf[i] = bmg[0] * stddev + mean; buf[i + 1] = bmg[1] * stddev + mean; } } while(0);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_fmul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *dst</argument>, <argument>const float *src0</argument>, <argument>const float *src1</argument>,

<argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>FLT_EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_dmul</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>double *dst</argument>, <argument>const double *src0</argument>, <argument>const double *src1</argument>,

<argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>double_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>DBL_EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARBITRARY_FMUL_ADD_CONST</name></cpp:macro> <cpp:value>0.005</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_fmul_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *dst</argument>, <argument>const float *src0</argument>, <argument>const float *src1</argument>,

<argument>const float *src2</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ARBITRARY_FMUL_ADD_CONST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_fmul_scalar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *dst</argument>, <argument>const float *src</argument>, <argument>float mul</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>*</operator> <name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>FLT_EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARBITRARY_FMUL_WINDOW_CONST</name></cpp:macro> <cpp:value>0.008</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_fmul_window</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>win</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *dst</argument>, <argument>const float *src0</argument>, <argument>const float *src1</argument>,

<argument>const float *win</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>LEN</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>LEN</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ARBITRARY_FMUL_WINDOW_CONST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>win</name></expr></argument>, <argument><expr><name>LEN</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARBITRARY_FMAC_SCALAR_CONST</name></cpp:macro> <cpp:value>0.005</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_fmac_scalar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *dst</argument>, <argument>const float *src</argument>, <argument>float mul</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ARBITRARY_FMAC_SCALAR_CONST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_dmul_scalar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>double *dst</argument>, <argument>const double *src</argument>, <argument>double mul</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>double_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>DBL_EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>,

<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARBITRARY_DMAC_SCALAR_CONST</name></cpp:macro> <cpp:value>0.005</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vector_dmac_scalar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>double</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>double *dst</argument>, <argument>const double *src</argument>, <argument>double mul</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>double_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>ARBITRARY_DMAC_SCALAR_CONST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name><name>src1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_butterflies_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst1</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst1</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *av_restrict src0</argument>, <argument>float *av_restrict src1</argument>,

<argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cdst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>cdst1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>odst1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>LEN</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>FLT_EPSILON</name></expr></argument>)</argument_list></call> <operator>||</operator>

<operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>FLT_EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst1</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst1</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>src1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>odst1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARBITRARY_SCALARPRODUCT_CONST</name></cpp:macro> <cpp:value>0.2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_scalarproduct_float</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>float</name></type> <name>cprod</name></decl>, <decl><type ref="prev"/><name>oprod</name></decl>;</decl_stmt>

<macro><name>declare_func_float</name><argument_list>(<argument>float</argument>, <argument>const float *src0</argument>, <argument>const float *src1</argument>, <argument>int len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>cprod</name> <operator>=</operator> <call><name>call_ref</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>oprod</name> <operator>=</operator> <call><name>call_new</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name>cprod</name></expr></argument>, <argument><expr><name>oprod</name></expr></argument>, <argument><expr><name>ARBITRARY_SCALARPRODUCT_CONST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>cprod</name></expr></argument>, <argument><expr><name>oprod</name></expr></argument>, <argument><expr><name>cprod</name> <operator>-</operator> <name>oprod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_float_dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src3</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>dbl_src0</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>dbl_src1</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>double</name></expr></argument>, <argument><expr><name>dbl_src2</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AVFloatDSPContext</name> <modifier>*</modifier></type><name>fdsp</name> <init>= <expr><call><name>avpriv_float_dsp_alloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fdsp</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"floatdsp: Out of memory error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>dbl_src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>dbl_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>dbl_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul</name></name></expr></argument>, <argument><expr><literal type="string">"vector_fmul"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_fmul</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_add</name></name></expr></argument>, <argument><expr><literal type="string">"vector_fmul_add"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_fmul_add</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_scalar</name></name></expr></argument>, <argument><expr><literal type="string">"vector_fmul_scalar"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_fmul_scalar</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_reverse</name></name></expr></argument>, <argument><expr><literal type="string">"vector_fmul_reverse"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_fmul</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmul_window</name></name></expr></argument>, <argument><expr><literal type="string">"vector_fmul_window"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_fmul_window</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>, <argument><expr><name>src5</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"vector_fmul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_fmac_scalar</name></name></expr></argument>, <argument><expr><literal type="string">"vector_fmac_scalar"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_fmac_scalar</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"vector_fmac"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_dmul</name></name></expr></argument>, <argument><expr><literal type="string">"vector_dmul"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_dmul</name><argument_list>(<argument><expr><name>dbl_src0</name></expr></argument>, <argument><expr><name>dbl_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_dmul_scalar</name></name></expr></argument>, <argument><expr><literal type="string">"vector_dmul_scalar"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_dmul_scalar</name><argument_list>(<argument><expr><name>dbl_src0</name></expr></argument>, <argument><expr><name>dbl_src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"vector_dmul"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>vector_dmac_scalar</name></name></expr></argument>, <argument><expr><literal type="string">"vector_dmac_scalar"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_vector_dmac_scalar</name><argument_list>(<argument><expr><name>dbl_src0</name></expr></argument>, <argument><expr><name>dbl_src1</name></expr></argument>, <argument><expr><name>dbl_src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"vector_dmac"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>butterflies_float</name></name></expr></argument>, <argument><expr><literal type="string">"butterflies_float"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_butterflies_float</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"butterflies_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fdsp</name><operator>-&gt;</operator><name>scalarproduct_float</name></name></expr></argument>, <argument><expr><literal type="string">"scalarproduct_float"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_scalarproduct_float</name><argument_list>(<argument><expr><name>src3</name></expr></argument>, <argument><expr><name>src4</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"scalarproduct_float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fdsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
