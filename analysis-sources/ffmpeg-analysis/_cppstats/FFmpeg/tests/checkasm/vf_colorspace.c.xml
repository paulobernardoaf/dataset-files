<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\vf_colorspace.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/colorspacedsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>W</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>H</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { unsigned mask = bpp_mask[idepth]; int n, m; int bpp = 1 + (!!idepth); int buf_size = W * H * bpp; for (m = 0; m &lt; 3; m++) { int ss = m ? ss_w + ss_h : 0; int plane_sz = buf_size &gt;&gt; ss; for (n = 0; n &lt; plane_sz; n += 4) { unsigned r = rnd() &amp; mask; AV_WN32A(&amp;src[m][n], r); } } } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>format_string</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"444"</literal></expr>, <expr><literal type="string">"422"</literal></expr>, <expr><literal type="string">"420"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name></type> <name><name>bpp_mask</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xffffffff</literal></expr>, <expr><literal type="number">0x03ff03ff</literal></expr>, <expr><literal type="number">0x0fff0fff</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_yuv2yuv</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>uint8_t *dst[<literal type="number">3</literal>]</argument>, <argument>ptrdiff_t dst_stride[<literal type="number">3</literal>]</argument>,

<argument>uint8_t *src[<literal type="number">3</literal>]</argument>, <argument>ptrdiff_t src_stride[<literal type="number">3</literal>]</argument>,

<argument>int w</argument>, <argument>int h</argument>, <argument>const int16_t coeff[<literal type="number">3</literal>][<literal type="number">3</literal>][<literal type="number">8</literal>]</argument>,

<argument>const int16_t off[<literal type="number">2</literal>][<literal type="number">8</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>ColorSpaceDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idepth</name></decl>, <decl><type ref="prev"/><name>odepth</name></decl>, <decl><type ref="prev"/><name>fmt</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>src_y</name></expr>, <expr><name>src_u</name></expr>, <expr><name>src_v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst0_y</name></expr>, <expr><name>dst0_u</name></expr>, <expr><name>dst0_v</name></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>dst1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst1_y</name></expr>, <expr><name>dst1_u</name></expr>, <expr><name>dst1_v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>offset_buf</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>coeff_buf</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>offset</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <operator>(</operator><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index><operator>)</operator> <name>offset_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>coeff</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <operator>(</operator><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><operator>)</operator> <name>coeff_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_colorspacedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>idepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idepth</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>idepth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>odepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>odepth</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>odepth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fmt</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>dsp</name><operator>.</operator><name>yuv2yuv</name><index>[<expr><name>idepth</name></expr>]</index><index>[<expr><name>odepth</name></expr>]</index><index>[<expr><name>fmt</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">"ff_colorspacedsp_yuv2yuv_%sp%dto%d"</literal></expr></argument>,

<argument><expr><name><name>format_string</name><index>[<expr><name>fmt</name></expr>]</index></name></expr></argument>,

<argument><expr><name>idepth</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>odepth</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ss_w</name> <init>= <expr><operator>!</operator><operator>!</operator><name>fmt</name></expr></init></decl>, <decl><type ref="prev"/><name>ss_h</name> <init>= <expr><name>fmt</name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_src_stride</name> <init>= <expr><name>W</name> <operator>&lt;&lt;</operator> <operator>!</operator><operator>!</operator><name>idepth</name></expr></init></decl>, <decl><type ref="prev"/><name>y_dst_stride</name> <init>= <expr><name>W</name> <operator>&lt;&lt;</operator> <operator>!</operator><operator>!</operator><name>odepth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_src_stride</name> <init>= <expr><name>y_src_stride</name> <operator>&gt;&gt;</operator> <name>ss_w</name></expr></init></decl>, <decl><type ref="prev"/><name>uv_dst_stride</name> <init>= <expr><name>y_dst_stride</name> <operator>&gt;&gt;</operator> <name>ss_w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>call_ref</name><argument_list>(<argument>dst0</argument>, <argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_dst_stride</argument>, <argument>uv_dst_stride</argument>, <argument>uv_dst_stride }</argument>,

<argument>src</argument>, <argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_src_stride</argument>, <argument>uv_src_stride</argument>, <argument>uv_src_stride }</argument>,

<argument>W</argument>, <argument>H</argument>, <argument>coeff</argument>, <argument>offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>call_new</name><argument_list>(<argument>dst1</argument>, <argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_dst_stride</argument>, <argument>uv_dst_stride</argument>, <argument>uv_dst_stride }</argument>,

<argument>src</argument>, <argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_src_stride</argument>, <argument>uv_src_stride</argument>, <argument>uv_src_stride }</argument>,

<argument>W</argument>, <argument>H</argument>, <argument>coeff</argument>, <argument>offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>y_dst_stride</name> <operator>*</operator> <name>H</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uv_dst_stride</name> <operator>*</operator> <name>H</name> <operator>&gt;&gt;</operator> <name>ss_h</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>uv_dst_stride</name> <operator>*</operator> <name>H</name> <operator>&gt;&gt;</operator> <name>ss_h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"yuv2yuv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_yuv2rgb</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>int16_t *dst[<literal type="number">3</literal>]</argument>, <argument>ptrdiff_t dst_stride</argument>,

<argument>uint8_t *src[<literal type="number">3</literal>]</argument>, <argument>ptrdiff_t src_stride[<literal type="number">3</literal>]</argument>,

<argument>int w</argument>, <argument>int h</argument>, <argument>const int16_t coeff[<literal type="number">3</literal>][<literal type="number">3</literal>][<literal type="number">8</literal>]</argument>,

<argument>const int16_t off[<literal type="number">8</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>ColorSpaceDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>idepth</name></decl>, <decl><type ref="prev"/><name>fmt</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>src_y</name></expr>, <expr><name>src_u</name></expr>, <expr><name>src_v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst0_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst0_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst0_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst1_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst1_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst1_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>dst0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst0_y</name></expr>, <expr><name>dst0_u</name></expr>, <expr><name>dst0_v</name></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>dst1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst1_y</name></expr>, <expr><name>dst1_u</name></expr>, <expr><name>dst1_v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>coeff_buf</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>coeff</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <operator>(</operator><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><operator>)</operator> <name>coeff_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_colorspacedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <operator>-</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">11</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>idepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idepth</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>idepth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fmt</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>dsp</name><operator>.</operator><name>yuv2rgb</name><index>[<expr><name>idepth</name></expr>]</index><index>[<expr><name>fmt</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">"ff_colorspacedsp_yuv2rgb_%sp%d"</literal></expr></argument>,

<argument><expr><name><name>format_string</name><index>[<expr><name>fmt</name></expr>]</index></name></expr></argument>, <argument><expr><name>idepth</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ss_w</name> <init>= <expr><operator>!</operator><operator>!</operator><name>fmt</name></expr></init></decl>, <decl><type ref="prev"/><name>ss_h</name> <init>= <expr><name>fmt</name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_src_stride</name> <init>= <expr><name>W</name> <operator>&lt;&lt;</operator> <operator>!</operator><operator>!</operator><name>idepth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_src_stride</name> <init>= <expr><name>y_src_stride</name> <operator>&gt;&gt;</operator> <name>ss_w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>call_ref</name><argument_list>(<argument>dst0</argument>, <argument>W</argument>, <argument>src</argument>,

<argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_src_stride</argument>, <argument>uv_src_stride</argument>, <argument>uv_src_stride }</argument>,

<argument>W</argument>, <argument>H</argument>, <argument>coeff</argument>, <argument>offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>call_new</name><argument_list>(<argument>dst1</argument>, <argument>W</argument>, <argument>src</argument>,

<argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_src_stride</argument>, <argument>uv_src_stride</argument>, <argument>uv_src_stride }</argument>,

<argument>W</argument>, <argument>H</argument>, <argument>coeff</argument>, <argument>offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"yuv2rgb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>randomize_buffers</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int y, x, p; for (p = 0; p &lt; 3; p++) { for (y = 0; y &lt; H; y++) { for (x = 0; x &lt; W; x++) { int r = rnd() &amp; 0x7fff; r -= (32768 - 28672) &gt;&gt; 1; src[p][y * W + x] = r; } } } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_rgb2yuv</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>uint8_t *dst[<literal type="number">3</literal>]</argument>, <argument>ptrdiff_t dst_stride[<literal type="number">3</literal>]</argument>,

<argument>int16_t *src[<literal type="number">3</literal>]</argument>, <argument>ptrdiff_t src_stride</argument>,

<argument>int w</argument>, <argument>int h</argument>, <argument>const int16_t coeff[<literal type="number">3</literal>][<literal type="number">3</literal>][<literal type="number">8</literal>]</argument>,

<argument>const int16_t off[<literal type="number">8</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>ColorSpaceDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>odepth</name></decl>, <decl><type ref="prev"/><name>fmt</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>src_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>src_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>src_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>src_y</name></expr>, <expr><name>src_u</name></expr>, <expr><name>src_v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>dst0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst0_y</name></expr>, <expr><name>dst0_u</name></expr>, <expr><name>dst0_v</name></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>dst1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst1_y</name></expr>, <expr><name>dst1_u</name></expr>, <expr><name>dst1_v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>coeff_buf</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>coeff</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <operator>(</operator><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><operator>)</operator> <name>coeff_buf</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_colorspacedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>offset</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.3</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.6</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.1</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.15</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.35</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.5</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.42</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.08</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>odepth</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>odepth</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>odepth</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>fmt</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>fmt</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>fmt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>dsp</name><operator>.</operator><name>rgb2yuv</name><index>[<expr><name>odepth</name></expr>]</index><index>[<expr><name>fmt</name></expr>]</index></name></expr></argument>,

<argument><expr><literal type="string">"ff_colorspacedsp_rgb2yuv_%sp%d"</literal></expr></argument>,

<argument><expr><name><name>format_string</name><index>[<expr><name>fmt</name></expr>]</index></name></expr></argument>, <argument><expr><name>odepth</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ss_w</name> <init>= <expr><operator>!</operator><operator>!</operator><name>fmt</name></expr></init></decl>, <decl><type ref="prev"/><name>ss_h</name> <init>= <expr><name>fmt</name> <operator>==</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y_dst_stride</name> <init>= <expr><name>W</name> <operator>&lt;&lt;</operator> <operator>!</operator><operator>!</operator><name>odepth</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>uv_dst_stride</name> <init>= <expr><name>y_dst_stride</name> <operator>&gt;&gt;</operator> <name>ss_w</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<macro><name>call_ref</name><argument_list>(<argument>dst0</argument>, <argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_dst_stride</argument>, <argument>uv_dst_stride</argument>, <argument>uv_dst_stride }</argument>,

<argument>src</argument>, <argument>W</argument>, <argument>W</argument>, <argument>H</argument>, <argument>coeff</argument>, <argument>offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>call_new</name><argument_list>(<argument>dst1</argument>, <argument>(ptrdiff_t[<literal type="number">3</literal>]) { y_dst_stride</argument>, <argument>uv_dst_stride</argument>, <argument>uv_dst_stride }</argument>,

<argument>src</argument>, <argument>W</argument>, <argument>W</argument>, <argument>H</argument>, <argument>coeff</argument>, <argument>offset</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>H</name> <operator>*</operator> <name>y_dst_stride</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>H</name> <operator>*</operator> <name>uv_dst_stride</name> <operator>&gt;&gt;</operator> <name>ss_h</name></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>H</name> <operator>*</operator> <name>uv_dst_stride</name> <operator>&gt;&gt;</operator> <name>ss_h</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"rgb2yuv"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_multiply3x3</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>int16_t *data[<literal type="number">3</literal>]</argument>, <argument>ptrdiff_t stride</argument>,

<argument>int w</argument>, <argument>int h</argument>, <argument>const int16_t coeff[<literal type="number">3</literal>][<literal type="number">3</literal>][<literal type="number">8</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><name>ColorSpaceDSPContext</name></type> <name>dsp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst0_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst0_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst0_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst1_y</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst1_u</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dst1_v</name></expr></argument>, <argument><expr><index>[<expr><name>W</name> <operator>*</operator> <name>H</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier></type><name><name>dst0</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst0_y</name></expr>, <expr><name>dst0_u</name></expr>, <expr><name>dst0_v</name></expr> }</block></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name><name>dst1</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>dst1_y</name></expr>, <expr><name>dst1_u</name></expr>, <expr><name>dst1_v</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int16_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>src</name> <init>= <expr><name>dst0</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>coeff_buf</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">3</literal> <operator>*</operator> <literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>int16_t</name> <argument_list>(<argument><expr><operator>*</operator><name>coeff</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <operator>(</operator><call><name>int16_t</name><argument_list>(<argument><expr><operator>*</operator></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index><operator>)</operator> <name>coeff_buf</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_colorspacedsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.85</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.10</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.05</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.1</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.95</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.15</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">0.2</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.30</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coeff</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>lrint</name><argument_list>(<argument><expr><literal type="number">0.90</literal> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">14</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>dsp</name><operator>.</operator><name>multiply3x3</name></name></expr></argument>, <argument><expr><literal type="string">"ff_colorspacedsp_multiply3x3"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1_y</name></expr></argument>, <argument><expr><name>dst0_y</name></expr></argument>, <argument><expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst1_y</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1_u</name></expr></argument>, <argument><expr><name>dst0_u</name></expr></argument>, <argument><expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst1_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1_v</name></expr></argument>, <argument><expr><name>dst0_v</name></expr></argument>, <argument><expr><name>W</name> <operator>*</operator> <name>H</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst1_v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>W</name></expr></argument>, <argument><expr><name>H</name></expr></argument>, <argument><expr><name>coeff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>H</name> <operator>*</operator> <name>W</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst0_y</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>H</name> <operator>*</operator> <name>W</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst0_u</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name><name>dst0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>dst1</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>H</name> <operator>*</operator> <name>W</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>dst0_v</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"multiply3x3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_colorspace</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_yuv2yuv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_yuv2rgb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_rgb2yuv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_multiply3x3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
