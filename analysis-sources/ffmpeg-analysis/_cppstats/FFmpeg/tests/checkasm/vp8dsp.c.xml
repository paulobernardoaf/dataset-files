<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\vp8dsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/vp8dsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PIXEL_STRIDE</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>(<parameter><type><name>src</name></type></parameter>, <parameter><type><name>dst</name></type></parameter>, <parameter><type><name>stride</name></type></parameter>, <parameter><type><name>coef</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int x, y; for (y = 0; y &lt; 4; y++) { AV_WN32A((src) + y * (stride), rnd()); AV_WN32A((dst) + y * (stride), rnd()); for (x = 0; x &lt; 4; x++) (coef)[y * 4 + x] = (src)[y * (stride) + x] - (dst)[y * (stride) + x]; } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dct4x4</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><operator>(</operator><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b1</name> <init>= <expr><operator>(</operator><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><operator>(</operator><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><operator>(</operator><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a1</name> <operator>+</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>c1</name> <operator>*</operator> <literal type="number">2217</literal> <operator>+</operator> <name>d1</name> <operator>*</operator> <literal type="number">5352</literal> <operator>+</operator> <literal type="number">14500</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>a1</name> <operator>-</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d1</name> <operator>*</operator> <literal type="number">2217</literal> <operator>-</operator> <name>c1</name> <operator>*</operator> <literal type="number">5352</literal> <operator>+</operator> <literal type="number">7500</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">12</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>a1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>b1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>c1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>d1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">0</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>+</operator> <name>b1</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>c1</name> <operator>*</operator> <literal type="number">2217</literal> <operator>+</operator> <name>d1</name> <operator>*</operator> <literal type="number">5352</literal> <operator>+</operator> <literal type="number">12000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>+</operator> <operator>!</operator><operator>!</operator><name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>-</operator> <name>b1</name> <operator>+</operator> <literal type="number">7</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>d1</name> <operator>*</operator> <literal type="number">2217</literal> <operator>-</operator> <name>c1</name> <operator>*</operator> <literal type="number">5352</literal> <operator>+</operator> <literal type="number">51000</literal><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>wht4x4</name><parameter_list>(<parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>coef</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><name><name>coef</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><name><name>coef</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>coef</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><name><name>coef</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>-=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>e1</name> <operator>-</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>e1</name> <operator>-</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>-=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>+=</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><literal type="number">0</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>a1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><literal type="number">3</literal> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>i</name></expr>]</index></name> <operator>=</operator> <name>b1</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d1</name> <init>= <expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e1</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>-=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e1</name> <operator>=</operator> <operator>(</operator><name>a1</name> <operator>-</operator> <name>d1</name><operator>)</operator> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b1</name> <operator>=</operator> <name>e1</name> <operator>-</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c1</name> <operator>=</operator> <name>e1</name> <operator>-</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>-=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>+=</operator> <name>b1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>a1</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c1</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>d1</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>coef</name><index>[<expr><name>i</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>b1</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_idct</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc</name></decl>;</decl_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>void</argument>, <argument>uint8_t *dst</argument>, <argument>int16_t *block</argument>, <argument>ptrdiff_t stride</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>ff_vp8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>coef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct4x4</name><argument_list>(<argument><expr><name>coef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dc</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dc</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>dc</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>dc</name></expr> ?</condition><then> <expr><name><name>d</name><operator>.</operator><name>vp8_idct_dc_add</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><name><name>d</name><operator>.</operator><name>vp8_idct_add</name></name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="string">"vp8_idct_%sadd"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dc</name></expr> ?</condition><then> <expr><literal type="string">"dc_"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dc</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>subcoef0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>coef</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_idct_dc4</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>chroma</name></decl>;</decl_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>void</argument>, <argument>uint8_t *dst</argument>, <argument>int16_t block[<literal type="number">4</literal>][<literal type="number">16</literal>]</argument>, <argument>ptrdiff_t stride</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>ff_vp8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>chroma</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>chroma</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>chroma</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct4dc</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name><name>int16_t</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>chroma</name></expr> ?</condition><then> <expr><name><name>d</name><operator>.</operator><name>vp8_idct_dc_add4uv</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><name><name>d</name><operator>.</operator><name>vp8_idct_dc_add4y</name></name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name>idct4dc</name></expr></argument>, <argument><expr><literal type="string">"vp8_idct_dc_add4%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>chroma</name></expr> ?</condition><then> <expr><literal type="string">"uv"</literal></expr> </then><else>: <expr><literal type="string">"y"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>stride</name> <init>= <expr><ternary><condition><expr><name>chroma</name></expr> ?</condition><then> <expr><literal type="number">8</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><ternary><condition><expr><name>chroma</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>blockx</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>%</operator> <name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocky</name> <init>= <expr><literal type="number">4</literal> <operator>*</operator> <operator>(</operator><name>i</name> <operator>/</operator> <name>w</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>blocky</name> <operator>+</operator> <name>blockx</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <name>stride</name> <operator>*</operator> <name>blocky</name> <operator>+</operator> <name>blockx</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>, <argument><expr><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct4x4</name><argument_list>(<argument><expr><name><name>coef</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>coef</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">15</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><name>coef</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>subcoef0</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>subcoef1</name></expr></argument>, <argument><expr><name>stride</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_luma_dc_wht</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dc0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>dc1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int16_t</name></type> <name><name>block</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>int16_t</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index></expr></argument>, <argument><expr><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dc_only</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blockx</name></decl>, <decl><type ref="prev"/><name>blocky</name></decl>;</decl_stmt>

<macro><name>declare_func_emms</name><argument_list>(<argument>AV_CPU_FLAG_MMX</argument>, <argument>void</argument>, <argument>int16_t block[<literal type="number">4</literal>][<literal type="number">4</literal>][<literal type="number">16</literal>]</argument>, <argument>int16_t dc[<literal type="number">16</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>ff_vp8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>blocky</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blocky</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>blocky</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>blockx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>blockx</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>blockx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>src</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>block</name><index>[<expr><name>blocky</name></expr>]</index><index>[<expr><name>blockx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dct4x4</name><argument_list>(<argument><expr><name><name>block</name><index>[<expr><name>blocky</name></expr>]</index><index>[<expr><name>blockx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc</name><index>[<expr><name>blocky</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <name>blockx</name></expr>]</index></name> <operator>=</operator> <name><name>block</name><index>[<expr><name>blocky</name></expr>]</index><index>[<expr><name>blockx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>blocky</name></expr>]</index><index>[<expr><name>blockx</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>rnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>wht4x4</name><argument_list>(<argument><expr><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dc_only</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dc_only</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>dc_only</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>idct</name>)<parameter_list>(<parameter><decl><type><name><name>int16_t</name> <index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></type></decl></parameter>, <parameter><decl><type><name><name>int16_t</name> <index>[<expr><literal type="number">16</literal></expr>]</index></name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>dc_only</name></expr> ?</condition><then> <expr><name><name>d</name><operator>.</operator><name>vp8_luma_dc_wht_dc</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><name><name>d</name><operator>.</operator><name>vp8_luma_dc_wht</name></name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name>idct</name></expr></argument>, <argument><expr><literal type="string">"vp8_luma_dc_wht%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dc_only</name></expr> ?</condition><then> <expr><literal type="string">"_dc"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>dc_only</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dc0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dc0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>dc</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dc0</name></expr></argument>, <argument><expr><name>dc</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dc1</name></expr></argument>, <argument><expr><name>dc0</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block0</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>block1</name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>block0</name></expr></argument>, <argument><expr><name>dc0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>block1</name></expr></argument>, <argument><expr><name>dc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>block0</name></expr></argument>, <argument><expr><name>block1</name></expr></argument>, <argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>dc0</name></expr></argument>, <argument><expr><name>dc1</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>block1</name></expr></argument>, <argument><expr><name>dc1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_BUF_STRIDE</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SRC_BUF_SIZE</name></cpp:macro> <cpp:value>(((size &lt;&lt; (size &lt; 16)) + 5) * SRC_BUF_STRIDE)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>src</name></cpp:macro> <cpp:value>(buf + 2 * SRC_BUF_STRIDE + 2 + 1)</cpp:value></cpp:define>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>randomize_buffers</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int k; for (k = 0; k &lt; SRC_BUF_SIZE; k += 4) { AV_WN32A(buf + k, rnd()); } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_mc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>*</operator> <literal type="number">32</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>dx</name></decl>, <decl><type ref="prev"/><name>dy</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>declare_func_emms</name><argument_list>(<argument><expr><name>AV_CPU_FLAG_MMX</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp78dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>type</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>type</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>type</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>vp8_mc_func</name> <argument_list>(<argument><expr><operator>*</operator><name>tab</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <ternary><condition><expr><name>type</name></expr> ?</condition><then> <expr><name><name>d</name><operator>.</operator><name>put_vp8_bilinear_pixels_tab</name></name></expr> </then><else>: <expr><name><name>d</name><operator>.</operator><name>put_vp8_epel_pixels_tab</name></name></expr></else></ternary></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>hsize</name> <init>= <expr><name>k</name> <operator>/</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">16</literal> <operator>&gt;&gt;</operator> <name>hsize</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>height</name> <init>= <expr><operator>(</operator><name>size</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&gt;&gt;</operator> <operator>(</operator><name>k</name> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>dy</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dy</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>dy</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>dx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dx</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>dx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>str</name><index>[<expr><literal type="number">100</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>dx</name> <operator>||</operator> <name>dy</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dx_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"h4"</literal></expr>, <expr><literal type="string">"h6"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>dy_names</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">""</literal></expr>, <expr><literal type="string">"v4"</literal></expr>, <expr><literal type="string">"v6"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"epel%d_%s%s"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>dx_names</name><index>[<expr><name>dx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>dy_names</name><index>[<expr><name>dy</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"bilin%d_%s%s"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><ternary><condition><expr><name>dx</name></expr> ?</condition><then> <expr><literal type="string">"h"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>dy</name></expr> ?</condition><then> <expr><literal type="string">"v"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"pixels%d"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>tab</name><index>[<expr><name>hsize</name></expr>]</index><index>[<expr><name>dy</name></expr>]</index><index>[<expr><name>dx</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"vp8_put_%s"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>mx</name></decl>, <decl><type ref="prev"/><name>my</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <ternary><condition><expr><name>dx</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><ternary><condition><expr><name>dx</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <ternary><condition><expr><name>dy</name> <operator>==</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="number">2</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">3</literal><operator>)</operator></expr> </then><else>: <expr><ternary><condition><expr><name>dy</name> <operator>==</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>mx</name> <operator>=</operator> <ternary><condition><expr><name>dx</name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">7</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>my</name> <operator>=</operator> <ternary><condition><expr><name>dy</name></expr> ?</condition><then> <expr><literal type="number">1</literal> <operator>+</operator> <operator>(</operator><call><name>rnd</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">7</literal><operator>)</operator></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <operator>-</operator><literal type="number">2</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>val</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">0xff</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name></expr> ]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src</name><index>[<expr><name>i</name> <operator>*</operator> <name>SRC_BUF_STRIDE</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>SRC_BUF_STRIDE</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>SRC_BUF_STRIDE</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst0</name></expr></argument>, <argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>size</name> <operator>*</operator> <name>height</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst1</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>SRC_BUF_STRIDE</name></expr></argument>, <argument><expr><name>height</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>, <argument><expr><name>my</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>randomize_buffers</name></cpp:undef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setpx</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>buf[(a) + (b) * jstride] = av_clip_uint8(c)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setdx</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setpx(a, b, c - (d) + (rnd() % ((d) * 2 + 1)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>setdx2</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>o</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>, <parameter><type><name>e</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>setpx(a, b, o = c + ((d) + (rnd() % (e))) * (c &gt;= 128 ? -1 : 1))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>randomize_loopfilter_buffers</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>lineoff</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>str</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_E</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flim_I</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>hev_thresh</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>force_hev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>mask</name> <init>= <expr><literal type="number">0xff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>off</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>lineoff</name></expr> </then><else>: <expr><name>lineoff</name> <operator>*</operator> <name>str</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>istride</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><name>str</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>jstride</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name>str</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>off</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>istride</name></expr></init></decl>, <decl><type ref="prev"/><name>p2</name></decl>, <decl><type ref="prev"/><name>p1</name></decl>, <decl><type ref="prev"/><name>p0</name></decl>, <decl><type ref="prev"/><name>q0</name></decl>, <decl><type ref="prev"/><name>q1</name></decl>, <decl><type ref="prev"/><name>q2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>setpx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>q0</name> <operator>=</operator> <call><name>rnd</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <name>mask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>force_hev</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>force_hev</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setdx2</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>q1</name></expr></argument>, <argument><expr><name>q0</name></expr></argument>, <argument><expr><name>hev_thresh</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flim_I</name> <operator>-</operator> <name>hev_thresh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setdx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>q1</name> <operator>=</operator> <name>q0</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>setdx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>q2</name> <operator>=</operator> <name>q1</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setdx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>q2</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setdx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>p0</name> <operator>=</operator> <name>q0</name></expr></argument>, <argument><expr><name>flim_E</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>force_hev</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>force_hev</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setdx2</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p0</name></expr></argument>, <argument><expr><name>hev_thresh</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>flim_I</name> <operator>-</operator> <name>hev_thresh</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>setdx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">2</literal></expr></argument>, <argument><expr><name>p1</name> <operator>=</operator> <name>p0</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>setdx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">3</literal></expr></argument>, <argument><expr><name>p2</name> <operator>=</operator> <name>p1</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>setdx</name><argument_list>(<argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name>p2</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>fill_loopfilter_buffers</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>stride</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>y</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>y</name> <operator>&lt;</operator> <name>h</name></expr>;</condition> <incr><expr><name>y</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>x</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>x</name> <operator>&lt;</operator> <name>w</name></expr>;</condition> <incr><expr><name>x</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>y</name> <operator>*</operator> <name>stride</name> <operator>+</operator> <name>x</name></expr>]</index></name> <operator>=</operator> <call><name>rnd</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0xff</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></for>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>lineoff</name></type></parameter>, <parameter><type><name>str</name></type></parameter>, <parameter><type><name>force_hev</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>randomize_loopfilter_buffers(lineoff, str, dir, flim_E, flim_I, hev_thresh, buf, force_hev)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_loopfilter_16y</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>, <decl><type ref="prev"/><name>edge</name></decl>, <decl><type ref="prev"/><name>force_hev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flim_E</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, <decl><type ref="prev"/><name>flim_I</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>hev_thresh</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>declare_func_emms</name><argument_list>(<argument><expr><name>AV_CPU_FLAG_MMX</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>midoff</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midoff_aligned</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name>base0</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>base1</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>edge</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>edge</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>edge</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<switch>switch <condition>(<expr><name>dir</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <name>edge</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_h_loop_filter16y</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_v_loop_filter16y</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_h_loop_filter16y_inner</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_v_loop_filter16y_inner</name></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"vp8_loop_filter16y%s_%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>edge</name></expr> ?</condition><then> <expr><literal type="string">"_inner"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="string">"v"</literal></expr> </then><else>: <expr><literal type="string">"h"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>force_hev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>force_hev</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>force_hev</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fill_loopfilter_buffers</name><argument_list>(<argument><expr><name>buf0</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>force_hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>force_hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf1</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf0</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf0</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf1</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fill_loopfilter_buffers</name><argument_list>(<argument><expr><name>buf0</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_loopfilter_8uv</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base0u</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base0v</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base1u</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base1v</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>, <decl><type ref="prev"/><name>edge</name></decl>, <decl><type ref="prev"/><name>force_hev</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flim_E</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, <decl><type ref="prev"/><name>flim_I</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>, <decl><type ref="prev"/><name>hev_thresh</name> <init>= <expr><literal type="number">7</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>declare_func_emms</name><argument_list>(<argument><expr><name>AV_CPU_FLAG_MMX</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>midoff</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midoff_aligned</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0u</name> <init>= <expr><name>base0u</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0v</name> <init>= <expr><name>base0v</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1u</name> <init>= <expr><name>base1u</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1v</name> <init>= <expr><name>base1v</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>edge</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>edge</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>edge</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<switch>switch <condition>(<expr><name>dir</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal> <operator>|</operator> <name>edge</name></expr>)</condition> <block>{<block_content>

<case>case <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_h_loop_filter8uv</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">0</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_v_loop_filter8uv</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_h_loop_filter8uv_inner</name></name></expr>;</expr_stmt> <break>break;</break>

<case>case <expr><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>|</operator> <literal type="number">1</literal></expr>:</case> <expr_stmt><expr><name>func</name> <operator>=</operator> <name><name>d</name><operator>.</operator><name>vp8_v_loop_filter8uv_inner</name></name></expr>;</expr_stmt> <break>break;</break>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"vp8_loop_filter8uv%s_%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>edge</name></expr> ?</condition><then> <expr><literal type="string">"_inner"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="string">"v"</literal></expr> </then><else>: <expr><literal type="string">"h"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>force_hev</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</init> <condition><expr><name>force_hev</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>force_hev</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>fill_loopfilter_buffers</name><argument_list>(<argument><expr><name>buf0u</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_loopfilter_buffers</name><argument_list>(<argument><expr><name>buf0v</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>force_hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>force_hev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf1u</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf0u</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf1v</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf0v</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>buf0u</name></expr></argument>, <argument><expr><name>buf0v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>buf1u</name></expr></argument>, <argument><expr><name>buf1v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf0u</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf1u</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><name>buf0v</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf1v</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>fill_loopfilter_buffers</name><argument_list>(<argument><expr><name>buf0u</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fill_loopfilter_buffers</name><argument_list>(<argument><expr><name>buf0v</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0u</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0v</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>buf0u</name></expr></argument>, <argument><expr><name>buf0v</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>, <argument><expr><name>flim_I</name></expr></argument>, <argument><expr><name>hev_thresh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_loopfilter_simple</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base0</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>base1</name></expr></argument>, <argument><expr><index>[<expr><literal type="number">32</literal> <operator>+</operator> <literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>VP8DSPContext</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>dir</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flim_E</name> <init>= <expr><literal type="number">20</literal></expr></init></decl>, <decl><type ref="prev"/><name>flim_I</name> <init>= <expr><literal type="number">30</literal></expr></init></decl>, <decl><type ref="prev"/><name>hev_thresh</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>declare_func_emms</name><argument_list>(<argument><expr><name>AV_CPU_FLAG_MMX</name></expr></argument>, <argument><expr><name>void</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>, <argument><expr><name>ptrdiff_t</name></expr></argument>, <argument><expr><name>int</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_vp8dsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>dir</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>dir</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>dir</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>midoff</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>midoff_aligned</name> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">16</literal></expr> </then><else>: <expr><literal type="number">16</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf0</name> <init>= <expr><name>base0</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf1</name> <init>= <expr><name>base1</name> <operator>+</operator> <name>midoff_aligned</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list> <init>= <expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><name><name>d</name><operator>.</operator><name>vp8_v_loop_filter_simple</name></name></expr></then></ternary></expr> <operator>:</operator> <expr><name><name>d</name><operator>.</operator><name>vp8_h_loop_filter_simple</name></name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name>func</name></expr></argument>, <argument><expr><literal type="string">"vp8_loop_filter_simple_%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dir</name></expr> ?</condition><then> <expr><literal type="string">"v"</literal></expr> </then><else>: <expr><literal type="string">"h"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fill_loopfilter_buffers</name><argument_list>(<argument><expr><name>buf0</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf1</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf0</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buf0</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><name>buf1</name> <operator>-</operator> <name>midoff</name></expr></argument>, <argument><expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>buf0</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name>flim_E</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_vp8dsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>check_idct</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_idct_dc4</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_luma_dc_wht</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"idct"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_mc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"mc"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_loopfilter_16y</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_loopfilter_8uv</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>check_loopfilter_simple</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"loopfilter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
