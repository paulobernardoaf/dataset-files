<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\v210enc.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/v210enc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>512</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>(<parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i, size = sizeof(*y0); for (i = 0; i &lt; BUF_SIZE; i += 4 / size) { uint32_t r = rnd() &amp; mask; AV_WN32A(y0 + i, r); AV_WN32A(y1 + i, r); } for (i = 0; i &lt; BUF_SIZE / 2; i += 4 / size) { uint32_t r = rnd() &amp; mask; AV_WN32A(u0 + i, r); AV_WN32A(u1 + i, r); r = rnd() &amp; mask; AV_WN32A(v0 + i, r); AV_WN32A(v1 + i, r); } for (i = 0; i &lt; width * 8 / 3; i += 4) { uint32_t r = rnd(); AV_WN32A(dst0 + i, r); AV_WN32A(dst1 + i, r); } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>check_pack_line</name><parameter_list>(<parameter><type><name>type</name></type></parameter>, <parameter><type><name>mask</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { LOCAL_ALIGNED_16(type, y0, [BUF_SIZE]); LOCAL_ALIGNED_16(type, y1, [BUF_SIZE]); LOCAL_ALIGNED_16(type, u0, [BUF_SIZE / 2]); LOCAL_ALIGNED_16(type, u1, [BUF_SIZE / 2]); LOCAL_ALIGNED_16(type, v0, [BUF_SIZE / 2]); LOCAL_ALIGNED_16(type, v1, [BUF_SIZE / 2]); LOCAL_ALIGNED_16(uint8_t, dst0, [BUF_SIZE * 8 / 3]); LOCAL_ALIGNED_16(uint8_t, dst1, [BUF_SIZE * 8 / 3]); declare_func(void, const type * y, const type * u, const type * v, uint8_t * dst, ptrdiff_t width); ptrdiff_t width, step = 12 / sizeof(type); for (width = step; width &lt; BUF_SIZE - 15; width += step) { int y_offset = rnd() &amp; 15; int uv_offset = y_offset / 2; randomize_buffers(mask); call_ref(y0 + y_offset, u0 + uv_offset, v0 + uv_offset, dst0, width); call_new(y1 + y_offset, u1 + uv_offset, v1 + uv_offset, dst1, width); if (memcmp(y0, y1, BUF_SIZE) || memcmp(u0, u1, BUF_SIZE / 2) || memcmp(v0, v1, BUF_SIZE / 2) || memcmp(dst0, dst1, width * 8 / 3)) fail(); bench_new(y1 + y_offset, u1 + uv_offset, v1 + uv_offset, dst1, width); } } while (0)</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>checkasm_check_v210enc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V210EncContext</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_v210enc_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>pack_line_8</name></name></expr></argument>, <argument><expr><literal type="string">"v210_planar_pack_8"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_pack_line</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><literal type="number">0xffffffff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>pack_line_10</name></name></expr></argument>, <argument><expr><literal type="string">"v210_planar_pack_10"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_pack_line</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>, <argument><expr><literal type="number">0x03ff03ff</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"planar_pack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
