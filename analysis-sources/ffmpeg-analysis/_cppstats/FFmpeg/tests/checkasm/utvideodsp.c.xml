<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\utvideodsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/utvideodsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH</name></cpp:macro> <cpp:value>240</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEIGHT</name></cpp:macro> <cpp:value>120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WIDTH_PADDED</name></cpp:macro> <cpp:value>(WIDTH + 16)</cpp:value></cpp:define> 

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUFFER_SIZE</name></cpp:macro> <cpp:value>(WIDTH_PADDED * HEIGHT)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_plane</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int w, h; type * tmp = buf; for (h = 0; h &lt; HEIGHT; h++) { for (w = 0; w &lt; WIDTH; w++) tmp[w] = rnd() &amp; 0xFF; tmp += WIDTH_PADDED; } } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cmp_plane</name><parameter_list>(<parameter><type><name>buf0</name></type></parameter>, <parameter><type><name>buf1</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int h; for (h = 0; h &lt; HEIGHT; h++) { if (memcmp(buf0 + h*WIDTH_PADDED, buf1 + h*WIDTH_PADDED, WIDTH *s)) fail();} } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHECK_RESTORE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>LOCAL_ALIGNED_32(type, src_r0, [BUFFER_SIZE]); LOCAL_ALIGNED_32(type, src_g0, [BUFFER_SIZE]); LOCAL_ALIGNED_32(type, src_b0, [BUFFER_SIZE]); LOCAL_ALIGNED_32(type, src_r1, [BUFFER_SIZE]); LOCAL_ALIGNED_32(type, src_g1, [BUFFER_SIZE]); LOCAL_ALIGNED_32(type, src_b1, [BUFFER_SIZE]); declare_func(void, type *src_r, type *src_g, type *src_b, ptrdiff_t linesize_r, ptrdiff_t linesize_g, ptrdiff_t linesize_b, int width, int height); memset(src_r0, 0, BUFFER_SIZE * sizeof(type)); memset(src_g0, 0, BUFFER_SIZE * sizeof(type)); memset(src_b0, 0, BUFFER_SIZE * sizeof(type)); randomize_plane(src_r0, type); randomize_plane(src_g0, type); randomize_plane(src_b0, type); memcpy(src_r1, src_r0, BUFFER_SIZE * sizeof(type)); memcpy(src_g1, src_g0, BUFFER_SIZE * sizeof(type)); memcpy(src_b1, src_b0, BUFFER_SIZE * sizeof(type)); call_ref(src_r0, src_g0, src_b0, WIDTH_PADDED, WIDTH_PADDED, WIDTH_PADDED, WIDTH, HEIGHT);call_new(src_r1, src_g1, src_b1, WIDTH_PADDED, WIDTH_PADDED, WIDTH_PADDED, WIDTH, HEIGHT);cmp_plane(src_r0, src_r1, sizeof(type)); cmp_plane(src_g0, src_g1, sizeof(type)); cmp_plane(src_b0, src_b1, sizeof(type)); bench_new(src_r1, src_g1, src_b1, WIDTH_PADDED, WIDTH_PADDED, WIDTH_PADDED, WIDTH, HEIGHT)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_restore_rgb_planes</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_RESTORE</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_restore_rgb_planes10</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>CHECK_RESTORE</name><argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_utvideodsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>UTVideoDSPContext</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_utvideodsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>restore_rgb_planes</name></name></expr></argument>, <argument><expr><literal type="string">"restore_rgb_planes"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_restore_rgb_planes</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"restore_rgb_planes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>restore_rgb_planes10</name></name></expr></argument>, <argument><expr><literal type="string">"restore_rgb_planes10"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_restore_rgb_planes10</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"restore_rgb_planes10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
