<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\v210dec.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/v210dec.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>get_v210</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t0</name> <init>= <expr><call><name>rnd</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr></init></decl>,

<decl><type ref="prev"/><name>t1</name> <init>= <expr><call><name>rnd</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr></init></decl>,

<decl><type ref="prev"/><name>t2</name> <init>= <expr><call><name>rnd</name><argument_list>()</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3ff</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><name>t0</name>

<operator>|</operator> <operator>(</operator><name>t1</name> <operator>&lt;&lt;</operator> <literal type="number">10</literal><operator>)</operator>

<operator>|</operator> <operator>(</operator><name>t2</name> <operator>&lt;&lt;</operator> <literal type="number">20</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<return>return <expr><name>value</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_SAMPLES</name></cpp:macro> <cpp:value>2048</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>randomize_buffers</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>value</name> <init>= <expr><call><name>get_v210</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>src1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_v210dec</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>V210DecContext</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>h</name><operator>.</operator><name>aligned_input</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ff_v210dec_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>unpack_frame</name></name></expr></argument>, <argument><expr><literal type="string">"v210_unpack"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>src0</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>src1</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>y0</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>y1</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>u0</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>u1</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>v0</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint16_t</name></type> <name><name>v1</name><index>[<expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>const uint32_t *src</argument>, <argument>uint16_t *y</argument>, <argument>uint16_t *u</argument>, <argument>uint16_t *v</argument>, <argument>int width</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>pixels</name> <init>= <expr><name>NUM_SAMPLES</name> <operator>/</operator> <literal type="number">2</literal> <operator>/</operator> <literal type="number">6</literal> <operator>*</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>y0</name></expr></argument>, <argument><expr><name>u0</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>u1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>NUM_SAMPLES</name><operator>/</operator><literal type="number">3</literal> <operator>*</operator> <sizeof>sizeof <name><name>src0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>y0</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>pixels</name> <operator>*</operator> <sizeof>sizeof <name><name>y0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>u0</name></expr></argument>, <argument><expr><name>u1</name></expr></argument>, <argument><expr><name>pixels</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <name><name>u0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call>

<operator>||</operator> <call><name>memcmp</name><argument_list>(<argument><expr><name>v0</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>pixels</name><operator>/</operator><literal type="number">2</literal> <operator>*</operator> <sizeof>sizeof <name><name>v0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>src1</name></expr></argument>, <argument><expr><name>y1</name></expr></argument>, <argument><expr><name>u1</name></expr></argument>, <argument><expr><name>v1</name></expr></argument>, <argument><expr><name>pixels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"v210_unpack"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
