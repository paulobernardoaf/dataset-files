<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\af_afir.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/af_afir.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEN</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffer</name><parameter_list>(<parameter><type><name>buf</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int i; double bmg[2], stddev = 10.0, mean = 0.0; for (i = 0; i &lt; LEN*2+8; i += 2) { av_bmg_get(&amp;checkasm_lfg, bmg); buf[i] = bmg[0] * stddev + mean; buf[i + 1] = bmg[1] * stddev + mean; } } while(0);</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_fcmul_add</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src0</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>float</name> <modifier>*</modifier></type><name>src2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>cdst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>odst</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>float *sum</argument>, <argument>const float *t</argument>, <argument>const float *c</argument>,

<argument>ptrdiff_t len</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>cdst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>LEN</name><operator>*</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>idx</name> <init>= <expr><name>i</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cre</name> <init>= <expr><name><name>src2</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>cim</name> <init>= <expr><name><name>src2</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tre</name> <init>= <expr><name><name>src1</name><index>[<expr><name>idx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>tim</name> <init>= <expr><name><name>src1</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>t</name> <init>= <expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>src0</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name>tre</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>tim</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>cre</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>cim</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name>tre</name> <operator>*</operator> <name>cre</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>tim</name> <operator>*</operator> <name>cim</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name>tre</name> <operator>*</operator> <name>cim</name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>tim</name> <operator>*</operator> <name>cre</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name>tre</name> <operator>*</operator> <name>cre</name> <operator>-</operator> <name>tim</name> <operator>*</operator> <name>cim</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name>tre</name> <operator>*</operator> <name>cim</name> <operator>+</operator> <name>tim</name> <operator>*</operator> <name>cre</name></expr></argument>)</argument_list></call> <operator>+</operator>

<call><name>fabs</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1.0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>float_near_abs_eps</name><argument_list>(<argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>t</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <name>FLT_EPSILON</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%d: %- .12f - %- .12f = % .12g\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cdst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>odst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><operator>(</operator><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>odst</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><name>LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_afir</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src0</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>float</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>, <argument><expr><index>[<expr><name>LEN</name><operator>*</operator><literal type="number">2</literal><operator>+</operator><literal type="number">8</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>AudioFIRDSPContext</name></type> <name>fir</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_afir_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffer</name><argument_list>(<argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>fir</name><operator>.</operator><name>fcmul_add</name></name></expr></argument>, <argument><expr><literal type="string">"fcmul_add"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>test_fcmul_add</name><argument_list>(<argument><expr><name>src0</name></expr></argument>, <argument><expr><name>src1</name></expr></argument>, <argument><expr><name>src2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"fcmul_add"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
