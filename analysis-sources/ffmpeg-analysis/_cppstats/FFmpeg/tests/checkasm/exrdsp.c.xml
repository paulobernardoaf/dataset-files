<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\exrdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/exrdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>5120</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PADDED_BUF_SIZE</name></cpp:macro> <cpp:value>BUF_SIZE+AV_INPUT_BUFFER_PADDING_SIZE*2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int i; for (i = 0; i &lt; BUF_SIZE; i += 4) { uint32_t r = rnd(); AV_WN32A(src + i, r); } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_reorder_pixels</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>PADDED_BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><index>[<expr><name>PADDED_BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><index>[<expr><name>PADDED_BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>uint8_t *dst</argument>, <argument>const uint8_t *src</argument>, <argument>ptrdiff_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PADDED_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PADDED_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PADDED_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_predictor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><index>[<expr><name>PADDED_BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><index>[<expr><name>PADDED_BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_32</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><index>[<expr><name>PADDED_BUF_SIZE</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>uint8_t *src</argument>, <argument>ptrdiff_t size</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>PADDED_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>PADDED_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>PADDED_BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst_ref</name></expr></argument>, <argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>dst_new</name></expr></argument>, <argument><expr><name>BUF_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_exrdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ExrDSPContext</name></type> <name>h</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>ff_exrdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>reorder_pixels</name></name></expr></argument>, <argument><expr><literal type="string">"reorder_pixels"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_reorder_pixels</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"reorder_pixels"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>predictor</name></name></expr></argument>, <argument><expr><literal type="string">"predictor"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_predictor</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"predictor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
