<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\checkasm\flacdsp.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"checkasm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/flacdsp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BUF_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CHANNELS</name></cpp:macro> <cpp:value>8</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>randomize_buffers</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>do { int i, j; for (i = 0; i &lt; BUF_SIZE; i += 4) { for (j = 0; j &lt; channels; j++) { uint32_t r = rnd() &amp; (1 &lt;&lt; (bits - 2)) - 1; AV_WN32A(ref_src[j] + i, r); AV_WN32A(new_src[j] + i, r); } } } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_decorrelate</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ref_src</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_dst</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>new_src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>channels</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list> <block>{<block_content>

<macro><name>declare_func</name><argument_list>(<argument>void</argument>, <argument>uint8_t **out</argument>, <argument>int32_t **in</argument>, <argument>int channels</argument>, <argument>int len</argument>, <argument>int shift</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<expr_stmt><expr><call><name>randomize_buffers</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_ref</name><argument_list>(<argument><expr><name>ref_dst</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ref_src</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>call_new</name><argument_list>(<argument><expr><name>new_dst</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>new_src</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><operator>*</operator><name>ref_dst</name></expr></argument>, <argument><expr><operator>*</operator><name>new_dst</name></expr></argument>, <argument><expr><ternary><condition><expr><name>bits</name> <operator>==</operator> <literal type="number">16</literal></expr> ?</condition><then> <expr><name>BUF_SIZE</name> <operator>*</operator> <operator>(</operator><name>channels</name><operator>/</operator><literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><name>BUF_SIZE</name> <operator>*</operator> <name>channels</name></expr></else></ternary></expr></argument>)</argument_list></call> <operator>||</operator>

<call><name>memcmp</name><argument_list>(<argument><expr><operator>*</operator><name>ref_src</name></expr></argument>, <argument><expr><operator>*</operator><name>new_src</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>*</operator> <name>channels</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>fail</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>bench_new</name><argument_list>(<argument><expr><name>new_dst</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>new_src</name></expr></argument>, <argument><expr><name>channels</name></expr></argument>, <argument><expr><name>BUF_SIZE</name> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>checkasm_check_flacdsp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>ref_dst</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><name>MAX_CHANNELS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>ref_buf</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><name>MAX_CHANNELS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>new_dst</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><name>MAX_CHANNELS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>LOCAL_ALIGNED_16</name><argument_list>(<argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>new_buf</name></expr></argument>, <argument><expr><index>[<expr><name>BUF_SIZE</name><operator>*</operator><name>MAX_CHANNELS</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>ref_src</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>,

<expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>ref_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>new_src</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">0</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">1</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">2</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">3</literal></expr>]</index></name></expr>,

<expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">4</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">5</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">6</literal></expr>]</index></name></expr>, <expr><operator>&amp;</operator><name><name>new_buf</name><index>[<expr><name>BUF_SIZE</name><operator>*</operator><literal type="number">7</literal></expr>]</index></name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>names</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="string">"ls"</literal></expr>, <expr><literal type="string">"rs"</literal></expr>, <expr><literal type="string">"ms"</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

}</block> <decl><name><name>fmts</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><name>AV_SAMPLE_FMT_S16</name></expr>, <expr><literal type="number">16</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>AV_SAMPLE_FMT_S32</name></expr>, <expr><literal type="number">32</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>FLACDSPContext</name></type> <name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_flacdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name><name>fmts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>decorrelate</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"flac_decorrelate_%s_%d"</literal></expr></argument>, <argument><expr><name><name>names</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>fmts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_decorrelate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_dst</name></expr></argument>, <argument><expr><name>ref_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_dst</name></expr></argument>, <argument><expr><name>new_src</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>fmts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">2</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;=</operator> <name>MAX_CHANNELS</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ff_flacdsp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name><name>fmts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fmt</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_func</name><argument_list>(<argument><expr><name><name>h</name><operator>.</operator><name>decorrelate</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"flac_decorrelate_indep%d_%d"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>fmts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>check_decorrelate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ref_dst</name></expr></argument>, <argument><expr><name>ref_src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>new_dst</name></expr></argument>, <argument><expr><name>new_src</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>fmts</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bits</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>report</name><argument_list>(<argument><expr><literal type="string">"decorrelate"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
