<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\api\api-band-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/adler32.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavcodec/avcodec.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavformat/avformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/imgutils.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>slice_byte_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name>slice_byte_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>draw_horiz_band_called</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>draw_horiz_band</name><parameter_list>(<parameter><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>fr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name><name>offset</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>slice_position</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>height</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVPixFmtDescriptor</name> <modifier>*</modifier></type><name>pix_fmt_desc</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>chroma_w</name></decl>, <decl><type ref="prev"/><name>chroma_h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift_slice_position</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>shift_height</name></decl>;</decl_stmt>

<expr_stmt><expr><name>draw_horiz_band_called</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>pix_fmt_desc</name> <operator>=</operator> <call><name>av_pix_fmt_desc_get</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_w</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>-</operator><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>pix_fmt_desc</name><operator>-&gt;</operator><name>log2_chroma_w</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>chroma_h</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>-</operator><name>height</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>pix_fmt_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_slice_position</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>-</operator><name>slice_position</name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>pix_fmt_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>shift_height</name> <operator>=</operator> <operator>-</operator><operator>(</operator><operator>(</operator><operator>-</operator><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name><operator>)</operator> <operator>&gt;&gt;</operator> <name><name>pix_fmt_desc</name><operator>-&gt;</operator><name>log2_chroma_h</name></name><operator>)</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>height</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>slice_byte_buffer</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name>slice_position</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>,

<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>offset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>fr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chroma_h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>slice_byte_buffer</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name>chroma_w</name> <operator>*</operator> <name>shift_slice_position</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>chroma_w</name></expr></argument>,

<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>offset</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>fr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chroma_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>chroma_h</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>slice_byte_buffer</name> <operator>+</operator> <name><name>ctx</name><operator>-&gt;</operator><name>width</name></name> <operator>*</operator> <name><name>ctx</name><operator>-&gt;</operator><name>height</name></name> <operator>+</operator> <name>chroma_w</name> <operator>*</operator> <name>shift_height</name> <operator>+</operator> <name>chroma_w</name> <operator>*</operator> <name>shift_slice_position</name> <operator>+</operator> <name>i</name> <operator>*</operator> <name>chroma_w</name></expr></argument>,

<argument><expr><name><name>fr</name><operator>-&gt;</operator><name>data</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>offset</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>i</name> <operator>*</operator> <name><name>fr</name><operator>-&gt;</operator><name>linesize</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>chroma_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>video_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>input_filename</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVCodec</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecContext</name> <modifier>*</modifier></type><name>ctx</name><init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVCodecParameters</name> <modifier>*</modifier></type><name>origin_par</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>byte_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>fr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVPacket</name></type> <name>pkt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVFormatContext</name> <modifier>*</modifier></type><name>fmt_ctx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>number_of_written_bytes</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>video_stream</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>got_frame</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>byte_buffer_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>end_of_stream</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>draw_horiz_band_called</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>avformat_open_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_ctx</name></expr></argument>, <argument><expr><name>input_filename</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't open file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>avformat_find_stream_info</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't get stream info\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>video_stream</name> <operator>=</operator> <call><name>av_find_best_stream</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><name>AVMEDIA_TYPE_VIDEO</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>video_stream</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't find video stream in input file\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>origin_par</name> <operator>=</operator> <name><name>fmt_ctx</name><operator>-&gt;</operator><name>streams</name><index>[<expr><name>video_stream</name></expr>]</index></name><operator>-&gt;</operator><name>codecpar</name></expr>;</expr_stmt>

<expr_stmt><expr><name>codec</name> <operator>=</operator> <call><name>avcodec_find_decoder</name><argument_list>(<argument><expr><name><name>origin_par</name><operator>-&gt;</operator><name>codec_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>codec</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't find decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>avcodec_alloc_context3</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate decoder context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>avcodec_parameters_to_context</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>origin_par</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't copy decoder context\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>draw_horiz_band</name></name> <operator>=</operator> <name>draw_horiz_band</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>thread_count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>avcodec_open2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>codec</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't open decoder\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>fr</name> <operator>=</operator> <call><name>av_frame_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fr</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"flv"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"mpeg4"</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>codec</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"huffyuv"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Wrong codec\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>byte_buffer_size</name> <operator>=</operator> <call><name>av_image_get_buffer_size</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>byte_buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>byte_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>byte_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>slice_byte_buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>byte_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>slice_byte_buffer</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't allocate buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>slice_byte_buffer</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>byte_buffer_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>slice_byte_buffer_size</name> <operator>=</operator> <name>byte_buffer_size</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<do>do <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>end_of_stream</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_read_frame</name><argument_list>(<argument><expr><name>fmt_ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>end_of_stream</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>end_of_stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>pkt</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>pkt</name><operator>.</operator><name>stream_index</name></name> <operator>==</operator> <name>video_stream</name> <operator>||</operator> <name>end_of_stream</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>got_frame</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>avcodec_decode_video2</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>got_frame</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>result</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error decoding frame\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>result</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>got_frame</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>number_of_written_bytes</name> <operator>=</operator> <call><name>av_image_copy_to_buffer</name><argument_list>(<argument><expr><name>byte_buffer</name></expr></argument>, <argument><expr><name>byte_buffer_size</name></expr></argument>,

<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator> <specifier>const</specifier> <operator>*</operator><operator>)</operator><name><name>fr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>int</name><operator>*</operator><operator>)</operator> <name><name>fr</name><operator>-&gt;</operator><name>linesize</name></name></expr></argument>,

<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>pix_fmt</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>width</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>height</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>number_of_written_bytes</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Can't copy image to buffer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>number_of_written_bytes</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>draw_horiz_band_called</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"draw_horiz_band haven't been called!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_adler32_update</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>byte_buffer</name></expr></argument>, <argument><expr><name>number_of_written_bytes</name></expr></argument>)</argument_list></call> <operator>!=</operator>

<call><name>av_adler32_update</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name>slice_byte_buffer</name></expr></argument>, <argument><expr><name>number_of_written_bytes</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Decoded frames with and without draw_horiz_band are not the same!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_init_packet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block> while <condition>(<expr><operator>!</operator><name>end_of_stream</name> <operator>||</operator> <name>got_frame</name></expr>)</condition>;</do>

<expr_stmt><expr><call><name>av_packet_unref</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pkt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_frame_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_close</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avformat_close_input</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fmt_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>avcodec_free_context</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>byte_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>slice_byte_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition>

<block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Incorrect input: expected %s &lt;name of a video file&gt;\nNote that test works only for huffyuv, flv and mpeg4 decoders\n"</literal></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>video_decode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
