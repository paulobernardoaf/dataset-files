<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\dnn\dnn-layer-depth2space-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/dnn/dnn_backend_native.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/dnn/dnn_backend_native_layer_depth2space.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSON</name></cpp:macro> <cpp:value>0.00001</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>DepthToSpaceParams</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name></type> <name><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>input_indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>input</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.09771065121566602</literal></expr>, <expr><literal type="number">0.6336807372403175</literal></expr>, <expr><literal type="number">0.5142416549709786</literal></expr>, <expr><literal type="number">0.8027206567330333</literal></expr>, <expr><literal type="number">0.2154276025069397</literal></expr>, <expr><literal type="number">0.12112878462616772</literal></expr>, <expr><literal type="number">0.913936596765778</literal></expr>,

<expr><literal type="number">0.38881443647542646</literal></expr>, <expr><literal type="number">0.5850447615898835</literal></expr>, <expr><literal type="number">0.9311499327398275</literal></expr>, <expr><literal type="number">0.3613660929428246</literal></expr>, <expr><literal type="number">0.5420722002125493</literal></expr>, <expr><literal type="number">0.6002131190230359</literal></expr>, <expr><literal type="number">0.44800665702299525</literal></expr>,

<expr><literal type="number">0.7271322557896777</literal></expr>, <expr><literal type="number">0.3869293511885826</literal></expr>, <expr><literal type="number">0.5144404769364138</literal></expr>, <expr><literal type="number">0.6910844856987723</literal></expr>, <expr><literal type="number">0.6142102742269762</literal></expr>, <expr><literal type="number">0.6249991371621018</literal></expr>, <expr><literal type="number">0.45663376215836626</literal></expr>,

<expr><literal type="number">0.19523477129943423</literal></expr>, <expr><literal type="number">0.2483895888532045</literal></expr>, <expr><literal type="number">0.64326768256278</literal></expr>, <expr><literal type="number">0.5485877602998981</literal></expr>, <expr><literal type="number">0.45442067849873546</literal></expr>, <expr><literal type="number">0.529374943304256</literal></expr>, <expr><literal type="number">0.30439850391811885</literal></expr>,

<expr><literal type="number">0.11961343361340993</literal></expr>, <expr><literal type="number">0.2909643484561082</literal></expr>, <expr><literal type="number">0.9810970344127848</literal></expr>, <expr><literal type="number">0.8886928489786549</literal></expr>, <expr><literal type="number">0.6112237084436409</literal></expr>, <expr><literal type="number">0.8852482695156674</literal></expr>, <expr><literal type="number">0.9110868043114374</literal></expr>,

<expr><literal type="number">0.21242780027585217</literal></expr>, <expr><literal type="number">0.7101536973207572</literal></expr>, <expr><literal type="number">0.9709717457443375</literal></expr>, <expr><literal type="number">0.2702666770969332</literal></expr>, <expr><literal type="number">0.7718295953780221</literal></expr>, <expr><literal type="number">0.3957005164588574</literal></expr>, <expr><literal type="number">0.24383544252475453</literal></expr>,

<expr><literal type="number">0.040143453532367035</literal></expr>, <expr><literal type="number">0.26358051835323115</literal></expr>, <expr><literal type="number">0.013130251443791319</literal></expr>, <expr><literal type="number">0.3016550481482074</literal></expr>, <expr><literal type="number">0.03582340459943956</literal></expr>, <expr><literal type="number">0.718025513612361</literal></expr>, <expr><literal type="number">0.09844204177633753</literal></expr>,

<expr><literal type="number">0.04433767496953056</literal></expr>, <expr><literal type="number">0.6221895044119757</literal></expr>, <expr><literal type="number">0.6190414032940228</literal></expr>, <expr><literal type="number">0.8963550834625371</literal></expr>, <expr><literal type="number">0.5642449700064629</literal></expr>, <expr><literal type="number">0.2482982014723497</literal></expr>, <expr><literal type="number">0.17824909294583013</literal></expr>,

<expr><literal type="number">0.024401882408643272</literal></expr>, <expr><literal type="number">0.21742800875253465</literal></expr>, <expr><literal type="number">0.6794724473181843</literal></expr>, <expr><literal type="number">0.4814830479242237</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>expected_output</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">10</literal><operator>*</operator><literal type="number">6</literal><operator>*</operator><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.097710654</literal></expr>, <expr><literal type="number">0.63368076</literal></expr>, <expr><literal type="number">0.2154276</literal></expr>, <expr><literal type="number">0.12112878</literal></expr>, <expr><literal type="number">0.58504474</literal></expr>, <expr><literal type="number">0.93114996</literal></expr>, <expr><literal type="number">0.51424164</literal></expr>, <expr><literal type="number">0.80272067</literal></expr>, <expr><literal type="number">0.9139366</literal></expr>, <expr><literal type="number">0.38881445</literal></expr>,

<expr><literal type="number">0.3613661</literal></expr>, <expr><literal type="number">0.5420722</literal></expr>, <expr><literal type="number">0.6002131</literal></expr>, <expr><literal type="number">0.44800666</literal></expr>, <expr><literal type="number">0.5144405</literal></expr>, <expr><literal type="number">0.6910845</literal></expr>, <expr><literal type="number">0.45663378</literal></expr>, <expr><literal type="number">0.19523478</literal></expr>, <expr><literal type="number">0.72713226</literal></expr>, <expr><literal type="number">0.38692936</literal></expr>,

<expr><literal type="number">0.61421025</literal></expr>, <expr><literal type="number">0.62499917</literal></expr>, <expr><literal type="number">0.24838959</literal></expr>, <expr><literal type="number">0.6432677</literal></expr>, <expr><literal type="number">0.54858774</literal></expr>, <expr><literal type="number">0.4544207</literal></expr>, <expr><literal type="number">0.11961343</literal></expr>, <expr><literal type="number">0.29096434</literal></expr>, <expr><literal type="number">0.6112237</literal></expr>, <expr><literal type="number">0.88524824</literal></expr>,

<expr><literal type="number">0.52937496</literal></expr>, <expr><literal type="number">0.3043985</literal></expr>, <expr><literal type="number">0.98109704</literal></expr>, <expr><literal type="number">0.88869286</literal></expr>, <expr><literal type="number">0.9110868</literal></expr>, <expr><literal type="number">0.2124278</literal></expr>, <expr><literal type="number">0.7101537</literal></expr>, <expr><literal type="number">0.97097176</literal></expr>, <expr><literal type="number">0.3957005</literal></expr>, <expr><literal type="number">0.24383545</literal></expr>,

<expr><literal type="number">0.013130251</literal></expr>, <expr><literal type="number">0.30165505</literal></expr>, <expr><literal type="number">0.27026668</literal></expr>, <expr><literal type="number">0.7718296</literal></expr>, <expr><literal type="number">0.040143453</literal></expr>, <expr><literal type="number">0.26358053</literal></expr>, <expr><literal type="number">0.035823405</literal></expr>, <expr><literal type="number">0.7180255</literal></expr>, <expr><literal type="number">0.09844204</literal></expr>,

<expr><literal type="number">0.044337675</literal></expr>, <expr><literal type="number">0.8963551</literal></expr>, <expr><literal type="number">0.564245</literal></expr>, <expr><literal type="number">0.024401883</literal></expr>, <expr><literal type="number">0.21742801</literal></expr>, <expr><literal type="number">0.6221895</literal></expr>, <expr><literal type="number">0.6190414</literal></expr>, <expr><literal type="number">0.2482982</literal></expr>, <expr><literal type="number">0.17824909</literal></expr>, <expr><literal type="number">0.67947245</literal></expr>, <expr><literal type="number">0.48148304</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>block_size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dnn_execute_layer_depth2space</name><argument_list>(<argument><expr><name>operands</name></expr></argument>, <argument><expr><name>input_indexes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expected_output</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"at index %d, output: %f, expected_output: %f\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>test</name><argument_list>()</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
