<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\tests\dnn\dnn-layer-conv2d-test.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavfilter/dnn/dnn_backend_native_layer_conv2d.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EPSON</name></cpp:macro> <cpp:value>0.00001</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_with_same_dilate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionalParams</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name></type> <name><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>input_indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>input</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">6</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.7012556460308194</literal></expr>, <expr><literal type="number">0.4233847954643357</literal></expr>, <expr><literal type="number">0.19515900664313612</literal></expr>, <expr><literal type="number">0.16343083004926495</literal></expr>, <expr><literal type="number">0.5758261611052848</literal></expr>, <expr><literal type="number">0.9510767434014871</literal></expr>, <expr><literal type="number">0.11014085055947687</literal></expr>,

<expr><literal type="number">0.906327053637727</literal></expr>, <expr><literal type="number">0.8136794715542507</literal></expr>, <expr><literal type="number">0.45371764543639526</literal></expr>, <expr><literal type="number">0.5768443343523952</literal></expr>, <expr><literal type="number">0.19543668786046986</literal></expr>, <expr><literal type="number">0.15648326047898609</literal></expr>, <expr><literal type="number">0.2099500241141279</literal></expr>,

<expr><literal type="number">0.17658777090552413</literal></expr>, <expr><literal type="number">0.059335724777169196</literal></expr>, <expr><literal type="number">0.1729991838469117</literal></expr>, <expr><literal type="number">0.8150514704819208</literal></expr>, <expr><literal type="number">0.4435535466703049</literal></expr>, <expr><literal type="number">0.3752188477566878</literal></expr>, <expr><literal type="number">0.749936650421431</literal></expr>,

<expr><literal type="number">0.6823494635284907</literal></expr>, <expr><literal type="number">0.10776389679424747</literal></expr>, <expr><literal type="number">0.34247481674596836</literal></expr>, <expr><literal type="number">0.5147867256244629</literal></expr>, <expr><literal type="number">0.9063709728129032</literal></expr>, <expr><literal type="number">0.12423605800856818</literal></expr>, <expr><literal type="number">0.6064872945412728</literal></expr>,

<expr><literal type="number">0.5891681538551459</literal></expr>, <expr><literal type="number">0.9865836236466314</literal></expr>, <expr><literal type="number">0.9002163879294677</literal></expr>, <expr><literal type="number">0.003968273184274618</literal></expr>, <expr><literal type="number">0.8628374809643967</literal></expr>, <expr><literal type="number">0.1327176268279583</literal></expr>, <expr><literal type="number">0.8449799925703798</literal></expr>,

<expr><literal type="number">0.1937671869354366</literal></expr>, <expr><literal type="number">0.41524410152707425</literal></expr>, <expr><literal type="number">0.02038786604756837</literal></expr>, <expr><literal type="number">0.49792466069597496</literal></expr>, <expr><literal type="number">0.8881874553848784</literal></expr>, <expr><literal type="number">0.9683921035597336</literal></expr>, <expr><literal type="number">0.4122972568010813</literal></expr>,

<expr><literal type="number">0.843553550993252</literal></expr>, <expr><literal type="number">0.9588482762501964</literal></expr>, <expr><literal type="number">0.5190350762645546</literal></expr>, <expr><literal type="number">0.4283584264145317</literal></expr>, <expr><literal type="number">0.09781496073714646</literal></expr>, <expr><literal type="number">0.9501058833776156</literal></expr>, <expr><literal type="number">0.8665541760152776</literal></expr>,

<expr><literal type="number">0.31669272550095806</literal></expr>, <expr><literal type="number">0.07133074675453632</literal></expr>, <expr><literal type="number">0.606438007334886</literal></expr>, <expr><literal type="number">0.7007157020538224</literal></expr>, <expr><literal type="number">0.4827996264130444</literal></expr>, <expr><literal type="number">0.5167615606392761</literal></expr>, <expr><literal type="number">0.6385043039312651</literal></expr>,

<expr><literal type="number">0.23069664707810555</literal></expr>, <expr><literal type="number">0.058233497329354456</literal></expr>, <expr><literal type="number">0.06323892961591071</literal></expr>, <expr><literal type="number">0.24816458893245974</literal></expr>, <expr><literal type="number">0.8646369065257812</literal></expr>, <expr><literal type="number">0.24742185893094837</literal></expr>, <expr><literal type="number">0.09991225948167437</literal></expr>,

<expr><literal type="number">0.625700606979606</literal></expr>, <expr><literal type="number">0.7678541502111257</literal></expr>, <expr><literal type="number">0.6215834594679912</literal></expr>, <expr><literal type="number">0.5623003956582483</literal></expr>, <expr><literal type="number">0.07389123942681242</literal></expr>, <expr><literal type="number">0.7659100715711249</literal></expr>, <expr><literal type="number">0.486061471642225</literal></expr>,

<expr><literal type="number">0.9947455699829012</literal></expr>, <expr><literal type="number">0.9094911797643259</literal></expr>, <expr><literal type="number">0.7644355876253265</literal></expr>, <expr><literal type="number">0.05384315321492239</literal></expr>, <expr><literal type="number">0.13565394382783613</literal></expr>, <expr><literal type="number">0.9810628204953316</literal></expr>, <expr><literal type="number">0.007386389078887889</literal></expr>,

<expr><literal type="number">0.226182754156241</literal></expr>, <expr><literal type="number">0.2609021390764772</literal></expr>, <expr><literal type="number">0.24182802076928933</literal></expr>, <expr><literal type="number">0.13264782451941648</literal></expr>, <expr><literal type="number">0.2035816485767682</literal></expr>, <expr><literal type="number">0.005504188177612557</literal></expr>, <expr><literal type="number">0.7014619934040155</literal></expr>,

<expr><literal type="number">0.956215988391991</literal></expr>, <expr><literal type="number">0.5670398541013633</literal></expr>, <expr><literal type="number">0.9809764721750784</literal></expr>, <expr><literal type="number">0.6886338100487461</literal></expr>, <expr><literal type="number">0.5758152317218274</literal></expr>, <expr><literal type="number">0.7137823176776179</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>expected_output</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">6</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">0.9480655</literal></expr>, <expr><operator>-</operator><literal type="number">0.7169147</literal></expr>, <expr><operator>-</operator><literal type="number">0.9404794</literal></expr>, <expr><operator>-</operator><literal type="number">0.5567385</literal></expr>, <expr><operator>-</operator><literal type="number">0.8991124</literal></expr>, <expr><operator>-</operator><literal type="number">0.8306558</literal></expr>, <expr><operator>-</operator><literal type="number">0.94487447</literal></expr>, <expr><operator>-</operator><literal type="number">0.8932543</literal></expr>, <expr><operator>-</operator><literal type="number">0.88238764</literal></expr>, <expr><operator>-</operator><literal type="number">0.7301602</literal></expr>,

<expr><operator>-</operator><literal type="number">0.8974813</literal></expr>, <expr><operator>-</operator><literal type="number">0.7026703</literal></expr>, <expr><operator>-</operator><literal type="number">0.8858988</literal></expr>, <expr><operator>-</operator><literal type="number">0.53203243</literal></expr>, <expr><operator>-</operator><literal type="number">0.92881465</literal></expr>, <expr><operator>-</operator><literal type="number">0.5648504</literal></expr>, <expr><operator>-</operator><literal type="number">0.8871471</literal></expr>, <expr><operator>-</operator><literal type="number">0.7000097</literal></expr>, <expr><operator>-</operator><literal type="number">0.91754407</literal></expr>, <expr><operator>-</operator><literal type="number">0.79684794</literal></expr>,

<expr><operator>-</operator><literal type="number">0.760465</literal></expr>, <expr><operator>-</operator><literal type="number">0.117928326</literal></expr>, <expr><operator>-</operator><literal type="number">0.88302773</literal></expr>, <expr><operator>-</operator><literal type="number">0.8975289</literal></expr>, <expr><operator>-</operator><literal type="number">0.70615053</literal></expr>, <expr><literal type="number">0.19231977</literal></expr>, <expr><operator>-</operator><literal type="number">0.8318776</literal></expr>, <expr><operator>-</operator><literal type="number">0.386184</literal></expr>, <expr><operator>-</operator><literal type="number">0.80698484</literal></expr>, <expr><operator>-</operator><literal type="number">0.8556624</literal></expr>,

<expr><operator>-</operator><literal type="number">0.7336671</literal></expr>, <expr><operator>-</operator><literal type="number">0.6168619</literal></expr>, <expr><operator>-</operator><literal type="number">0.7658234</literal></expr>, <expr><operator>-</operator><literal type="number">0.63449603</literal></expr>, <expr><operator>-</operator><literal type="number">0.73314047</literal></expr>, <expr><operator>-</operator><literal type="number">0.87502456</literal></expr>, <expr><operator>-</operator><literal type="number">0.58158904</literal></expr>, <expr><operator>-</operator><literal type="number">0.4184259</literal></expr>, <expr><operator>-</operator><literal type="number">0.52618927</literal></expr>, <expr><operator>-</operator><literal type="number">0.13613208</literal></expr>,

<expr><operator>-</operator><literal type="number">0.5093187</literal></expr>, <expr><operator>-</operator><literal type="number">0.21027721</literal></expr>, <expr><operator>-</operator><literal type="number">0.39455596</literal></expr>, <expr><operator>-</operator><literal type="number">0.44507834</literal></expr>, <expr><operator>-</operator><literal type="number">0.22269244</literal></expr>, <expr><operator>-</operator><literal type="number">0.73400885</literal></expr>, <expr><operator>-</operator><literal type="number">0.77655095</literal></expr>, <expr><operator>-</operator><literal type="number">0.74408925</literal></expr>, <expr><operator>-</operator><literal type="number">0.57313335</literal></expr>, <expr><operator>-</operator><literal type="number">0.15333457</literal></expr>,

<expr><operator>-</operator><literal type="number">0.74620694</literal></expr>, <expr><operator>-</operator><literal type="number">0.34858236</literal></expr>, <expr><operator>-</operator><literal type="number">0.42586932</literal></expr>, <expr><operator>-</operator><literal type="number">0.5240488</literal></expr>, <expr><literal type="number">0.1634339</literal></expr>, <expr><operator>-</operator><literal type="number">0.2447881</literal></expr>, <expr><operator>-</operator><literal type="number">0.57927346</literal></expr>, <expr><operator>-</operator><literal type="number">0.62732303</literal></expr>, <expr><operator>-</operator><literal type="number">0.82287043</literal></expr>, <expr><operator>-</operator><literal type="number">0.8474058</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>kernel</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.26025516</literal></expr>, <expr><literal type="number">0.16536498</literal></expr>, <expr><operator>-</operator><literal type="number">0.24351254</literal></expr>, <expr><literal type="number">0.33892477</literal></expr>, <expr><operator>-</operator><literal type="number">0.34005195</literal></expr>, <expr><literal type="number">0.35202783</literal></expr>, <expr><literal type="number">0.34056443</literal></expr>, <expr><literal type="number">0.01422739</literal></expr>, <expr><literal type="number">0.13799345</literal></expr>, <expr><literal type="number">0.29489166</literal></expr>,

<expr><literal type="number">0.2781723</literal></expr>, <expr><literal type="number">0.178585</literal></expr>, <expr><literal type="number">0.22122234</literal></expr>, <expr><literal type="number">0.044115514</literal></expr>, <expr><literal type="number">0.13134438</literal></expr>, <expr><literal type="number">0.31705368</literal></expr>, <expr><literal type="number">0.22527462</literal></expr>, <expr><operator>-</operator><literal type="number">0.021323413</literal></expr>, <expr><literal type="number">0.115134746</literal></expr>, <expr><operator>-</operator><literal type="number">0.18216397</literal></expr>,

<expr><operator>-</operator><literal type="number">0.21197563</literal></expr>, <expr><operator>-</operator><literal type="number">0.027848959</literal></expr>, <expr><operator>-</operator><literal type="number">0.01704529</literal></expr>, <expr><operator>-</operator><literal type="number">0.12401503</literal></expr>, <expr><operator>-</operator><literal type="number">0.23415318</literal></expr>, <expr><operator>-</operator><literal type="number">0.12661739</literal></expr>, <expr><operator>-</operator><literal type="number">0.35338148</literal></expr>, <expr><literal type="number">0.20049328</literal></expr>, <expr><operator>-</operator><literal type="number">0.076153606</literal></expr>,

<expr><operator>-</operator><literal type="number">0.23642601</literal></expr>, <expr><operator>-</operator><literal type="number">0.3125769</literal></expr>, <expr><operator>-</operator><literal type="number">0.025851756</literal></expr>, <expr><operator>-</operator><literal type="number">0.30006272</literal></expr>, <expr><literal type="number">0.050762743</literal></expr>, <expr><literal type="number">0.32003498</literal></expr>, <expr><literal type="number">0.3052225</literal></expr>, <expr><operator>-</operator><literal type="number">0.0017385483</literal></expr>, <expr><literal type="number">0.25337684</literal></expr>, <expr><operator>-</operator><literal type="number">0.25664508</literal></expr>,

<expr><literal type="number">0.27846587</literal></expr>, <expr><operator>-</operator><literal type="number">0.3112659</literal></expr>, <expr><literal type="number">0.2066065</literal></expr>, <expr><literal type="number">0.31499845</literal></expr>, <expr><literal type="number">0.113178134</literal></expr>, <expr><literal type="number">0.09449363</literal></expr>, <expr><operator>-</operator><literal type="number">0.11828774</literal></expr>, <expr><operator>-</operator><literal type="number">0.12671001</literal></expr>, <expr><operator>-</operator><literal type="number">0.36259216</literal></expr>, <expr><literal type="number">0.2710235</literal></expr>,

<expr><operator>-</operator><literal type="number">0.19676702</literal></expr>, <expr><literal type="number">0.023612618</literal></expr>, <expr><operator>-</operator><literal type="number">0.2596915</literal></expr>, <expr><operator>-</operator><literal type="number">0.34949252</literal></expr>, <expr><operator>-</operator><literal type="number">0.108270735</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>bias</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1.6574852</literal></expr>, <expr><operator>-</operator><literal type="number">0.72915393</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>activation</name></name> <operator>=</operator> <name>TANH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>has_bias</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>biases</name></name> <operator>=</operator> <name>bias</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>dilation</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>input_num</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>kernel</name></name> <operator>=</operator> <name>kernel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>kernel_size</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>output_num</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>padding_method</name></name> <operator>=</operator> <name>SAME</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dnn_execute_layer_conv2d</name><argument_list>(<argument><expr><name>operands</name></expr></argument>, <argument><expr><name>input_indexes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expected_output</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"at index %d, output: %f, expected_output: %f\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_with_valid</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>ConvolutionalParams</name></type> <name>params</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>DnnOperand</name></type> <name><name>operands</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>input_indexes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>input</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">5</literal><operator>*</operator><literal type="number">6</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0.26126657468269665</literal></expr>, <expr><literal type="number">0.42762216215337556</literal></expr>, <expr><literal type="number">0.7466274030131497</literal></expr>, <expr><literal type="number">0.802550266787863</literal></expr>, <expr><literal type="number">0.3709323443076644</literal></expr>, <expr><literal type="number">0.5919817068197668</literal></expr>, <expr><literal type="number">0.49274512279324967</literal></expr>,

<expr><literal type="number">0.7170132295090351</literal></expr>, <expr><literal type="number">0.0911793215410649</literal></expr>, <expr><literal type="number">0.5134213878288361</literal></expr>, <expr><literal type="number">0.670132600785118</literal></expr>, <expr><literal type="number">0.49417034512633484</literal></expr>, <expr><literal type="number">0.03887389460089885</literal></expr>, <expr><literal type="number">0.436785102836845</literal></expr>,

<expr><literal type="number">0.1490231658611978</literal></expr>, <expr><literal type="number">0.6413606121498127</literal></expr>, <expr><literal type="number">0.8595987991375995</literal></expr>, <expr><literal type="number">0.9132593077586231</literal></expr>, <expr><literal type="number">0.7075959004873255</literal></expr>, <expr><literal type="number">0.17754995944845464</literal></expr>, <expr><literal type="number">0.5212507214937141</literal></expr>,

<expr><literal type="number">0.35379732738215475</literal></expr>, <expr><literal type="number">0.25205107358505296</literal></expr>, <expr><literal type="number">0.3928792840544273</literal></expr>, <expr><literal type="number">0.09485294189485782</literal></expr>, <expr><literal type="number">0.8685115437448666</literal></expr>, <expr><literal type="number">0.6489046799288605</literal></expr>, <expr><literal type="number">0.509253797582924</literal></expr>,

<expr><literal type="number">0.8993255536791972</literal></expr>, <expr><literal type="number">0.18740056466602373</literal></expr>, <expr><literal type="number">0.34237617336313986</literal></expr>, <expr><literal type="number">0.3871438962989183</literal></expr>, <expr><literal type="number">0.1488532571774911</literal></expr>, <expr><literal type="number">0.5187002331293636</literal></expr>, <expr><literal type="number">0.8137098818752955</literal></expr>,

<expr><literal type="number">0.521761863717401</literal></expr>, <expr><literal type="number">0.4622312310118274</literal></expr>, <expr><literal type="number">0.29038411334638825</literal></expr>, <expr><literal type="number">0.16194915718170566</literal></expr>, <expr><literal type="number">0.5175999923925211</literal></expr>, <expr><literal type="number">0.8852230040101133</literal></expr>, <expr><literal type="number">0.0218263385047206</literal></expr>,

<expr><literal type="number">0.08482355352852367</literal></expr>, <expr><literal type="number">0.3463638568376264</literal></expr>, <expr><literal type="number">0.28627127120619733</literal></expr>, <expr><literal type="number">0.9553293378948409</literal></expr>, <expr><literal type="number">0.4803391055970835</literal></expr>, <expr><literal type="number">0.841635695030805</literal></expr>, <expr><literal type="number">0.3556828280031952</literal></expr>,

<expr><literal type="number">0.06778527221541808</literal></expr>, <expr><literal type="number">0.28193560357091596</literal></expr>, <expr><literal type="number">0.8399957619031576</literal></expr>, <expr><literal type="number">0.03305536359456385</literal></expr>, <expr><literal type="number">0.6625039162109645</literal></expr>, <expr><literal type="number">0.9300552020023897</literal></expr>, <expr><literal type="number">0.8551529138204146</literal></expr>,

<expr><literal type="number">0.6133216915522418</literal></expr>, <expr><literal type="number">0.222427800857393</literal></expr>, <expr><literal type="number">0.1315422686800336</literal></expr>, <expr><literal type="number">0.6189144989185527</literal></expr>, <expr><literal type="number">0.5346184916866876</literal></expr>, <expr><literal type="number">0.8348888624532548</literal></expr>, <expr><literal type="number">0.6544834567840291</literal></expr>,

<expr><literal type="number">0.2844062293389934</literal></expr>, <expr><literal type="number">0.28780026600883324</literal></expr>, <expr><literal type="number">0.5372272015684924</literal></expr>, <expr><literal type="number">0.6250226011503823</literal></expr>, <expr><literal type="number">0.28119106062279453</literal></expr>, <expr><literal type="number">0.49655812908420094</literal></expr>, <expr><literal type="number">0.6451488959145951</literal></expr>,

<expr><literal type="number">0.7362580606834843</literal></expr>, <expr><literal type="number">0.44815578616664087</literal></expr>, <expr><literal type="number">0.6454760235835586</literal></expr>, <expr><literal type="number">0.6794062414265861</literal></expr>, <expr><literal type="number">0.045378883014935756</literal></expr>, <expr><literal type="number">0.9008388543865096</literal></expr>, <expr><literal type="number">0.7949752851269782</literal></expr>,

<expr><literal type="number">0.4179928876222264</literal></expr>, <expr><literal type="number">0.28733419007048644</literal></expr>, <expr><literal type="number">0.996902319501908</literal></expr>, <expr><literal type="number">0.5690851338677467</literal></expr>, <expr><literal type="number">0.9511814013279738</literal></expr>, <expr><literal type="number">0.025323788678181636</literal></expr>, <expr><literal type="number">0.5594359732604794</literal></expr>,

<expr><literal type="number">0.1213732595086251</literal></expr>, <expr><literal type="number">0.7172624313368294</literal></expr>, <expr><literal type="number">0.6759328959074691</literal></expr>, <expr><literal type="number">0.07252138454885071</literal></expr>, <expr><literal type="number">0.17557735158403442</literal></expr>, <expr><literal type="number">0.5988895455048769</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>expected_output</name><index>[<expr><literal type="number">1</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">4</literal><operator>*</operator><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">0.556947</literal></expr>, <expr><operator>-</operator><literal type="number">0.42143887</literal></expr>, <expr><operator>-</operator><literal type="number">0.092070885</literal></expr>, <expr><literal type="number">0.27404794</literal></expr>, <expr><operator>-</operator><literal type="number">0.41886684</literal></expr>, <expr><literal type="number">0.0862887</literal></expr>, <expr><operator>-</operator><literal type="number">0.25001016</literal></expr>, <expr><operator>-</operator><literal type="number">0.342721</literal></expr>, <expr><literal type="number">0.020730592</literal></expr>, <expr><literal type="number">0.04016919</literal></expr>, <expr><operator>-</operator><literal type="number">0.69839877</literal></expr>,

<expr><operator>-</operator><literal type="number">0.06136704</literal></expr>, <expr><literal type="number">0.14186388</literal></expr>, <expr><operator>-</operator><literal type="number">0.11655602</literal></expr>, <expr><operator>-</operator><literal type="number">0.23489095</literal></expr>, <expr><operator>-</operator><literal type="number">0.3845829</literal></expr>, <expr><operator>-</operator><literal type="number">0.19017771</literal></expr>, <expr><literal type="number">0.1595885</literal></expr>, <expr><operator>-</operator><literal type="number">0.18308741</literal></expr>, <expr><operator>-</operator><literal type="number">0.3071209</literal></expr>, <expr><operator>-</operator><literal type="number">0.5848686</literal></expr>, <expr><operator>-</operator><literal type="number">0.22509028</literal></expr>,

<expr><operator>-</operator><literal type="number">0.6023201</literal></expr>, <expr><operator>-</operator><literal type="number">0.14448485</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name> <modifier>*</modifier></type><name>output</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>kernel</name><index>[<expr><literal type="number">2</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal><operator>*</operator><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{

<expr><operator>-</operator><literal type="number">0.25291282</literal></expr>, <expr><literal type="number">0.22402048</literal></expr>, <expr><literal type="number">0.028642118</literal></expr>, <expr><operator>-</operator><literal type="number">0.14615723</literal></expr>, <expr><operator>-</operator><literal type="number">0.27362752</literal></expr>, <expr><operator>-</operator><literal type="number">0.34801802</literal></expr>, <expr><operator>-</operator><literal type="number">0.2759148</literal></expr>, <expr><literal type="number">0.19594926</literal></expr>, <expr><operator>-</operator><literal type="number">0.25029412</literal></expr>, <expr><literal type="number">0.34606284</literal></expr>, <expr><literal type="number">0.10376671</literal></expr>,

<expr><operator>-</operator><literal type="number">0.1015394</literal></expr>, <expr><literal type="number">0.23616093</literal></expr>, <expr><literal type="number">0.2134214</literal></expr>, <expr><literal type="number">0.35285157</literal></expr>, <expr><literal type="number">0.05893758</literal></expr>, <expr><literal type="number">0.0024731457</literal></expr>, <expr><operator>-</operator><literal type="number">0.17143056</literal></expr>, <expr><literal type="number">0.35758412</literal></expr>, <expr><literal type="number">0.2186206</literal></expr>, <expr><operator>-</operator><literal type="number">0.28384736</literal></expr>, <expr><operator>-</operator><literal type="number">0.21206513</literal></expr>,

<expr><operator>-</operator><literal type="number">0.20871592</literal></expr>, <expr><literal type="number">0.27070445</literal></expr>, <expr><literal type="number">0.25878823</literal></expr>, <expr><literal type="number">0.11136332</literal></expr>, <expr><operator>-</operator><literal type="number">0.33737376</literal></expr>, <expr><literal type="number">0.08353335</literal></expr>, <expr><operator>-</operator><literal type="number">0.34290665</literal></expr>, <expr><literal type="number">0.041805506</literal></expr>, <expr><operator>-</operator><literal type="number">0.09738535</literal></expr>, <expr><literal type="number">0.3284936</literal></expr>, <expr><operator>-</operator><literal type="number">0.16838405</literal></expr>,

<expr><operator>-</operator><literal type="number">0.032494456</literal></expr>, <expr><operator>-</operator><literal type="number">0.29193437</literal></expr>, <expr><literal type="number">0.033259362</literal></expr>, <expr><operator>-</operator><literal type="number">0.09272635</literal></expr>, <expr><operator>-</operator><literal type="number">0.2802651</literal></expr>, <expr><operator>-</operator><literal type="number">0.28648436</literal></expr>, <expr><literal type="number">0.3542878</literal></expr>, <expr><literal type="number">0.2432127</literal></expr>, <expr><operator>-</operator><literal type="number">0.24551713</literal></expr>, <expr><literal type="number">0.27813476</literal></expr>, <expr><literal type="number">0.21024024</literal></expr>,

<expr><operator>-</operator><literal type="number">0.013690501</literal></expr>, <expr><operator>-</operator><literal type="number">0.1350077</literal></expr>, <expr><operator>-</operator><literal type="number">0.07826337</literal></expr>, <expr><operator>-</operator><literal type="number">0.34563828</literal></expr>, <expr><literal type="number">0.3220685</literal></expr>, <expr><operator>-</operator><literal type="number">0.07571727</literal></expr>, <expr><literal type="number">0.19420576</literal></expr>, <expr><literal type="number">0.20783454</literal></expr>, <expr><literal type="number">0.18738335</literal></expr>, <expr><literal type="number">0.16672492</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name><name>bias</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">0.4773722</literal></expr>, <expr><operator>-</operator><literal type="number">0.19620377</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>activation</name></name> <operator>=</operator> <name>TANH</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>has_bias</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>biases</name></name> <operator>=</operator> <name>bias</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>dilation</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>input_num</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>kernel</name></name> <operator>=</operator> <name>kernel</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>kernel_size</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>output_num</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>params</name><operator>.</operator><name>padding_method</name></name> <operator>=</operator> <name>VALID</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>input</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>dims</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>input_indexes</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>dnn_execute_layer_conv2d</name><argument_list>(<argument><expr><name>operands</name></expr></argument>, <argument><expr><name>input_indexes</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>output</name> <operator>=</operator> <name><name>operands</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>

<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>expected_output</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>EPSON</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"at index %d, output: %f, expected_output: %f\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>expected_output</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>test_with_valid</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>test_with_same_dilate</name><argument_list>()</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
