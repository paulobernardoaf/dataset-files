<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tea.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tea.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AVTEA</name> <block>{

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rounds</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVTEA</name>;</typedef>

<function><type><name><name>struct</name> <name>AVTEA</name></name> <modifier>*</modifier></type><name>av_tea_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVTEA</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>av_tea_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVTEA</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>av_tea_init</name><parameter_list>(<parameter><decl><type><name>AVTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>key</name> <operator>+</operator> <operator>(</operator><name>i</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>rounds</name></name> <operator>=</operator> <name>rounds</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tea_crypt_ecb</name><parameter_list>(<parameter><decl><type><name>AVTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v0</name></decl>, <decl><type ref="prev"/><name>v1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rounds</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>rounds</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>k0</name></decl>, <decl><type ref="prev"/><name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>, <decl><type ref="prev"/><name>k3</name></decl>;</decl_stmt>

<expr_stmt><expr><name>k0</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k2</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k3</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>delta</name> <init>= <expr><literal type="number">0x9E3779B9U</literal></expr></init></decl>, <decl><type ref="prev"/><name>sum</name> <init>= <expr><name>delta</name> <operator>*</operator> <operator>(</operator><name>rounds</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>v1</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>k2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>+</operator> <name>sum</name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>k3</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>-=</operator> <operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>k0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>+</operator> <name>sum</name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>k1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>sum</name> <operator>-=</operator> <name>delta</name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>v0</name> <operator>^=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>^=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>iv</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>sum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>delta</name> <init>= <expr><literal type="number">0x9E3779B9U</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name> <operator>/</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sum</name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v0</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>v1</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>k0</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v1</name> <operator>+</operator> <name>sum</name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v1</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>k1</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>v1</name> <operator>+=</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>+</operator> <name>k2</name><operator>)</operator> <operator>^</operator> <operator>(</operator><name>v0</name> <operator>+</operator> <name>sum</name><operator>)</operator> <operator>^</operator> <operator>(</operator><operator>(</operator><name>v0</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal><operator>)</operator> <operator>+</operator> <name>k3</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>v0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>v1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_tea_crypt</name><parameter_list>(<parameter><decl><type><name>AVTEA</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>tea_crypt_ecb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>src</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <name><name>iv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>tea_crypt_ecb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>tea_crypt_ecb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

</unit>
