<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\channel_layout.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<struct>struct <name>channel_name</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>description</name></decl>;</decl_stmt>

}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>channel_name</name></name></type> <name><name>channel_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"FL"</literal></expr>, <expr><literal type="string">"front left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">1</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"FR"</literal></expr>, <expr><literal type="string">"front right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">2</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"FC"</literal></expr>, <expr><literal type="string">"front center"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">3</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"LFE"</literal></expr>, <expr><literal type="string">"low frequency"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"BL"</literal></expr>, <expr><literal type="string">"back left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">5</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"BR"</literal></expr>, <expr><literal type="string">"back right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">6</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"FLC"</literal></expr>, <expr><literal type="string">"front left-of-center"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">7</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"FRC"</literal></expr>, <expr><literal type="string">"front right-of-center"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">8</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"BC"</literal></expr>, <expr><literal type="string">"back center"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">9</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"SL"</literal></expr>, <expr><literal type="string">"side left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">10</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"SR"</literal></expr>, <expr><literal type="string">"side right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">11</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"TC"</literal></expr>, <expr><literal type="string">"top center"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">12</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"TFL"</literal></expr>, <expr><literal type="string">"top front left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">13</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"TFC"</literal></expr>, <expr><literal type="string">"top front center"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">14</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"TFR"</literal></expr>, <expr><literal type="string">"top front right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">15</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"TBL"</literal></expr>, <expr><literal type="string">"top back left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">16</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"TBC"</literal></expr>, <expr><literal type="string">"top back center"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">17</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"TBR"</literal></expr>, <expr><literal type="string">"top back right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">29</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"DL"</literal></expr>, <expr><literal type="string">"downmix left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">30</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"DR"</literal></expr>, <expr><literal type="string">"downmix right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">31</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"WL"</literal></expr>, <expr><literal type="string">"wide left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">32</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"WR"</literal></expr>, <expr><literal type="string">"wide right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">33</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"SDL"</literal></expr>, <expr><literal type="string">"surround direct left"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">34</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"SDR"</literal></expr>, <expr><literal type="string">"surround direct right"</literal></expr> }</block></expr>,

<expr><index>[<expr><literal type="number">35</literal></expr>]</index> <operator>=</operator> <block>{ <expr><literal type="string">"LFE2"</literal></expr>, <expr><literal type="string">"low frequency 2"</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_channel_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>channel_id</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>channel_id</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>channel_id</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_names</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name><name>channel_names</name><index>[<expr><name>channel_id</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>

</block_content>}</block></function>

<struct><specifier>static</specifier> <specifier>const</specifier> struct <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>nb_channels</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name></decl>;</decl_stmt>

}</block> <decl><name><name>channel_layout_map</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"mono"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>AV_CH_LAYOUT_MONO</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"stereo"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AV_CH_LAYOUT_STEREO</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2.1"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>AV_CH_LAYOUT_2POINT1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.0"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>AV_CH_LAYOUT_SURROUND</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.0(back)"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>AV_CH_LAYOUT_2_1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4.0"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>AV_CH_LAYOUT_4POINT0</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"quad"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>AV_CH_LAYOUT_QUAD</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"quad(side)"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>AV_CH_LAYOUT_2_2</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"3.1"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>AV_CH_LAYOUT_3POINT1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.0"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>AV_CH_LAYOUT_5POINT0_BACK</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.0(side)"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>AV_CH_LAYOUT_5POINT0</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4.1"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>AV_CH_LAYOUT_4POINT1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.1"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>AV_CH_LAYOUT_5POINT1_BACK</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"5.1(side)"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>AV_CH_LAYOUT_5POINT1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.0"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>AV_CH_LAYOUT_6POINT0</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.0(front)"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>AV_CH_LAYOUT_6POINT0_FRONT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hexagonal"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>AV_CH_LAYOUT_HEXAGONAL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.1"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>AV_CH_LAYOUT_6POINT1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.1(back)"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>AV_CH_LAYOUT_6POINT1_BACK</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"6.1(front)"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>AV_CH_LAYOUT_6POINT1_FRONT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"7.0"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>AV_CH_LAYOUT_7POINT0</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"7.0(front)"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>AV_CH_LAYOUT_7POINT0_FRONT</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"7.1"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AV_CH_LAYOUT_7POINT1</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"7.1(wide)"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AV_CH_LAYOUT_7POINT1_WIDE_BACK</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"7.1(wide-side)"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AV_CH_LAYOUT_7POINT1_WIDE</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"octagonal"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>AV_CH_LAYOUT_OCTAGONAL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hexadecagonal"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>AV_CH_LAYOUT_HEXADECAGONAL</name></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"downmix"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>AV_CH_LAYOUT_STEREO_DOWNMIX</name></expr>, }</block></expr>,

}</block></expr></init></decl>;</struct>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>get_channel_layout_single</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>name_len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>layout</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_layout_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>name_len</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>layout</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>channel_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>&amp;&amp;</operator>

<call><name>strlen</name><argument_list>(<argument><expr><name><name>channel_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>name_len</name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>channel_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>name_len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errno</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal> <operator>-</operator> <name>name</name> <operator>==</operator> <name>name_len</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'c'</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>av_get_default_channel_layout</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>layout</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errno</name> <operator>&amp;&amp;</operator> <name>end</name> <operator>-</operator> <name>name</name> <operator>==</operator> <name>name_len</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>FFMAX</name><argument_list>(<argument><expr><name>layout</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>av_get_channel_layout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>n</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name_end</name> <init>= <expr><name>name</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>layout</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>layout_single</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <name>name</name></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>name_end</name></expr>;</condition> <incr><expr><name>n</name> <operator>=</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>e</name> <operator>=</operator> <name>n</name></expr>;</init> <condition><expr><name>e</name> <operator>&lt;</operator> <name>name_end</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>e</name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>e</name> <operator>!=</operator> <literal type="char">'|'</literal></expr>;</condition> <incr><expr><name>e</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>layout_single</name> <operator>=</operator> <call><name>get_channel_layout_single</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>e</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>layout_single</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>layout</name> <operator>|=</operator> <name>layout_single</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>layout</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_extended_channel_layout</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>channel_layout</name></decl></parameter>, <parameter><decl><type><name>int</name><modifier>*</modifier></type> <name>nb_channels</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nb</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>layout</name> <init>= <expr><call><name>av_get_channel_layout</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>layout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channel_layout</name> <operator>=</operator> <name>layout</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nb_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>nb</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>errno</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>end</name> <operator>==</operator> <literal type="char">'C'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><operator>(</operator><name>end</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>nb</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>nb</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>channel_layout</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>nb_channels</name> <operator>=</operator> <name>nb</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_bprint_channel_layout</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVBPrint</name></name> <modifier>*</modifier></type><name>bp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>nb_channels</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>nb_channels</name> <operator>=</operator> <call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_layout_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>nb_channels</name> <operator>==</operator> <name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_channels</name> <operator>&amp;&amp;</operator>

<name>channel_layout</name> <operator>==</operator> <name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>layout</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%d channels"</literal></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>channel_layout</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ch</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>ch</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>channel_layout</name> <operator>&amp;</operator> <operator>(</operator><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>get_channel_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ch</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ch</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_bprintf</name><argument_list>(<argument><expr><name>bp</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_get_channel_layout_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_size</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bp</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_bprint_init_for_buffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buf_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_channel_layout</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bp</name></expr></argument>, <argument><expr><name>nb_channels</name></expr></argument>, <argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_channel_layout_nb_channels</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_popcount64</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_get_default_channel_layout</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nb_channels</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_layout_map</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>nb_channels</name> <operator>==</operator> <name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nb_channels</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>channel_layout_map</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>layout</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_channel_layout_channel_index</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>,

<parameter><decl><type><name>uint64_t</name></type> <name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>channel_layout</name> <operator>&amp;</operator> <name>channel</name><operator>)</operator> <operator>||</operator>

<call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>channel_layout</name> <operator>&amp;=</operator> <name>channel</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<return>return <expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_channel_name</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <name>channel</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>get_channel_name</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_channel_description</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_names</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><name>i</name><operator>)</operator> <operator>&amp;</operator> <name>channel</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>channel_names</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>description</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>av_channel_layout_extract_channel</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>channel_layout</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_get_channel_layout_nb_channels</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <name>index</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <name>channel_layout</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>index</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1ULL</literal> <operator>&lt;&lt;</operator> <name>i</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_get_standard_channel_layout</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>layout</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>channel_layout_map</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_EOF</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>layout</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>layout</name> <operator>=</operator> <name><name>channel_layout_map</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>layout</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>name</name> <operator>=</operator> <name><name>channel_layout_map</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
