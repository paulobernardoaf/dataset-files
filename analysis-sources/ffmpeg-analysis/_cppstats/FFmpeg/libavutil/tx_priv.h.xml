<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tx_priv.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tx.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TX_FLOAT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TX_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_float</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_TYPE</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<typedef>typedef <type><name>float</name></type> <name>FFTSample</name>;</typedef>

<typedef>typedef <type><name>AVComplexFloat</name></type> <name>FFTComplex</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TX_DOUBLE</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TX_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_double</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_TYPE</name></cpp:macro> <cpp:value>double</cpp:value></cpp:define>

<typedef>typedef <type><name>double</name></type> <name>FFTSample</name>;</typedef>

<typedef>typedef <type><name>AVComplexDouble</name></type> <name>FFTComplex</name>;</typedef>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TX_INT32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TX_NAME</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x ##_int32</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SCALE_TYPE</name></cpp:macro> <cpp:value>float</cpp:value></cpp:define>

<typedef>typedef <type><name>int32_t</name></type> <name>FFTSample</name>;</typedef>

<typedef>typedef <type><name>AVComplexInt32</name></type> <name>FFTComplex</name>;</typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>void</name></type> <name>FFTComplex</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TX_FLOAT</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>TX_DOUBLE</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (dre) = (are) * (bre) - (aim) * (bim); (dim) = (are) * (bim) + (aim) * (bre); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMUL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { (dre) = (are) * (bre) - (aim) * (bim); (dim) = (are) * (bim) - (aim) * (bre); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLD</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((a) + (b))</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TX_INT32</name></expr></argument>)</argument_list></call></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int64_t accu; (accu) = (int64_t)(bre) * (are); (accu) -= (int64_t)(bim) * (aim); (dre) = (int)(((accu) + 0x40000000) &gt;&gt; 31); (accu) = (int64_t)(bim) * (are); (accu) += (int64_t)(bre) * (aim); (dim) = (int)(((accu) + 0x40000000) &gt;&gt; 31); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMUL</name><parameter_list>(<parameter><type><name>dre</name></type></parameter>, <parameter><type><name>dim</name></type></parameter>, <parameter><type><name>are</name></type></parameter>, <parameter><type><name>aim</name></type></parameter>, <parameter><type><name>bre</name></type></parameter>, <parameter><type><name>bim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { int64_t accu; (accu) = (int64_t)(bre) * (are); (accu) -= (int64_t)(bim) * (aim); (dre) = (int)(((accu) + 0x40000000) &gt;&gt; 31); (accu) = (int64_t)(bim) * (are); (accu) -= (int64_t)(bre) * (aim); (dim) = (int)(((accu) + 0x40000000) &gt;&gt; 31); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RESCALE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(lrintf((x) * 2147483648.0))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOLD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((int)((x) + (unsigned)(y) + 32) &gt;&gt; 6)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BF</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { x = (a) - (b); y = (a) + (b); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CMUL3</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CMUL((c).re, (c).im, (a).re, (a).im, (b).re, (b).im)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COSTABLE</name><parameter_list>(<parameter><type><name>size</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>DECLARE_ALIGNED(32, FFTSample, TX_NAME(ff_cos_##size))[size/2]</cpp:value></cpp:define>

<struct>struct <name>AVTXContext</name> <block>{

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>inv</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>type</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>exptab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>FFTComplex</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pfatab</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>revtab</name></decl>;</decl_stmt> 

}</block>;</struct>

<function_decl><type><name>int</name></type> <name>ff_tx_type_is_mdct</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_tx_gen_compound_mapping</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_tx_gen_ptwo_revtab</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>split_radix_permutation</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inverse</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>m</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>i</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>n</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <name>m</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>inverse</name> <operator>==</operator> <operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <name>m</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><call><name>split_radix_permutation</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>inverse</name></expr></argument>)</argument_list></call><operator>*</operator><literal type="number">4</literal> <operator>-</operator> <literal type="number">1</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>ff_tx_init_mdct_fft_float</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>av_tx_fn</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_tx_init_mdct_fft_double</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>av_tx_fn</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>ff_tx_init_mdct_fft_int32</name><parameter_list>(<parameter><decl><type><name>AVTXContext</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>av_tx_fn</name> <modifier>*</modifier></type><name>tx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVTXType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>inv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>scale</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>CosTabsInitOnce</name> <block>{

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>func</name>)<parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AVOnce</name></type> <name>control</name></decl>;</decl_stmt>

}</block></struct></type> <name>CosTabsInitOnce</name>;</typedef>

</unit>
