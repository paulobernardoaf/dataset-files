<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\avsscanf.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bprint.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>FFFILE</name> <block>{

<decl_stmt><decl><type><name>size_t</name></type> <name>buf_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>rpos</name></decl>, <modifier>*</modifier><name>rend</name>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>shend</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>shlim</name></decl>, <name>shcnt</name>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>cookie</name></decl>;</decl_stmt>

<function_decl><type><name>size_t</name></type> (<modifier>*</modifier><name>read</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>FFFILE</name></name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>size_t</name></type></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>FFFILE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_hh</name></cpp:macro> <cpp:value>-2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_h</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_def</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_l</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_L</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SIZE_ll</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shcnt</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)-&gt;shcnt + ((f)-&gt;rpos - (f)-&gt;buf))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fftoread</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rend</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buf</name></name> <operator>+</operator> <name><name>f</name><operator>-&gt;</operator><name>buf_size</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>ffstring_read</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name><name>f</name><operator>-&gt;</operator><name>cookie</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>k</name> <init>= <expr><name>len</name><operator>+</operator><literal type="number">256</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><call><name>memchr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>end</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>k</name> <operator>=</operator> <name>end</name><operator>-</operator><name>src</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>len</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rend</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>src</name><operator>+</operator><name>k</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>cookie</name></name> <operator>=</operator> <name>src</name><operator>+</operator><name>k</name></expr>;</expr_stmt>

<return>return <expr><name>len</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffuflow</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fftoread</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name><name>f</name><operator>-&gt;</operator><name>read</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>c</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>EOF</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ffshlim</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>ptrdiff_t</name></type> <name>lim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shlim</name></name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shcnt</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rpos</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lim</name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>rend</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>&gt;</operator> <name>lim</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shend</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>+</operator> <name>lim</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shend</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rend</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ffshgetc</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>cnt</name> <init>= <expr><call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>shlim</name></name> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&gt;=</operator> <name><name>f</name><operator>-&gt;</operator><name>shlim</name></name> <operator>||</operator> <operator>(</operator><name>c</name><operator>=</operator><call><name>ffuflow</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shcnt</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shend</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><name>EOF</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>shlim</name></name> <operator>&amp;&amp;</operator> <name><name>f</name><operator>-&gt;</operator><name>rend</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>&gt;</operator> <name><name>f</name><operator>-&gt;</operator><name>shlim</name></name> <operator>-</operator> <name>cnt</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shend</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>+</operator> <operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>shlim</name></name> <operator>-</operator> <name>cnt</name><operator>)</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shend</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>rend</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>shcnt</name></name> <operator>=</operator> <name><name>f</name><operator>-&gt;</operator><name>buf</name></name> <operator>-</operator> <name><name>f</name><operator>-&gt;</operator><name>rpos</name></name> <operator>+</operator> <name>cnt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>f</name><operator>-&gt;</operator><name>rpos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>rpos</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shlim</name><parameter_list>(<parameter><type><name>f</name></type></parameter>, <parameter><type><name>lim</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ffshlim((f), (lim))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shgetc</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((f)-&gt;rpos != (f)-&gt;shend) ? *(f)-&gt;rpos++ : ffshgetc(f))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>shunget</name><parameter_list>(<parameter><type><name>f</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((f)-&gt;shend ? (void)(f)-&gt;rpos-- : (void)0)</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>unsigned</name> <name>char</name></type> <name><name>table</name><index>[]</index></name> <init>= <expr><block>{ <expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,

<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><literal type="number">10</literal></expr>,<expr><literal type="number">11</literal></expr>,<expr><literal type="number">12</literal></expr>,<expr><literal type="number">13</literal></expr>,<expr><literal type="number">14</literal></expr>,<expr><literal type="number">15</literal></expr>,<expr><literal type="number">16</literal></expr>,<expr><literal type="number">17</literal></expr>,<expr><literal type="number">18</literal></expr>,<expr><literal type="number">19</literal></expr>,<expr><literal type="number">20</literal></expr>,<expr><literal type="number">21</literal></expr>,<expr><literal type="number">22</literal></expr>,<expr><literal type="number">23</literal></expr>,<expr><literal type="number">24</literal></expr>,

<expr><literal type="number">25</literal></expr>,<expr><literal type="number">26</literal></expr>,<expr><literal type="number">27</literal></expr>,<expr><literal type="number">28</literal></expr>,<expr><literal type="number">29</literal></expr>,<expr><literal type="number">30</literal></expr>,<expr><literal type="number">31</literal></expr>,<expr><literal type="number">32</literal></expr>,<expr><literal type="number">33</literal></expr>,<expr><literal type="number">34</literal></expr>,<expr><literal type="number">35</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,<expr><operator>-</operator><literal type="number">1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>unsigned</name> <name>long</name> <name>long</name></type> <name>ffintscan</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>unsigned</name></type> <name>base</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pok</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>lim</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name>table</name><operator>+</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>neg</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>y</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>&gt;</operator> <literal type="number">36</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>(</operator><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>-</operator><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>base</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>base</name> <operator>==</operator> <literal type="number">16</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name>c</name><operator>==</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>==</operator><literal type="char">'x'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name><operator>&gt;=</operator><literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name> <operator>&gt;=</operator> <name>base</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>base</name> <operator>==</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><name>UINT_MAX</name><operator>/</operator><literal type="number">10</literal><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><name>x</name></expr>;</init> <condition><expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><name>ULLONG_MAX</name><operator>/</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <literal type="number">10</literal><operator>*</operator><name>y</name><operator>&lt;=</operator><name>ULLONG_MAX</name><operator>-</operator><operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&gt;=</operator><literal type="number">10U</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name>base</name> <operator>&amp;</operator> <name>base</name><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bs</name> <init>= <expr><literal type="string">"\0\1\2\4\7\3\6\5"</literal><index>[<expr><operator>(</operator><literal type="number">0x17</literal><operator>*</operator><name>base</name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">5</literal><operator>&amp;</operator><literal type="number">7</literal></expr>]</index></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;</operator><name>base</name> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><name>UINT_MAX</name><operator>/</operator><literal type="number">32</literal></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>&lt;&lt;</operator><name>bs</name> <operator>|</operator> <name><name>val</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><name>x</name></expr>;</init> <condition><expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;</operator><name>base</name> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><name>ULLONG_MAX</name><operator>&gt;&gt;</operator><name>bs</name></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>&lt;&lt;</operator><name>bs</name> <operator>|</operator> <name><name>val</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;</operator><name>base</name> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;=</operator><name>UINT_MAX</name><operator>/</operator><literal type="number">36</literal><operator>-</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><name>base</name> <operator>+</operator> <name><name>val</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><name>x</name></expr>;</init> <condition><expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;</operator><name>base</name> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;=</operator><name>ULLONG_MAX</name><operator>/</operator><name>base</name> <operator>&amp;&amp;</operator> <name>base</name><operator>*</operator><name>y</name><operator>&lt;=</operator><name>ULLONG_MAX</name><operator>-</operator><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>y</name><operator>*</operator><name>base</name> <operator>+</operator> <name><name>val</name><index>[<expr><name>c</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;</operator><name>base</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name><name>val</name><index>[<expr><name>c</name></expr>]</index></name><operator>&lt;</operator><name>base</name></expr>;</condition> <incr><expr><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>lim</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lim</name><operator>&amp;</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>neg</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>y</name><operator>&gt;=</operator><name>lim</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lim</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name>neg</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><name>lim</name><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>y</name><operator>&gt;</operator><name>lim</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><name>lim</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>(</operator><name>y</name><operator>^</operator><name>neg</name><operator>)</operator><operator>-</operator><name>neg</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>long</name> <name>long</name></type> <name>scanexp</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pok</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>neg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>neg</name> <operator>=</operator> <operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&gt;=</operator><literal type="number">10U</literal> <operator>&amp;&amp;</operator> <name>pok</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&gt;=</operator><literal type="number">10U</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>LLONG_MIN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>x</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal> <operator>&amp;&amp;</operator> <name>x</name><operator>&lt;</operator><name>INT_MAX</name><operator>/</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>x</name> <operator>+</operator> <name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><name>x</name></expr>;</init> <condition><expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal> <operator>&amp;&amp;</operator> <name>y</name><operator>&lt;</operator><name>LLONG_MAX</name><operator>/</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>y</name> <operator>+</operator> <name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init>;</init> <condition><expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><name>neg</name></expr> ?</condition><then> <expr><operator>-</operator><name>y</name></expr> </then><else>: <expr><name>y</name></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_B1B_DIG</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LD_B1B_MAX</name></cpp:macro> <cpp:value>9007199, 254740991</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>KMAX</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MASK</name></cpp:macro> <cpp:value>(KMAX-1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>double</name></type> <name>decfloat</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>emin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pok</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>x</name><index>[<expr><name>KMAX</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>th</name><index>[]</index></name> <init>= <expr><block>{ <expr><name>LD_B1B_MAX</name></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>k</name></decl>, <decl><type ref="prev"/><name>a</name></decl>, <decl><type ref="prev"/><name>z</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>lrp</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>dc</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>e10</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>lnz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gotdig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gotrad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rp</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>e2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emax</name> <init>= <expr><operator>-</operator><name>emin</name><operator>-</operator><name>bits</name><operator>+</operator><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>denormal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>frac</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bias</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>p10s</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">10</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1000</literal></expr>, <expr><literal type="number">10000</literal></expr>,

<expr><literal type="number">100000</literal></expr>, <expr><literal type="number">1000000</literal></expr>, <expr><literal type="number">10000000</literal></expr>, <expr><literal type="number">100000000</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name><operator>==</operator><literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>gotdig</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gotrad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>c</name><operator>==</operator><literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>gotdig</name><operator>=</operator><literal type="number">1</literal></expr><operator>,</operator> <expr><name>lrp</name><operator>--</operator></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gotrad</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>gotrad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>lrp</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>k</name> <operator>&lt;</operator> <name>KMAX</name><operator>-</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dc</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>!=</operator><literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lnz</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><name>k</name></expr>]</index></name><operator>*</operator><literal type="number">10</literal> <operator>+</operator> <name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>++</operator><name>j</name><operator>==</operator><literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>gotdig</name><operator>=</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dc</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>!=</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>lnz</name> <operator>=</operator> <operator>(</operator><name>KMAX</name><operator>-</operator><literal type="number">4</literal><operator>)</operator><operator>*</operator><literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>KMAX</name><operator>-</operator><literal type="number">4</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotrad</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>lrp</name><operator>=</operator><name>dc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>gotdig</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>==</operator><literal type="char">'e'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e10</name> <operator>=</operator> <call><name>scanexp</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e10</name> <operator>==</operator> <name>LLONG_MIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e10</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>lrp</name> <operator>+=</operator> <name>e10</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name><operator>&gt;=</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotdig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>sign</name> <operator>*</operator> <literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lrp</name><operator>==</operator><name>dc</name> <operator>&amp;&amp;</operator> <name>dc</name><operator>&lt;</operator><literal type="number">10</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>bits</name><operator>&gt;</operator><literal type="number">30</literal> <operator>||</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><name>bits</name><operator>==</operator><literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sign</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lrp</name> <operator>&gt;</operator> <operator>-</operator><name>emin</name><operator>/</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><name>sign</name> <operator>*</operator> <name>DBL_MAX</name> <operator>*</operator> <name>DBL_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>lrp</name> <operator>&lt;</operator> <name>emin</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>DBL_MANT_DIG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><name>sign</name> <operator>*</operator> <name>DBL_MIN</name> <operator>*</operator> <name>DBL_MIN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">9</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name><operator>*=</operator><literal type="number">10</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>rp</name> <operator>=</operator> <name>lrp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>lnz</name><operator>&lt;</operator><literal type="number">9</literal> <operator>&amp;&amp;</operator> <name>lnz</name><operator>&lt;=</operator><name>rp</name> <operator>&amp;&amp;</operator> <name>rp</name> <operator>&lt;</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>bitlim</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>sign</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>sign</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>/</operator> <name><name>p10s</name><index>[<expr><literal type="number">8</literal><operator>-</operator><name>rp</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>bitlim</name> <operator>=</operator> <name>bits</name><operator>-</operator><literal type="number">3</literal><operator>*</operator><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>rp</name><operator>-</operator><literal type="number">9</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bitlim</name><operator>&gt;</operator><literal type="number">30</literal> <operator>||</operator> <name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>&gt;&gt;</operator><name>bitlim</name><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>sign</name> <operator>*</operator> <operator>(</operator><name>double</name><operator>)</operator><name><name>x</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>*</operator> <name><name>p10s</name><index>[<expr><name>rp</name><operator>-</operator><literal type="number">10</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>!</operator><name><name>x</name><index>[<expr><name>z</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</condition> <incr><expr><name>z</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>%</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rpm9</name> <init>= <expr><ternary><condition><expr><name>rp</name><operator>&gt;=</operator><literal type="number">0</literal></expr> ?</condition><then> <expr><name>rp</name><operator>%</operator><literal type="number">9</literal></expr> </then><else>: <expr><name>rp</name><operator>%</operator><literal type="number">9</literal><operator>+</operator><literal type="number">9</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>p10</name> <init>= <expr><name><name>p10s</name><index>[<expr><literal type="number">8</literal><operator>-</operator><name>rpm9</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>a</name></expr>;</init> <condition><expr><name>k</name><operator>!=</operator><name>z</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>%</operator> <name>p10</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name><name>x</name><index>[<expr><name>k</name></expr>]</index></name><operator>/</operator><name>p10</name> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">1000000000</literal><operator>/</operator><name>p10</name> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name><operator>==</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rp</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x</name><index>[<expr><name>z</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">9</literal><operator>-</operator><name>rpm9</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>rp</name> <operator>&lt;</operator> <literal type="number">9</literal><operator>*</operator><name>LD_B1B_DIG</name> <operator>||</operator> <operator>(</operator><name>rp</name> <operator>==</operator> <literal type="number">9</literal><operator>*</operator><name>LD_B1B_DIG</name> <operator>&amp;&amp;</operator> <name><name>x</name><index>[<expr><name>a</name></expr>]</index></name><operator>&lt;</operator><name><name>th</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>e2</name> <operator>-=</operator> <literal type="number">29</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><operator>(</operator><name>z</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr>;</init> <condition>;</condition> <incr><expr><name>k</name><operator>=</operator><operator>(</operator><name>k</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>tmp</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;&lt;</operator> <literal type="number">29</literal><operator>)</operator> <operator>+</operator> <name>carry</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>tmp</name> <operator>&gt;</operator> <literal type="number">1000000000</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <name>tmp</name> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>tmp</name> <operator>%</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name><operator>==</operator><operator>(</operator><name>z</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator> <operator>&amp;&amp;</operator> <name>k</name><operator>!=</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>z</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name><operator>==</operator><name>a</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>rp</name> <operator>+=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>z</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>z</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name></expr>]</index></name> <operator>|=</operator> <name><name>x</name><index>[<expr><name>z</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>a</name></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>carry</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sh</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>LD_B1B_DIG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>+</operator><name>i</name> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name> <operator>==</operator> <name>z</name> <operator>||</operator> <name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&lt;</operator> <name><name>th</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>i</name><operator>=</operator><name>LD_B1B_DIG</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>x</name><index>[<expr><name>a</name><operator>+</operator><name>i</name> <operator>&amp;</operator> <name>MASK</name></expr>]</index></name> <operator>&gt;</operator> <name><name>th</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><name>LD_B1B_DIG</name> <operator>&amp;&amp;</operator> <name>rp</name><operator>==</operator><literal type="number">9</literal><operator>*</operator><name>LD_B1B_DIG</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rp</name> <operator>&gt;</operator> <literal type="number">9</literal><operator>+</operator><literal type="number">9</literal><operator>*</operator><name>LD_B1B_DIG</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>sh</name> <operator>=</operator> <literal type="number">9</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>e2</name> <operator>+=</operator> <name>sh</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>k</name><operator>=</operator><name>a</name></expr>;</init> <condition><expr><name>k</name><operator>!=</operator><name>z</name></expr>;</condition> <incr><expr><name>k</name><operator>=</operator><operator>(</operator><name>k</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>tmp</name> <init>= <expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><name>sh</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name><operator>&gt;&gt;</operator><name>sh</name><operator>)</operator> <operator>+</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>carry</name> <operator>=</operator> <operator>(</operator><literal type="number">1000000000</literal><operator>&gt;&gt;</operator><name>sh</name><operator>)</operator> <operator>*</operator> <name>tmp</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>k</name><operator>==</operator><name>a</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>x</name><index>[<expr><name>k</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <operator>(</operator><name>a</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>rp</name> <operator>-=</operator> <literal type="number">9</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>carry</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>z</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator> <operator>!=</operator> <name>a</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>x</name><index>[<expr><name>z</name></expr>]</index></name> <operator>=</operator> <name>carry</name></expr>;</expr_stmt>

<expr_stmt><expr><name>z</name> <operator>=</operator> <operator>(</operator><name>z</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content> <expr_stmt><expr><name><name>x</name><index>[<expr><name>z</name><operator>-</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>y</name><operator>=</operator><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>LD_B1B_DIG</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name><operator>+</operator><name>i</name> <operator>&amp;</operator> <name>MASK</name><operator>)</operator><operator>==</operator><name>z</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>x</name><index>[<expr><operator>(</operator><name>z</name><operator>=</operator><operator>(</operator><name>z</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <literal type="number">1000000000.0L</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name><name>x</name><index>[<expr><name>a</name><operator>+</operator><name>i</name> <operator>&amp;</operator> <name>MASK</name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <name>sign</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <name>DBL_MANT_DIG</name><operator>+</operator><name>e2</name><operator>-</operator><name>emin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>DBL_MANT_DIG</name><operator>+</operator><name>e2</name><operator>-</operator><name>emin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>denormal</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>DBL_MANT_DIG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bias</name> <operator>=</operator> <call><name>copysign</name><argument_list>(<argument><expr><call><name>scalbn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal><operator>*</operator><name>DBL_MANT_DIG</name><operator>-</operator><name>bits</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>y</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>frac</name> <operator>=</operator> <call><name>fmod</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><call><name>scalbn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>DBL_MANT_DIG</name><operator>-</operator><name>bits</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>frac</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>bias</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name><operator>+</operator><name>i</name> <operator>&amp;</operator> <name>MASK</name><operator>)</operator> <operator>!=</operator> <name>z</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>t</name> <init>= <expr><name><name>x</name><index>[<expr><name>a</name><operator>+</operator><name>i</name> <operator>&amp;</operator> <name>MASK</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>&lt;</operator> <literal type="number">500000000</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>t</name> <operator>||</operator> <operator>(</operator><name>a</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator> <operator>!=</operator> <name>z</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frac</name> <operator>+=</operator> <literal type="number">0.25</literal><operator>*</operator><name>sign</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>t</name> <operator>&gt;</operator> <literal type="number">500000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frac</name> <operator>+=</operator> <literal type="number">0.75</literal><operator>*</operator><name>sign</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="number">500000000</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>a</name><operator>+</operator><name>i</name><operator>+</operator><literal type="number">1</literal> <operator>&amp;</operator> <name>MASK</name><operator>)</operator> <operator>==</operator> <name>z</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frac</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>sign</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>frac</name> <operator>+=</operator> <literal type="number">0.75</literal><operator>*</operator><name>sign</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>DBL_MANT_DIG</name><operator>-</operator><name>bits</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>fmod</name><argument_list>(<argument><expr><name>frac</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>frac</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>frac</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>bias</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>e2</name><operator>+</operator><name>DBL_MANT_DIG</name> <operator>&amp;</operator> <name>INT_MAX</name><operator>)</operator> <operator>&gt;</operator> <name>emax</name><operator>-</operator><literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>y</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <call><name>pow</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>DBL_MANT_DIG</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>denormal</name> <operator>&amp;&amp;</operator> <name>bits</name><operator>==</operator><name>DBL_MANT_DIG</name><operator>+</operator><name>e2</name><operator>-</operator><name>emin</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>denormal</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>*=</operator> <literal type="number">0.5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>e2</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name><operator>+</operator><name>DBL_MANT_DIG</name><operator>&gt;</operator><name>emax</name> <operator>||</operator> <operator>(</operator><name>denormal</name> <operator>&amp;&amp;</operator> <name>frac</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>scalbn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>hexfloat</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>emin</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sign</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pok</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>x</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>y</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>scale</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>bias</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>gottail</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gotrad</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>gotdig</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>rp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>dc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>e2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name><operator>==</operator><literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name>gotdig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>gotrad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>rp</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>c</name><operator>==</operator><literal type="char">'0'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr><operator>,</operator> <expr><name>rp</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><name>gotdig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal> <operator>||</operator> <operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>-</operator><literal type="char">'a'</literal><operator>&lt;</operator><literal type="number">6U</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>gotrad</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rp</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gotrad</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>gotdig</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>+</operator><literal type="number">10</literal><operator>-</operator><literal type="char">'a'</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name><operator>-</operator><literal type="char">'0'</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dc</name><operator>&lt;</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name>x</name><operator>*</operator><literal type="number">16</literal> <operator>+</operator> <name>d</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>dc</name> <operator>&lt;</operator> <name>DBL_MANT_DIG</name><operator>/</operator><literal type="number">4</literal><operator>+</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>d</name><operator>*</operator><operator>(</operator><name>scale</name><operator>/=</operator><literal type="number">16</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>gottail</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <literal type="number">0.5</literal><operator>*</operator><name>scale</name></expr>;</expr_stmt>

<expr_stmt><expr><name>gottail</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dc</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotdig</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>gotrad</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><name>sign</name> <operator>*</operator> <literal type="number">0.0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>gotrad</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>dc</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><name>dc</name><operator>&lt;</operator><literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name> <operator>*=</operator> <literal type="number">16</literal></expr><operator>,</operator> <expr><name>dc</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>==</operator><literal type="char">'p'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <call><name>scanexp</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>pok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>==</operator> <name>LLONG_MIN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>pok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e2</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e2</name> <operator>+=</operator> <literal type="number">4</literal><operator>*</operator><name>rp</name> <operator>-</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>x</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>sign</name> <operator>*</operator> <literal type="number">0.0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&gt;</operator> <operator>-</operator><name>emin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><name>sign</name> <operator>*</operator> <name>DBL_MAX</name> <operator>*</operator> <name>DBL_MAX</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>e2</name> <operator>&lt;</operator> <name>emin</name><operator>-</operator><literal type="number">2</literal><operator>*</operator><name>DBL_MANT_DIG</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt>

<return>return <expr><name>sign</name> <operator>*</operator> <name>DBL_MIN</name> <operator>*</operator> <name>DBL_MIN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>x</name> <operator>&lt;</operator> <literal type="number">0x80000000</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>y</name><operator>&gt;=</operator><literal type="number">0.5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>y</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>x</name> <operator>+=</operator> <name>x</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>+=</operator> <name>y</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>e2</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&gt;</operator> <literal type="number">32</literal><operator>+</operator><name>e2</name><operator>-</operator><name>emin</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <literal type="number">32</literal><operator>+</operator><name>e2</name><operator>-</operator><name>emin</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bits</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name> <operator>&lt;</operator> <name>DBL_MANT_DIG</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>bias</name> <operator>=</operator> <call><name>copysign</name><argument_list>(<argument><expr><call><name>scalbn</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">32</literal><operator>+</operator><name>DBL_MANT_DIG</name><operator>-</operator><name>bits</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>bits</name><operator>&lt;</operator><literal type="number">32</literal> <operator>&amp;&amp;</operator> <name>y</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><name>x</name><operator>&amp;</operator><literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>x</name><operator>++</operator></expr><operator>,</operator> <expr><name>y</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>y</name> <operator>=</operator> <name>bias</name> <operator>+</operator> <name>sign</name><operator>*</operator><operator>(</operator><name>double</name><operator>)</operator><name>x</name> <operator>+</operator> <name>sign</name><operator>*</operator><name>y</name></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name> <operator>-=</operator> <name>bias</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>y</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>errno</name> <operator>=</operator> <name>ERANGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>scalbn</name><argument_list>(<argument><expr><name>y</name></expr></argument>, <argument><expr><name>e2</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>double</name></type> <name>fffloatscan</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pok</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bits</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>emin</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<switch>switch <condition>(<expr><name>prec</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">0</literal></expr>:</case>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>FLT_MANT_DIG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emin</name> <operator>=</operator> <name>FLT_MIN_EXP</name><operator>-</operator><name>bits</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">1</literal></expr>:</case>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>DBL_MANT_DIG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emin</name> <operator>=</operator> <name>DBL_MIN_EXP</name><operator>-</operator><name>bits</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">2</literal></expr>:</case>

<expr_stmt><expr><name>bits</name> <operator>=</operator> <name>DBL_MANT_DIG</name></expr>;</expr_stmt>

<expr_stmt><expr><name>emin</name> <operator>=</operator> <name>DBL_MIN_EXP</name><operator>-</operator><name>bits</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'+'</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>sign</name> <operator>-=</operator> <literal type="number">2</literal><operator>*</operator><operator>(</operator><name>c</name><operator>==</operator><literal type="char">'-'</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">8</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>==</operator><literal type="string">"infinity"</literal><index>[<expr><name>i</name></expr>]</index></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">7</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">3</literal> <operator>||</operator> <name>i</name><operator>==</operator><literal type="number">8</literal> <operator>||</operator> <operator>(</operator><name>i</name><operator>&gt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <name>pok</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>!=</operator><literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>pok</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>sign</name> <operator>*</operator> <name>INFINITY</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name></expr>)</condition><block type="pseudo"><block_content> <for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">3</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator><operator>==</operator><literal type="string">"nan"</literal><index>[<expr><name>i</name></expr>]</index></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>&lt;</operator><literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></for></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name><operator>==</operator><literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NAN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">1</literal></expr>;</init> <condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>-</operator><literal type="char">'0'</literal><operator>&lt;</operator><literal type="number">10U</literal> <operator>||</operator> <name>c</name><operator>-</operator><literal type="char">'A'</literal><operator>&lt;</operator><literal type="number">26U</literal> <operator>||</operator> <name>c</name><operator>-</operator><literal type="char">'a'</literal><operator>&lt;</operator><literal type="number">26U</literal> <operator>||</operator> <name>c</name><operator>==</operator><literal type="char">'_'</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">')'</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NAN</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>pok</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>i</name><operator>--</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<return>return <expr><name>NAN</name></expr>;</return>

</block_content>}</block></for>

<return>return <expr><name>NAN</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <name>EINVAL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>==</operator><literal type="char">'0'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name><operator>|</operator><literal type="number">32</literal><operator>)</operator> <operator>==</operator> <literal type="char">'x'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>hexfloat</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>emin</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>pok</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>decfloat</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>bits</name></expr></argument>, <argument><expr><name>emin</name></expr></argument>, <argument><expr><name>sign</name></expr></argument>, <argument><expr><name>pok</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>arg_n</name><parameter_list>(<parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>n</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap2</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_copy</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><name>n</name></expr>;</init> <condition><expr><name>i</name><operator>&gt;</operator><literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>va_arg</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>store_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SIZE_hh</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE_h</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>short</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE_def</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE_l</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE_ll</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>long</name> <name>long</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_vfscanf</name><parameter_list>(<parameter><decl><type><name>FFFILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>base</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name><init>=<expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>invert</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>matches</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>x</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>y</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>ptrdiff_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>scanset</name><index>[<expr><literal type="number">257</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>p</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><name>fmt</name></expr>;</init> <condition><expr><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'%'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>(</operator><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>!=</operator><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>input_fail</name>;</goto></block_content></block></if></if_stmt>

<goto>goto <name>match_fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>==</operator><literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>==</operator><literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>arg_n</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><operator>*</operator><name>p</name><operator>-</operator><literal type="char">'0'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>dest</name> <operator>=</operator> <call><name>va_arg</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<for>for <control>(<init><expr><name>width</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">10</literal><operator>*</operator><name>width</name> <operator>+</operator> <operator>*</operator><name>p</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>==</operator><literal type="char">'m'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>SIZE_def</name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name>SIZE_hh</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>SIZE_h</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'l'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>size</name> <operator>=</operator> <name>SIZE_ll</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>size</name> <operator>=</operator> <name>SIZE_l</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'j'</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>SIZE_ll</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'z'</literal></expr>:</case>

<case>case <expr><literal type="char">'t'</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>SIZE_l</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'L'</literal></expr>:</case>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>SIZE_L</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case> <case>case <expr><literal type="char">'i'</literal></expr>:</case> <case>case <expr><literal type="char">'o'</literal></expr>:</case> <case>case <expr><literal type="char">'u'</literal></expr>:</case> <case>case <expr><literal type="char">'x'</literal></expr>:</case>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'g'</literal></expr>:</case>

<case>case <expr><literal type="char">'A'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case> <case>case <expr><literal type="char">'X'</literal></expr>:</case>

<case>case <expr><literal type="char">'s'</literal></expr>:</case> <case>case <expr><literal type="char">'c'</literal></expr>:</case> <case>case <expr><literal type="char">'['</literal></expr>:</case>

<case>case <expr><literal type="char">'S'</literal></expr>:</case> <case>case <expr><literal type="char">'C'</literal></expr>:</case>

<case>case <expr><literal type="char">'p'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><name>p</name><operator>--</operator></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<goto>goto <name>fmt_fail</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><name>t</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>t</name><operator>&amp;</operator><literal type="number">0x2f</literal><operator>)</operator> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>|=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name> <operator>=</operator> <name>SIZE_l</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<break>break;</break>

<case>case <expr><literal type="char">'n'</literal></expr>:</case>

<expr_stmt><expr><call><name>store_int</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<continue>continue;</continue>

<default>default:</default>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>shlim</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>input_fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>t</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'s'</literal></expr>:</case>

<case>case <expr><literal type="char">'c'</literal></expr>:</case>

<case>case <expr><literal type="char">'['</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name>t</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>scanset</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof <name>scanset</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="char">'\t'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="char">'\n'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="char">'\v'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="char">'\f'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="char">'\r'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal> <operator>+</operator> <literal type="char">' '</literal></expr> ]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>++</operator><name>p</name> <operator>==</operator> <literal type="char">'^'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name>invert</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>invert</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>scanset</name></expr></argument>, <argument><expr><name>invert</name></expr></argument>, <argument><expr><sizeof>sizeof <name>scanset</name></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="char">'-'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>invert</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr><operator>,</operator> <expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal><operator>+</operator><literal type="char">']'</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>invert</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">']'</literal></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>fmt_fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>==</operator><literal type="char">'-'</literal> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>c</name><operator>=</operator><name>p</name><operator>++</operator><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></expr>;</init> <condition><expr><name>c</name><operator>&lt;</operator><operator>*</operator><name>p</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal><operator>+</operator><name>c</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>invert</name></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>scanset</name><index>[<expr><literal type="number">1</literal><operator>+</operator><operator>*</operator><name>p</name></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal><operator>-</operator><name>invert</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>s</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>s</name> <operator>=</operator> <name>dest</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>scanset</name><index>[<expr><operator>(</operator><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<while>while <condition>(<expr><name><name>scanset</name><index>[<expr><operator>(</operator><name>c</name><operator>=</operator><call><name>shgetc</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>shunget</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>match_fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>==</operator> <literal type="char">'c'</literal> <operator>&amp;&amp;</operator> <call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>width</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>match_fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name> <operator>!=</operator> <literal type="char">'c'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>s</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'p'</literal></expr>:</case>

<case>case <expr><literal type="char">'X'</literal></expr>:</case>

<case>case <expr><literal type="char">'x'</literal></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<goto>goto <name>int_common</name>;</goto>

<case>case <expr><literal type="char">'o'</literal></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<goto>goto <name>int_common</name>;</goto>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<case>case <expr><literal type="char">'u'</literal></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

<goto>goto <name>int_common</name>;</goto>

<case>case <expr><literal type="char">'i'</literal></expr>:</case>

<expr_stmt><expr><name>base</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>int_common</name>:</label>

<expr_stmt><expr><name>x</name> <operator>=</operator> <call><name>ffintscan</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>base</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>ULLONG_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>match_fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>t</name><operator>==</operator><literal type="char">'p'</literal> <operator>&amp;&amp;</operator> <name>dest</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>x</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>store_int</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'a'</literal></expr>:</case> <case>case <expr><literal type="char">'A'</literal></expr>:</case>

<case>case <expr><literal type="char">'e'</literal></expr>:</case> <case>case <expr><literal type="char">'E'</literal></expr>:</case>

<case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'F'</literal></expr>:</case>

<case>case <expr><literal type="char">'g'</literal></expr>:</case> <case>case <expr><literal type="char">'G'</literal></expr>:</case>

<expr_stmt><expr><name>y</name> <operator>=</operator> <call><name>fffloatscan</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>match_fail</name>;</goto></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name>size</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>SIZE_def</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE_l</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>SIZE_L</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dest</name> <operator>=</operator> <name>y</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></if></if_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><name>pos</name> <operator>+=</operator> <call><name>shcnt</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>dest</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>matches</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<label><name>fmt_fail</name>:</label>

<label><name>input_fail</name>:</label>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>matches</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>matches</name><operator>--</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<label><name>match_fail</name>:</label>

<return>return <expr><name>matches</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>ff_vsscanf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>ap</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>FFFILE</name></type> <name>f</name> <init>= <expr><block>{

<expr><operator>.</operator><name>buf</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>s</name></expr>, <expr><operator>.</operator><name>cookie</name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>s</name></expr>,

<expr><operator>.</operator><name>read</name> <operator>=</operator> <name>ffstring_read</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>ff_vfscanf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>f</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_sscanf</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>ff_vsscanf</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

</unit>
