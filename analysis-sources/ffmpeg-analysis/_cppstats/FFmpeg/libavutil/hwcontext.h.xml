<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\hwcontext.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"buffer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"frame.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixfmt.h"</cpp:file></cpp:include>

<enum>enum <name>AVHWDeviceType</name> <block>{

<decl><name>AV_HWDEVICE_TYPE_NONE</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_VDPAU</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_CUDA</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_VAAPI</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_DXVA2</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_QSV</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_VIDEOTOOLBOX</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_D3D11VA</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_DRM</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_OPENCL</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_MEDIACODEC</name></decl>,

<decl><name>AV_HWDEVICE_TYPE_VULKAN</name></decl>,

}</block>;</enum>

<typedef>typedef <type><name><name>struct</name> <name>AVHWDeviceInternal</name></name></type> <name>AVHWDeviceInternal</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVHWDeviceContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceInternal</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVHWDeviceContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_opaque</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVHWDeviceContext</name>;</typedef>

<typedef>typedef <type><name><name>struct</name> <name>AVHWFramesInternal</name></name></type> <name>AVHWFramesInternal</name>;</typedef>

<typedef>typedef <type><struct>struct <name>AVHWFramesContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWFramesInternal</name> <modifier>*</modifier></type><name>internal</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ref</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVHWDeviceContext</name> <modifier>*</modifier></type><name>device_ctx</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hwctx</name></decl>;</decl_stmt>

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>free</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>AVHWFramesContext</name></name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>user_opaque</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBufferPool</name> <modifier>*</modifier></type><name>pool</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>initial_pool_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>sw_format</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

}</block></struct></type> <name>AVHWFramesContext</name>;</typedef>

<function_decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>av_hwdevice_find_type_by_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_hwdevice_get_type_name</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>av_hwdevice_iterate_types</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>prev</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>av_hwdevice_ctx_alloc</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_hwdevice_ctx_init</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_hwdevice_ctx_create</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>device_ctx</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>device</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_hwdevice_ctx_create_derived</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_ctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVHWDeviceType</name></name></type> <name>type</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>src_ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>av_hwframe_ctx_alloc</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_hwframe_ctx_init</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_hwframe_get_buffer</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hwframe_ctx</name></decl></parameter>, <parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>frame</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_hwframe_transfer_data</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <name>AVHWFrameTransferDirection</name> <block>{

<decl><name>AV_HWFRAME_TRANSFER_DIRECTION_FROM</name></decl>,

<decl><name>AV_HWFRAME_TRANSFER_DIRECTION_TO</name></decl>,

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>av_hwframe_transfer_get_formats</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>hwframe_ctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVHWFrameTransferDirection</name></name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>formats</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>AVHWFramesConstraints</name> <block>{

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>valid_hw_formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>valid_sw_formats</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min_height</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_width</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>max_height</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVHWFramesConstraints</name>;</typedef>

<function_decl><type><name>void</name> <modifier>*</modifier></type><name>av_hwdevice_hwconfig_alloc</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>device_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier></type><name>av_hwdevice_get_hwframe_constraints</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>hwconfig</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>av_hwframe_constraints_free</name><parameter_list>(<parameter><decl><type><name>AVHWFramesConstraints</name> <modifier>*</modifier><modifier>*</modifier></type><name>constraints</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{

<decl><name>AV_HWFRAME_MAP_READ</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">0</literal></expr></init></decl>,

<decl><name>AV_HWFRAME_MAP_WRITE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr></init></decl>,

<decl><name>AV_HWFRAME_MAP_OVERWRITE</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">2</literal></expr></init></decl>,

<decl><name>AV_HWFRAME_MAP_DIRECT</name> <init>= <expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></init></decl>,

}</block>;</enum>

<function_decl><type><name>int</name></type> <name>av_hwframe_map</name><parameter_list>(<parameter><decl><type><name>AVFrame</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVFrame</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_hwframe_ctx_create_derived</name><parameter_list>(<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier><modifier>*</modifier></type><name>derived_frame_ctx</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>format</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>derived_device_ctx</name></decl></parameter>,

<parameter><decl><type><name>AVBufferRef</name> <modifier>*</modifier></type><name>source_frame_ctx</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
