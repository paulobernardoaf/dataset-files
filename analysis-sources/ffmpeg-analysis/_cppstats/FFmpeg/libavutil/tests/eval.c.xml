<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\eval.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/libm.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/eval.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>double</name></type> <name><name>const_values</name><index>[]</index></name> <init>= <expr><block>{

<expr><name>M_PI</name></expr>,

<expr><name>M_E</name></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>const_names</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"PI"</literal></expr>,

<expr><literal type="string">"E"</literal></expr>,

<expr><literal type="number">0</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>expr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>exprs</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"1;2"</literal></expr>,

<expr><literal type="string">"-20"</literal></expr>,

<expr><literal type="string">"-PI"</literal></expr>,

<expr><literal type="string">"+PI"</literal></expr>,

<expr><literal type="string">"1+(5-2)^(3-1)+1/2+sin(PI)-max(-2.2,-3.1)"</literal></expr>,

<expr><literal type="string">"80G/80Gi"</literal></expr>,

<expr><literal type="string">"1k"</literal></expr>,

<expr><literal type="string">"1Gi"</literal></expr>,

<expr><literal type="string">"1gi"</literal></expr>,

<expr><literal type="string">"1GiFoo"</literal></expr>,

<expr><literal type="string">"1k+1k"</literal></expr>,

<expr><literal type="string">"1Gi*3foo"</literal></expr>,

<expr><literal type="string">"foo"</literal></expr>,

<expr><literal type="string">"foo("</literal></expr>,

<expr><literal type="string">"foo()"</literal></expr>,

<expr><literal type="string">"foo)"</literal></expr>,

<expr><literal type="string">"sin"</literal></expr>,

<expr><literal type="string">"sin("</literal></expr>,

<expr><literal type="string">"sin()"</literal></expr>,

<expr><literal type="string">"sin)"</literal></expr>,

<expr><literal type="string">"sin 10"</literal></expr>,

<expr><literal type="string">"sin(1,2,3)"</literal></expr>,

<expr><literal type="string">"sin(1 )"</literal></expr>,

<expr><literal type="string">"1"</literal></expr>,

<expr><literal type="string">"1foo"</literal></expr>,

<expr><literal type="string">"bar + PI + E + 100f*2 + foo"</literal></expr>,

<expr><literal type="string">"13k + 12f - foo(1, 2)"</literal></expr>,

<expr><literal type="string">"1gi"</literal></expr>,

<expr><literal type="string">"1Gi"</literal></expr>,

<expr><literal type="string">"st(0, 123)"</literal></expr>,

<expr><literal type="string">"st(1, 123); ld(1)"</literal></expr>,

<expr><literal type="string">"lte(0, 1)"</literal></expr>,

<expr><literal type="string">"lte(1, 1)"</literal></expr>,

<expr><literal type="string">"lte(1, 0)"</literal></expr>,

<expr><literal type="string">"lt(0, 1)"</literal></expr>,

<expr><literal type="string">"lt(1, 1)"</literal></expr>,

<expr><literal type="string">"gt(1, 0)"</literal></expr>,

<expr><literal type="string">"gt(2, 7)"</literal></expr>,

<expr><literal type="string">"gte(122, 122)"</literal></expr>,

<expr><literal type="string">"st(0, 1); while(lte(ld(0), 100), st(1, ld(1)+ld(0));st(0, ld(0)+1)); ld(1)"</literal></expr>,

<expr><literal type="string">"st(1, 1); st(2, 2); st(0, 1); while(lte(ld(0),10), st(3, ld(1)+ld(2)); st(1, ld(2)); st(2, ld(3)); st(0, ld(0)+1)); ld(3)"</literal></expr>,

<expr><literal type="string">"while(0, 10)"</literal></expr>,

<expr><literal type="string">"st(0, 1); while(lte(ld(0),100), st(1, ld(1)+ld(0)); st(0, ld(0)+1))"</literal></expr>,

<expr><literal type="string">"isnan(1)"</literal></expr>,

<expr><literal type="string">"isnan(NAN)"</literal></expr>,

<expr><literal type="string">"isnan(INF)"</literal></expr>,

<expr><literal type="string">"isinf(1)"</literal></expr>,

<expr><literal type="string">"isinf(NAN)"</literal></expr>,

<expr><literal type="string">"isinf(INF)"</literal></expr>,

<expr><literal type="string">"floor(NAN)"</literal></expr>,

<expr><literal type="string">"floor(123.123)"</literal></expr>,

<expr><literal type="string">"floor(-123.123)"</literal></expr>,

<expr><literal type="string">"trunc(123.123)"</literal></expr>,

<expr><literal type="string">"trunc(-123.123)"</literal></expr>,

<expr><literal type="string">"ceil(123.123)"</literal></expr>,

<expr><literal type="string">"ceil(-123.123)"</literal></expr>,

<expr><literal type="string">"sqrt(1764)"</literal></expr>,

<expr><literal type="string">"isnan(sqrt(-1))"</literal></expr>,

<expr><literal type="string">"not(1)"</literal></expr>,

<expr><literal type="string">"not(NAN)"</literal></expr>,

<expr><literal type="string">"not(0)"</literal></expr>,

<expr><literal type="string">"6.0206dB"</literal></expr>,

<expr><literal type="string">"-3.0103dB"</literal></expr>,

<expr><literal type="string">"pow(0,1.23)"</literal></expr>,

<expr><literal type="string">"pow(PI,1.23)"</literal></expr>,

<expr><literal type="string">"PI^1.23"</literal></expr>,

<expr><literal type="string">"pow(-1,1.23)"</literal></expr>,

<expr><literal type="string">"if(1, 2)"</literal></expr>,

<expr><literal type="string">"if(1, 1, 2)"</literal></expr>,

<expr><literal type="string">"if(0, 1, 2)"</literal></expr>,

<expr><literal type="string">"ifnot(0, 23)"</literal></expr>,

<expr><literal type="string">"ifnot(1, NaN) + if(0, 1)"</literal></expr>,

<expr><literal type="string">"ifnot(1, 1, 2)"</literal></expr>,

<expr><literal type="string">"ifnot(0, 1, 2)"</literal></expr>,

<expr><literal type="string">"taylor(1, 1)"</literal></expr>,

<expr><literal type="string">"taylor(eq(mod(ld(1),4),1)-eq(mod(ld(1),4),3), PI/2, 1)"</literal></expr>,

<expr><literal type="string">"root(sin(ld(0))-1, 2)"</literal></expr>,

<expr><literal type="string">"root(sin(ld(0))+6+sin(ld(0)/12)-log(ld(0)), 100)"</literal></expr>,

<expr><literal type="string">"7000000B*random(0)"</literal></expr>,

<expr><literal type="string">"squish(2)"</literal></expr>,

<expr><literal type="string">"gauss(0.1)"</literal></expr>,

<expr><literal type="string">"hypot(4,3)"</literal></expr>,

<expr><literal type="string">"gcd(30,55)*print(min(9,1))"</literal></expr>,

<expr><literal type="string">"bitor(42, 12)"</literal></expr>,

<expr><literal type="string">"bitand(42, 12)"</literal></expr>,

<expr><literal type="string">"bitand(NAN, 1)"</literal></expr>,

<expr><literal type="string">"between(10, -3, 10)"</literal></expr>,

<expr><literal type="string">"between(-4, -2, -1)"</literal></expr>,

<expr><literal type="string">"between(1,2)"</literal></expr>,

<expr><literal type="string">"clip(0, 2, 1)"</literal></expr>,

<expr><literal type="string">"clip(0/0, 1, 2)"</literal></expr>,

<expr><literal type="string">"clip(0, 0/0, 1)"</literal></expr>,

<expr><name>NULL</name></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>expr</name> <operator>=</operator> <name>exprs</name></expr>;</init> <condition><expr><operator>*</operator><name>expr</name></expr>;</condition> <incr><expr><name>expr</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Evaluating '%s'\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>,

<argument><expr><name>const_names</name></expr></argument>, <argument><expr><name>const_values</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>isnan</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'%s' -&gt; nan\n\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"'%s' -&gt; %f\n\n"</literal></expr></argument>, <argument><expr><operator>*</operator><name>expr</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_expr_parse_and_eval failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="string">"1+(5-2)^(3-1)+1/2+sin(PI)-max(-2.2,-3.1)"</literal></expr></argument>,

<argument><expr><name>const_names</name></expr></argument>, <argument><expr><name>const_values</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%f == 12.7\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_expr_parse_and_eval failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="string">"80G/80Gi"</literal></expr></argument>,

<argument><expr><name>const_names</name></expr></argument>, <argument><expr><name>const_values</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%f == 0.931322575\n"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_expr_parse_and_eval failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1050</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><literal type="string">"1+(5-2)^(3-1)+1/2+sin(PI)-max(-2.2,-3.1)"</literal></expr></argument>,

<argument><expr><name>const_names</name></expr></argument>, <argument><expr><name>const_values</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_expr_parse_and_eval failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>STOP_TIMER</name><argument_list>(<argument><expr><literal type="string">"av_expr_parse_and_eval"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
