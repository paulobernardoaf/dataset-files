<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\blowfish.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/blowfish.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_VARIABLE_KEY_TESTS</name></cpp:macro> <cpp:value>34</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>plaintext_l</name><index>[<expr><name>NUM_VARIABLE_KEY_TESTS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0x10000000</literal></expr>, <expr><literal type="number">0x11111111</literal></expr>, <expr><literal type="number">0x11111111</literal></expr>,

<expr><literal type="number">0x01234567</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x01234567</literal></expr>, <expr><literal type="number">0x01A1D6D0</literal></expr>, <expr><literal type="number">0x5CD54CA8</literal></expr>,

<expr><literal type="number">0x0248D438</literal></expr>, <expr><literal type="number">0x51454B58</literal></expr>, <expr><literal type="number">0x42FD4430</literal></expr>, <expr><literal type="number">0x059B5E08</literal></expr>, <expr><literal type="number">0x0756D8E0</literal></expr>,

<expr><literal type="number">0x762514B8</literal></expr>, <expr><literal type="number">0x3BDD1190</literal></expr>, <expr><literal type="number">0x26955F68</literal></expr>, <expr><literal type="number">0x164D5E40</literal></expr>, <expr><literal type="number">0x6B056E18</literal></expr>,

<expr><literal type="number">0x004BD6EF</literal></expr>, <expr><literal type="number">0x480D3900</literal></expr>, <expr><literal type="number">0x437540C8</literal></expr>, <expr><literal type="number">0x072D43A0</literal></expr>, <expr><literal type="number">0x02FE5577</literal></expr>,

<expr><literal type="number">0x1D9D5C50</literal></expr>, <expr><literal type="number">0x30553228</literal></expr>, <expr><literal type="number">0x01234567</literal></expr>, <expr><literal type="number">0x01234567</literal></expr>, <expr><literal type="number">0x01234567</literal></expr>,

<expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>plaintext_r</name><index>[<expr><name>NUM_VARIABLE_KEY_TESTS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0x00000001</literal></expr>, <expr><literal type="number">0x11111111</literal></expr>, <expr><literal type="number">0x11111111</literal></expr>,

<expr><literal type="number">0x89ABCDEF</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x89ABCDEF</literal></expr>, <expr><literal type="number">0x39776742</literal></expr>, <expr><literal type="number">0x3DEF57DA</literal></expr>,

<expr><literal type="number">0x06F67172</literal></expr>, <expr><literal type="number">0x2DDF440A</literal></expr>, <expr><literal type="number">0x59577FA2</literal></expr>, <expr><literal type="number">0x51CF143A</literal></expr>, <expr><literal type="number">0x774761D2</literal></expr>,

<expr><literal type="number">0x29BF486A</literal></expr>, <expr><literal type="number">0x49372802</literal></expr>, <expr><literal type="number">0x35AF609A</literal></expr>, <expr><literal type="number">0x4F275232</literal></expr>, <expr><literal type="number">0x759F5CCA</literal></expr>,

<expr><literal type="number">0x09176062</literal></expr>, <expr><literal type="number">0x6EE762F2</literal></expr>, <expr><literal type="number">0x698F3CFA</literal></expr>, <expr><literal type="number">0x77075292</literal></expr>, <expr><literal type="number">0x8117F12A</literal></expr>,

<expr><literal type="number">0x18F728C2</literal></expr>, <expr><literal type="number">0x6D6F295A</literal></expr>, <expr><literal type="number">0x89ABCDEF</literal></expr>, <expr><literal type="number">0x89ABCDEF</literal></expr>, <expr><literal type="number">0x89ABCDEF</literal></expr>,

<expr><literal type="number">0xFFFFFFFF</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0x00000000</literal></expr>, <expr><literal type="number">0xFFFFFFFF</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>variable_key</name><index>[<expr><name>NUM_VARIABLE_KEY_TESTS</name></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x11</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0x6E</literal></expr>, <expr><literal type="number">0x57</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xD9</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x9D</literal></expr>, <expr><literal type="number">0xC1</literal></expr>, <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0x6E</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xA1</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0x4A</literal></expr>, <expr><literal type="number">0x0B</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x86</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x9E</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xB6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xB9</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0xF2</literal></expr>, <expr><literal type="number">0xCE</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0xE6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0xE3</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xFE</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xA7</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x16</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0x3B</literal></expr>, <expr><literal type="number">0x2F</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x37</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0xB5</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xCB</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x46</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0x0D</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xC2</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x5E</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x1A</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x61</literal></expr>, <expr><literal type="number">0x76</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x07</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0x3E</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x79</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0x5E</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0xA7</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x5D</literal></expr>, <expr><literal type="number">0x6D</literal></expr>, <expr><literal type="number">0x4C</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x29</literal></expr>, <expr><literal type="number">0xBF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x83</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x9B</literal></expr>, <expr><literal type="number">0x26</literal></expr>, <expr><literal type="number">0xD6</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x58</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x1C</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0xEF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x01</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x1F</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr>, <expr><literal type="number">0x0E</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF1</literal></expr>, <expr><literal type="number">0xFE</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xAB</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xEF</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>ciphertext_l</name><index>[<expr><name>NUM_VARIABLE_KEY_TESTS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x4EF99745</literal></expr>, <expr><literal type="number">0x51866FD5</literal></expr>, <expr><literal type="number">0x7D856F9A</literal></expr>, <expr><literal type="number">0x2466DD87</literal></expr>, <expr><literal type="number">0x61F9C380</literal></expr>,

<expr><literal type="number">0x7D0CC630</literal></expr>, <expr><literal type="number">0x4EF99745</literal></expr>, <expr><literal type="number">0x0ACEAB0F</literal></expr>, <expr><literal type="number">0x59C68245</literal></expr>, <expr><literal type="number">0xB1B8CC0B</literal></expr>,

<expr><literal type="number">0x1730E577</literal></expr>, <expr><literal type="number">0xA25E7856</literal></expr>, <expr><literal type="number">0x353882B1</literal></expr>, <expr><literal type="number">0x48F4D088</literal></expr>, <expr><literal type="number">0x432193B7</literal></expr>,

<expr><literal type="number">0x13F04154</literal></expr>, <expr><literal type="number">0x2EEDDA93</literal></expr>, <expr><literal type="number">0xD887E039</literal></expr>, <expr><literal type="number">0x5F99D04F</literal></expr>, <expr><literal type="number">0x4A057A3B</literal></expr>,

<expr><literal type="number">0x452031C1</literal></expr>, <expr><literal type="number">0x7555AE39</literal></expr>, <expr><literal type="number">0x53C55F9C</literal></expr>, <expr><literal type="number">0x7A8E7BFA</literal></expr>, <expr><literal type="number">0xCF9C5D7A</literal></expr>,

<expr><literal type="number">0xD1ABB290</literal></expr>, <expr><literal type="number">0x55CB3774</literal></expr>, <expr><literal type="number">0xFA34EC48</literal></expr>, <expr><literal type="number">0xA7907951</literal></expr>, <expr><literal type="number">0xC39E072D</literal></expr>,

<expr><literal type="number">0x014933E0</literal></expr>, <expr><literal type="number">0xF21E9A77</literal></expr>, <expr><literal type="number">0x24594688</literal></expr>, <expr><literal type="number">0x6B5C5A9C</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>ciphertext_r</name><index>[<expr><name>NUM_VARIABLE_KEY_TESTS</name></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x6198DD78</literal></expr>, <expr><literal type="number">0xB85ECB8A</literal></expr>, <expr><literal type="number">0x613063F2</literal></expr>, <expr><literal type="number">0x8B963C9D</literal></expr>, <expr><literal type="number">0x2281B096</literal></expr>,

<expr><literal type="number">0xAFDA1EC7</literal></expr>, <expr><literal type="number">0x6198DD78</literal></expr>, <expr><literal type="number">0xC6A0A28D</literal></expr>, <expr><literal type="number">0xEB05282B</literal></expr>, <expr><literal type="number">0x250F09A0</literal></expr>,

<expr><literal type="number">0x8BEA1DA4</literal></expr>, <expr><literal type="number">0xCF2651EB</literal></expr>, <expr><literal type="number">0x09CE8F1A</literal></expr>, <expr><literal type="number">0x4C379918</literal></expr>, <expr><literal type="number">0x8951FC98</literal></expr>,

<expr><literal type="number">0xD69D1AE5</literal></expr>, <expr><literal type="number">0xFFD39C79</literal></expr>, <expr><literal type="number">0x3C2DA6E3</literal></expr>, <expr><literal type="number">0x5B163969</literal></expr>, <expr><literal type="number">0x24D3977B</literal></expr>,

<expr><literal type="number">0xE4FADA8E</literal></expr>, <expr><literal type="number">0xF59B87BD</literal></expr>, <expr><literal type="number">0xB49FC019</literal></expr>, <expr><literal type="number">0x937E89A3</literal></expr>, <expr><literal type="number">0x4986ADB5</literal></expr>,

<expr><literal type="number">0x658BC778</literal></expr>, <expr><literal type="number">0xD13EF201</literal></expr>, <expr><literal type="number">0x47B268B2</literal></expr>, <expr><literal type="number">0x08EA3CAE</literal></expr>, <expr><literal type="number">0x9FAC631D</literal></expr>,

<expr><literal type="number">0xCDAFF6E4</literal></expr>, <expr><literal type="number">0xB71C49BC</literal></expr>, <expr><literal type="number">0x5754369A</literal></expr>, <expr><literal type="number">0x5D9E0A5A</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>plaintext</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><literal type="string">"BLOWFISH"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>plaintext2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">"BLOWFISHBLOWFISH"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ciphertext</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x4E</literal></expr>, <expr><literal type="number">0xD0</literal></expr>, <expr><literal type="number">0xFE</literal></expr>, <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0x13</literal></expr>, <expr><literal type="number">0xA2</literal></expr>, <expr><literal type="number">0x03</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>ciphertext2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x53</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0xf2</literal></expr>, <expr><literal type="number">0x1d</literal></expr>, <expr><literal type="number">0x99</literal></expr>,

<expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xc1</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IV</name></cpp:macro> <cpp:value>"blowfish"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_blowfish</name><parameter_list>(<parameter><decl><type><name>AVBlowfish</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>ref</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>dir</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_blowfish_crypt</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>ref</name></expr></argument>, <argument><expr><literal type="number">8</literal><operator>*</operator><name>len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s failed\ngot "</literal></expr></argument>, <argument><expr><name>test</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>dst</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nexpected "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal><operator>*</operator><name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x "</literal></expr></argument>, <argument><expr><name><name>ref</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmptext_l</name><index>[<expr><name>NUM_VARIABLE_KEY_TESTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>tmptext_r</name><index>[<expr><name>NUM_VARIABLE_KEY_TESTS</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBlowfish</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>av_blowfish_alloc</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_blowfish_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"abcdefghijklmnopqrstuvwxyz"</literal></expr></argument>, <argument><expr><literal type="number">26</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"decryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ciphertext</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Inplace encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>plaintext</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Inplace decryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>plaintext2</name></expr></argument>, <argument><expr><name>ciphertext2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"CBC encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ciphertext2</name></expr></argument>, <argument><expr><name>plaintext2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"CBC decryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>ciphertext2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"Inplace CBC encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>IV</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>test_blowfish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>plaintext2</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"Inplace CBC decryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmptext_l</name></expr></argument>, <argument><expr><name>plaintext_l</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>plaintext_l</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NUM_VARIABLE_KEY_TESTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tmptext_r</name></expr></argument>, <argument><expr><name>plaintext_r</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>plaintext_r</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>NUM_VARIABLE_KEY_TESTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_VARIABLE_KEY_TESTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_blowfish_init</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name><name>variable_key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_blowfish_crypt_ecb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmptext_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmptext_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmptext_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ciphertext_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>tmptext_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>ciphertext_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Test encryption failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">2</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_blowfish_crypt_ecb</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmptext_l</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmptext_r</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tmptext_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>plaintext_l</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <name><name>tmptext_r</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>plaintext_r</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Test decryption failed.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">3</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Test encryption/decryption success.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
