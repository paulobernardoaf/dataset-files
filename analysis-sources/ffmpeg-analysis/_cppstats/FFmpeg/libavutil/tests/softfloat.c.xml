<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\softfloat.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/softfloat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_0_017776489257</name> <init>= <expr><block>{<expr><literal type="number">0x1234</literal></expr>, <expr><literal type="number">12</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_1374_40625</name> <init>= <expr><block>{<expr><literal type="number">0xabcd</literal></expr>, <expr><literal type="number">25</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>SoftFloat</name></type> <name>FLOAT_0_1249694824218</name> <init>= <expr><block>{<expr><literal type="number">0xFFF</literal></expr>, <expr><literal type="number">15</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>SoftFloat</name></type> <name>one</name><init>= <expr><call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>SoftFloat</name></type> <name>sf1</name></decl>, <decl><type ref="prev"/><name>sf2</name></decl>, <decl><type ref="prev"/><name>sf3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d1</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>, <decl><type ref="prev"/><name>d3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name><operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>d1</name><operator>=</operator> <literal type="number">1</literal><operator>/</operator><operator>(</operator><name>d1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test1 double=%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name><operator>=</operator> <name>one</name></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>sf1</name><operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><call><name>av_normalize_sf</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>one</name></expr></argument>, <argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test1 sf =%d\n"</literal></expr></argument>, <argument><expr><call><name>av_sf2int</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>START_TIMER</name></type>

<name>d1</name><init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>d2</name><operator>=</operator> <name>i</name><operator>/</operator><literal type="number">100.0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>d1</name><operator>=</operator> <operator>(</operator><name>d1</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>*</operator><name>d2</name></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>STOP_TIMER</name><argument_list>(<argument><literal type="string">"float add mul"</literal></argument>)</argument_list></macro>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test2 double=%d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d1</name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">100</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>START_TIMER</name></type>

<name>sf1</name><init>= <expr><call><name>av_int2sf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>sf2</name><operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><call><name>av_int2sf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">1000</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><name>sf1</name><operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><call><name>av_add_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>one</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>STOP_TIMER</name><argument_list>(<argument><literal type="string">"softfloat add mul"</literal></argument>)</argument_list></macro>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test2 sf =%d (%d %d)\n"</literal></expr></argument>, <argument><expr><call><name>av_sf2int</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>exp</name></name></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>mant</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>d1</name> <operator>=</operator> <literal type="number">0.0177764893</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <literal type="number">1374.40625</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d3</name> <operator>=</operator> <literal type="number">0.1249694824</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>+=</operator> <name>d1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d3</name> <operator>+=</operator> <name>d2</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test3 double: %.10lf\n"</literal></expr></argument>, <argument><expr><name>d3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <name>FLOAT_0_017776489257</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sf2</name> <operator>=</operator> <name>FLOAT_1374_40625</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sf3</name> <operator>=</operator> <name>FLOAT_0_1249694824218</name></expr>;</expr_stmt>

<expr_stmt><expr><name>sf2</name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf3</name> <operator>=</operator> <call><name>av_add_sf</name><argument_list>(<argument><expr><name>sf3</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test3 softfloat: %.10lf (0x%08x %d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>av_sf2double</name><argument_list>(<argument><expr><name>sf3</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf3</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>sf3</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">0xFFFFFFF0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test4 softfloat: %.10lf (0x%08x %d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>av_sf2double</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">0x00000010</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test4 softfloat: %.10lf (0x%08x %d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>av_sf2double</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">0x1FFFFFFF</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test4 softfloat: %.10lf (0x%08x %d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>av_sf2double</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">0xE0000001</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test4 softfloat: %.10lf (0x%08x %d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>av_sf2double</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <operator>(</operator><name>SoftFloat</name><operator>)</operator><block>{ <expr><literal type="number">0x20000000</literal></expr>, <expr><name>MIN_EXP</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <call><name>av_mul_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test5 softfloat: %.10lf (0x%08x %d)\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>av_sf2double</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>exp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <operator>(</operator><name>SoftFloat</name><operator>)</operator><block>{ <expr><literal type="number">0x20000000</literal></expr>, <expr><name>MIN_EXP</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>sf2</name> <operator>=</operator> <operator>(</operator><name>SoftFloat</name><operator>)</operator><block>{ <expr><literal type="number">0x20000000</literal></expr>, <expr><name>MAX_EXP</name></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>av_cmp_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <call><name>av_cmp_sf</name><argument_list>(<argument><expr><name>sf2</name></expr></argument>, <argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <call><name>av_div_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"test6 softfloat: %.10lf (0x%08x %d) %d %d\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>av_sf2double</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>mant</name></name></expr></argument>, <argument><expr><name><name>sf1</name><operator>.</operator><name>exp</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <operator>-</operator><literal type="number">50</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">50</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>sf1</name><operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name><operator>=</operator> <operator>-</operator><literal type="number">50</literal></expr>;</init> <condition><expr><name>j</name><operator>&lt;</operator><literal type="number">50</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sf2</name><operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><name>j</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_cmp_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>^</operator><name>c</name><operator>)</operator><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_cmp_sf failed at %d %d as %X\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_gt_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name><operator>&gt;</operator><name>j</name><operator>)</operator> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_gt_sf failed at %d %d as %X\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><name>sf1</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>j</name> <operator>=</operator> <operator>-</operator><literal type="number">50</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">50</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>

<expr_stmt><expr><name>sf2</name> <operator>=</operator> <call><name>av_int2sf</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_cmp_sf</name><argument_list>(<argument><expr><name>sf2</name></expr></argument>, <argument><expr><name>sf1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>c</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>FFDIFFSIGN</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call><operator>^</operator><name>c</name><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_cmp_sf failed2 at %d %d as %X\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>av_gt_sf</name><argument_list>(<argument><expr><name>sf1</name></expr></argument>, <argument><expr><name>sf2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name><operator>&lt;</operator><name>j</name><operator>)</operator> <operator>!=</operator> <name>c</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"av_gt_sf failed2 at %d %d as %X\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for<control>(<init><expr><name>i</name><operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name><operator>&lt;</operator><literal type="number">4</literal><operator>*</operator><literal type="number">36</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>errs</name></decl>, <decl><type ref="prev"/><name>errc</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_sincos_sf</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><operator>(</operator><literal type="number">1ULL</literal><operator>&lt;&lt;</operator><literal type="number">32</literal><operator>)</operator><operator>/</operator><literal type="number">36</literal><operator>/</operator><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errs</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>s</name><operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator> <operator>-</operator> <call><name>sin</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name>M_PI</name><operator>/</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>errc</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><name>c</name><operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator> <operator>-</operator> <call><name>cos</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name>M_PI</name><operator>/</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>fabs</name><argument_list>(<argument><expr><name>errs</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0.00000002</literal> <operator>||</operator> <call><name>fabs</name><argument_list>(<argument><expr><name>errc</name></expr></argument>)</argument_list></call> <operator>&gt;</operator><literal type="number">0.001</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sincos FAIL %d %f %f %f %f\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>s</name><operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>c</name><operator>/</operator> <operator>(</operator><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal><operator>)</operator></expr></argument>, <argument><expr><call><name>sin</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name>M_PI</name><operator>/</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cos</name><argument_list>(<argument><expr><name>i</name><operator>*</operator><name>M_PI</name><operator>/</operator><literal type="number">36</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
