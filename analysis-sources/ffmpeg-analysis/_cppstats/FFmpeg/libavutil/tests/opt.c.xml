<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\opt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/error.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/rational.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/pixdesc.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TestContext</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>toggle</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>string</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>rational</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>video_rate</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>w</name></decl>, <name>h</name>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>pix_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>sample_fmt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>duration</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>channel_layout</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>binary</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>binary_size</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>binary1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>binary_size1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>binary2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>binary_size2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>num64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>flt</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>dbl</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>escape</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bool1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bool2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>bool3</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict1</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict2</name></decl>;</decl_stmt>

}</block></struct></type> <name>TestContext</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OFFSET</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>offsetof(TestContext, x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_FLAG_COOL</name></cpp:macro> <cpp:value>01</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_FLAG_LAME</name></cpp:macro> <cpp:value>02</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TEST_FLAG_MU</name></cpp:macro> <cpp:value>04</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVOption</name></type> <name><name>test_options</name><index>[]</index></name><init>= <expr><block>{

<expr><block>{<expr><literal type="string">"num"</literal></expr>, <expr><literal type="string">"set num"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"toggle"</literal></expr>, <expr><literal type="string">"set toggle"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>toggle</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"rational"</literal></expr>, <expr><literal type="string">"set rational"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>rational</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"string"</literal></expr>, <expr><literal type="string">"set string"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>string</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"default"</literal></expr> }</block></expr>, <expr><name>CHAR_MIN</name></expr>, <expr><name>CHAR_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"escape"</literal></expr>, <expr><literal type="string">"set escape str"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>escape</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_STRING</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"\\=,"</literal></expr> }</block></expr>, <expr><name>CHAR_MIN</name></expr>, <expr><name>CHAR_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"flags"</literal></expr>, <expr><literal type="string">"set flags"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLAGS</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"cool"</literal></expr>, <expr><literal type="string">"set cool flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TEST_FLAG_COOL</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"lame"</literal></expr>, <expr><literal type="string">"set lame flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TEST_FLAG_LAME</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"mu"</literal></expr>, <expr><literal type="string">"set mu flag"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>AV_OPT_TYPE_CONST</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>TEST_FLAG_MU</name></expr> }</block></expr>, <expr><name>INT_MIN</name></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="string">"flags"</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"size"</literal></expr>, <expr><literal type="string">"set size"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>w</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"200x300"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"pix_fmt"</literal></expr>, <expr><literal type="string">"set pixfmt"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>pix_fmt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_PIX_FMT_0BGR</name></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"sample_fmt"</literal></expr>, <expr><literal type="string">"set samplefmt"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>sample_fmt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_SAMPLE_FMT_S16</name></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"video_rate"</literal></expr>, <expr><literal type="string">"set videorate"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>video_rate</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"25"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"duration"</literal></expr>, <expr><literal type="string">"set duration"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DURATION</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1000</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"color"</literal></expr>, <expr><literal type="string">"set color"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_COLOR</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"pink"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"cl"</literal></expr>, <expr><literal type="string">"set channel layout"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>channel_layout</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <name>AV_CH_LAYOUT_HEXAGONAL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>INT64_MAX</name></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bin"</literal></expr>, <expr><literal type="string">"set binary value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>binary</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">"62696e00"</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bin1"</literal></expr>, <expr><literal type="string">"set binary value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>binary1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><name>NULL</name></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bin2"</literal></expr>, <expr><literal type="string">"set binary value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>binary2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BINARY</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name><operator>=</operator><literal type="string">""</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"num64"</literal></expr>, <expr><literal type="string">"set num 64bit"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>num64</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_INT64</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"flt"</literal></expr>, <expr><literal type="string">"set float"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>flt</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_FLOAT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"dbl"</literal></expr>, <expr><literal type="string">"set double"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dbl</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>, <expr><block>{ <expr><operator>.</operator><name>dbl</name> <operator>=</operator> <literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bool1"</literal></expr>, <expr><literal type="string">"set boolean value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bool1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bool2"</literal></expr>, <expr><literal type="string">"set boolean value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bool2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">1</literal></expr> }</block></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"bool3"</literal></expr>, <expr><literal type="string">"set boolean value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>bool3</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_BOOL</name></expr>, <expr><block>{ <expr><operator>.</operator><name>i64</name> <operator>=</operator> <literal type="number">0</literal></expr> }</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"dict1"</literal></expr>, <expr><literal type="string">"set dictionary value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dict1</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DICT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <name>NULL</name></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{<expr><literal type="string">"dict2"</literal></expr>, <expr><literal type="string">"set dictionary value"</literal></expr>, <expr><call><name>OFFSET</name><argument_list>(<argument><expr><name>dict2</name></expr></argument>)</argument_list></call></expr>, <expr><name>AV_OPT_TYPE_DICT</name></expr>, <expr><block>{ <expr><operator>.</operator><name>str</name> <operator>=</operator> <literal type="string">"happy=':-)'"</literal></expr>}</block></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr>,

<expr><block>{ <expr><name>NULL</name></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>test_get_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><literal type="string">"test"</literal></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>AVClass</name></type> <name>test_class</name> <init>= <expr><block>{

<expr><operator>.</operator><name>class_name</name> <operator>=</operator> <literal type="string">"TestContext"</literal></expr>,

<expr><operator>.</operator><name>item_name</name> <operator>=</operator> <name>test_get_name</name></expr>,

<expr><operator>.</operator><name>option</name> <operator>=</operator> <name>test_options</name></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_callback_help</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name>va_list</name></type> <name>vl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>vl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Testing default values\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>TestContext</name></type> <name>test_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num=%d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"toggle=%d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>toggle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"string=%s\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"escape=%s\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>escape</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"flags=%d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"rational=%d/%d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>rational</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>rational</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"video_rate=%d/%d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>video_rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>video_rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"width=%d height=%d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>w</name></name></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>h</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"pix_fmt=%s\n"</literal></expr></argument>, <argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>test_ctx</name><operator>.</operator><name>pix_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sample_fmt=%s\n"</literal></expr></argument>, <argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>test_ctx</name><operator>.</operator><name>sample_fmt</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"duration=%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>duration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"color=%d %d %d %d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"channel_layout=%"</literal><name>PRId64</name><literal type="string">"=%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>channel_layout</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>AV_CH_LAYOUT_HEXAGONAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>test_ctx</name><operator>.</operator><name>binary</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"binary=%x %x %x %x\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>test_ctx</name><operator>.</operator><name>binary</name></name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>test_ctx</name><operator>.</operator><name>binary</name></name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>test_ctx</name><operator>.</operator><name>binary</name></name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>test_ctx</name><operator>.</operator><name>binary</name></name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"binary_size=%d\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>binary_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"num64=%"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>num64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"flt=%.6f\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>flt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dbl=%.6f\n"</literal></expr></argument>, <argument><expr><name><name>test_ctx</name><operator>.</operator><name>dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_show2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_opt_is_set_to_default()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TestContext</name></type> <name>test_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_QUIET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>o</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_is_set_to_default_by_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name:%10s default:%d error:%s\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>ret</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>o</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_is_set_to_default_by_name</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name:%10s default:%d error:%s\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><operator>!</operator><operator>!</operator><name>ret</name></expr></argument>, <argument><expr><ternary><condition><expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_opt_get/av_opt_set()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>TestContext</name></type> <name>test_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>TestContext</name></type> <name>test2_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test2_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_QUIET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>o</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret1</name> <init>= <expr><name>AVERROR_BUG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret2</name> <init>= <expr><name>AVERROR_BUG</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret3</name> <init>= <expr><name>AVERROR_BUG</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret1</name> <operator>=</operator> <call><name>av_opt_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret2</name> <operator>=</operator> <call><name>av_opt_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test2_ctx</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>value1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret3</name> <operator>=</operator> <call><name>av_opt_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test2_ctx</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"name: %-11s get: %-16s set: %-16s get: %-16s %s\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,

<argument><expr><ternary><condition><expr><name>ret1</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>value1</name></expr> </then><else>: <expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret1</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ret2</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"OK"</literal></expr> </then><else>: <expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret2</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ret3</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>value2</name></expr> </then><else>: <expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret3</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,

<argument><expr><ternary><condition><expr><name>ret1</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret2</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret3</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>value1</name></expr></argument>, <argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"OK"</literal></expr> </then><else>: <expr><literal type="string">"Mismatch"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>value1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>value2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test2_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTest av_opt_serialize()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>TestContext</name></type> <name>test_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_QUIET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_serialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>test_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>test_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_set_options_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_serialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_set_options_string()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>TestContext</name></type> <name>test_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">":"</literal></expr>,

<expr><literal type="string">"="</literal></expr>,

<expr><literal type="string">"foo=:"</literal></expr>,

<expr><literal type="string">":=foo"</literal></expr>,

<expr><literal type="string">"=foo"</literal></expr>,

<expr><literal type="string">"foo="</literal></expr>,

<expr><literal type="string">"foo"</literal></expr>,

<expr><literal type="string">"foo=val"</literal></expr>,

<expr><literal type="string">"foo==val"</literal></expr>,

<expr><literal type="string">"toggle=:"</literal></expr>,

<expr><literal type="string">"string=:"</literal></expr>,

<expr><literal type="string">"toggle=1 : foo"</literal></expr>,

<expr><literal type="string">"toggle=100"</literal></expr>,

<expr><literal type="string">"toggle==1"</literal></expr>,

<expr><literal type="string">"flags=+mu-lame : num=42: toggle=0"</literal></expr>,

<expr><literal type="string">"num=42 : string=blahblah"</literal></expr>,

<expr><literal type="string">"rational=0 : rational=1/2 : rational=1/-1"</literal></expr>,

<expr><literal type="string">"rational=-1/0"</literal></expr>,

<expr><literal type="string">"size=1024x768"</literal></expr>,

<expr><literal type="string">"size=pal"</literal></expr>,

<expr><literal type="string">"size=bogus"</literal></expr>,

<expr><literal type="string">"pix_fmt=yuv420p"</literal></expr>,

<expr><literal type="string">"pix_fmt=2"</literal></expr>,

<expr><literal type="string">"pix_fmt=bogus"</literal></expr>,

<expr><literal type="string">"sample_fmt=s16"</literal></expr>,

<expr><literal type="string">"sample_fmt=2"</literal></expr>,

<expr><literal type="string">"sample_fmt=bogus"</literal></expr>,

<expr><literal type="string">"video_rate=pal"</literal></expr>,

<expr><literal type="string">"video_rate=25"</literal></expr>,

<expr><literal type="string">"video_rate=30000/1001"</literal></expr>,

<expr><literal type="string">"video_rate=30/1.001"</literal></expr>,

<expr><literal type="string">"video_rate=bogus"</literal></expr>,

<expr><literal type="string">"duration=bogus"</literal></expr>,

<expr><literal type="string">"duration=123.45"</literal></expr>,

<expr><literal type="string">"duration=1\\:23\\:45.67"</literal></expr>,

<expr><literal type="string">"color=blue"</literal></expr>,

<expr><literal type="string">"color=0x223300"</literal></expr>,

<expr><literal type="string">"color=0x42FF07AA"</literal></expr>,

<expr><literal type="string">"cl=stereo+downmix"</literal></expr>,

<expr><literal type="string">"cl=foo"</literal></expr>,

<expr><literal type="string">"bin=boguss"</literal></expr>,

<expr><literal type="string">"bin=111"</literal></expr>,

<expr><literal type="string">"bin=ffff"</literal></expr>,

<expr><literal type="string">"num64=bogus"</literal></expr>,

<expr><literal type="string">"num64=44"</literal></expr>,

<expr><literal type="string">"num64=44.4"</literal></expr>,

<expr><literal type="string">"num64=-1"</literal></expr>,

<expr><literal type="string">"num64=101"</literal></expr>,

<expr><literal type="string">"flt=bogus"</literal></expr>,

<expr><literal type="string">"flt=2"</literal></expr>,

<expr><literal type="string">"flt=2.2"</literal></expr>,

<expr><literal type="string">"flt=-1"</literal></expr>,

<expr><literal type="string">"flt=101"</literal></expr>,

<expr><literal type="string">"dbl=bogus"</literal></expr>,

<expr><literal type="string">"dbl=2"</literal></expr>,

<expr><literal type="string">"dbl=2.2"</literal></expr>,

<expr><literal type="string">"dbl=-1"</literal></expr>,

<expr><literal type="string">"dbl=101"</literal></expr>,

<expr><literal type="string">"bool1=true"</literal></expr>,

<expr><literal type="string">"bool2=auto"</literal></expr>,

<expr><literal type="string">"dict1='happy=\\:-):sad=\\:-('"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_QUIET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>silence_log</name> <init>= <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"rational=-1/0"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting options string '%s'\n"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>silence_log</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_set_options_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error '%s'\n"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK '%s'\n"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>av_log_set_callback</name><argument_list>(<argument><expr><name>log_callback_help</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nTesting av_opt_set_from_string()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>TestContext</name></type> <name>test_ctx</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">""</literal></expr>,

<expr><literal type="string">"5"</literal></expr>,

<expr><literal type="string">"5:hello"</literal></expr>,

<expr><literal type="string">"5:hello:size=pal"</literal></expr>,

<expr><literal type="string">"5:size=pal:hello"</literal></expr>,

<expr><literal type="string">":"</literal></expr>,

<expr><literal type="string">"="</literal></expr>,

<expr><literal type="string">" 5 : hello : size = pal "</literal></expr>,

<expr><literal type="string">"a_very_long_option_name_that_will_need_to_be_ellipsized_around_here=42"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>shorthand</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="string">"num"</literal></expr>, <expr><literal type="string">"string"</literal></expr>, <expr><name>NULL</name></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>test_ctx</name><operator>.</operator><name>class</name></name> <operator>=</operator> <operator>&amp;</operator><name>test_class</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_opt_set_defaults</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_QUIET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting options string '%s'\n"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_set_from_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>shorthand</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error '%s'\n"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"OK '%s'\n"</literal></expr></argument>, <argument><expr><name><name>options</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_opt_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>test_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
