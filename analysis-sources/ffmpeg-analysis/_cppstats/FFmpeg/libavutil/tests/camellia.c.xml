<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\camellia.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/camellia.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>Key</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x11</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x33</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0xdd</literal></expr>, <expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xff</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>rct</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x57</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0xbe</literal></expr>, <expr><literal type="number">0x43</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0xe9</literal></expr>,<expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0xf8</literal></expr>, <expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xce</literal></expr>, <expr><literal type="number">0xe7</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x09</literal></expr>, <expr><literal type="number">0xb9</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xcc</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x7d</literal></expr>, <expr><literal type="number">0xff</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x6c</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0x91</literal></expr>, <expr><literal type="number">0x9e</literal></expr>, <expr><literal type="number">0x3a</literal></expr>, <expr><literal type="number">0x75</literal></expr>, <expr><literal type="number">0x09</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>rpt</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>kbits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">192</literal></expr>, <expr><literal type="number">256</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name><name>iv</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVCAMELLIA</name></name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>av_camellia_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_camellia_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>Key</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>kbits</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_camellia_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>rpt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rct</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02x %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rct</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_camellia_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>rct</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02x %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_camellia_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>Key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="string">"HALLO123HALLO123"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_camellia_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>rpt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="string">"HALLO123HALLO123"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_camellia_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02x %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

</unit>
