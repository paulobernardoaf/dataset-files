<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\cast5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/cast5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>Key</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x9a</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x12</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rpt</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rct</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x8b</literal></expr>, <expr><literal type="number">0x4f</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xb2</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xeb</literal></expr>, <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x1a</literal></expr>, <expr><literal type="number">0x2c</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x27</literal></expr>, <expr><literal type="number">0x1b</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0x7a</literal></expr>, <expr><literal type="number">0xc8</literal></expr>, <expr><literal type="number">0x16</literal></expr>, <expr><literal type="number">0xd1</literal></expr>, <expr><literal type="number">0x6e</literal></expr>, <expr><literal type="number">0x9b</literal></expr>, <expr><literal type="number">0x30</literal></expr>, <expr><literal type="number">0x2e</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rct2</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{<expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xa6</literal></expr>, <expr><literal type="number">0xb3</literal></expr>, <expr><literal type="number">0x43</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0x9d</literal></expr>, <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0xca</literal></expr>, <expr><literal type="number">0x92</literal></expr>}</block></expr>,

<expr><block>{<expr><literal type="number">0xb2</literal></expr>, <expr><literal type="number">0xc9</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x31</literal></expr>, <expr><literal type="number">0xad</literal></expr>, <expr><literal type="number">0x71</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0xac</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x6e</literal></expr>}</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0xee</literal></expr>, <expr><literal type="number">0xa9</literal></expr>, <expr><literal type="number">0xd0</literal></expr>, <expr><literal type="number">0xa2</literal></expr>, <expr><literal type="number">0x49</literal></expr>, <expr><literal type="number">0xfd</literal></expr>, <expr><literal type="number">0x3b</literal></expr>, <expr><literal type="number">0xa6</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>rpt2</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>key_bits</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">128</literal></expr>, <expr><literal type="number">80</literal></expr>, <expr><literal type="number">40</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVCAST5</name></name> <modifier>*</modifier></type><name>cs</name></decl>;</decl_stmt>

<expr_stmt><expr><name>cs</name> <operator>=</operator> <call><name>av_cast5_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cs</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>av_cast5_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>Key</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_bits</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_cast5_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>rpt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rct</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02x %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rct</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_cast5_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>rct</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02x %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>Key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

<expr_stmt><expr><call><name>av_cast5_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_cast5_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_cast5_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_cast5_crypt</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rct2</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>rpt2</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02x %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rct2</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_cast5_init</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>Key</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>key_bits</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_cast5_crypt2</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rct2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_cast5_crypt2</name><argument_list>(<argument><expr><name>cs</name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rct2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02x %02x\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>rct2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>rpt2</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

</unit>
