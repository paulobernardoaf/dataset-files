<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\des.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/des.c"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/time.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>rand64</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>r</name> <init>= <expr><call><name>rand</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>r</name> <operator>=</operator> <operator>(</operator><name>r</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>|</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>test_key</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0x34</literal></expr>, <expr><literal type="number">0x56</literal></expr>, <expr><literal type="number">0x78</literal></expr>, <expr><literal type="number">0x9a</literal></expr>, <expr><literal type="number">0xbc</literal></expr>, <expr><literal type="number">0xde</literal></expr>, <expr><literal type="number">0xf0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>)</argument_list></call><index>[]</index> <operator>=</operator> <block>{ <expr><literal type="number">0xfe</literal></expr>, <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0xba</literal></expr>, <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0x76</literal></expr>, <expr><literal type="number">0x54</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0x10</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <specifier>const</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>crypt_ref</name></expr></argument>)</argument_list></call><index>[]</index> <operator>=</operator> <block>{ <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0xb6</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0x3d</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x18</literal></expr> }</block></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<expr_stmt><expr><specifier>static</specifier> <call><name>DECLARE_ALIGNED</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>uint8_t</name></expr></argument>, <argument><expr><name>large_buffer</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">10002</literal></expr>]</index><index>[<expr><literal type="number">8</literal></expr>]</index></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>cbc_key</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>,

<expr><literal type="number">0x23</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x01</literal></expr>,

<expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0x89</literal></expr>, <expr><literal type="number">0xab</literal></expr>, <expr><literal type="number">0xcd</literal></expr>, <expr><literal type="number">0xef</literal></expr>, <expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x23</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_test</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>cbc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDES</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>delay</name> <init>= <expr><ternary><condition><expr><name>cbc</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>decrypt</name></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>res</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name><name>large_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x4e6f772069732074ULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name><name>large_buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0x1234567890abcdefULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB64</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><literal type="number">0x1234567890abcdefULL</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_des_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>cbc_key</name></expr></argument>, <argument><expr><literal type="number">192</literal></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_des_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name><name>large_buffer</name><index>[<expr><name>delay</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>large_buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>cbc</name></expr> ?</condition><then> <expr><name>tmp</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>decrypt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name><name>large_buffer</name><index>[<expr><literal type="number">9999</literal> <operator>+</operator> <name>delay</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cbc</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name> <operator>==</operator> <literal type="number">0xc5cecf63ecec514cULL</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>res</name> <operator>==</operator> <literal type="number">0xcb191f85d1ed8439ULL</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>res</name> <operator>==</operator> <literal type="number">0x8325397644091a0aULL</literal></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<return>return <expr><name>res</name> <operator>==</operator> <literal type="number">0xdd17e8b8b437d232ULL</literal></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<union>union <name>word_byte</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>word</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>byte</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

}</block>;</union>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDES</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>union</name> <name>word_byte</name></name></type> <name><name>key</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>, <decl><type ref="prev"/><name>data</name></decl>, <decl><type ref="prev"/><name>ct</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>roundkeys</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><call><name>av_gettime</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>word</name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name>test_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>word</name></name> <operator>=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name>plain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>gen_roundkeys</name><argument_list>(<argument><expr><name>roundkeys</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>des_encdec</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>word</name></name></expr></argument>, <argument><expr><name>roundkeys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>AV_RB64</name><argument_list>(<argument><expr><name>crypt_ref</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Test 1 failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_des_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>test_key</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_des_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>plain</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>crypt_ref</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>crypt_ref</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Public API decryption failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>run_test</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>run_test</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>run_test</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>run_test</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Partial Monte-Carlo test failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>word</name> <operator>=</operator> <call><name>rand64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>word</name> <operator>=</operator> <call><name>rand64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>word</name> <operator>=</operator> <call><name>rand64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>data</name><operator>.</operator><name>word</name></name> <operator>=</operator> <call><name>rand64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_des_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte</name></expr></argument>, <argument><expr><literal type="number">192</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_des_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name><name>ct</name><operator>.</operator><name>byte</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>byte</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_des_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>byte</name></expr></argument>, <argument><expr><literal type="number">192</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_des_crypt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name><name>ct</name><operator>.</operator><name>byte</name></name></expr></argument>, <argument><expr><name><name>ct</name><operator>.</operator><name>byte</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>ct</name><operator>.</operator><name>word</name></name> <operator>!=</operator> <name><name>data</name><operator>.</operator><name>word</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Test 2 failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>GENTABLES</name></expr></argument>)</argument_list></call></expr></cpp:if>
<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"static const uint32_t S_boxes_P_shuffle[8][64] = {\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" {"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name> <init>= <expr><name><name>S_boxes</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <ternary><condition><expr><name>j</name> <operator>&amp;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>v</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr> </then><else>: <expr><name>v</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>&lt;&lt;=</operator> <literal type="number">28</literal> <operator>-</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>shuffle</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>P_shuffle</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>P_shuffle</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><ternary><condition><expr><operator>(</operator><name>j</name> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="string">"\n "</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"0x%08X,"</literal></expr></argument>, <argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n },\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
