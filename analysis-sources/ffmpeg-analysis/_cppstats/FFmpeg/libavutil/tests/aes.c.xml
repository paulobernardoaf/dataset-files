<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tests\aes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/timer.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/aes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/lfg.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/mem.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rkey</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x4b</literal></expr>, <expr><literal type="number">0xe5</literal></expr>, <expr><literal type="number">0xa3</literal></expr>,

<expr><literal type="number">0x74</literal></expr>, <expr><literal type="number">0xcf</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xfb</literal></expr>, <expr><literal type="number">0x47</literal></expr>, <expr><literal type="number">0x38</literal></expr>, <expr><literal type="number">0x59</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rpt</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x6a</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x7c</literal></expr>, <expr><literal type="number">0xd7</literal></expr>, <expr><literal type="number">0x7e</literal></expr>, <expr><literal type="number">0x12</literal></expr>, <expr><literal type="number">0xad</literal></expr>,

<expr><literal type="number">0x07</literal></expr>, <expr><literal type="number">0xea</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0xe8</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xc5</literal></expr>, <expr><literal type="number">0x3f</literal></expr>, <expr><literal type="number">0xa3</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rct</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">0x73</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x81</literal></expr>, <expr><literal type="number">0xc0</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0xb8</literal></expr>, <expr><literal type="number">0xf7</literal></expr>,

<expr><literal type="number">0xa5</literal></expr>, <expr><literal type="number">0x4a</literal></expr>, <expr><literal type="number">0x0c</literal></expr>, <expr><literal type="number">0x67</literal></expr>, <expr><literal type="number">0xa0</literal></expr>, <expr><literal type="number">0xc4</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0xcf</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="number">0x6d</literal></expr>, <expr><literal type="number">0x25</literal></expr>, <expr><literal type="number">0x1e</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x44</literal></expr>, <expr><literal type="number">0xb0</literal></expr>, <expr><literal type="number">0x51</literal></expr>, <expr><literal type="number">0xe0</literal></expr>,

<expr><literal type="number">0x4e</literal></expr>, <expr><literal type="number">0xaa</literal></expr>, <expr><literal type="number">0x6f</literal></expr>, <expr><literal type="number">0xb4</literal></expr>, <expr><literal type="number">0xdb</literal></expr>, <expr><literal type="number">0xf7</literal></expr>, <expr><literal type="number">0x84</literal></expr>, <expr><literal type="number">0x65</literal></expr> }</block></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>pt</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>temp</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>iv</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <call><name>av_aes_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log_set_level</name><argument_list>(<argument><expr><name>AV_LOG_DEBUG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_aes_init</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>rkey</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name><name>rct</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %02X %02X\n"</literal></expr></argument>,

<argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>rpt</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>ae</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ad</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVLFG</name></type> <name>prng</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ae</name> <operator>=</operator> <call><name>av_aes_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ad</name> <operator>=</operator> <call><name>av_aes_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ae</name> <operator>||</operator> <operator>!</operator><name>ad</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_aes_init</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"PI=3.141592654.."</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_aes_init</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><literal type="string">"PI=3.141592654.."</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_lfg_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>pt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>iv</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>av_lfg_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>prng</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<block>{<block_content>

<expr_stmt><expr><name>START_TIMER</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>iv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%02X %02X %02X %02X\n"</literal></expr></argument>,

<argument><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name><name>iv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name>ae</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>pt</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>i</name> <operator>&amp;</operator> <operator>(</operator><name>i</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%02X %02X %02X %02X\n"</literal></expr></argument>,

<argument><expr><name><name>temp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_aes_crypt</name><argument_list>(<argument><expr><name>ad</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STOP_TIMER</name><argument_list>(<argument><expr><literal type="string">"aes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>pt</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%d %d %02X %02X\n"</literal></expr></argument>,

<argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name><name>pt</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>temp</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ae</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ad</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>err</name></expr>;</return>

</block_content>}</block></function>

</unit>
