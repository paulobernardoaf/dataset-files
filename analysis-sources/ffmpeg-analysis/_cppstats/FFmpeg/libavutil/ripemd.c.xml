<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\ripemd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ripemd.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AVRIPEMD</name> <block>{

<decl_stmt><decl><type><name>uint8_t</name></type> <name>digest_len</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>state</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt> 

<function_decl><type><name>void</name></type> (<modifier>*</modifier><name>transform</name>)<parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>;</function_decl>

}</block></struct></type> <name>AVRIPEMD</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>av_ripemd_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVRIPEMD</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>AVRIPEMD</name></name> <modifier>*</modifier></type><name>av_ripemd_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVRIPEMD</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>KA</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x5a827999</literal></expr>, <expr><literal type="number">0x6ed9eba1</literal></expr>, <expr><literal type="number">0x8f1bbcdc</literal></expr>, <expr><literal type="number">0xa953fd4e</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>KB</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x50a28be6</literal></expr>, <expr><literal type="number">0x5c4dd124</literal></expr>, <expr><literal type="number">0x6d703ef3</literal></expr>, <expr><literal type="number">0x7a6d76e9</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ROTA</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr> , <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">7</literal></expr> , <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>ROTB</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">6</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>,

<expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">5</literal></expr>,

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">11</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>WA</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>,

<expr><literal type="number">7</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>,

<expr><literal type="number">3</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">1</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">4</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">13</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>WB</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">5</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">12</literal></expr>,

<expr><literal type="number">6</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>,

<expr><literal type="number">15</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">13</literal></expr>,

<expr><literal type="number">8</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">14</literal></expr>,

<expr><literal type="number">12</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">11</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rol</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((value) &lt;&lt; (bits)) | ((value) &gt;&gt; (32 - (bits))))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND128_0_TO_15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + (( b ^ c ^ d) + block[WA[n]]), ROTA[n]); e = rol(e + ((((f ^ g) &amp; h) ^ g) + block[WB[n]] + KB[0]), ROTB[n]); n++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND128_16_TO_31</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + ((((c ^ d) &amp; b) ^ d) + block[WA[n]] + KA[0]), ROTA[n]); e = rol(e + (((~g | f) ^ h) + block[WB[n]] + KB[1]), ROTB[n]); n++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND128_32_TO_47</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + (((~c | b) ^ d) + block[WA[n]] + KA[1]), ROTA[n]); e = rol(e + ((((g ^ h) &amp; f) ^ h) + block[WB[n]] + KB[2]), ROTB[n]); n++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND128_48_TO_63</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + ((((b ^ c) &amp; d) ^ c) + block[WA[n]] + KA[2]), ROTA[n]); e = rol(e + (( f ^ g ^ h) + block[WB[n]]), ROTB[n]); n++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R128_0</name></cpp:macro> <cpp:value>ROUND128_0_TO_15(a,b,c,d,e,f,g,h); ROUND128_0_TO_15(d,a,b,c,h,e,f,g); ROUND128_0_TO_15(c,d,a,b,g,h,e,f); ROUND128_0_TO_15(b,c,d,a,f,g,h,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R128_16</name></cpp:macro> <cpp:value>ROUND128_16_TO_31(a,b,c,d,e,f,g,h); ROUND128_16_TO_31(d,a,b,c,h,e,f,g); ROUND128_16_TO_31(c,d,a,b,g,h,e,f); ROUND128_16_TO_31(b,c,d,a,f,g,h,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R128_32</name></cpp:macro> <cpp:value>ROUND128_32_TO_47(a,b,c,d,e,f,g,h); ROUND128_32_TO_47(d,a,b,c,h,e,f,g); ROUND128_32_TO_47(c,d,a,b,g,h,e,f); ROUND128_32_TO_47(b,c,d,a,f,g,h,e)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R128_48</name></cpp:macro> <cpp:value>ROUND128_48_TO_63(a,b,c,d,e,f,g,h); ROUND128_48_TO_63(d,a,b,c,h,e,f,g); ROUND128_48_TO_63(c,d,a,b,g,h,e,f); ROUND128_48_TO_63(b,c,d,a,f,g,h,e)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd128_transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>e</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>f</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>h</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_16_TO_31</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_32_TO_47</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_48_TO_63</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt>

<expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt>

<expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt>

<expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>h</name> <operator>+=</operator> <name>c</name> <operator>+</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>+</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>a</name> <operator>+</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd256_transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_16_TO_31</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_32_TO_47</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND128_48_TO_63</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_16</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_32</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R128_48</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROTATE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x = rol(x, 10); y = rol(y, 10); n++</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND160_0_TO_15</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + (( b ^ c ^ d) + block[WA[n]]), ROTA[n]) + e; f = rol(f + (((~i | h) ^ g) + block[WB[n]] + KB[0]), ROTB[n]) + j; ROTATE(c,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND160_16_TO_31</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + ((((c ^ d) &amp; b) ^ d) + block[WA[n]] + KA[0]), ROTA[n]) + e; f = rol(f + ((((g ^ h) &amp; i) ^ h) + block[WB[n]] + KB[1]), ROTB[n]) + j; ROTATE(c,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND160_32_TO_47</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + (((~c | b) ^ d) + block[WA[n]] + KA[1]), ROTA[n]) + e; f = rol(f + (((~h | g) ^ i) + block[WB[n]] + KB[2]), ROTB[n]) + j; ROTATE(c,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND160_48_TO_63</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + ((((b ^ c) &amp; d) ^ c) + block[WA[n]] + KA[2]), ROTA[n]) + e; f = rol(f + ((((h ^ i) &amp; g) ^ i) + block[WB[n]] + KB[3]), ROTB[n]) + j; ROTATE(c,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROUND160_64_TO_79</name><parameter_list>(<parameter><type><name>a</name></type></parameter>,<parameter><type><name>b</name></type></parameter>,<parameter><type><name>c</name></type></parameter>,<parameter><type><name>d</name></type></parameter>,<parameter><type><name>e</name></type></parameter>,<parameter><type><name>f</name></type></parameter>,<parameter><type><name>g</name></type></parameter>,<parameter><type><name>h</name></type></parameter>,<parameter><type><name>i</name></type></parameter>,<parameter><type><name>j</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>a = rol(a + (((~d | c) ^ b) + block[WA[n]] + KA[3]), ROTA[n]) + e; f = rol(f + (( g ^ h ^ i) + block[WB[n]]), ROTB[n]) + j; ROTATE(c,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R160_0</name></cpp:macro> <cpp:value>ROUND160_0_TO_15(a,b,c,d,e,f,g,h,i,j); ROUND160_0_TO_15(e,a,b,c,d,j,f,g,h,i); ROUND160_0_TO_15(d,e,a,b,c,i,j,f,g,h); ROUND160_0_TO_15(c,d,e,a,b,h,i,j,f,g); ROUND160_0_TO_15(b,c,d,e,a,g,h,i,j,f)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R160_16</name></cpp:macro> <cpp:value>ROUND160_16_TO_31(e,a,b,c,d,j,f,g,h,i); ROUND160_16_TO_31(d,e,a,b,c,i,j,f,g,h); ROUND160_16_TO_31(c,d,e,a,b,h,i,j,f,g); ROUND160_16_TO_31(b,c,d,e,a,g,h,i,j,f); ROUND160_16_TO_31(a,b,c,d,e,f,g,h,i,j)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R160_32</name></cpp:macro> <cpp:value>ROUND160_32_TO_47(d,e,a,b,c,i,j,f,g,h); ROUND160_32_TO_47(c,d,e,a,b,h,i,j,f,g); ROUND160_32_TO_47(b,c,d,e,a,g,h,i,j,f); ROUND160_32_TO_47(a,b,c,d,e,f,g,h,i,j); ROUND160_32_TO_47(e,a,b,c,d,j,f,g,h,i)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R160_48</name></cpp:macro> <cpp:value>ROUND160_48_TO_63(c,d,e,a,b,h,i,j,f,g); ROUND160_48_TO_63(b,c,d,e,a,g,h,i,j,f); ROUND160_48_TO_63(a,b,c,d,e,f,g,h,i,j); ROUND160_48_TO_63(e,a,b,c,d,j,f,g,h,i); ROUND160_48_TO_63(d,e,a,b,c,i,j,f,g,h)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>R160_64</name></cpp:macro> <cpp:value>ROUND160_64_TO_79(b,c,d,e,a,g,h,i,j,f); ROUND160_64_TO_79(a,b,c,d,e,f,g,h,i,j); ROUND160_64_TO_79(e,a,b,c,d,j,f,g,h,i); ROUND160_64_TO_79(d,e,a,b,c,i,j,f,g,h); ROUND160_64_TO_79(c,d,e,a,b,h,i,j,f,g)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd160_transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>f</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>g</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>h</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>i</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>j</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_16_TO_31</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_32_TO_47</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_48_TO_63</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_64_TO_79</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>R160_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_16</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_16_TO_31</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_32</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_32_TO_47</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_48</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_48_TO_63</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_64</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_64</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_64</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_64_TO_79</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name>i</name> <operator>+=</operator> <name>c</name> <operator>+</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name>d</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name>e</name> <operator>+</operator> <name>f</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+</operator> <name>a</name> <operator>+</operator> <name>g</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>b</name> <operator>+</operator> <name>h</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ripemd320_transform</name><parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>buffer</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>e</name></decl>, <decl><type ref="prev"/><name>f</name></decl>, <decl><type ref="prev"/><name>g</name></decl>, <decl><type ref="prev"/><name>h</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>av_unused</name> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>block</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">9</literal></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>n</name></expr>]</index></name> <operator>=</operator> <call><name>AV_RL32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_16_TO_31</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">48</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_32_TO_47</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_48_TO_63</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <literal type="number">80</literal></expr>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>ROUND160_64_TO_79</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>e</name></expr>;</expr_stmt> <expr_stmt><expr><name>e</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt> <expr_stmt><expr><name>j</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name>i</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name>h</name> <operator>=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name>g</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name>f</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<expr_stmt><expr><name>R160_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_0</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_0</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_0_TO_15</name><argument_list>(<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_16</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_16</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_16_TO_31</name><argument_list>(<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_32</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_32</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_32_TO_47</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_48</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_48</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_48_TO_63</name><argument_list>(<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>b</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>,<argument><expr><name>g</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>R160_64</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_64</name></expr>;</expr_stmt> <expr_stmt><expr><name>R160_64</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>ROUND160_64_TO_79</name><argument_list>(<argument><expr><name>b</name></expr></argument>,<argument><expr><name>c</name></expr></argument>,<argument><expr><name>d</name></expr></argument>,<argument><expr><name>e</name></expr></argument>,<argument><expr><name>a</name></expr></argument>,<argument><expr><name>g</name></expr></argument>,<argument><expr><name>h</name></expr></argument>,<argument><expr><name>i</name></expr></argument>,<argument><expr><name>j</name></expr></argument>,<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>uint32_t</name></expr></argument>, <argument><expr><name>e</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>+=</operator> <name>e</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>+=</operator> <name>f</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>+=</operator> <name>g</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>+=</operator> <name>h</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt> <expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>+=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>av_cold</name> <name>int</name></type> <name>av_ripemd_init</name><parameter_list>(<parameter><decl><type><name>AVRIPEMD</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bits</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>digest_len</name></name> <operator>=</operator> <name>bits</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name>bits</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="number">128</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>ripemd128_transform</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">160</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC3D2E1F0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>ripemd160_transform</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">256</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x76543210</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFEDCBA98</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x89ABCDEF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01234567</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>ripemd256_transform</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="number">320</literal></expr>:</case> 

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xEFCDAB89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98BADCFE</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xC3D2E1F0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x76543210</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xFEDCBA98</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x89ABCDEF</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x01234567</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x3C2D1E0F</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name> <operator>=</operator> <name>ripemd320_transform</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name></type> <name>av_ripemd_update</name><argument_list>(<argument><expr><name>AVRIPEMD</name><operator>*</operator> <name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator> <name>data</name></expr></argument>, <argument><expr><name>unsigned</name> <name>int</name> <name>len</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>void</name> <name>av_ripemd_update</name><argument_list>(<argument><expr><name>AVRIPEMD</name><operator>*</operator> <name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name><operator>*</operator> <name>data</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><literal type="number">64</literal> <operator>==</operator> <name>j</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>j</name> <operator>+</operator> <name>len</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">63</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><operator>(</operator><name>i</name> <operator>=</operator> <literal type="number">64</literal> <operator>-</operator> <name>j</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>+</operator> <literal type="number">63</literal> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">64</literal></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name><name>ctx</name><operator>-&gt;</operator><name>transform</name></name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>data</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>av_ripemd_final</name><parameter_list>(<parameter><decl><type><name>AVRIPEMD</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>digest</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>finalcount</name> <init>= <expr><call><name>av_le2ne64</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_ripemd_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"\200"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>count</name></name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator> <operator>!=</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_ripemd_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_ripemd_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>finalcount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>digest_len</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>digest</name> <operator>+</operator> <name>i</name><operator>*</operator><literal type="number">4</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>state</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

</unit>
