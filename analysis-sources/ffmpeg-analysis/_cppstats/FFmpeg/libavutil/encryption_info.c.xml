<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\encryption_info.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"encryption_info.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_ENCRYPTION_INFO_EXTRA</name></cpp:macro> <cpp:value>24</cpp:value></cpp:define>

<function><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>av_encryption_info_alloc</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>subsample_count</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key_id_size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>iv_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>key_id</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>key_id_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name> <operator>=</operator> <name>key_id_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>iv</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>iv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>=</operator> <name>iv_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subsamples</name></name> <operator>=</operator> <call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>subsample_count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>subsamples</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subsample_count</name></name> <operator>=</operator> <name>subsample_count</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>key_id</name></name> <operator>||</operator> <operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>iv</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>subsamples</name></name> <operator>&amp;&amp;</operator> <name>subsample_count</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_encryption_info_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>info</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>av_encryption_info_clone</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_encryption_info_alloc</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>subsample_count</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>scheme</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>crypt_byte_block</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>crypt_byte_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ret</name><operator>-&gt;</operator><name>skip_byte_block</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>skip_byte_block</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>key_id</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ret</name><operator>-&gt;</operator><name>subsamples</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>subsamples</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>subsamples</name></name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>info</name><operator>-&gt;</operator><name>subsample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_encryption_info_free</name><parameter_list>(<parameter><decl><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>subsamples</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>av_encryption_info_get_side_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>key_id_size</name></decl>, <decl><type ref="prev"/><name>iv_size</name></decl>, <decl><type ref="prev"/><name>subsample_count</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name> <operator>||</operator> <name>size</name> <operator>&lt;</operator> <name>FF_ENCRYPTION_INFO_EXTRA</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>key_id_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>iv_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>subsample_count</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <name>FF_ENCRYPTION_INFO_EXTRA</name> <operator>+</operator> <name>key_id_size</name> <operator>+</operator> <name>iv_size</name> <operator>+</operator> <name>subsample_count</name> <operator>*</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>av_encryption_info_alloc</name><argument_list>(<argument><expr><name>subsample_count</name></expr></argument>, <argument><expr><name>key_id_size</name></expr></argument>, <argument><expr><name>iv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>scheme</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>crypt_byte_block</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>skip_byte_block</name></name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>key_id_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name>buffer</name> <operator>+</operator> <name>key_id_size</name> <operator>+</operator> <literal type="number">24</literal></expr></argument>, <argument><expr><name>iv_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <name>key_id_size</name> <operator>+</operator> <name>iv_size</name> <operator>+</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>subsample_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subsamples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_of_clear_data</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>subsamples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_of_protected_data</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>buffer</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>info</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>av_encryption_info_add_side_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVEncryptionInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>UINT32_MAX</name> <operator>-</operator> <name>FF_ENCRYPTION_INFO_EXTRA</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name> <operator>||</operator>

<name>UINT32_MAX</name> <operator>-</operator> <name>FF_ENCRYPTION_INFO_EXTRA</name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>||</operator>

<operator>(</operator><name>UINT32_MAX</name> <operator>-</operator> <name>FF_ENCRYPTION_INFO_EXTRA</name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name> <operator>-</operator> <name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name><operator>)</operator> <operator>/</operator> <literal type="number">8</literal> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>subsample_count</name></name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name>FF_ENCRYPTION_INFO_EXTRA</name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name> <operator>+</operator> <name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name> <operator>+</operator>

<operator>(</operator><name><name>info</name><operator>-&gt;</operator><name>subsample_count</name></name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>=</operator> <name>buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>*</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>scheme</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>crypt_byte_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>skip_byte_block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">16</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">20</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>subsample_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <name><name>info</name><operator>-&gt;</operator><name>iv_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>subsample_count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>subsamples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_of_clear_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>subsamples</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes_of_protected_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_ENCRYPTION_INIT_INFO_EXTRA</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<function><type><name>AVEncryptionInitInfo</name> <modifier>*</modifier></type><name>av_encryption_init_info_alloc</name><parameter_list>(

<parameter><decl><type><name>uint32_t</name></type> <name>system_id_size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_key_ids</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>key_id_size</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>data_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVEncryptionInitInfo</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>info</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>system_id</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>system_id_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>system_id_size</name></name> <operator>=</operator> <name>system_id_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>key_ids</name></name> <operator>=</operator> <ternary><condition><expr><name>key_id_size</name></expr> ?</condition><then> <expr><call><name>av_mallocz_array</name><argument_list>(<argument><expr><name>num_key_ids</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name><name>info</name><operator>-&gt;</operator><name>key_ids</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>num_key_ids</name></name> <operator>=</operator> <name>num_key_ids</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>key_id_size</name></name> <operator>=</operator> <name>key_id_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>data_size</name></name> <operator>=</operator> <name>data_size</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>system_id</name></name> <operator>&amp;&amp;</operator> <name>system_id_size</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>data</name></name> <operator>&amp;&amp;</operator> <name>data_size</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>key_ids</name></name> <operator>&amp;&amp;</operator> <name>num_key_ids</name> <operator>&amp;&amp;</operator> <name>key_id_size</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_encryption_init_info_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key_id_size</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_key_ids</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>key_ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>av_mallocz</name><argument_list>(<argument><expr><name>key_id_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>info</name><operator>-&gt;</operator><name>key_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_encryption_init_info_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>info</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_encryption_init_info_free</name><parameter_list>(<parameter><decl><type><name>AVEncryptionInitInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>info</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>info</name><operator>-&gt;</operator><name>num_key_ids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_encryption_init_info_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>system_id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>AVEncryptionInitInfo</name> <modifier>*</modifier></type><name>av_encryption_init_info_get_side_data</name><parameter_list>(

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>side_data</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>side_data_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVEncryptionInitInfo</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>info</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>temp_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>system_id_size</name></decl>, <decl><type ref="prev"/><name>num_key_ids</name></decl>, <decl><type ref="prev"/><name>key_id_size</name></decl>, <decl><type ref="prev"/><name>data_size</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>init_info_count</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>side_data</name> <operator>||</operator> <name>side_data_size</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>init_info_count</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data_size</name> <operator>-=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>init_info_count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>&lt;</operator> <name>FF_ENCRYPTION_INIT_INFO_EXTRA</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_encryption_init_info_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>system_id_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>side_data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>num_key_ids</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>side_data</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>key_id_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>side_data</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>data_size</name> <operator>=</operator> <call><name>AV_RB32</name><argument_list>(<argument><expr><name>side_data</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>side_data_size</name> <operator>-</operator> <name>FF_ENCRYPTION_INIT_INFO_EXTRA</name> <operator>&lt;</operator> <name>system_id_size</name> <operator>+</operator> <name>data_size</name> <operator>+</operator> <name>num_key_ids</name> <operator>*</operator> <name>key_id_size</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_encryption_init_info_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>side_data</name> <operator>+=</operator> <name>FF_ENCRYPTION_INIT_INFO_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data_size</name> <operator>-=</operator> <name>FF_ENCRYPTION_INIT_INFO_EXTRA</name></expr>;</expr_stmt>

<expr_stmt><expr><name>temp_info</name> <operator>=</operator> <call><name>av_encryption_init_info_alloc</name><argument_list>(<argument><expr><name>system_id_size</name></expr></argument>, <argument><expr><name>num_key_ids</name></expr></argument>, <argument><expr><name>key_id_size</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>temp_info</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_encryption_init_info_free</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name>ret</name> <operator>=</operator> <name>temp_info</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>temp_info</name></expr>;</expr_stmt>

<expr_stmt><expr><name>info</name> <operator>=</operator> <name>temp_info</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>system_id</name></name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>system_id_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>+=</operator> <name>system_id_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data_size</name> <operator>-=</operator> <name>system_id_size</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_key_ids</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>key_ids</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>key_id_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>+=</operator> <name>key_id_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data_size</name> <operator>-=</operator> <name>key_id_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>side_data</name></expr></argument>, <argument><expr><name>data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data</name> <operator>+=</operator> <name>data_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>side_data_size</name> <operator>-=</operator> <name>data_size</name></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint8_t</name> <modifier>*</modifier></type><name>av_encryption_init_info_add_side_data</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVEncryptionInitInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><name>size_t</name> <modifier>*</modifier></type><name>side_data_size</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVEncryptionInitInfo</name> <modifier>*</modifier></type><name>cur_info</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buffer</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cur_buffer</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>init_info_count</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>temp_side_data_size</name></decl>;</decl_stmt>

<expr_stmt><expr><name>temp_side_data_size</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>init_info_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cur_info</name> <operator>=</operator> <name>info</name></expr>;</init> <condition><expr><name>cur_info</name></expr>;</condition> <incr><expr><name>cur_info</name> <operator>=</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>temp_side_data_size</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>FF_ENCRYPTION_INIT_INFO_EXTRA</name> <operator>+</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>system_id_size</name></name> <operator>+</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>init_info_count</name> <operator>==</operator> <name>UINT32_MAX</name> <operator>||</operator> <name>temp_side_data_size</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>init_info_count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>cur_info</name><operator>-&gt;</operator><name>num_key_ids</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>temp_side_data_size</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>cur_info</name><operator>-&gt;</operator><name>num_key_ids</name></name> <operator>*</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>temp_side_data_size</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><operator>*</operator><name>side_data_size</name> <operator>=</operator> <name>temp_side_data_size</name></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>=</operator> <name>buffer</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><operator>*</operator><name>side_data_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name>init_info_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>cur_info</name> <operator>=</operator> <name>info</name></expr>;</init> <condition><expr><name>cur_info</name></expr>;</condition> <incr><expr><name>cur_info</name> <operator>=</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>system_id_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>num_key_ids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WB32</name><argument_list>(<argument><expr><name>cur_buffer</name> <operator>+</operator> <literal type="number">12</literal></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>system_id</name></name></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>system_id_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>system_id_size</name></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>num_key_ids</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>key_ids</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>key_id_size</name></name></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name><name>cur_info</name><operator>-&gt;</operator><name>data_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cur_buffer</name></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>cur_info</name><operator>-&gt;</operator><name>data_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>cur_buffer</name> <operator>+=</operator> <name><name>cur_info</name><operator>-&gt;</operator><name>data_size</name></name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><name>buffer</name></expr>;</return>

</block_content>}</block></function>

</unit>
