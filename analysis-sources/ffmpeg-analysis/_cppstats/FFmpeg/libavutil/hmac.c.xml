<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\hmac.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hmac.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sha512.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_HASHLEN</name></cpp:macro> <cpp:value>64</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_BLOCKLEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hmac_final</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hmac_update</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hmac_update</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<typedef>typedef <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>hmac_init</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<struct>struct <name>AVHMAC</name> <block>{

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hash</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>blocklen</name></decl>, <decl><type ref="prev"/><name>hashlen</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hmac_final</name></type> <name>final</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hmac_update</name></type> <name>update</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>hmac_init</name></type> <name>init</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><name>MAX_BLOCKLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>keylen</name></decl>;</decl_stmt>

}</block>;</struct>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_SHA</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_cold void sha ##bits ##_init(void *ctx) { av_sha_init(ctx, bits); }</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_SHA512</name><parameter_list>(<parameter><type><name>bits</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>static av_cold void sha ##bits ##_init(void *ctx) { av_sha512_init(ctx, bits); }</cpp:value></cpp:define>

<macro><name>DEFINE_SHA</name><argument_list>(<argument><literal type="number">160</literal></argument>)</argument_list></macro>

<macro><name>DEFINE_SHA</name><argument_list>(<argument><literal type="number">224</literal></argument>)</argument_list></macro>

<macro><name>DEFINE_SHA</name><argument_list>(<argument><literal type="number">256</literal></argument>)</argument_list></macro>

<macro><name>DEFINE_SHA512</name><argument_list>(<argument><literal type="number">384</literal></argument>)</argument_list></macro>

<macro><name>DEFINE_SHA512</name><argument_list>(<argument><literal type="number">512</literal></argument>)</argument_list></macro>

<function><type><name>AVHMAC</name> <modifier>*</modifier></type><name>av_hmac_alloc</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVHMACType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_HMAC_MD5</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <operator>(</operator><name>hmac_init</name><operator>)</operator> <name>av_md5_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>(</operator><name>hmac_update</name><operator>)</operator> <name>av_md5_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <operator>(</operator><name>hmac_final</name><operator>)</operator> <name>av_md5_final</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>av_md5_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_HMAC_SHA1</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>sha160_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>(</operator><name>hmac_update</name><operator>)</operator> <name>av_sha_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <operator>(</operator><name>hmac_final</name><operator>)</operator> <name>av_sha_final</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>av_sha_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_HMAC_SHA224</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>sha224_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>(</operator><name>hmac_update</name><operator>)</operator> <name>av_sha_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <operator>(</operator><name>hmac_final</name><operator>)</operator> <name>av_sha_final</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>av_sha_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_HMAC_SHA256</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>sha256_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>(</operator><name>hmac_update</name><operator>)</operator> <name>av_sha_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <operator>(</operator><name>hmac_final</name><operator>)</operator> <name>av_sha_final</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>av_sha_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_HMAC_SHA384</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name> <operator>=</operator> <literal type="number">48</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>sha384_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>(</operator><name>hmac_update</name><operator>)</operator> <name>av_sha512_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <operator>(</operator><name>hmac_final</name><operator>)</operator> <name>av_sha512_final</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>av_sha512_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_HMAC_SHA512</name></expr>:</case>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name> <operator>=</operator> <literal type="number">128</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name> <operator>=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>init</name></name> <operator>=</operator> <name>sha512_init</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>update</name></name> <operator>=</operator> <operator>(</operator><name>hmac_update</name><operator>)</operator> <name>av_sha512_update</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>final</name></name> <operator>=</operator> <operator>(</operator><name>hmac_final</name><operator>)</operator> <name>av_sha512_final</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name> <operator>=</operator> <call><name>av_sha512_alloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hmac_free</name><parameter_list>(<parameter><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hmac_init</name><parameter_list>(<parameter><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keylen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>block</name><index>[<expr><name>MAX_BLOCKLEN</name></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>keylen</name> <operator>&gt;</operator> <name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>final</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>keylen</name></name> <operator>=</operator> <name>keylen</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <literal type="number">0x36</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x36</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_hmac_update</name><parameter_list>(<parameter><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_hmac_final</name><parameter_list>(<parameter><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>block</name><index>[<expr><name>MAX_BLOCKLEN</name></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>outlen</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>final</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>init</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^</operator> <literal type="number">0x5C</literal></expr>;</expr_stmt></block_content></block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>keylen</name></name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>block</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0x5C</literal></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>block</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>blocklen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>update</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name><name>c</name><operator>-&gt;</operator><name>final</name></name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>hash</name></name></expr></argument>, <argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>c</name><operator>-&gt;</operator><name>hashlen</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_hmac_calc</name><parameter_list>(<parameter><decl><type><name>AVHMAC</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>keylen</name></decl></parameter>,

<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>outlen</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_hmac_init</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keylen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_hmac_update</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_hmac_final</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>out</name></expr></argument>, <argument><expr><name>outlen</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

</unit>
