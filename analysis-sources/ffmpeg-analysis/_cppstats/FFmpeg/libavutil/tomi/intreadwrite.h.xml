<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tomi\intreadwrite.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB16</name></cpp:macro> <cpp:value>AV_RB16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint16_t</name></type> <name>AV_RB16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("loadacc, (%1+) \n\t"

"rol8 \n\t"

"storeacc, %0 \n\t"

"loadacc, (%1+) \n\t"

"add, %0 \n\t"

: "=r"(v), "+a"(p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB16</name></cpp:macro> <cpp:value>AV_WB16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WB16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> ("loadacc, %1 \n\t"

"lsr8 \n\t"

"storeacc, (%0+) \n\t"

"loadacc, %1 \n\t"

"storeacc, (%0+) \n\t"

: "+&amp;a"(p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL16</name></cpp:macro> <cpp:value>AV_RL16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint16_t</name></type> <name>AV_RL16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint16_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("loadacc, (%1+) \n\t"

"storeacc, %0 \n\t"

"loadacc, (%1+) \n\t"

"rol8 \n\t"

"add, %0 \n\t"

: "=r"(v), "+a"(p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WL16</name></cpp:macro> <cpp:value>AV_WL16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WL16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> ("loadacc, %1 \n\t"

"storeacc, (%0+) \n\t"

"lsr8 \n\t"

"storeacc, (%0+) \n\t"

: "+&amp;a"(p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RB32</name></cpp:macro> <cpp:value>AV_RB32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RB32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("loadacc, (%1+) \n\t"

"rol8 \n\t"

"rol8 \n\t"

"rol8 \n\t"

"storeacc, %0 \n\t"

"loadacc, (%1+) \n\t"

"rol8 \n\t"

"rol8 \n\t"

"add, %0 \n\t"

"loadacc, (%1+) \n\t"

"rol8 \n\t"

"add, %0 \n\t"

"loadacc, (%1+) \n\t"

"add, %0 \n\t"

: "=r"(v), "+a"(p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WB32</name></cpp:macro> <cpp:value>AV_WB32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WB32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> ("loadacc, #4 \n\t"

"add, %0 \n\t"

"loadacc, %1 \n\t"

"storeacc, (-%0) \n\t"

"lsr8 \n\t"

"storeacc, (-%0) \n\t"

"lsr8 \n\t"

"storeacc, (-%0) \n\t"

"lsr8 \n\t"

"storeacc, (-%0) \n\t"

: "+&amp;a"(p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RL32</name></cpp:macro> <cpp:value>AV_RL32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RL32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("loadacc, (%1+) \n\t"

"storeacc, %0 \n\t"

"loadacc, (%1+) \n\t"

"rol8 \n\t"

"add, %0 \n\t"

"loadacc, (%1+) \n\t"

"rol8 \n\t"

"rol8 \n\t"

"add, %0 \n\t"

"loadacc, (%1+) \n\t"

"rol8 \n\t"

"rol8 \n\t"

"rol8 \n\t"

"add, %0 \n\t"

: "=r"(v), "+a"(p));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WL32</name></cpp:macro> <cpp:value>AV_WL32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WL32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ <specifier>volatile</specifier> ("loadacc, %1 \n\t"

"storeacc, (%0+) \n\t"

"lsr8 \n\t"

"storeacc, (%0+) \n\t"

"lsr8 \n\t"

"storeacc, (%0+) \n\t"

"lsr8 \n\t"

"storeacc, (%0+) \n\t"

: "+&amp;a"(p) : "r"(v));</asm>

</block_content>}</block></function>

</unit>
