<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\aes.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"aes_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>av_aes_size</name><init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVAES</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>AVAES</name></name> <modifier>*</modifier></type><name>av_aes_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVAES</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>rcon</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="number">0x01</literal></expr>, <expr><literal type="number">0x02</literal></expr>, <expr><literal type="number">0x04</literal></expr>, <expr><literal type="number">0x08</literal></expr>, <expr><literal type="number">0x10</literal></expr>, <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x1b</literal></expr>, <expr><literal type="number">0x36</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>sbox</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>inv_sbox</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>enc_multbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>dec_multbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>enc_multbl</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name><name>dec_multbl</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_BIGENDIAN</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &gt;&gt; (s)) | ((x) &lt;&lt; (32-(s))))</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((x) &lt;&lt; (s)) | ((x) &gt;&gt; (32-(s))))</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>addkey</name><parameter_list>(<parameter><decl><type><name>av_aes_block</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>av_aes_block</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>av_aes_block</name> <modifier>*</modifier></type><name>round_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>round_key</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>src</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>round_key</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>addkey_s</name><parameter_list>(<parameter><decl><type><name>av_aes_block</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>av_aes_block</name> <modifier>*</modifier></type><name>round_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN64</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>round_key</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>AV_RN64</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>round_key</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>addkey_d</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>av_aes_block</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>av_aes_block</name> <modifier>*</modifier></type><name>round_key</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name><name>round_key</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WN64</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name><name>src</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name><name>round_key</name><operator>-&gt;</operator><name>u64</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>subshift</name><parameter_list>(<parameter><decl><type><name>av_aes_block</name></type> <name><name>s0</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>box</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>av_aes_block</name> <modifier>*</modifier></type><name>s1</name> <init>= <expr><operator>(</operator><name>av_aes_block</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u8</name> <operator>-</operator> <name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>av_aes_block</name> <modifier>*</modifier></type><name>s3</name> <init>= <expr><operator>(</operator><name>av_aes_block</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u8</name> <operator>+</operator> <name>s</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">4</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">8</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">7</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">11</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">15</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">15</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">14</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s0</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">14</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s0</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">6</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">13</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[<expr><literal type="number">13</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">9</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>s3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>box</name><index>[<expr><name><name>s3</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name><name>u8</name><index>[ <expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>mix_core</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>multbl</name><index>[]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<return>return <expr><name><name>multbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>^</operator> <call><name>ROT</name><argument_list>(<argument><expr><name><name>multbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>ROT</name><argument_list>(<argument><expr><name><name>multbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>^</operator> <call><name>ROT</name><argument_list>(<argument><expr><name><name>multbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<return>return <expr><name><name>multbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>a</name></expr>]</index></name> <operator>^</operator> <name><name>multbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>b</name></expr>]</index></name> <operator>^</operator> <name><name>multbl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>c</name></expr>]</index></name> <operator>^</operator> <name><name>multbl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>d</name></expr>]</index></name></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>mix</name><parameter_list>(<parameter><decl><type><name>av_aes_block</name></type> <name><name>state</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name><name>multbl</name><index>[]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s1</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s3</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>uint8_t</name> <argument_list>(<argument><expr><operator>*</operator><name>src</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">4</literal></expr>]</index> <operator>=</operator> <name><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>u8x4</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>mix_core</name><argument_list>(<argument><expr><name>multbl</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s1</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s3</name></expr> ]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>mix_core</name><argument_list>(<argument><expr><name>multbl</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>mix_core</name><argument_list>(<argument><expr><name>multbl</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s3</name></expr> ]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s1</name></expr> ]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>mix_core</name><argument_list>(<argument><expr><name>multbl</name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s1</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>src</name><index>[<expr><name>s3</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>aes_crypt</name><parameter_list>(<parameter><decl><type><name>AVAES</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>s</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sbox</name></decl></parameter>,

<parameter><decl><type><name>uint32_t</name></type> <name><name>multbl</name><index>[]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>r</name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>rounds</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>r</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>r</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>multbl</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>-</operator> <name>s</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>+</operator> <name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addkey</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><name>r</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>subshift</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>sbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aes_encrypt</name><parameter_list>(<parameter><decl><type><name>AVAES</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>addkey_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><name>rounds</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>addkey_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>aes_crypt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>sbox</name></expr></argument>, <argument><expr><name>enc_multbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>addkey_d</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>aes_decrypt</name><parameter_list>(<parameter><decl><type><name>AVAES</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rounds</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<while>while <condition>(<expr><name>count</name><operator>--</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>addkey_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><name>rounds</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>aes_crypt</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>inv_sbox</name></expr></argument>, <argument><expr><name>dec_multbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>iv</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>addkey_s</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>iv</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>addkey_d</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>state</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>dst</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_aes_crypt</name><parameter_list>(<parameter><decl><type><name>AVAES</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>iv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name><name>a</name><operator>-&gt;</operator><name>crypt</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>iv</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>rounds</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_multbl2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>tbl</name><index>[]</index><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name><name>c</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>log8</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>alog8</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sbox</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name> <init>= <expr><name><name>sbox</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>x</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>, <decl><type ref="prev"/><name>l</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>x</name> <operator>=</operator> <name><name>log8</name><index>[<expr><name>x</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <name><name>alog8</name><index>[<expr><name>x</name> <operator>+</operator> <name><name>log8</name><index>[<expr><name><name>c</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>l</name> <operator>=</operator> <name><name>alog8</name><index>[<expr><name>x</name> <operator>+</operator> <name><name>log8</name><index>[<expr><name><name>c</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>alog8</name><index>[<expr><name>x</name> <operator>+</operator> <name><name>log8</name><index>[<expr><name><name>c</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <name><name>alog8</name><index>[<expr><name>x</name> <operator>+</operator> <name><name>log8</name><index>[<expr><name><name>c</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>AV_NE</name><argument_list>(<argument><expr><call><name>MKBETAG</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>MKTAG</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><name>l</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>CONFIG_SMALL</name></expr></cpp:if>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROT</name><argument_list>(<argument><expr><name><name>tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROT</name><argument_list>(<argument><expr><name><name>tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tbl</name><index>[<expr><literal type="number">3</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>ROT</name><argument_list>(<argument><expr><name><name>tbl</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_aes_init</name><parameter_list>(<parameter><decl><type><name>AVAES</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_bits</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>decrypt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>t</name></decl>, <decl><type ref="prev"/><name>rconpointer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>tk</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>KC</name> <init>= <expr><name>key_bits</name> <operator>&gt;&gt;</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>rounds</name> <init>= <expr><name>KC</name> <operator>+</operator> <literal type="number">6</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>log8</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>alog8</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>crypt</name></name> <operator>=</operator> <ternary><condition><expr><name>decrypt</name></expr> ?</condition><then> <expr><name>aes_decrypt</name></expr> </then><else>: <expr><name>aes_encrypt</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>enc_multbl</name><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>enc_multbl</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name><name>enc_multbl</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">255</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name><name>alog8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>alog8</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">255</literal></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>log8</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>^=</operator> <name>j</name> <operator>+</operator> <name>j</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">255</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>j</name> <operator>^=</operator> <literal type="number">0x11B</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></for>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">256</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>j</name> <operator>=</operator> <ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name><name>alog8</name><index>[<expr><literal type="number">255</literal> <operator>-</operator> <name><name>log8</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>^=</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">2</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal><operator>)</operator> <operator>^</operator> <operator>(</operator><name>j</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <operator>(</operator><name>j</name> <operator>^</operator> <operator>(</operator><name>j</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>^</operator> <literal type="number">99</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>inv_sbox</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>sbox</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

</block_content>}</block></for>

<macro><name>init_multbl2</name><argument_list>(<argument>dec_multbl</argument>, <argument>(const int[<literal type="number">4</literal>]) { <literal type="number">0xe</literal></argument>, <argument><literal type="number">0x9</literal></argument>, <argument><literal type="number">0xd</literal></argument>, <argument><literal type="number">0xb</literal> }</argument>,

<argument>log8</argument>, <argument>alog8</argument>, <argument>inv_sbox</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

<macro><name>init_multbl2</name><argument_list>(<argument>enc_multbl</argument>, <argument>(const int[<literal type="number">4</literal>]) { <literal type="number">0x2</literal></argument>, <argument><literal type="number">0x1</literal></argument>, <argument><literal type="number">0x1</literal></argument>, <argument><literal type="number">0x3</literal> }</argument>,

<argument>log8</argument>, <argument>alog8</argument>, <argument>sbox</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>key_bits</name> <operator>!=</operator> <literal type="number">128</literal> <operator>&amp;&amp;</operator> <name>key_bits</name> <operator>!=</operator> <literal type="number">192</literal> <operator>&amp;&amp;</operator> <name>key_bits</name> <operator>!=</operator> <literal type="number">256</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>rounds</name></name> <operator>=</operator> <name>rounds</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>tk</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>KC</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u8</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>KC</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>t</name> <operator>=</operator> <name>KC</name> <operator>*</operator> <literal type="number">4</literal></expr>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <operator>(</operator><name>rounds</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>t</name> <operator>+=</operator> <name>KC</name> <operator>*</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tk</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name><name>tk</name><index>[<expr><name>KC</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>tk</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^=</operator> <name><name>rcon</name><index>[<expr><name>rconpointer</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>KC</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>KC</name> <operator>!=</operator> <literal type="number">8</literal> <operator>||</operator> <name>j</name> <operator>!=</operator> <name>KC</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tk</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>tk</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>tk</name><index>[<expr><name>j</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name><name>sbox</name><index>[<expr><name><name>tk</name><index>[<expr><name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for></block_content></block></else></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>u8</name> <operator>+</operator> <name>t</name></expr></argument>, <argument><expr><name>tk</name></expr></argument>, <argument><expr><name>KC</name> <operator>*</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>decrypt</name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rounds</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>av_aes_block</name></type> <name><name>tmp</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>subshift</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>sbox</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>mix</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>dec_multbl</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>i</name> <argument_list type="generic">&lt; <argument><expr><operator>(</operator><name>rounds</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument> &gt;</argument_list></name><operator>&gt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>av_aes_block</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>round_key</name><index>[<expr><name>rounds</name> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
