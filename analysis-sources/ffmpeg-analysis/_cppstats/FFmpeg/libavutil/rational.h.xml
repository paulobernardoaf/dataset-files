<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\rational.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AVRational</name><block>{

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>int</name></type> <name>den</name></decl>;</decl_stmt> 

}</block></struct></type> <name>AVRational</name>;</typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>AVRational</name></type> <name>av_make_q</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>den</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>r</name> <init>= <expr><block>{ <expr><name>num</name></expr>, <expr><name>den</name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>av_cmp_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>b</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>tmp</name><init>= <expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>b</name><operator>.</operator><name>den</name></name> <operator>-</operator> <name><name>b</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>a</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><name>tmp</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>tmp</name> <operator>^</operator> <name><name>a</name><operator>.</operator><name>den</name></name> <operator>^</operator> <name><name>b</name><operator>.</operator><name>den</name></name><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">63</literal><operator>)</operator><operator>|</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>b</name><operator>.</operator><name>den</name></name> <operator>&amp;&amp;</operator> <name><name>a</name><operator>.</operator><name>den</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>

<if type="elseif">else if<condition>(<expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>&amp;&amp;</operator> <name><name>b</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>(</operator><name><name>a</name><operator>.</operator><name>num</name></name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator> <operator>-</operator> <operator>(</operator><name><name>b</name><operator>.</operator><name>num</name></name><operator>&gt;&gt;</operator><literal type="number">31</literal><operator>)</operator></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <return>return <expr><name>INT_MIN</name></expr>;</return></block_content></block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>av_q2d</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>a</name></decl></parameter>)</parameter_list><block>{<block_content>

<return>return <expr><name><name>a</name><operator>.</operator><name>num</name></name> <operator>/</operator> <operator>(</operator><name>double</name><operator>)</operator> <name><name>a</name><operator>.</operator><name>den</name></name></expr>;</return>

</block_content>}</block></function>

<function_decl><type><name>int</name></type> <name>av_reduce</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst_den</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>den</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>max</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>AVRational</name></type> <name>av_mul_q</name><argument_list>(<argument><expr><name>AVRational</name> <name>b</name></expr></argument>, <argument><expr><name>AVRational</name> <name>c</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>av_div_q</name><argument_list>(<argument><expr><name>AVRational</name> <name>b</name></expr></argument>, <argument><expr><name>AVRational</name> <name>c</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>av_add_q</name><argument_list>(<argument><expr><name>AVRational</name> <name>b</name></expr></argument>, <argument><expr><name>AVRational</name> <name>c</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>av_sub_q</name><argument_list>(<argument><expr><name>AVRational</name> <name>b</name></expr></argument>, <argument><expr><name>AVRational</name> <name>c</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>AVRational</name></type> <name>av_inv_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>r</name> <init>= <expr><block>{ <expr><name><name>q</name><operator>.</operator><name>den</name></name></expr>, <expr><name><name>q</name><operator>.</operator><name>num</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><name>AVRational</name></type> <name>av_d2q</name><argument_list>(<argument><expr><name>double</name> <name>d</name></expr></argument>, <argument><expr><name>int</name> <name>max</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>av_nearer_q</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>q1</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>q2</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>av_find_nearest_q_idx</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVRational</name><modifier>*</modifier></type> <name>q_list</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>uint32_t</name></type> <name>av_q2intfloat</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>q</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
