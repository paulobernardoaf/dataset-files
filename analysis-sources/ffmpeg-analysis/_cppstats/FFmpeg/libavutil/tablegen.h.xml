<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\tablegen.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>ff_cbrt</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>x</name> <operator>&lt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><operator>-</operator><call><name>pow</name><argument_list>(<argument><expr><operator>-</operator><name>x</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>pow</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">1.0</literal> <operator>/</operator> <literal type="number">3.0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>cbrt</name></cpp:macro> <cpp:value>ff_cbrt</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>double</name></type> <name>ff_rint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><ternary><condition><expr><name>x</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><call><name>floor</name><argument_list>(<argument><expr><name>x</name> <operator>+</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>ceil</name><argument_list>(<argument><expr><name>x</name> <operator>-</operator> <literal type="number">0.5</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>rint</name></cpp:macro> <cpp:value>ff_rint</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name> <name>long</name></type> <name>ff_llrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>llrint</name></cpp:macro> <cpp:value>ff_llrint</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>long</name></type> <name>ff_lrint</name><parameter_list>(<parameter><decl><type><name>double</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>rint</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>lrint</name></cpp:macro> <cpp:value>ff_lrint</cpp:value></cpp:define>

</unit>
