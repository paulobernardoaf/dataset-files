<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\arm\intmath.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ARMV6_INLINE</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_uint8</name></cpp:macro> <cpp:value>av_clip_uint8_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_clip_uint8_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<asm>__asm__ ("usat %0, #8, %1" : "=r"(x) : "r"(a));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_int8</name></cpp:macro> <cpp:value>av_clip_int8_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_clip_int8_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<asm>__asm__ ("ssat %0, #8, %1" : "=r"(x) : "r"(a));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_uint16</name></cpp:macro> <cpp:value>av_clip_uint16_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_clip_uint16_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<asm>__asm__ ("usat %0, #16, %1" : "=r"(x) : "r"(a));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_int16</name></cpp:macro> <cpp:value>av_clip_int16_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_clip_int16_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>;</decl_stmt>

<asm>__asm__ ("ssat %0, #16, %1" : "=r"(x) : "r"(a));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_intp2</name></cpp:macro> <cpp:value>av_clip_intp2_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int</name></type> <name>av_clip_intp2_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

<asm>__asm__ ("ssat %0, %2, %1" : "=r"(x) : "r"(a), "i"(p+1));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clip_uintp2</name></cpp:macro> <cpp:value>av_clip_uintp2_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>unsigned</name></type> <name>av_clip_uintp2_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>x</name></decl>;</decl_stmt>

<asm>__asm__ ("usat %0, %2, %1" : "=r"(x) : "r"(a), "i"(p));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_add32</name></cpp:macro> <cpp:value>av_sat_add32_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_add32_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<asm>__asm__ ("qadd %0, %1, %2" : "=r"(r) : "r"(a), "r"(b));</asm>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_dadd32</name></cpp:macro> <cpp:value>av_sat_dadd32_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_dadd32_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<asm>__asm__ ("qdadd %0, %1, %2" : "=r"(r) : "r"(a), "r"(b));</asm>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_sub32</name></cpp:macro> <cpp:value>av_sat_sub32_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_sub32_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<asm>__asm__ ("qsub %0, %1, %2" : "=r"(r) : "r"(a), "r"(b));</asm>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_sat_dsub32</name></cpp:macro> <cpp:value>av_sat_dsub32_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>int</name></type> <name>av_sat_dsub32_arm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>

<asm>__asm__ ("qdsub %0, %1, %2" : "=r"(r) : "r"(a), "r"(b));</asm>

<return>return <expr><name>r</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ASM_MOD_Q</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_clipl_int32</name></cpp:macro> <cpp:value>av_clipl_int32_arm</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>int32_t</name></type> <name>av_clipl_int32_arm</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>x</name></decl>, <decl><type ref="prev"/><name>y</name></decl>;</decl_stmt>

<asm>__asm__ ("adds %1, %R2, %Q2, lsr #31 \n\t"

"itet ne \n\t"

"mvnne %1, #1&lt;&lt;31 \n\t"

"moveq %0, %Q2 \n\t"

"eorne %0, %1, %R2, asr #31 \n\t"

: "=r"(x), "=&amp;r"(y) : "r"(a) : "cc");</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
