<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\arm\intreadwrite.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_FAST_UNALIGNED</name> <operator>&amp;&amp;</operator> <name>HAVE_INLINE_ASM</name> <operator>&amp;&amp;</operator> <call><name>AV_GCC_VERSION_AT_MOST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN16</name></cpp:macro> <cpp:value>AV_RN16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>unsigned</name></type> <name>AV_RN16</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>q</name> <init>= <expr><name>p</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>v</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AV_GCC_VERSION_AT_MOST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<asm>__asm__ ("ldrh %0, %1" : "=r"(v) : "m"(*(const uint16_t *)q));</asm>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>defined</name> <name>__thumb__</name></expr></cpp:elif>

<asm>__asm__ ("ldrh %0, %1" : "=r"(v) : "m"(q[0]), "m"(q[1]));</asm>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<asm>__asm__ ("ldrh %0, %1" : "=r"(v) : "Uq"(q[0]), "m"(q[1]));</asm>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN16</name></cpp:macro> <cpp:value>AV_WN16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WN16</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("strh %1, %0" : "=m"(*(uint16_t *)p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN32</name></cpp:macro> <cpp:value>AV_RN32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint32_t</name></type> <name>AV_RN32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>__attribute__</name></name></type><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list> <block>{<block_content> <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt> </block_content>}</block></decl></decl_stmt> <expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ldr %0, %1" : "=r"(v) : "m"(*q));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN32</name></cpp:macro> <cpp:value>AV_WN32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WN32</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("str %1, %0" : "=m"(*(uint32_t *)p) : "r"(v));</asm>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_ASM_MOD_Q</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_RN64</name></cpp:macro> <cpp:value>AV_RN64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>uint64_t</name></type> <name>AV_RN64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>__attribute__</name></name></type><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list> <block>{<block_content> <decl_stmt><decl><type><name>uint32_t</name></type> <name>v</name></decl>;</decl_stmt> </block_content>}</block></decl></decl_stmt> <expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>v</name></decl>;</decl_stmt>

<asm>__asm__ ("ldr %Q0, %1 \n\t"

"ldr %R0, %2 \n\t"

: "=&amp;r"(v)

: "m"(q[0]), "m"(q[1]));</asm>

<return>return <expr><name>v</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_WN64</name></cpp:macro> <cpp:value>AV_WN64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_WN64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>v</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__ ("str %Q2, %0 \n\t"

"str %R2, %1 \n\t"

: "=m"(*(uint32_t*)p), "=m"(*((uint32_t*)p+1))

: "r"(v));</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
