<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\md5.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bswap.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"md5.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AVMD5</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>block</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name><name>ABCD</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

}</block></struct></type> <name>AVMD5</name>;</typedef>

<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>av_md5_size</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVMD5</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>

<function><type><name><name>struct</name> <name>AVMD5</name></name> <modifier>*</modifier></type><name>av_md5_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>AVMD5</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>S</name><index>[<expr><literal type="number">4</literal></expr>]</index><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="number">7</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><literal type="number">22</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">5</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><literal type="number">20</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">4</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><literal type="number">23</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="number">6</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><literal type="number">21</literal></expr> }</block></expr> 

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32_t</name></type> <name><name>T</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{ 

<expr><literal type="number">0xd76aa478</literal></expr>, <expr><literal type="number">0xe8c7b756</literal></expr>, <expr><literal type="number">0x242070db</literal></expr>, <expr><literal type="number">0xc1bdceee</literal></expr>, 

<expr><literal type="number">0xf57c0faf</literal></expr>, <expr><literal type="number">0x4787c62a</literal></expr>, <expr><literal type="number">0xa8304613</literal></expr>, <expr><literal type="number">0xfd469501</literal></expr>,

<expr><literal type="number">0x698098d8</literal></expr>, <expr><literal type="number">0x8b44f7af</literal></expr>, <expr><literal type="number">0xffff5bb1</literal></expr>, <expr><literal type="number">0x895cd7be</literal></expr>,

<expr><literal type="number">0x6b901122</literal></expr>, <expr><literal type="number">0xfd987193</literal></expr>, <expr><literal type="number">0xa679438e</literal></expr>, <expr><literal type="number">0x49b40821</literal></expr>,

<expr><literal type="number">0xf61e2562</literal></expr>, <expr><literal type="number">0xc040b340</literal></expr>, <expr><literal type="number">0x265e5a51</literal></expr>, <expr><literal type="number">0xe9b6c7aa</literal></expr>, 

<expr><literal type="number">0xd62f105d</literal></expr>, <expr><literal type="number">0x02441453</literal></expr>, <expr><literal type="number">0xd8a1e681</literal></expr>, <expr><literal type="number">0xe7d3fbc8</literal></expr>,

<expr><literal type="number">0x21e1cde6</literal></expr>, <expr><literal type="number">0xc33707d6</literal></expr>, <expr><literal type="number">0xf4d50d87</literal></expr>, <expr><literal type="number">0x455a14ed</literal></expr>,

<expr><literal type="number">0xa9e3e905</literal></expr>, <expr><literal type="number">0xfcefa3f8</literal></expr>, <expr><literal type="number">0x676f02d9</literal></expr>, <expr><literal type="number">0x8d2a4c8a</literal></expr>,

<expr><literal type="number">0xfffa3942</literal></expr>, <expr><literal type="number">0x8771f681</literal></expr>, <expr><literal type="number">0x6d9d6122</literal></expr>, <expr><literal type="number">0xfde5380c</literal></expr>, 

<expr><literal type="number">0xa4beea44</literal></expr>, <expr><literal type="number">0x4bdecfa9</literal></expr>, <expr><literal type="number">0xf6bb4b60</literal></expr>, <expr><literal type="number">0xbebfbc70</literal></expr>,

<expr><literal type="number">0x289b7ec6</literal></expr>, <expr><literal type="number">0xeaa127fa</literal></expr>, <expr><literal type="number">0xd4ef3085</literal></expr>, <expr><literal type="number">0x04881d05</literal></expr>,

<expr><literal type="number">0xd9d4d039</literal></expr>, <expr><literal type="number">0xe6db99e5</literal></expr>, <expr><literal type="number">0x1fa27cf8</literal></expr>, <expr><literal type="number">0xc4ac5665</literal></expr>,

<expr><literal type="number">0xf4292244</literal></expr>, <expr><literal type="number">0x432aff97</literal></expr>, <expr><literal type="number">0xab9423a7</literal></expr>, <expr><literal type="number">0xfc93a039</literal></expr>, 

<expr><literal type="number">0x655b59c3</literal></expr>, <expr><literal type="number">0x8f0ccc92</literal></expr>, <expr><literal type="number">0xffeff47d</literal></expr>, <expr><literal type="number">0x85845dd1</literal></expr>,

<expr><literal type="number">0x6fa87e4f</literal></expr>, <expr><literal type="number">0xfe2ce6e0</literal></expr>, <expr><literal type="number">0xa3014314</literal></expr>, <expr><literal type="number">0x4e0811a1</literal></expr>,

<expr><literal type="number">0xf7537e82</literal></expr>, <expr><literal type="number">0xbd3af235</literal></expr>, <expr><literal type="number">0x2ad7d2bb</literal></expr>, <expr><literal type="number">0xeb86d391</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORE</name><parameter_list>(<parameter><type><name>i</name></type></parameter>, <parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>c</name></type></parameter>, <parameter><type><name>d</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do { t = S[i &gt;&gt; 4][i &amp; 3]; a += T[i]; if (i &lt; 32) { if (i &lt; 16) a += (d ^ (b &amp; (c ^ d))) + AV_RL32(X+( i &amp; 15));else a += ((d &amp; b) | (~d &amp; c)) + AV_RL32(X+((1 + 5*i) &amp; 15));} else { if (i &lt; 48) a += (b ^ c ^ d) + AV_RL32(X+((5 + 3*i) &amp; 15));else a += (c ^ (b | ~d)) + AV_RL32(X+(( 7*i) &amp; 15));} a = b + (a &lt;&lt; t | a &gt;&gt; (32 - t)); } while (0)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>body</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name><name>ABCD</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nblocks</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <name>i</name></type> <name>av_unused</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>X</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint32_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>c</name></decl>, <decl><type ref="prev"/><name>d</name></decl>, <decl><type ref="prev"/><name>t</name></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>nblocks</name></expr>;</condition> <incr><expr><name>n</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name><name>ABCD</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name><name>ABCD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>ABCD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>ABCD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

<expr_stmt><expr><name>X</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name>n</name> <operator>*</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>CONFIG_SMALL</name></expr></cpp:if>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>CORE</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <name>a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>

</block_content>}</block></for>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORE2</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CORE(i, a, b, c, d); CORE((i + 1), d, a, b, c); CORE((i + 2), c, d, a, b); CORE((i + 3), b, c, d, a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CORE4</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>CORE2(i); CORE2((i + 4)); CORE2((i + 8)); CORE2((i + 12))</cpp:value></cpp:define>

<expr_stmt><expr><call><name>CORE4</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CORE4</name><argument_list>(<argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CORE4</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>CORE4</name><argument_list>(<argument><expr><literal type="number">48</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<expr_stmt><expr><name><name>ABCD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+=</operator> <name>d</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ABCD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ABCD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name>b</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ABCD</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+=</operator> <name>a</name></expr>;</expr_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_md5_init</name><parameter_list>(<parameter><decl><type><name>AVMD5</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x10325476</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x98badcfe</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0xefcdab89</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0x67452301</literal></expr>;</expr_stmt>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name></type> <name>av_md5_update</name><argument_list>(<argument><expr><name>AVMD5</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>void</name> <name>av_md5_update</name><argument_list>(<argument><expr><name>AVMD5</name> <operator>*</operator><name>ctx</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>

<expr_stmt><expr><name>j</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;</operator> <literal type="number">63</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="number">64</literal> <operator>-</operator> <name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <name>cnt</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>-=</operator> <name>cnt</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>j</name> <operator>+</operator> <name>cnt</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>src</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">63</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HAVE_FAST_UNALIGNED</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>intptr_t</name><operator>)</operator><name>src</name> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>nblocks</name> <init>= <expr><name>len</name> <operator>/</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>body</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>nblocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>len</name> <operator>&amp;=</operator> <literal type="number">63</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><name>void</name></type> <name>av_md5_final</name><parameter_list>(<parameter><decl><type><name>AVMD5</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>finalcount</name> <init>= <expr><call><name>av_le2ne64</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_md5_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"\200"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>len</name></name> <operator>&amp;</operator> <literal type="number">63</literal><operator>)</operator> <operator>!=</operator> <literal type="number">56</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_md5_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><call><name>av_md5_update</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>finalcount</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>AV_WL32</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">4</literal> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>ABCD</name><index>[<expr><literal type="number">3</literal> <operator>-</operator> <name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name></type> <name>av_md5_sum</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>int</name> <name>len</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>void</name> <name>av_md5_sum</name><argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator><name>dst</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><name>AVMD5</name></type> <name>ctx</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_md5_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_md5_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_md5_final</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></decl></decl_stmt>

</unit>
