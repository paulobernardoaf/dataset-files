<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\parseutils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"random_seed.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"time.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_get_random_seed</name></cpp:macro> <cpp:value>av_get_random_seed_deterministic</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>av_get_random_seed_deterministic</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_gettime</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>1331972053200000</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int</name></type> <name>av_parse_ratio</name><parameter_list>(<parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>max</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>log_offset</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d:%d%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,

<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>log_offset</name></expr></argument>, <argument><expr><name>log_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_reduce</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>q</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>den</name></name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>VideoSizeAbbr</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name></decl>, <name>height</name>;</decl_stmt>

}</block></struct></type> <name>VideoSizeAbbr</name>;</typedef>

<typedef>typedef <type><struct>struct <name>VideoRateAbbr</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>abbr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>rate</name></decl>;</decl_stmt>

}</block></struct></type> <name>VideoRateAbbr</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VideoSizeAbbr</name></type> <name><name>video_size_abbrs</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"ntsc"</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pal"</literal></expr>, <expr><literal type="number">720</literal></expr>, <expr><literal type="number">576</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qntsc"</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"qpal"</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"sntsc"</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"spal"</literal></expr>, <expr><literal type="number">768</literal></expr>, <expr><literal type="number">576</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"film"</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ntsc-film"</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sqcif"</literal></expr>, <expr><literal type="number">128</literal></expr>, <expr><literal type="number">96</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qcif"</literal></expr>, <expr><literal type="number">176</literal></expr>, <expr><literal type="number">144</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cif"</literal></expr>, <expr><literal type="number">352</literal></expr>, <expr><literal type="number">288</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4cif"</literal></expr>, <expr><literal type="number">704</literal></expr>, <expr><literal type="number">576</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"16cif"</literal></expr>, <expr><literal type="number">1408</literal></expr>,<expr><literal type="number">1152</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qqvga"</literal></expr>, <expr><literal type="number">160</literal></expr>, <expr><literal type="number">120</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qvga"</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">240</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"vga"</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"svga"</literal></expr>, <expr><literal type="number">800</literal></expr>, <expr><literal type="number">600</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"xga"</literal></expr>, <expr><literal type="number">1024</literal></expr>, <expr><literal type="number">768</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"uxga"</literal></expr>, <expr><literal type="number">1600</literal></expr>,<expr><literal type="number">1200</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qxga"</literal></expr>, <expr><literal type="number">2048</literal></expr>,<expr><literal type="number">1536</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"sxga"</literal></expr>, <expr><literal type="number">1280</literal></expr>,<expr><literal type="number">1024</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qsxga"</literal></expr>, <expr><literal type="number">2560</literal></expr>,<expr><literal type="number">2048</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hsxga"</literal></expr>, <expr><literal type="number">5120</literal></expr>,<expr><literal type="number">4096</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wvga"</literal></expr>, <expr><literal type="number">852</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wxga"</literal></expr>, <expr><literal type="number">1366</literal></expr>, <expr><literal type="number">768</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wsxga"</literal></expr>, <expr><literal type="number">1600</literal></expr>,<expr><literal type="number">1024</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wuxga"</literal></expr>, <expr><literal type="number">1920</literal></expr>,<expr><literal type="number">1200</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"woxga"</literal></expr>, <expr><literal type="number">2560</literal></expr>,<expr><literal type="number">1600</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wqsxga"</literal></expr>, <expr><literal type="number">3200</literal></expr>,<expr><literal type="number">2048</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wquxga"</literal></expr>, <expr><literal type="number">3840</literal></expr>,<expr><literal type="number">2400</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"whsxga"</literal></expr>, <expr><literal type="number">6400</literal></expr>,<expr><literal type="number">4096</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"whuxga"</literal></expr>, <expr><literal type="number">7680</literal></expr>,<expr><literal type="number">4800</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"cga"</literal></expr>, <expr><literal type="number">320</literal></expr>, <expr><literal type="number">200</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ega"</literal></expr>, <expr><literal type="number">640</literal></expr>, <expr><literal type="number">350</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hd480"</literal></expr>, <expr><literal type="number">852</literal></expr>, <expr><literal type="number">480</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hd720"</literal></expr>, <expr><literal type="number">1280</literal></expr>, <expr><literal type="number">720</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hd1080"</literal></expr>, <expr><literal type="number">1920</literal></expr>,<expr><literal type="number">1080</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2k"</literal></expr>, <expr><literal type="number">2048</literal></expr>,<expr><literal type="number">1080</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"2kdci"</literal></expr>, <expr><literal type="number">2048</literal></expr>,<expr><literal type="number">1080</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2kflat"</literal></expr>, <expr><literal type="number">1998</literal></expr>,<expr><literal type="number">1080</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"2kscope"</literal></expr>, <expr><literal type="number">2048</literal></expr>, <expr><literal type="number">858</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4k"</literal></expr>, <expr><literal type="number">4096</literal></expr>,<expr><literal type="number">2160</literal></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"4kdci"</literal></expr>, <expr><literal type="number">4096</literal></expr>,<expr><literal type="number">2160</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4kflat"</literal></expr>, <expr><literal type="number">3996</literal></expr>,<expr><literal type="number">2160</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"4kscope"</literal></expr>, <expr><literal type="number">4096</literal></expr>,<expr><literal type="number">1716</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"nhd"</literal></expr>, <expr><literal type="number">640</literal></expr>,<expr><literal type="number">360</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hqvga"</literal></expr>, <expr><literal type="number">240</literal></expr>,<expr><literal type="number">160</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"wqvga"</literal></expr>, <expr><literal type="number">400</literal></expr>,<expr><literal type="number">240</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"fwqvga"</literal></expr>, <expr><literal type="number">432</literal></expr>,<expr><literal type="number">240</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"hvga"</literal></expr>, <expr><literal type="number">480</literal></expr>,<expr><literal type="number">320</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qhd"</literal></expr>, <expr><literal type="number">960</literal></expr>,<expr><literal type="number">540</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"uhd2160"</literal></expr>, <expr><literal type="number">3840</literal></expr>,<expr><literal type="number">2160</literal></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"uhd4320"</literal></expr>, <expr><literal type="number">7680</literal></expr>,<expr><literal type="number">4320</literal></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>VideoRateAbbr</name></type> <name><name>video_rate_abbrs</name><index>[]</index></name><init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"ntsc"</literal></expr>, <expr><block>{ <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"pal"</literal></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"qntsc"</literal></expr>, <expr><block>{ <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"qpal"</literal></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"sntsc"</literal></expr>, <expr><block>{ <expr><literal type="number">30000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"spal"</literal></expr>, <expr><block>{ <expr><literal type="number">25</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>, 

<expr><block>{ <expr><literal type="string">"film"</literal></expr>, <expr><block>{ <expr><literal type="number">24</literal></expr>, <expr><literal type="number">1</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ntsc-film"</literal></expr>, <expr><block>{ <expr><literal type="number">24000</literal></expr>, <expr><literal type="number">1001</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>months</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{

<expr><literal type="string">"january"</literal></expr>, <expr><literal type="string">"february"</literal></expr>, <expr><literal type="string">"march"</literal></expr>, <expr><literal type="string">"april"</literal></expr>, <expr><literal type="string">"may"</literal></expr>, <expr><literal type="string">"june"</literal></expr>, <expr><literal type="string">"july"</literal></expr>, <expr><literal type="string">"august"</literal></expr>,

<expr><literal type="string">"september"</literal></expr>, <expr><literal type="string">"october"</literal></expr>, <expr><literal type="string">"november"</literal></expr>, <expr><literal type="string">"december"</literal></expr>

}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>av_parse_video_size</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>width_ptr</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>height_ptr</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>video_size_abbrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>height</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>video_size_abbrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>abbr</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <name><name>video_size_abbrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <name><name>video_size_abbrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>height</name></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>n</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>width</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>height</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>height</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>width_ptr</name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>height_ptr</name> <operator>=</operator> <name>height</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_parse_video_rate</name><parameter_list>(<parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>rate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>video_rate_abbrs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>video_rate_abbrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>abbr</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>rate</name> <operator>=</operator> <name><name>video_rate_abbrs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>rate</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt></block_content></block></for>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_ratio_quiet</name><argument_list>(<argument><expr><name>rate</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="number">1001000</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>rate</name><operator>-&gt;</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>rate</name><operator>-&gt;</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>ColorEntry</name> <block>{

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>rgb_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt> 

}</block></struct></type> <name>ColorEntry</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ColorEntry</name></type> <name><name>color_table</name><index>[]</index></name> <init>= <expr><block>{

<expr><block>{ <expr><literal type="string">"AliceBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"AntiqueWhite"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xD7</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aqua"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Aquamarine"</literal></expr>, <expr><block>{ <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xD4</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Azure"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Beige"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xDC</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Bisque"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xC4</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Black"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"BlanchedAlmond"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xEB</literal></expr>, <expr><literal type="number">0xCD</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Blue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"BlueViolet"</literal></expr>, <expr><block>{ <expr><literal type="number">0x8A</literal></expr>, <expr><literal type="number">0x2B</literal></expr>, <expr><literal type="number">0xE2</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Brown"</literal></expr>, <expr><block>{ <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x2A</literal></expr>, <expr><literal type="number">0x2A</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"BurlyWood"</literal></expr>, <expr><block>{ <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x87</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CadetBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x5F</literal></expr>, <expr><literal type="number">0x9E</literal></expr>, <expr><literal type="number">0xA0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chartreuse"</literal></expr>, <expr><block>{ <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Chocolate"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x1E</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Coral"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr>, <expr><literal type="number">0x50</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"CornflowerBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x95</literal></expr>, <expr><literal type="number">0xED</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cornsilk"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xDC</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Crimson"</literal></expr>, <expr><block>{ <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x3C</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Cyan"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkCyan"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGoldenRod"</literal></expr>, <expr><block>{ <expr><literal type="number">0xB8</literal></expr>, <expr><literal type="number">0x86</literal></expr>, <expr><literal type="number">0x0B</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGray"</literal></expr>, <expr><block>{ <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xA9</literal></expr>, <expr><literal type="number">0xA9</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x64</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkKhaki"</literal></expr>, <expr><block>{ <expr><literal type="number">0xBD</literal></expr>, <expr><literal type="number">0xB7</literal></expr>, <expr><literal type="number">0x6B</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkMagenta"</literal></expr>, <expr><block>{ <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOliveGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x2F</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Darkorange"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x8C</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkOrchid"</literal></expr>, <expr><block>{ <expr><literal type="number">0x99</literal></expr>, <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xCC</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkRed"</literal></expr>, <expr><block>{ <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSalmon"</literal></expr>, <expr><block>{ <expr><literal type="number">0xE9</literal></expr>, <expr><literal type="number">0x96</literal></expr>, <expr><literal type="number">0x7A</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSeaGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0x3D</literal></expr>, <expr><literal type="number">0x8B</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkSlateGray"</literal></expr>, <expr><block>{ <expr><literal type="number">0x2F</literal></expr>, <expr><literal type="number">0x4F</literal></expr>, <expr><literal type="number">0x4F</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkTurquoise"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xD1</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DarkViolet"</literal></expr>, <expr><block>{ <expr><literal type="number">0x94</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xD3</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepPink"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x14</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DeepSkyBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DimGray"</literal></expr>, <expr><block>{ <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0x69</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"DodgerBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x1E</literal></expr>, <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"FireBrick"</literal></expr>, <expr><block>{ <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x22</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"FloralWhite"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xF0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"ForestGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x22</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x22</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Fuchsia"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gainsboro"</literal></expr>, <expr><block>{ <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDC</literal></expr>, <expr><literal type="number">0xDC</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GhostWhite"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xF8</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gold"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xD7</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GoldenRod"</literal></expr>, <expr><block>{ <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x20</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Gray"</literal></expr>, <expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Green"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"GreenYellow"</literal></expr>, <expr><block>{ <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x2F</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HoneyDew"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"HotPink"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"IndianRed"</literal></expr>, <expr><block>{ <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x5C</literal></expr>, <expr><literal type="number">0x5C</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Indigo"</literal></expr>, <expr><block>{ <expr><literal type="number">0x4B</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x82</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Ivory"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Khaki"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0x8C</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Lavender"</literal></expr>, <expr><block>{ <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xE6</literal></expr>, <expr><literal type="number">0xFA</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LavenderBlush"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xF5</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LawnGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x7C</literal></expr>, <expr><literal type="number">0xFC</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LemonChiffon"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xCD</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0xAD</literal></expr>, <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xE6</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCoral"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightCyan"</literal></expr>, <expr><block>{ <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGoldenRodYellow"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xD2</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x90</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x90</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightGrey"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD3</literal></expr>, <expr><literal type="number">0xD3</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightPink"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xB6</literal></expr>, <expr><literal type="number">0xC1</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSalmon"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x7A</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSeaGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x20</literal></expr>, <expr><literal type="number">0xB2</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSkyBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xFA</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSlateGray"</literal></expr>, <expr><block>{ <expr><literal type="number">0x77</literal></expr>, <expr><literal type="number">0x88</literal></expr>, <expr><literal type="number">0x99</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightSteelBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xC4</literal></expr>, <expr><literal type="number">0xDE</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LightYellow"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xE0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Lime"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"LimeGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x32</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x32</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Linen"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xF0</literal></expr>, <expr><literal type="number">0xE6</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Magenta"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Maroon"</literal></expr>, <expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumAquaMarine"</literal></expr>, <expr><block>{ <expr><literal type="number">0x66</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xCD</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumOrchid"</literal></expr>, <expr><block>{ <expr><literal type="number">0xBA</literal></expr>, <expr><literal type="number">0x55</literal></expr>, <expr><literal type="number">0xD3</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumPurple"</literal></expr>, <expr><block>{ <expr><literal type="number">0x93</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xD8</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumSeaGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x3C</literal></expr>, <expr><literal type="number">0xB3</literal></expr>, <expr><literal type="number">0x71</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumSlateBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x7B</literal></expr>, <expr><literal type="number">0x68</literal></expr>, <expr><literal type="number">0xEE</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumSpringGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x9A</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumTurquoise"</literal></expr>, <expr><block>{ <expr><literal type="number">0x48</literal></expr>, <expr><literal type="number">0xD1</literal></expr>, <expr><literal type="number">0xCC</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MediumVioletRed"</literal></expr>, <expr><block>{ <expr><literal type="number">0xC7</literal></expr>, <expr><literal type="number">0x15</literal></expr>, <expr><literal type="number">0x85</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MidnightBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x19</literal></expr>, <expr><literal type="number">0x70</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MintCream"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFA</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"MistyRose"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xE1</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Moccasin"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xE4</literal></expr>, <expr><literal type="number">0xB5</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"NavajoWhite"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xAD</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Navy"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OldLace"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFD</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xE6</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Olive"</literal></expr>, <expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OliveDrab"</literal></expr>, <expr><block>{ <expr><literal type="number">0x6B</literal></expr>, <expr><literal type="number">0x8E</literal></expr>, <expr><literal type="number">0x23</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orange"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xA5</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"OrangeRed"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Orchid"</literal></expr>, <expr><block>{ <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0xD6</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGoldenRod"</literal></expr>, <expr><block>{ <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xE8</literal></expr>, <expr><literal type="number">0xAA</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x98</literal></expr>, <expr><literal type="number">0xFB</literal></expr>, <expr><literal type="number">0x98</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleTurquoise"</literal></expr>, <expr><block>{ <expr><literal type="number">0xAF</literal></expr>, <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0xEE</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PaleVioletRed"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x93</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PapayaWhip"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xEF</literal></expr>, <expr><literal type="number">0xD5</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PeachPuff"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xDA</literal></expr>, <expr><literal type="number">0xB9</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Peru"</literal></expr>, <expr><block>{ <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x85</literal></expr>, <expr><literal type="number">0x3F</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Pink"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xCB</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Plum"</literal></expr>, <expr><block>{ <expr><literal type="number">0xDD</literal></expr>, <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0xDD</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"PowderBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0xB0</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xE6</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Purple"</literal></expr>, <expr><block>{ <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Red"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RosyBrown"</literal></expr>, <expr><block>{ <expr><literal type="number">0xBC</literal></expr>, <expr><literal type="number">0x8F</literal></expr>, <expr><literal type="number">0x8F</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"RoyalBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x41</literal></expr>, <expr><literal type="number">0x69</literal></expr>, <expr><literal type="number">0xE1</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SaddleBrown"</literal></expr>, <expr><block>{ <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x45</literal></expr>, <expr><literal type="number">0x13</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Salmon"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x72</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SandyBrown"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF4</literal></expr>, <expr><literal type="number">0xA4</literal></expr>, <expr><literal type="number">0x60</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x2E</literal></expr>, <expr><literal type="number">0x8B</literal></expr>, <expr><literal type="number">0x57</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SeaShell"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xEE</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Sienna"</literal></expr>, <expr><block>{ <expr><literal type="number">0xA0</literal></expr>, <expr><literal type="number">0x52</literal></expr>, <expr><literal type="number">0x2D</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Silver"</literal></expr>, <expr><block>{ <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC0</literal></expr>, <expr><literal type="number">0xC0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SkyBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x87</literal></expr>, <expr><literal type="number">0xCE</literal></expr>, <expr><literal type="number">0xEB</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x6A</literal></expr>, <expr><literal type="number">0x5A</literal></expr>, <expr><literal type="number">0xCD</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SlateGray"</literal></expr>, <expr><block>{ <expr><literal type="number">0x70</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x90</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Snow"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFA</literal></expr>, <expr><literal type="number">0xFA</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SpringGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x7F</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"SteelBlue"</literal></expr>, <expr><block>{ <expr><literal type="number">0x46</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xB4</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tan"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD2</literal></expr>, <expr><literal type="number">0xB4</literal></expr>, <expr><literal type="number">0x8C</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Teal"</literal></expr>, <expr><block>{ <expr><literal type="number">0x00</literal></expr>, <expr><literal type="number">0x80</literal></expr>, <expr><literal type="number">0x80</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Thistle"</literal></expr>, <expr><block>{ <expr><literal type="number">0xD8</literal></expr>, <expr><literal type="number">0xBF</literal></expr>, <expr><literal type="number">0xD8</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Tomato"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x63</literal></expr>, <expr><literal type="number">0x47</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Turquoise"</literal></expr>, <expr><block>{ <expr><literal type="number">0x40</literal></expr>, <expr><literal type="number">0xE0</literal></expr>, <expr><literal type="number">0xD0</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Violet"</literal></expr>, <expr><block>{ <expr><literal type="number">0xEE</literal></expr>, <expr><literal type="number">0x82</literal></expr>, <expr><literal type="number">0xEE</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Wheat"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xDE</literal></expr>, <expr><literal type="number">0xB3</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"White"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"WhiteSmoke"</literal></expr>, <expr><block>{ <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF5</literal></expr>, <expr><literal type="number">0xF5</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"Yellow"</literal></expr>, <expr><block>{ <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0xFF</literal></expr>, <expr><literal type="number">0x00</literal></expr> }</block></expr> }</block></expr>,

<expr><block>{ <expr><literal type="string">"YellowGreen"</literal></expr>, <expr><block>{ <expr><literal type="number">0x9A</literal></expr>, <expr><literal type="number">0xCD</literal></expr>, <expr><literal type="number">0x32</literal></expr> }</block></expr> }</block></expr>,

}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>color_table_compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>lhs</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>ColorEntry</name> <operator>*</operator><operator>)</operator><name>rhs</name><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALPHA_SEP</name></cpp:macro> <cpp:value>'@'</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>av_parse_color</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>rgba_color</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>color_string</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>slen</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>, <decl><type ref="prev"/><name><name>color_string2</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>ColorEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>hex_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>color_string</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'#'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>hex_offset</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>color_string</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hex_offset</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>color_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcpy</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>, <argument><expr><name>color_string</name> <operator>+</operator> <name>hex_offset</name></expr></argument>,

<argument><expr><call><name>FFMIN</name><argument_list>(<argument><expr><name>slen</name><operator>-</operator><name>hex_offset</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>color_string2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tail</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>, <argument><expr><name>ALPHA_SEP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>tail</name><operator>++</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <literal type="number">255</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>, <argument><expr><literal type="string">"random"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>, <argument><expr><literal type="string">"bikeshed"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>rgba</name> <init>= <expr><call><name>av_get_random_seed</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>hex_offset</name> <operator>||</operator>

<call><name>strspn</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>, <argument><expr><literal type="string">"0123456789ABCDEFabcdef"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>len</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>rgba</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>||</operator> <operator>(</operator><name>len</name> <operator>!=</operator> <literal type="number">6</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>!=</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid 0xRRGGBB[AA] color string: '%s'\n"</literal></expr></argument>, <argument><expr><name>color_string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name></expr>;</expr_stmt>

<expr_stmt><expr><name>rgba</name> <operator>&gt;&gt;=</operator> <literal type="number">8</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>rgba</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>bsearch</name><argument_list>(<argument><expr><name>color_string2</name></expr></argument>,

<argument><expr><name>color_table</name></expr></argument>,

<argument><expr><call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>color_table</name></expr></argument>)</argument_list></call></expr></argument>,

<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ColorEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>,

<argument><expr><name>color_table_compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot find color '%s'\n"</literal></expr></argument>, <argument><expr><name>color_string2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>rgba_color</name></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>rgb_color</name></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tail</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>alpha</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>alpha_string</name> <init>= <expr><name>tail</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>alpha_string</name></expr></argument>, <argument><expr><literal type="string">"0x"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>alpha_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>norm_alpha</name> <init>= <expr><call><name>strtod</name><argument_list>(<argument><expr><name>alpha_string</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>norm_alpha</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0.0</literal> <operator>||</operator> <name>norm_alpha</name></expr></argument> &gt;</argument_list></name> <literal type="number">1.0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">256</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><name>alpha</name> <operator>=</operator> <literal type="number">255</literal> <operator>*</operator> <name>norm_alpha</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name>tail</name> <operator>==</operator> <name>alpha_string</name> <operator>||</operator> <operator>*</operator><name>tail</name> <operator>||</operator> <name>alpha</name> <operator>&gt;</operator> <literal type="number">255</literal> <operator>||</operator> <name>alpha</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid alpha value specifier '%s' in '%s'\n"</literal></expr></argument>,

<argument><expr><name>alpha_string</name></expr></argument>, <argument><expr><name>color_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>rgba_color</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <name>alpha</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>av_get_known_color_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>color_idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>rgbp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>ColorEntry</name> <modifier>*</modifier></type><name>color</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>color_idx</name> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>color_table</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>color</name> <operator>=</operator> <operator>&amp;</operator><name><name>color_table</name><index>[<expr><name>color_idx</name></expr>]</index></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>rgbp</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>rgbp</name> <operator>=</operator> <name><name>color</name><operator>-&gt;</operator><name>rgb_color</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name><name>color</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>date_get_num</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>n_min</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>n_max</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len_max</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>val</name></decl>, <decl><type ref="prev"/><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <operator>*</operator><name>pp</name></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len_max</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_isdigit</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <operator>(</operator><name>val</name> <operator>*</operator> <literal type="number">10</literal><operator>)</operator> <operator>+</operator> <name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <operator>*</operator><name>pp</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name> <argument_list type="generic">&lt; <argument><expr><name>n_min</name> <operator>||</operator> <name>val</name></expr></argument> &gt;</argument_list></name> <name>n_max</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

<return>return <expr><name>val</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>date_get_month</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>pp</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name><name>months</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mo_full</name> <init>= <expr><name><name>months</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>mo_full</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>av_strncasecmp</name><argument_list>(<argument><expr><operator>*</operator><name>pp</name></expr></argument>, <argument><expr><name>mo_full</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>pp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>i</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>av_small_strptime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>dt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>val</name></decl>;</decl_stmt>

<while>while<condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<for>for <control>(<init>;</init> <condition><expr><operator>*</operator><name>p</name> <operator>&amp;&amp;</operator> <call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>p</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content><empty_stmt>;</empty_stmt></block_content></block></for></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>

<else>else<block type="pseudo"><block_content> <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

<continue>continue;</continue>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>fmt</name><operator>++</operator></expr>;</expr_stmt>

<switch>switch<condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>

<case>case <expr><literal type="char">'H'</literal></expr>:</case>

<case>case <expr><literal type="char">'J'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>date_get_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'H'</literal></expr> ?</condition><then> <expr><literal type="number">23</literal></expr> </then><else>: <expr><name>INT_MAX</name></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'H'</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'M'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>date_get_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'S'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>date_get_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">59</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>tm_sec</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'Y'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>date_get_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">9999</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>=</operator> <name>val</name> <operator>-</operator> <literal type="number">1900</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'m'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>date_get_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>val</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'d'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>date_get_num</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>tm_mday</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'T'</literal></expr>:</case>

<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>av_small_strptime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%H:%M:%S"</literal></expr></argument>, <argument><expr><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>p</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'b'</literal></expr>:</case>

<case>case <expr><literal type="char">'B'</literal></expr>:</case>

<case>case <expr><literal type="char">'h'</literal></expr>:</case>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>date_get_month</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><literal type="char">'%'</literal></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name><operator>++</operator> <operator>!=</operator> <literal type="char">'%'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></switch>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>time_t</name></type> <name>av_timegm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tm</name></name> <modifier>*</modifier></type><name>tm</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>time_t</name></type> <name>t</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>y</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></init></decl>, <decl><type ref="prev"/><name>m</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>, <decl><type ref="prev"/><name>d</name> <init>= <expr><name><name>tm</name><operator>-&gt;</operator><name>tm_mday</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>m</name> <operator>+=</operator> <literal type="number">12</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>y</name><operator>--</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">86400LL</literal> <operator>*</operator>

<operator>(</operator><name>d</name> <operator>+</operator> <operator>(</operator><literal type="number">153</literal> <operator>*</operator> <name>m</name> <operator>-</operator> <literal type="number">457</literal><operator>)</operator> <operator>/</operator> <literal type="number">5</literal> <operator>+</operator> <literal type="number">365</literal> <operator>*</operator> <name>y</name> <operator>+</operator> <name>y</name> <operator>/</operator> <literal type="number">4</literal> <operator>-</operator> <name>y</name> <operator>/</operator> <literal type="number">100</literal> <operator>+</operator> <name>y</name> <operator>/</operator> <literal type="number">400</literal> <operator>-</operator> <literal type="number">719469</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <literal type="number">3600</literal> <operator>*</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_hour</name></name> <operator>+</operator> <literal type="number">60</literal> <operator>*</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_min</name></name> <operator>+</operator> <name><name>tm</name><operator>-&gt;</operator><name>tm_sec</name></name></expr>;</expr_stmt>

<return>return <expr><name>t</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_parse_time</name><parameter_list>(<parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>timeval</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>timestr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>t</name></decl>, <decl><type ref="prev"/><name>now64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>dt</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>, <decl><type ref="prev"/><name>tmbuf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>today</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>negative</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>microseconds</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>suffix</name> <init>= <expr><literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>date_fmt</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"%Y - %m - %d"</literal></expr>,

<expr><literal type="string">"%Y%m%d"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>time_fmt</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"%H:%M:%S"</literal></expr>,

<expr><literal type="string">"%H%M%S"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier> <specifier>const</specifier></type> <name><name>tz_fmt</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="string">"%H:%M"</literal></expr>,

<expr><literal type="string">"%H%M"</literal></expr>,

<expr><literal type="string">"%H"</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>timestr</name></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>timeval</name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>duration</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>now64</name> <operator>=</operator> <call><name>av_gettime</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>now</name> <operator>=</operator> <name>now64</name> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_strcasecmp</name><argument_list>(<argument><expr><name>timestr</name></expr></argument>, <argument><expr><literal type="string">"now"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>timeval</name> <operator>=</operator> <name>now64</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>date_fmt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_small_strptime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>date_fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>today</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'T'</literal> <operator>||</operator> <operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'t'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<while>while <condition>(<expr><call><name>av_isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>time_fmt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_small_strptime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>time_fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if> <else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>negative</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_small_strptime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%J:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_small_strptime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <call><name>strtoll</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>o</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>==</operator> <name>p</name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ERANGE</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>o</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>t</name> <operator>=</operator> <name><name>dt</name><operator>.</operator><name>tm_hour</name></name> <operator>*</operator> <literal type="number">3600</literal> <operator>+</operator> <name><name>dt</name><operator>.</operator><name>tm_min</name></name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>dt</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">100000</literal></expr>;</init> <condition><expr><name>n</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>n</name> <operator>/=</operator> <literal type="number">10</literal></expr><operator>,</operator> <expr><name>q</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>microseconds</name> <operator>+=</operator> <name>n</name> <operator>*</operator> <operator>(</operator><operator>*</operator><name>q</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<while>while <condition>(<expr><call><name>av_isdigit</name><argument_list>(<argument><expr><operator>*</operator><name>q</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>duration</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'m'</literal> <operator>&amp;&amp;</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>microseconds</name> <operator>/=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>q</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>&amp;&amp;</operator> <name><name>q</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>suffix</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>microseconds</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'s'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>is_utc</name> <init>= <expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'Z'</literal> <operator>||</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'z'</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>tzoffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name> <operator>+=</operator> <name>is_utc</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>today</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>is_utc</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'-'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tz</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>sign</name> <init>= <expr><operator>(</operator><ternary><condition><expr><operator>*</operator><name>q</name> <operator>==</operator> <literal type="char">'+'</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>q</name><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>q</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>tz_fmt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_small_strptime</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>tz_fmt</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>tzoffset</name> <operator>=</operator> <name>sign</name> <operator>*</operator> <operator>(</operator><name><name>tz</name><operator>.</operator><name>tm_hour</name></name> <operator>*</operator> <literal type="number">60</literal> <operator>+</operator> <name><name>tz</name><operator>.</operator><name>tm_min</name></name><operator>)</operator> <operator>*</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>is_utc</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>today</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>dt2</name> <init>= <expr><ternary><condition><expr><name>is_utc</name></expr> ?</condition><then> <expr><operator>*</operator><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><operator>*</operator><call><name>localtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>now</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmbuf</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>dt2</name><operator>.</operator><name>tm_hour</name></name> <operator>=</operator> <name><name>dt</name><operator>.</operator><name>tm_hour</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt2</name><operator>.</operator><name>tm_min</name></name> <operator>=</operator> <name><name>dt</name><operator>.</operator><name>tm_min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>dt2</name><operator>.</operator><name>tm_sec</name></name> <operator>=</operator> <name><name>dt</name><operator>.</operator><name>tm_sec</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>dt</name> <operator>=</operator> <name>dt2</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>dt</name><operator>.</operator><name>tm_isdst</name></name> <operator>=</operator> <ternary><condition><expr><name>is_utc</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>=</operator> <ternary><condition><expr><name>is_utc</name></expr> ?</condition><then> <expr><call><name>av_timegm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>mktime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dt</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>tzoffset</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>INT64_MAX</name> <operator>/</operator> <name>suffix</name> <operator>&lt;</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>*=</operator> <name>suffix</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>INT64_MAX</name> <operator>-</operator> <name>microseconds</name> <operator>&lt;</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>t</name> <operator>+=</operator> <name>microseconds</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>timeval</name> <operator>=</operator> <ternary><condition><expr><name>negative</name></expr> ?</condition><then> <expr><operator>-</operator><name>t</name></expr> </then><else>: <expr><name>t</name></expr></else></ternary></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_find_info_tag</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>arg_size</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>tag</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

<expr_stmt><expr><name>p</name> <operator>=</operator> <name>info</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'?'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for<control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>tag</name><operator>)</operator> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tag</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>q</name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'&amp;'</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>q</name> <operator>-</operator> <name>arg</name><operator>)</operator> <operator>&lt;</operator> <name>arg_size</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>q</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>q</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>tag1</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'&amp;'</literal></expr>)</condition><block type="pseudo"><block_content>

<break>break;</break></block_content></block></if></if_stmt>

<expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
