<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\mathematics.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"attributes.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rational.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intfloat.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_E</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_E</name></cpp:macro> <cpp:value>2.7182818284590452354</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_LN2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN2</name></cpp:macro> <cpp:value>0.69314718055994530942</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_LN10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LN10</name></cpp:macro> <cpp:value>2.30258509299404568402</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_LOG2_10</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_LOG2_10</name></cpp:macro> <cpp:value>3.32192809488736234787</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_PHI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PHI</name></cpp:macro> <cpp:value>1.61803398874989484820</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_PI</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI</name></cpp:macro> <cpp:value>3.14159265358979323846</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_PI_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_PI_2</name></cpp:macro> <cpp:value>1.57079632679489661923</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_SQRT1_2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT1_2</name></cpp:macro> <cpp:value>0.70710678118654752440</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>M_SQRT2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>M_SQRT2</name></cpp:macro> <cpp:value>1.41421356237309504880</cpp:value></cpp:define> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>NAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAN</name></cpp:macro> <cpp:value>av_int2float(0x7fc00000)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>INFINITY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFINITY</name></cpp:macro> <cpp:value>av_int2float(0x7f800000)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<enum>enum <name>AVRounding</name> <block>{

<decl><name>AV_ROUND_ZERO</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, 

<decl><name>AV_ROUND_INF</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>, 

<decl><name>AV_ROUND_DOWN</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>, 

<decl><name>AV_ROUND_UP</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>, 

<decl><name>AV_ROUND_NEAR_INF</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>, 

<decl><name>AV_ROUND_PASS_MINMAX</name> <init>= <expr><literal type="number">8192</literal></expr></init></decl>,

}</block>;</enum>

<function_decl><type><name>int64_t</name> <name>av_const</name></type> <name>av_gcd</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>int64_t</name></type> <name>av_rescale</name><argument_list>(<argument><expr><name>int64_t</name> <name>a</name></expr></argument>, <argument><expr><name>int64_t</name> <name>b</name></expr></argument>, <argument><expr><name>int64_t</name> <name>c</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>av_rescale_rnd</name><argument_list>(<argument><expr><name>int64_t</name> <name>a</name></expr></argument>, <argument><expr><name>int64_t</name> <name>b</name></expr></argument>, <argument><expr><name>int64_t</name> <name>c</name></expr></argument>, <argument><expr>enum <name>AVRounding</name> <name>rnd</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>av_rescale_q</name><argument_list>(<argument><expr><name>int64_t</name> <name>a</name></expr></argument>, <argument><expr><name>AVRational</name> <name>bq</name></expr></argument>, <argument><expr><name>AVRational</name> <name>cq</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>av_rescale_q_rnd</name><argument_list>(<argument><expr><name>int64_t</name> <name>a</name></expr></argument>, <argument><expr><name>AVRational</name> <name>bq</name></expr></argument>, <argument><expr><name>AVRational</name> <name>cq</name></expr></argument>,

<argument><expr>enum <name>AVRounding</name> <name>rnd</name></expr></argument>)</argument_list> <name>av_const</name></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>av_compare_ts</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts_a</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tb_a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts_b</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tb_b</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int64_t</name></type> <name>av_compare_mod</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>mod</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int64_t</name></type> <name>av_rescale_delta</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>in_tb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>in_ts</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>fs_tb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>out_tb</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int64_t</name></type> <name>av_add_stable</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>ts_tb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>inc_tb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>inc</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
