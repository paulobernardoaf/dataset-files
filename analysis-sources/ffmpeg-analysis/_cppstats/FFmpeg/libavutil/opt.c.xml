<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\opt.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avutil.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avstring.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"channel_layout.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dict.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"eval.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parseutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pixdesc.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"opt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"samplefmt.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"bprint.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<function><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>av_opt_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>last</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>class</name> <operator>=</operator> <operator>*</operator><operator>(</operator><specifier>const</specifier> <name>AVClass</name><operator>*</operator><operator>*</operator><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>last</name> <operator>&amp;&amp;</operator> <name>class</name> <operator>&amp;&amp;</operator> <name><name>class</name><operator>-&gt;</operator><name>option</name></name> <operator>&amp;&amp;</operator> <name><name>class</name><operator>-&gt;</operator><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>class</name><operator>-&gt;</operator><name>option</name></name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>last</name> <operator>&amp;&amp;</operator> <name><name>last</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>name</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>++</operator><name>last</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_number</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>den</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>intnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>intnum</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>unsigned</name> <name>int</name><operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>intnum</name> <operator>=</operator> <operator>*</operator><operator>(</operator>enum <name>AVPixelFormat</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>intnum</name> <operator>=</operator> <operator>*</operator><operator>(</operator>enum <name>AVSampleFormat</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>intnum</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>intnum</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>intnum</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVRational</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>num</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>AVRational</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>den</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_CONST</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>write_number</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>den</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>intnum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_FLAGS</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>!</operator><name>den</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>max</name></name> <operator>*</operator> <name><name>den</name> <argument_list type="generic">&lt; <argument><expr><name>num</name> <operator>*</operator> <name>intnum</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>min</name></name> <operator>*</operator> <name>den</name></expr></argument> &gt;</argument_list></name> <name>num</name> <operator>*</operator> <name>intnum</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>num</name> <operator>=</operator> <ternary><condition><expr><name>den</name></expr> ?</condition><then> <expr><name>num</name> <operator>*</operator> <name>intnum</name> <operator>/</operator> <name>den</name></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><name>num</name> <operator>&amp;&amp;</operator> <name>intnum</name></expr> ?</condition><then> <expr><name>INFINITY</name></expr> </then><else>: <expr><name>NAN</name></expr></else></ternary><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Value %f for parameter '%s' out of range [%g - %g]\n"</literal></expr></argument>,

<argument><expr><name>num</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_FLAGS</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>num</name><operator>*</operator><name>intnum</name><operator>/</operator><name>den</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>d</name> <argument_list type="generic">&lt; <argument><expr><operator>-</operator><literal type="number">1.5</literal> <operator>||</operator> <name>d</name></expr></argument> &gt;</argument_list></name> <literal type="number">0xFFFFFFFF</literal><operator>+</operator><literal type="number">0.5</literal> <operator>||</operator> <operator>(</operator><call><name>llrint</name><argument_list>(<argument><expr><name>d</name><operator>*</operator><literal type="number">256</literal></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">255</literal><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Value %f for parameter '%s' is not a valid set of 32bit integer flags\n"</literal></expr></argument>,

<argument><expr><name>num</name><operator>*</operator><name>intnum</name><operator>/</operator><name>den</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator>enum <name>AVPixelFormat</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>llrint</name><argument_list>(<argument><expr><name>num</name> <operator>/</operator> <name>den</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>intnum</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator>enum <name>AVSampleFormat</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>llrint</name><argument_list>(<argument><expr><name>num</name> <operator>/</operator> <name>den</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>intnum</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>llrint</name><argument_list>(<argument><expr><name>num</name> <operator>/</operator> <name>den</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>intnum</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>num</name> <operator>/</operator> <name>den</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>intnum</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d</name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>llrint</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>intnum</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break></block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case><block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>d</name> <init>= <expr><name>num</name> <operator>/</operator> <name>den</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>intnum</name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>d</name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator><name>UINT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>+</operator> <literal type="number">1ULL</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <operator>(</operator><call><name>llrint</name><argument_list>(<argument><expr><name>d</name> <operator>-</operator> <operator>(</operator><name>INT64_MAX</name> <operator>+</operator> <literal type="number">1ULL</literal><operator>)</operator></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>INT64_MAX</name> <operator>+</operator> <literal type="number">1ULL</literal><operator>)</operator><operator>)</operator><operator>*</operator><name>intnum</name></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>llrint</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>intnum</name></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break></block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>num</name> <operator>*</operator> <name>intnum</name> <operator>/</operator> <name>den</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>num</name> <operator>*</operator> <name>intnum</name> <operator>/</operator> <name>den</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator> <name>num</name> <operator>==</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>AVRational</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name>num</name> <operator>*</operator><name>intnum</name></expr>, <expr><name>den</name></expr> }</block></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>AVRational</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name>num</name> <operator>*</operator> <name>intnum</name> <operator>/</operator> <name>den</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>hexchar2int</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'0'</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'a'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'f'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'a'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="char">'A'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <literal type="char">'F'</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>c</name> <operator>-</operator> <literal type="char">'A'</literal> <operator>+</operator> <literal type="number">10</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_binary</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lendst</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bin</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lendst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>len</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <name>bin</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>val</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>a</name> <init>= <expr><call><name>hexchar2int</name><argument_list>(<argument><expr><operator>*</operator><name>val</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>b</name> <init>= <expr><call><name>hexchar2int</name><argument_list>(<argument><expr><operator>*</operator><name>val</name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>bin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ptr</name><operator>++</operator> <operator>=</operator> <operator>(</operator><name>a</name> <operator>&lt;&lt;</operator> <literal type="number">4</literal><operator>)</operator> <operator>|</operator> <name>b</name></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>bin</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lendst</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>dst</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_NUMVAL</name><parameter_list>(<parameter><type><name>opt</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((opt-&gt;type == AV_OPT_TYPE_INT64 || opt-&gt;type == AV_OPT_TYPE_UINT64 || opt-&gt;type == AV_OPT_TYPE_CONST || opt-&gt;type == AV_OPT_TYPE_FLAGS || opt-&gt;type == AV_OPT_TYPE_INT) ? opt-&gt;default_val.i64 : opt-&gt;default_val.dbl)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_number</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>num</name></decl>, <decl><type ref="prev"/><name>den</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"%d%*1[:/]%d%c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>num</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>cmd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>intnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_FLAGS</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">'+'</literal> <operator>||</operator> <operator>*</operator><name>val</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>cmd</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>val</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'+'</literal> <operator>&amp;&amp;</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>

<expr_stmt><expr><name><name>buf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o_named</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name>target_obj</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ci</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name><name>const_values</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name><name>const_names</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>o_named</name> <operator>&amp;&amp;</operator> <name><name>o_named</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>DEFAULT_NUMVAL</name><argument_list>(<argument><expr><name>o_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>unit</name></name></expr>)</condition> <block>{<block_content>

<for>for <control>(<init><expr><name>o_named</name> <operator>=</operator> <name>NULL</name></expr>;</init> <condition><expr><name>o_named</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>target_obj</name></expr></argument>, <argument><expr><name>o_named</name></expr></argument>)</argument_list></call></expr>;</condition> <incr/>)</control> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o_named</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name> <operator>&amp;&amp;</operator>

<name><name>o_named</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator>

<operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>o_named</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ci</name> <operator>+</operator> <literal type="number">6</literal> <operator>&gt;=</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>const_values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"const_values array too small for %s\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>const_names</name> <index>[<expr><name>ci</name></expr> ]</index></name> <operator>=</operator> <name><name>o_named</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_values</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>DEFAULT_NUMVAL</name><argument_list>(<argument><expr><name>o_named</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>const_names</name> <index>[<expr><name>ci</name></expr> ]</index></name> <operator>=</operator> <literal type="string">"default"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_values</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <call><name>DEFAULT_NUMVAL</name><argument_list>(<argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_names</name> <index>[<expr><name>ci</name></expr> ]</index></name> <operator>=</operator> <literal type="string">"max"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_values</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_names</name> <index>[<expr><name>ci</name></expr> ]</index></name> <operator>=</operator> <literal type="string">"min"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_values</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_names</name> <index>[<expr><name>ci</name></expr> ]</index></name> <operator>=</operator> <literal type="string">"none"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_values</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_names</name> <index>[<expr><name>ci</name></expr> ]</index></name> <operator>=</operator> <literal type="string">"all"</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_values</name><index>[<expr><name>ci</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>~</operator><literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_names</name> <index>[<expr><name>ci</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>const_values</name><index>[<expr><name>ci</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>av_expr_parse_and_eval</name><argument_list>(<argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><ternary><condition><expr><name>i</name></expr> ?</condition><then> <expr><name>buf</name></expr> </then><else>: <expr><name>val</name></expr></else></ternary></expr></argument>, <argument><expr><name>const_names</name></expr></argument>,

<argument><expr><name>const_values</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>res</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse option value \"%s\"\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>res</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_FLAGS</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>read_number</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intnum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>intnum</name> <operator>|</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>d</name></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>cmd</name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>intnum</name> <operator>&amp;</operator><operator>~</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>d</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>val</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>i</name> <operator>||</operator> <operator>!</operator><operator>*</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_image_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator>

<name><name>dst</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_video_size</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse option value \"%s\" as image size\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_video_rate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_parse_video_rate</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse option value \"%s\" as video rate\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_color</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_parse_color</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>obj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse option value \"%s\" as color\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_bool_name</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="string">"auto"</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><ternary><condition><expr><name>val</name></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_bool</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"auto"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_match_name</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"true,y,yes,enable,enabled,on"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>av_match_name</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"false,n,no,disable,disabled,off"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>end</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>n</name> <argument_list type="generic">&lt; <argument><expr><name><name>o</name><operator>-&gt;</operator><name>min</name></name> <operator>||</operator> <name>n</name></expr></argument> &gt;</argument_list></name> <name><name>o</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>fail</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse option value \"%s\" as boolean\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>set_string_fmt</name><argument_list>(<argument><expr><name>void</name> <operator>*</operator><name>obj</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>AVOption</name> <operator>*</operator><name>o</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>val</name></expr></argument>, <argument><expr><name>uint8_t</name> <operator>*</operator><name>dst</name></expr></argument>,

<argument><expr><name>int</name> <name>fmt_nb</name></expr></argument>, <argument><expr><call><name>int</name> <argument_list>(<argument><expr><call>(<modifier>*</modifier><name>get_fmt</name>)<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>desc</name></expr></argument>)</argument_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fmt</name></decl>, <decl><type ref="prev"/><name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>get_fmt</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>fmt</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tail</name></decl>;</decl_stmt>

<expr_stmt><expr><name>fmt</name> <operator>=</operator> <call><name>strtol</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tail</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>tail</name> <operator>||</operator> <operator>(</operator><name>unsigned</name><operator>)</operator><name>fmt</name> <operator>&gt;=</operator> <name>fmt_nb</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Unable to parse option value \"%s\" as %s\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>fmt_nb</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if<condition>(<expr><name>min</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>max</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>min</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <name>fmt_nb</name><operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name> <argument_list type="generic">&lt; <argument><expr><name>min</name> <operator>||</operator> <name>fmt</name></expr></argument> &gt;</argument_list></name> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Value %d for parameter '%s' out of %s format range [%d - %d]\n"</literal></expr></argument>,

<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_pixel_fmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_string_fmt</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><name>AV_PIX_FMT_NB</name></expr></argument>, <argument><expr><name>av_get_pix_fmt</name></expr></argument>, <argument><expr><literal type="string">"pixel format"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_sample_fmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_string_fmt</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>,

<argument><expr><name>AV_SAMPLE_FMT_NB</name></expr></argument>, <argument><expr><name>av_get_sample_fmt</name></expr></argument>, <argument><expr><literal type="string">"sample format"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_string_dict</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>av_dict_parse_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>options</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_STRING</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_PIXEL_FMT</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_SAMPLE_FMT</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_IMAGE_SIZE</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_DURATION</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_COLOR</name> <operator>&amp;&amp;</operator>

<name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CHANNEL_LAYOUT</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_BOOL</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_READONLY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_DEPRECATED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The \"%s\" option is deprecated: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<return>return <expr><call><name>set_string_bool</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<return>return <expr><call><name>set_string</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_BINARY</name></expr>:</case>

<return>return <expr><call><name>set_string_binary</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<return>return <expr><call><name>set_string_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>target_obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<return>return <expr><call><name>set_string_image_size</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>tmp</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_string_video_rate</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>write_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<return>return <expr><call><name>set_string_pixel_fmt</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<return>return <expr><call><name>set_string_sample_fmt</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>usecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_time</name><argument_list>(<argument><expr><operator>&amp;</operator><name>usecs</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse option value \"%s\" as duration\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>usecs</name> <argument_list type="generic">&lt; <argument><expr><name><name>o</name><operator>-&gt;</operator><name>min</name></name> <operator>||</operator> <name>usecs</name></expr></argument> &gt;</argument_list></name> <name><name>o</name><operator>-&gt;</operator><name>max</name></name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Value %f for parameter '%s' out of range [%g - %g]\n"</literal></expr></argument>,

<argument><expr><name>usecs</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>min</name></name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>max</name></name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>usecs</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case>

<return>return <expr><call><name>set_string_color</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>cl</name> <init>= <expr><call><name>av_get_channel_layout</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cl</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse option value \"%s\" as channel layout\n"</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></else></if_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DICT</name></expr>:</case>

<return>return <expr><call><name>set_string_dict</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid option type.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OPT_EVAL_NUMBER</name><parameter_list>(<parameter><type><name>name</name></type></parameter>, <parameter><type><name>opttype</name></type></parameter>, <parameter><type><name>vartype</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int av_opt_eval_ ##name(void *obj, const AVOption *o, const char *val, vartype *name ##_out) { if (!o || o-&gt;type != opttype || o-&gt;flags &amp; AV_OPT_FLAG_READONLY) return AVERROR(EINVAL); return set_string_number(obj, obj, o, val, name ##_out); }</cpp:value></cpp:define>

<macro><name>OPT_EVAL_NUMBER</name><argument_list>(<argument>flags</argument>, <argument>AV_OPT_TYPE_FLAGS</argument>, <argument>int</argument>)</argument_list></macro>

<macro><name>OPT_EVAL_NUMBER</name><argument_list>(<argument>int</argument>, <argument>AV_OPT_TYPE_INT</argument>, <argument>int</argument>)</argument_list></macro>

<macro><name>OPT_EVAL_NUMBER</name><argument_list>(<argument>int64</argument>, <argument>AV_OPT_TYPE_INT64</argument>, <argument>int64_t</argument>)</argument_list></macro>

<macro><name>OPT_EVAL_NUMBER</name><argument_list>(<argument>float</argument>, <argument>AV_OPT_TYPE_FLOAT</argument>, <argument>float</argument>)</argument_list></macro>

<macro><name>OPT_EVAL_NUMBER</name><argument_list>(<argument>double</argument>, <argument>AV_OPT_TYPE_DOUBLE</argument>, <argument>double</argument>)</argument_list></macro>

<macro><name>OPT_EVAL_NUMBER</name><argument_list>(<argument>q</argument>, <argument>AV_OPT_TYPE_RATIONAL</argument>, <argument>AVRational</argument>)</argument_list></macro>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_number</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>den</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>intnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_READONLY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<return>return <expr><call><name>write_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>intnum</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_double</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_q</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_bin</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lendst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_BINARY</name> <operator>||</operator> <name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_READONLY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ptr</name> <operator>=</operator> <ternary><condition><expr><name>len</name></expr> ?</condition><then> <expr><call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>lendst</name> <operator>=</operator> <operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>dst</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><operator>*</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>dst</name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>lendst</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_image_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>w</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>h</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The value set by option '%s' is not an image size.\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>w</name><operator>&lt;</operator><literal type="number">0</literal> <operator>||</operator> <name>h</name><operator>&lt;</operator><literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Invalid negative size value %dx%d for size '%s'\n"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>w</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>+</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_video_rate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_VIDEO_RATE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The value set by option '%s' is not a video rate.\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>val</name><operator>.</operator><name>num</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>val</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>set_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>set_format</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVOptionType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nb_fmts</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,

<argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>min</name></decl>, <decl><type ref="prev"/><name>max</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The value set by option '%s' is not a %s format"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>min</name> <operator>=</operator> <call><name>FFMAX</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>min</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>max</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>max</name></name></expr></argument>, <argument><expr><name>nb_fmts</name><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>fmt</name> <argument_list type="generic">&lt; <argument><expr><name>min</name> <operator>||</operator> <name>fmt</name></expr></argument> &gt;</argument_list></name> <name>max</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"Value %d for parameter '%s' out of %s format range [%d - %d]\n"</literal></expr></argument>,

<argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>min</name></expr></argument>, <argument><expr><name>max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ERANGE</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>fmt</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_pixel_fmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_format</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr></argument>, <argument><expr><literal type="string">"pixel"</literal></expr></argument>, <argument><expr><name>AV_PIX_FMT_NB</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_sample_fmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name></type> <name>fmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>set_format</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>, <argument><expr><name>AV_SAMPLE_FMT_NB</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_channel_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>cl</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The value set by option '%s' is not a channel layout.\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator> <operator>=</operator> <name>cl</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_dict_val</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVDictionary</name> <modifier>*</modifier></type><name>val</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_READONLY</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>format_duration</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <literal type="number">25</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>d</name> <operator>!=</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>buf</name><operator>++</operator><operator>)</operator> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>size</name><operator>--</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <operator>-</operator><name>d</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"INT64_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"INT64_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">3600</literal><operator>*</operator><literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name><literal type="string">":%02d:%02d.%06d"</literal></expr></argument>, <argument><expr><name>d</name> <operator>/</operator> <literal type="number">3600000000</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">60000000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>d</name> <operator>&gt;</operator> <literal type="number">60</literal><operator>*</operator><literal type="number">1000000</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d:%02d.%06d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">60000000</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><literal type="string">"%d.%06d"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>d</name> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<expr_stmt><expr><name>e</name> <operator>=</operator> <name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>e</name> <operator>&gt;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>e</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'0'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>e</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></while>

<if_stmt><if>if <condition>(<expr><name>e</name> <operator>&gt;</operator> <name>buf</name> <operator>&amp;&amp;</operator> <name><name>e</name><index>[<expr><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><operator>(</operator><operator>--</operator><name>e</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>bin</name></decl>, <decl><type ref="prev"/><name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name> <operator>||</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>&lt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CONST</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_DEPRECATED</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"The \"%s\" option is deprecated: %s\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>get_bool_name</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%08X"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>float</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%d/%d"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>AVRational</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>num</name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>AVRational</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><operator>-&gt;</operator><name>den</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_CONST</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>search_flags</name> <operator>&amp;</operator> <name>AV_OPT_ALLOW_NULL</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>out_val</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_BINARY</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>search_flags</name> <operator>&amp;</operator> <name>AV_OPT_ALLOW_NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>out_val</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>len</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>len</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name><name>out_val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>bin</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><operator>*</operator><name>out_val</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"%02X"</literal></expr></argument>, <argument><expr><name><name>bin</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<return>return <expr><literal type="number">0</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%dx%d"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>enum <name>AVPixelFormat</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator>enum <name>AVSampleFormat</name> <operator>*</operator><operator>)</operator><name>dst</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>format_duration</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%02x%02x%02x%02x"</literal></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">1</literal></expr>]</index></expr></argument>,

<argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">2</literal></expr>]</index></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator><index>[<expr><literal type="number">3</literal></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<expr_stmt><expr><name>i64</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PRIx64</name></expr></argument>, <argument><expr><name>i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DICT</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>search_flags</name> <operator>&amp;</operator> <name>AV_OPT_ALLOW_NULL</name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></if></if_stmt>

<return>return <expr><call><name>av_dict_get_string</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>out_val</name></expr></argument>, <argument><expr><literal type="char">'='</literal></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>;</return>

<default>default:</default>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></switch>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><ternary><condition><expr><operator>*</operator><name>out_val</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_number</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier><modifier>*</modifier></type><name>o_out</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>num</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>den</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>intnum</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>o_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>o_out</name><operator>=</operator> <name>o</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><call><name>read_number</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>den</name></expr></argument>, <argument><expr><name>intnum</name></expr></argument>)</argument_list></call></expr>;</return>

<label><name>error</name>:</label>

<expr_stmt><expr><operator>*</operator><name>den</name> <operator>=</operator>

<operator>*</operator><name>intnum</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_int</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>out_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>intnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>den</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intnum</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <name>num</name> <operator>*</operator> <name>intnum</name> <operator>/</operator> <name>den</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_double</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>out_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>intnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>den</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intnum</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <name>num</name> <operator>*</operator> <name>intnum</name> <operator>/</operator> <name>den</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_q</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>out_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>intnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>den</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intnum</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>intnum</name> <operator>==</operator> <name>intnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><name>intnum</name></expr>, <expr><name>den</name></expr>}</block></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name>num</name><operator>*</operator><name>intnum</name><operator>/</operator><name>den</name></expr></argument>, <argument><expr><literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_image_size</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>w_out</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>h_out</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The value for option '%s' is not an image size.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>w_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>w_out</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>h_out</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>h_out</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_video_rate</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>AVRational</name> <modifier>*</modifier></type><name>out_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>intnum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>num</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>den</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_number</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>den</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intnum</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>int</name><operator>)</operator><name>intnum</name> <operator>==</operator> <name>intnum</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator> <block>{ <expr><name>intnum</name></expr>, <expr><name>den</name></expr> }</block></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>out_val</name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name>num</name> <operator>*</operator> <name>intnum</name> <operator>/</operator> <name>den</name></expr></argument>, <argument><expr><literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">24</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_format</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>out_fmt</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVOptionType</name></name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The value for option '%s' is not a %s format.\n"</literal></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>out_fmt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_pixel_fmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVPixelFormat</name></name> <modifier>*</modifier></type><name>out_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_format</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr></argument>, <argument><expr><literal type="string">"pixel"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_sample_fmt</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVSampleFormat</name></name> <modifier>*</modifier></type><name>out_fmt</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>get_format</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>out_fmt</name></expr></argument>, <argument><expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr></argument>, <argument><expr><literal type="string">"sample"</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_channel_layout</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>cl</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>,

<argument><expr><literal type="string">"The value for option '%s' is not a channel layout.\n"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>cl</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_dict_val</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_val</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target_obj</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target_obj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>target_obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_DICT</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>src</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>target_obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><name>out_val</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_flag_is_set</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>flag_name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>flag</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>flag_name</name></expr></argument>,

<argument><expr><ternary><condition><expr><name>field</name></expr> ?</condition><then> <expr><name><name>field</name><operator>-&gt;</operator><name>unit</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>res</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>field</name> <operator>||</operator> <operator>!</operator><name>flag</name> <operator>||</operator> <name><name>flag</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CONST</name> <operator>||</operator>

<call><name>av_opt_get_int</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>field_name</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>res</name> <operator>&amp;</operator> <name><name>flag</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_int_value</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>av_log_obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"INT_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"INT_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"UINT32_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"I64_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"I64_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRId64</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>log_value</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>av_log_obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>d</name> <operator>==</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"INT_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>INT_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"INT_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>UINT32_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"UINT32_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <operator>(</operator><name>double</name><operator>)</operator><name>INT64_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"I64_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>INT64_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"I64_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>FLT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"FLT_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>FLT_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"FLT_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><name>FLT_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"-FLT_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><name>FLT_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"-FLT_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>DBL_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"DBL_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <name>DBL_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"DBL_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><name>DBL_MAX</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"-DBL_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>d</name> <operator>==</operator> <operator>-</operator><name>DBL_MIN</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"-DBL_MIN"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><literal type="string">"%g"</literal></expr></argument>, <argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>get_opt_const_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name> <operator>==</operator> <name>value</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>get_opt_flags_string</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>flags</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unit</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>

<name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name> <operator>&amp;</operator> <name>value</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_strlcatf</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<if_stmt><if>if <condition>(<expr><name><name>flags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>av_strdup</name><argument_list>(<argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>opt_list</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>av_log_obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>req_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rej_flags</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVOptionType</name></name></type> <name>parent_type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOptionRanges</name> <modifier>*</modifier></type><name>r</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>req_flags</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>rej_flags</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>unit</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>unit</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>unit</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>unit</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>unit</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %-15s "</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s%-17s "</literal></expr></argument>,

<argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_FILTERING_PARAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"-"</literal></expr></else></ternary></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;flags&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;int&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;int64&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;uint64&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;double&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;float&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;string&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;rational&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_BINARY</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;binary&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DICT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;dictionary&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;image_size&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;video_rate&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;pix_fmt&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;sample_fmt&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;duration&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;color&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;channel_layout&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">"&lt;boolean&gt;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_CONST</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><name>parent_type</name> <operator>==</operator> <name>AV_OPT_TYPE_INT</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12"</literal><name>PRId64</name><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%-12s "</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_ENCODING_PARAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'E'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_DECODING_PARAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'D'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_FILTERING_PARAM</name><operator>)</operator></expr>?</condition><then> <expr><literal type="char">'F'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_VIDEO_PARAM</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'V'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_AUDIO_PARAM</name> <operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'A'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_SUBTITLE_PARAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'S'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_EXPORT</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'X'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_READONLY</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'R'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_BSF_PARAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'B'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_RUNTIME_PARAM</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="char">'T'</literal></expr> </then><else>: <expr><literal type="char">'.'</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>help</name></name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" %s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_opt_query_ranges</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>r</name><operator>-&gt;</operator><name>nb_ranges</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" (from "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_value</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>range</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value_min</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" to "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>log_value</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>range</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>value_max</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></for>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_opt_freep_ranges</name><argument_list>(<argument><expr><operator>&amp;</operator><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CONST</name> <operator>&amp;&amp;</operator>

<name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_BINARY</name> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_COLOR</name> <operator>||</operator>

<name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_IMAGE_SIZE</name> <operator>||</operator>

<name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_STRING</name> <operator>||</operator>

<name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_DICT</name> <operator>||</operator>

<name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_VIDEO_RATE</name><operator>)</operator> <operator>&amp;&amp;</operator>

<operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">" (default "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>get_bool_name</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>def_flags</name> <init>= <expr><call><name>get_opt_flags_string</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>def_flags</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>def_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>def_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIX64</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">25</literal></expr>]</index></name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>format_duration</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>def_const</name> <init>= <expr><call><name>get_opt_const_name</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>def_const</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>def_const</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>log_int_value</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<break>break;</break>

</block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>log_value</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>q</name> <init>= <expr><call><name>av_d2q</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%d/%d"</literal></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_pix_fmt_name</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>av_x_if_null</name><argument_list>(<argument><expr><call><name>av_get_sample_fmt_name</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DICT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"0x%"</literal><name>PRIx64</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>opt_list</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name>req_flags</name></expr></argument>, <argument><expr><name>rej_flags</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_show2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>av_log_obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>req_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rej_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>AV_LOG_INFO</name></expr></argument>, <argument><expr><literal type="string">"%s AVOptions:\n"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator><operator>-&gt;</operator><name>class_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>opt_list</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>av_log_obj</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>req_flags</name></expr></argument>, <argument><expr><name>rej_flags</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_opt_set_defaults</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_opt_set_defaults2</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_opt_set_defaults2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mask</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>s</name><operator>)</operator> <operator>+</operator> <name><name>opt</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <name>flags</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_OPT_FLAG_READONLY</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<switch>switch <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_CONST</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<expr_stmt><expr><call><name>write_number</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>double</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_number</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>AVRational</name></type> <name>val</name></decl>;</decl_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>write_number</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>den</name></name></expr></argument>, <argument><expr><name><name>val</name><operator>.</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case>

<expr_stmt><expr><call><name>set_string_color</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<expr_stmt><expr><call><name>set_string</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<expr_stmt><expr><call><name>set_string_image_size</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<expr_stmt><expr><call><name>set_string_video_rate</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_BINARY</name></expr>:</case>

<expr_stmt><expr><call><name>set_string_binary</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DICT</name></expr>:</case>

<expr_stmt><expr><call><name>set_string_dict</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"AVOption type %d of option %s not implemented yet\n"</literal></expr></argument>,

<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>parse_key_value_pair</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buf</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_val_sep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pairs_sep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>av_get_token</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>key_val_sep</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>key</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>key</name> <operator>&amp;&amp;</operator> <call><name>strspn</name><argument_list>(<argument><expr><operator>*</operator><name>buf</name></expr></argument>, <argument><expr><name>key_val_sep</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>buf</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>val</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pairs_sep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Missing key or no key/value separator found after key '%s'\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting entry with key '%s' to value '%s'\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_CHILDREN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_OPTION_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Key '%s' not found.\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_set_options_string</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_val_sep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pairs_sep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>opts</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>parse_key_value_pair</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>key_val_sep</name></expr></argument>, <argument><expr><name>pairs_sep</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WHITESPACES</name></cpp:macro> <cpp:value>" \n\t\r"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>is_key_char</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><operator>(</operator><name>c</name> <operator>|</operator> <literal type="number">32</literal><operator>)</operator> <operator>-</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">26</literal> <operator>||</operator>

<operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>c</name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>&lt;</operator> <literal type="number">10</literal> <operator>||</operator>

<name>c</name> <operator>==</operator> <literal type="char">'-'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'_'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'/'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'.'</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>get_key</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ropts</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delim</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rkey</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><operator>*</operator><name>ropts</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_start</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>key_end</name></decl>;</decl_stmt>

<expr_stmt><expr><name>key_start</name> <operator>=</operator> <name>opts</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>WHITESPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><call><name>is_key_char</name><argument_list>(<argument><expr><operator>*</operator><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

<expr_stmt><expr><name>key_end</name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>

<expr_stmt><expr><name>opts</name> <operator>+=</operator> <call><name>strspn</name><argument_list>(<argument><expr><name>opts</name></expr></argument>, <argument><expr><name>WHITESPACES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>opts</name> <operator>||</operator> <operator>!</operator><call><name>strchr</name><argument_list>(<argument><expr><name>delim</name></expr></argument>, <argument><expr><operator>*</operator><name>opts</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>opts</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>rkey</name> <operator>=</operator> <call><name>av_malloc</name><argument_list>(<argument><expr><name>key_end</name> <operator>-</operator> <name>key_start</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>rkey</name></expr></argument>, <argument><expr><name>key_start</name></expr></argument>, <argument><expr><name>key_end</name> <operator>-</operator> <name>key_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>*</operator><name>rkey</name><operator>)</operator><index>[<expr><name>key_end</name> <operator>-</operator> <name>key_start</name></expr>]</index> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>ropts</name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_get_key_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ropts</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_val_sep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pairs_sep</name></decl></parameter>,

<parameter><decl><type><name>unsigned</name></type> <name>flags</name></decl></parameter>,

<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rkey</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>rval</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>val</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name> <init>= <expr><operator>*</operator><name>ropts</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>get_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>key_val_sep</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>

<operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_OPT_FLAG_IMPLICIT_KEY</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>val</name> <operator>=</operator> <call><name>av_get_token</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>pairs_sep</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ropts</name> <operator>=</operator> <name>opts</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rkey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>rval</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_from_string</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opts</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier> <modifier>*</modifier></type><name>shorthand</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_val_sep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pairs_sep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dummy_shorthand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>av_uninit</name><argument_list>(<argument><expr><name>parsed_key</name></expr></argument>)</argument_list></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>av_uninit</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>shorthand</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>shorthand</name> <operator>=</operator> <operator>&amp;</operator><name>dummy_shorthand</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>*</operator><name>opts</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_get_key_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>opts</name></expr></argument>, <argument><expr><name>key_val_sep</name></expr></argument>, <argument><expr><name>pairs_sep</name></expr></argument>,

<argument><expr><ternary><condition><expr><operator>*</operator><name>shorthand</name></expr> ?</condition><then> <expr><name>AV_OPT_FLAG_IMPLICIT_KEY</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,

<argument><expr><operator>&amp;</operator><name>parsed_key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"No option name near '%s'\n"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse '%s': %s\n"</literal></expr></argument>, <argument><expr><name>opts</name></expr></argument>,

<argument><expr><call><name>av_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>opts</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>opts</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>parsed_key</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <name>parsed_key</name></expr>;</expr_stmt>

<while>while <condition>(<expr><operator>*</operator><name>shorthand</name></expr>)</condition><block type="pseudo"><block_content> 

<expr_stmt><expr><name>shorthand</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<expr_stmt><expr><name>key</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>shorthand</name><operator>++</operator><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></else></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_DEBUG</name></expr></argument>, <argument><expr><literal type="string">"Setting '%s' to value '%s'\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_set</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_OPTION_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Option '%s' not found\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>parsed_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>parsed_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><name>count</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_opt_free</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_BINARY</name></expr>:</case>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>obj</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_DICT</name></expr>:</case>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<break>break;</break>

</block_content>}</block></switch>

</block_content>}</block></while>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_dict2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>tmp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>options</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>t</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><operator>*</operator><name>options</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_opt_set</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>AVERROR_OPTION_NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_set</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Error setting option %s to value %s.\n"</literal></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>t</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>options</name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_set_dict</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>options</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_opt_set_dict2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>av_opt_find</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>av_opt_find2</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>unit</name></decl></parameter>,

<parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>target_obj</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name><operator>=</operator> <operator>*</operator><operator>(</operator><name>AVClass</name><operator>*</operator><operator>*</operator><operator>)</operator><name>obj</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>search_flags</name> <operator>&amp;</operator> <name>AV_OPT_SEARCH_CHILDREN</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>search_flags</name> <operator>&amp;</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>child</name> <operator>=</operator> <call><name>av_opt_child_class_next</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>=</operator> <call><name>av_opt_find2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>child</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>o</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>child</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<while>while <condition>(<expr><name>child</name> <operator>=</operator> <call><name>av_opt_child_next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>o</name> <operator>=</operator> <call><name>av_opt_find2</name><argument_list>(<argument><expr><name>child</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>unit</name></expr></argument>, <argument><expr><name>opt_flags</name></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><name>target_obj</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>o</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></while>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<while>while <condition>(<expr><name>o</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>opt_flags</name><operator>)</operator> <operator>==</operator> <name>opt_flags</name> <operator>&amp;&amp;</operator>

<operator>(</operator><operator>(</operator><operator>!</operator><name>unit</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>AV_OPT_TYPE_CONST</name><operator>)</operator> <operator>||</operator>

<operator>(</operator><name>unit</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>unit</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>unit</name></name></expr></argument>, <argument><expr><name>unit</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>target_obj</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>search_flags</name> <operator>&amp;</operator> <name>AV_OPT_SEARCH_FAKE_OBJ</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>target_obj</name> <operator>=</operator> <name>obj</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><operator>*</operator><name>target_obj</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>o</name></expr>;</return>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>av_opt_child_next</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>child_next</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>c</name><operator>-&gt;</operator><name>child_next</name></name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>av_opt_child_class_next</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>parent</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>prev</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>parent</name><operator>-&gt;</operator><name>child_class_next</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name><name>parent</name><operator>-&gt;</operator><name>child_class_next</name></name><argument_list>(<argument><expr><name>prev</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>NULL</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>av_opt_ptr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>class</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>opt</name><init>= <expr><call><name>av_opt_find2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>class</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>AV_OPT_SEARCH_FAKE_OBJ</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if<condition>(<expr><operator>!</operator><name>opt</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>obj</name> <operator>+</operator> <name><name>opt</name><operator>-&gt;</operator><name>offset</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>opt_size</name><parameter_list>(<parameter><decl><type><name><name>enum</name> <name>AVOptionType</name></name></type> <name>type</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<switch>switch<condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVRational</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_BINARY</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>int</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>AVPixelFormat</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<return>return <expr><sizeof>sizeof<argument_list>(<argument><expr>enum <name>AVSampleFormat</name></expr></argument>)</argument_list></sizeof></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case>

<return>return <expr><literal type="number">4</literal></expr>;</return>

</block_content>}</block></switch>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_copy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>src</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>c</name> <operator>||</operator> <name>c</name> <operator>!=</operator> <operator>*</operator><operator>(</operator><name>AVClass</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<while>while <condition>(<expr><operator>(</operator><name>o</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>field_dst</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>field_src</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>src</name> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>field_dst8</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>field_dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>field_src8</name> <init>= <expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>field_src</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_STRING</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>field_dst8</name> <operator>!=</operator> <operator>*</operator><name>field_src8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>field_dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>field_dst8</name> <operator>=</operator> <call><name>av_strdup</name><argument_list>(<argument><expr><operator>*</operator><name>field_src8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>field_src8</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>field_dst8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>field_src8</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>field_dst8</name> <operator>!=</operator> <operator>*</operator><name>field_src8</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>field_dst8</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>field_dst8</name> <operator>=</operator> <call><name>av_memdup</name><argument_list>(<argument><expr><operator>*</operator><name>field_src8</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>*</operator><name>field_dst8</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>field_dst8</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition> <block>{<block_content>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_DICT</name></expr>)</condition> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>sdict</name> <init>= <expr><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>field_src</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier><modifier>*</modifier></type><name>ddict</name> <init>= <expr><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>field_dst</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>sdict</name> <operator>!=</operator> <operator>*</operator><name>ddict</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><name>ddict</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>ddict</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_dict_copy</name><argument_list>(<argument><expr><name>ddict</name></expr></argument>, <argument><expr><operator>*</operator><name>sdict</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_dict_count</name><argument_list>(<argument><expr><operator>*</operator><name>sdict</name></expr></argument>)</argument_list></call> <operator>!=</operator> <call><name>av_dict_count</name><argument_list>(<argument><expr><operator>*</operator><name>ddict</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><call><name>opt_size</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt></block_content></block></if>

<else>else<block type="pseudo"><block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>field_dst</name></expr></argument>, <argument><expr><name>field_src</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

</block_content>}</block></else></if_stmt>

</block_content>}</block></while>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_query_ranges</name><parameter_list>(<parameter><decl><type><name>AVOptionRanges</name> <modifier>*</modifier><modifier>*</modifier></type><name>ranges_arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVClass</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><operator>*</operator><operator>(</operator><name>AVClass</name><operator>*</operator><operator>*</operator><operator>)</operator><name>obj</name></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> (<modifier>*</modifier><name>callback</name>)<parameter_list>(<parameter><decl><type><name>AVOptionRanges</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list> <init>= <expr><name>NULL</name></expr></init>;</function_decl>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <operator>(</operator><literal type="number">52</literal> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> <literal type="number">11</literal> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>query_ranges</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>callback</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>callback</name> <operator>=</operator> <name>av_opt_query_ranges_default</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>callback</name><argument_list>(<argument><expr><name>ranges_arg</name></expr></argument>, <argument><expr><name>obj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_OPT_MULTI_COMPONENT_RANGE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ranges_arg</name><operator>)</operator><operator>-&gt;</operator><name>nb_components</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_query_ranges_default</name><parameter_list>(<parameter><decl><type><name>AVOptionRanges</name> <modifier>*</modifier><modifier>*</modifier></type><name>ranges_arg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>AVOptionRanges</name> <modifier>*</modifier></type><name>ranges</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ranges</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOptionRange</name> <modifier>*</modifier><modifier>*</modifier></type><name>range_array</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOptionRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>range</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><call><name>av_opt_find</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

<expr_stmt><expr><operator>*</operator><name>ranges_arg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ranges</name> <operator>||</operator> <operator>!</operator><name>range</name> <operator>||</operator> <operator>!</operator><name>range_array</name> <operator>||</operator> <operator>!</operator><name>field</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name><name>ranges</name><operator>-&gt;</operator><name>range</name></name> <operator>=</operator> <name>range_array</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ranges</name><operator>-&gt;</operator><name>range</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>range</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ranges</name><operator>-&gt;</operator><name>nb_ranges</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>ranges</name><operator>-&gt;</operator><name>nb_components</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>is_range</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_min</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>min</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_max</name></name> <operator>=</operator> <name><name>field</name><operator>-&gt;</operator><name>max</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_max</name></name> <operator>=</operator> <literal type="number">0x10FFFF</literal></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_min</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_max</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_min</name></name> <operator>=</operator> <name>INT_MIN</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_max</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_max</name></name> <operator>=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">128</literal><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_min</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_max</name></name> <operator>=</operator> <name>INT_MAX</name><operator>/</operator><literal type="number">8</literal></expr>;</expr_stmt>

<break>break;</break>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_min</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>component_max</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_min</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name><name>range</name><operator>-&gt;</operator><name>value_max</name></name> <operator>=</operator> <name>INT_MAX</name></expr>;</expr_stmt>

<break>break;</break>

<default>default:</default>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>AVERROR</name><argument_list>(<argument><expr><name>ENOSYS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<goto>goto <name>fail</name>;</goto>

</block_content>}</block></switch>

<expr_stmt><expr><operator>*</operator><name>ranges_arg</name> <operator>=</operator> <name>ranges</name></expr>;</expr_stmt>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<label><name>fail</name>:</label>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>ranges</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name>range_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_opt_freep_ranges</name><parameter_list>(<parameter><decl><type><name>AVOptionRanges</name> <modifier>*</modifier><modifier>*</modifier></type><name>rangesp</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVOptionRanges</name> <modifier>*</modifier></type><name>ranges</name> <init>= <expr><operator>*</operator><name>rangesp</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ranges</name></expr>)</condition><block type="pseudo"><block_content>

<return>return;</return></block_content></block></if></if_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ranges</name><operator>-&gt;</operator><name>nb_ranges</name></name> <operator>*</operator> <name><name>ranges</name><operator>-&gt;</operator><name>nb_components</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>

<decl_stmt><decl><type><name>AVOptionRange</name> <modifier>*</modifier></type><name>range</name> <init>= <expr><name><name>ranges</name><operator>-&gt;</operator><name>range</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>range</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>range</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ranges</name><operator>-&gt;</operator><name>range</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ranges</name><operator>-&gt;</operator><name>range</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><name>rangesp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_is_set_to_default</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>i64</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>double</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>d2</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>float</name></type> <name>f</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVRational</name></type> <name>q</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>w</name></decl>, <decl><type ref="prev"/><name>h</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name> <operator>||</operator> <operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>obj</name><operator>)</operator> <operator>+</operator> <name><name>o</name><operator>-&gt;</operator><name>offset</name></name></expr>;</expr_stmt>

<switch>switch <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>

<case>case <expr><name>AV_OPT_TYPE_CONST</name></expr>:</case>

<return>return <expr><literal type="number">1</literal></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_BOOL</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_FLAGS</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_PIXEL_FMT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_SAMPLE_FMT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_CHANNEL_LAYOUT</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_DURATION</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_INT64</name></expr>:</case>

<case>case <expr><name>AV_OPT_TYPE_UINT64</name></expr>:</case>

<expr_stmt><expr><call><name>read_number</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>i64</name></name> <operator>==</operator> <name>i64</name></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_STRING</name></expr>:</case>

<expr_stmt><expr><name>str</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>str</name> <operator>||</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr>)</condition><block type="pseudo"><block_content> 

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_DOUBLE</name></expr>:</case>

<expr_stmt><expr><call><name>read_number</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name> <operator>==</operator> <name>d</name></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_FLOAT</name></expr>:</case>

<expr_stmt><expr><call><name>read_number</name><argument_list>(<argument><expr><name>o</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>d</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>f</name> <operator>=</operator> <name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d2</name> <operator>=</operator> <name>f</name></expr>;</expr_stmt>

<return>return <expr><name>d2</name> <operator>==</operator> <name>d</name></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_RATIONAL</name></expr>:</case>

<expr_stmt><expr><name>q</name> <operator>=</operator> <call><name>av_d2q</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>dbl</name></name></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>!</operator><call><name>av_cmp_q</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>AVRational</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_BINARY</name></expr>:</case> <block>{<block_content>

<struct>struct <block>{

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>size</name></decl>;</decl_stmt>

}</block> <decl><name>tmp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>opt_size</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>opt_ptr</name> <init>= <expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt_size</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name> <operator>||</operator> <operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>opt_size</name> <operator>||</operator> <operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name> <operator>||</operator> <operator>!</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument> )</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>opt_size</name> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>set_string_binary</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>opt_ptr</name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>tmp</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_free</name><argument_list>(<argument><expr><name><name>tmp</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_DICT</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionary</name> <modifier>*</modifier></type><name>dict2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>AVDictionary</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>dst</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>en1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVDictionaryEntry</name> <modifier>*</modifier></type><name>en2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>av_dict_parse_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict1</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"="</literal></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<do>do <block>{<block_content>

<expr_stmt><expr><name>en1</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>dict1</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>en1</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>en2</name> <operator>=</operator> <call><name>av_dict_get</name><argument_list>(<argument><expr><name>dict2</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>en2</name></expr></argument>, <argument><expr><name>AV_DICT_IGNORE_SUFFIX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block> while <condition>(<expr><name>en1</name> <operator>&amp;&amp;</operator> <name>en2</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>en1</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>en2</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>en1</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>en2</name><operator>-&gt;</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

<expr_stmt><expr><call><name>av_dict_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dict1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><operator>(</operator><operator>!</operator><name>en1</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>en2</name><operator>)</operator></expr>;</return>

</block_content>}</block>

<case>case <expr><name>AV_OPT_TYPE_IMAGE_SIZE</name></expr>:</case>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name> <operator>||</operator> <operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>w</name> <operator>=</operator> <name>h</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_video_size</name><argument_list>(<argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name>w</name> <operator>==</operator> <operator>*</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>h</name> <operator>==</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><name>dst</name><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_VIDEO_RATE</name></expr>:</case>

<expr_stmt><expr><name>q</name> <operator>=</operator> <operator>(</operator><name>AVRational</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_video_rate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>q</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>av_cmp_q</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>AVRational</name><operator>*</operator><operator>)</operator><name>dst</name></expr></argument>, <argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</return>

<case>case <expr><name>AV_OPT_TYPE_COLOR</name></expr>:</case> <block>{<block_content>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>color</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_parse_color</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>default_val</name><operator>.</operator><name>str</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>color</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>color</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block>

<default>default:</default>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Not supported option type: %d, option name: %s\n"</literal></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<break>break;</break>

</block_content>}</block></switch>

<return>return <expr><name>AVERROR_PATCHWELCOME</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_is_set_to_default_by_name</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>search_flags</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>target</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>o</name> <operator>=</operator> <call><name>av_opt_find2</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>search_flags</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>o</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>AVERROR_OPTION_NOT_FOUND</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_opt_is_set_to_default</name><argument_list>(<argument><expr><name>target</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_opt_serialize</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>obj</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>opt_flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>buffer</name></decl></parameter>,

<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>key_val_sep</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>pairs_sep</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>AVOption</name> <modifier>*</modifier></type><name>o</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>AVBPrint</name></type> <name>bprint</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>, <decl><type ref="prev"/><name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>special_chars</name><index>[]</index></name> <init>= <expr><block>{<expr><name>pairs_sep</name></expr>, <expr><name>key_val_sep</name></expr>, <expr><literal type="char">'\0'</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>pairs_sep</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>key_val_sep</name> <operator>==</operator> <literal type="char">'\0'</literal> <operator>||</operator> <name>pairs_sep</name> <operator>==</operator> <name>key_val_sep</name> <operator>||</operator>

<name>pairs_sep</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>||</operator> <name>key_val_sep</name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Invalid separator(s) found."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name>obj</name> <operator>||</operator> <operator>!</operator><name>buffer</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>*</operator><name>buffer</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bprint</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><name>AV_BPRINT_SIZE_UNLIMITED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>o</name> <operator>=</operator> <call><name>av_opt_next</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name><name>o</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>AV_OPT_TYPE_CONST</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>AV_OPT_SERIALIZE_OPT_FLAGS_EXACT</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>!=</operator> <name>opt_flags</name></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if>

<if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>o</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>opt_flags</name><operator>)</operator> <operator>!=</operator> <name>opt_flags</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>AV_OPT_SERIALIZE_SKIP_DEFAULTS</name> <operator>&amp;&amp;</operator> <call><name>av_opt_is_set_to_default</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name>o</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<continue>continue;</continue></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>av_opt_get</name><argument_list>(<argument><expr><name>obj</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bprint</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>ret</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>buf</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>cnt</name><operator>++</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bprint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pairs_sep</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_bprint_escape</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bprint</name></expr></argument>, <argument><expr><name><name>o</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>special_chars</name></expr></argument>, <argument><expr><name>AV_ESCAPE_MODE_BACKSLASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_append_data</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bprint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key_val_sep</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_bprint_escape</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bprint</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>special_chars</name></expr></argument>, <argument><expr><name>AV_ESCAPE_MODE_BACKSLASH</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_freep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><call><name>av_bprint_finalize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>bprint</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
