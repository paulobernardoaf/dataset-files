<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\x86\w64xmmtest.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/bswap.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>storexmmregs</name><parameter_list>(<parameter><type><name>mem</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__asm__ volatile( "movups %%xmm6 , 0x00(%0)\n\t" "movups %%xmm7 , 0x10(%0)\n\t" "movups %%xmm8 , 0x20(%0)\n\t" "movups %%xmm9 , 0x30(%0)\n\t" "movups %%xmm10, 0x40(%0)\n\t" "movups %%xmm11, 0x50(%0)\n\t" "movups %%xmm12, 0x60(%0)\n\t" "movups %%xmm13, 0x70(%0)\n\t" "movups %%xmm14, 0x80(%0)\n\t" "movups %%xmm15, 0x90(%0)\n\t" :: "r"(mem) : "memory")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>testxmmclobbers</name><parameter_list>(<parameter><type><name>func</name></type></parameter>, <parameter><type><name>ctx</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>uint64_t xmm[2][10][2]; int ret; storexmmregs(xmm[0]); ret = __real_ ##func(ctx, __VA_ARGS__); storexmmregs(xmm[1]); if (memcmp(xmm[0], xmm[1], sizeof(xmm[0]))) { int i; av_log(ctx, AV_LOG_ERROR, "XMM REGS CLOBBERED IN %s!\n", #func); for (i = 0; i &lt; 10; i ++) if (xmm[0][i][0] != xmm[1][i][0] || xmm[0][i][1] != xmm[1][i][1]) { av_log(ctx, AV_LOG_ERROR, "xmm%-2d = %016"PRIx64"%016"PRIx64"\n", 6 + i, av_bswap64(xmm[0][i][0]), av_bswap64(xmm[0][i][1])); av_log(ctx, AV_LOG_ERROR, " -&gt; %016"PRIx64"%016"PRIx64"\n", av_bswap64(xmm[1][i][0]), av_bswap64(xmm[1][i][1])); } abort(); } return ret</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wrap</name><parameter_list>(<parameter><type><name>func</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>int __real_ ##func; int __wrap_ ##func; int __wrap_ ##func</cpp:value></cpp:define>

</unit>
