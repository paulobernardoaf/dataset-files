<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\x86\asm.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>xmm_reg</name> <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name></decl>, <name>b</name>;</decl_stmt> }</block></struct></type> <name>xmm_reg</name>;</typedef>

<typedef>typedef <type><struct>struct <name>ymm_reg</name> <block>{ <decl_stmt><decl><type><name>uint64_t</name></type> <name>a</name></decl>, <name>b</name>, <name>c</name>, <name>d</name>;</decl_stmt> }</block></struct></type> <name>ymm_reg</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_OPSIZE</name></cpp:macro> <cpp:value>"q"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_a</name></cpp:macro> <cpp:value>"rax"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_b</name></cpp:macro> <cpp:value>"rbx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_c</name></cpp:macro> <cpp:value>"rcx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_d</name></cpp:macro> <cpp:value>"rdx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_D</name></cpp:macro> <cpp:value>"rdi"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_S</name></cpp:macro> <cpp:value>"rsi"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PTR_SIZE</name></cpp:macro> <cpp:value>"8"</cpp:value></cpp:define>

<typedef>typedef <type><name>int64_t</name></type> <name>x86_reg</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_sp</name></cpp:macro> <cpp:value>"rsp"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_BP</name></cpp:macro> <cpp:value>"rbp"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGBP</name></cpp:macro> <cpp:value>rbp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGa</name></cpp:macro> <cpp:value>rax</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGb</name></cpp:macro> <cpp:value>rbx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGc</name></cpp:macro> <cpp:value>rcx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGd</name></cpp:macro> <cpp:value>rdx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGSP</name></cpp:macro> <cpp:value>rsp</cpp:value></cpp:define>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>ARCH_X86_32</name></expr></cpp:elif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_OPSIZE</name></cpp:macro> <cpp:value>"l"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_a</name></cpp:macro> <cpp:value>"eax"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_b</name></cpp:macro> <cpp:value>"ebx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_c</name></cpp:macro> <cpp:value>"ecx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_d</name></cpp:macro> <cpp:value>"edx"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_D</name></cpp:macro> <cpp:value>"edi"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_S</name></cpp:macro> <cpp:value>"esi"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_PTR_SIZE</name></cpp:macro> <cpp:value>"4"</cpp:value></cpp:define>

<typedef>typedef <type><name>int32_t</name></type> <name>x86_reg</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_sp</name></cpp:macro> <cpp:value>"esp"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REG_BP</name></cpp:macro> <cpp:value>"ebp"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGBP</name></cpp:macro> <cpp:value>ebp</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGa</name></cpp:macro> <cpp:value>eax</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGb</name></cpp:macro> <cpp:value>ebx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGc</name></cpp:macro> <cpp:value>ecx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGd</name></cpp:macro> <cpp:value>edx</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_REGSP</name></cpp:macro> <cpp:value>esp</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<typedef>typedef <type><name>int</name></type> <name>x86_reg</name>;</typedef>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_7REGS</name></cpp:macro> <cpp:value>(ARCH_X86_64 || (HAVE_EBX_AVAILABLE &amp;&amp; HAVE_EBP_AVAILABLE))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HAVE_6REGS</name></cpp:macro> <cpp:value>(ARCH_X86_64 || (HAVE_EBX_AVAILABLE || HAVE_EBP_AVAILABLE))</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BROKEN_RELOCATIONS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_XMM_CLOBBERS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMM_CLOBBERS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>__VA_ARGS__</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMM_CLOBBERS_ONLY</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>: __VA_ARGS__</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMM_CLOBBERS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XMM_CLOBBERS_ONLY</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LABEL_MANGLE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTERN_PREFIX #a</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>PIC</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_MANGLE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#a "(%%rip)"</cpp:value></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LOCAL_MANGLE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>#a</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_INLINE_ASM_DIRECT_SYMBOL_REFS</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANGLE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>EXTERN_PREFIX LOCAL_MANGLE(a)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS_ADD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS_ARRAY_ADD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS_ARRAY</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro></cpp:define>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MANGLE</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>"%["#a"]"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_0</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_1</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_0(P,X1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_2</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_1(P,X1,X2)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_3</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_2(P,X1,X2,X3)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_4</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>X4</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_3(P,X1,X2,X3,X4)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_5</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>X4</name></type></parameter>,<parameter><type><name>X5</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_4(P,X1,X2,X3,X4,X5)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_6</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>X4</name></type></parameter>,<parameter><type><name>X5</name></type></parameter>,<parameter><type><name>X6</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_5(P,X1,X2,X3,X4,X5,X6)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_7</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>X4</name></type></parameter>,<parameter><type><name>X5</name></type></parameter>,<parameter><type><name>X6</name></type></parameter>,<parameter><type><name>X7</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_6(P,X1,X2,X3,X4,X5,X6,X7)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_8</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>X4</name></type></parameter>,<parameter><type><name>X5</name></type></parameter>,<parameter><type><name>X6</name></type></parameter>,<parameter><type><name>X7</name></type></parameter>,<parameter><type><name>X8</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_7(P,X1,X2,X3,X4,X5,X6,X7,X8)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FE_9</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><name>X</name></type></parameter>,<parameter><type><name>X1</name></type></parameter>,<parameter><type><name>X2</name></type></parameter>,<parameter><type><name>X3</name></type></parameter>,<parameter><type><name>X4</name></type></parameter>,<parameter><type><name>X5</name></type></parameter>,<parameter><type><name>X6</name></type></parameter>,<parameter><type><name>X7</name></type></parameter>,<parameter><type><name>X8</name></type></parameter>,<parameter><type><name>X9</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>P(X), FE_8(P,X1,X2,X3,X4,X5,X6,X7,X8,X9)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FE_IMPL</name><parameter_list>(<parameter><type><name>_0</name></type></parameter>,<parameter><type><name>_1</name></type></parameter>,<parameter><type><name>_2</name></type></parameter>,<parameter><type><name>_3</name></type></parameter>,<parameter><type><name>_4</name></type></parameter>,<parameter><type><name>_5</name></type></parameter>,<parameter><type><name>_6</name></type></parameter>,<parameter><type><name>_7</name></type></parameter>,<parameter><type><name>_8</name></type></parameter>,<parameter><type><name>_9</name></type></parameter>,<parameter><type><name>NAME</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>NAME</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FE</name><parameter_list>(<parameter><type><name>A</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_FE_IMPL A</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GET_FE_GLUE</name><parameter_list>(<parameter><type><name>x</name></type></parameter>, <parameter><type><name>y</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>x y</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FOR_EACH_VA</name><parameter_list>(<parameter><type><name>P</name></type></parameter>,<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>GET_FE_GLUE(GET_FE((__VA_ARGS__,FE_9,FE_8,FE_7,FE_6,FE_5,FE_4,FE_3,FE_2,FE_1,FE_0)), (P,__VA_ARGS__))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_CONSTRAINT</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[x] "m"(x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS_ADD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, FOR_EACH_VA(NAME_CONSTRAINT,__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR_EACH_VA(NAME_CONSTRAINT,__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAME_CONSTRAINT_ARRAY</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>[x] "m"(*x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS_ARRAY_ADD</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>, FOR_EACH_VA(NAME_CONSTRAINT_ARRAY,__VA_ARGS__)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NAMED_CONSTRAINTS_ARRAY</name><parameter_list>(<parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>FOR_EACH_VA(NAME_CONSTRAINT_ARRAY,__VA_ARGS__)</cpp:value></cpp:define>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</unit>
