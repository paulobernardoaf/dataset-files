<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\x86\bswap.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;intrin.h&gt;</cpp:file></cpp:include>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap16</name></cpp:macro> <cpp:value>av_bswap16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>uint16_t</name></type> <name>av_bswap16</name><parameter_list>(<parameter><decl><type><name>uint16_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_rotr16</name><argument_list>(<argument><expr><name>x</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap32</name></cpp:macro> <cpp:value>av_bswap32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>uint32_t</name></type> <name>av_bswap32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_byteswap_ulong</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap64</name></cpp:macro> <cpp:value>av_bswap64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name> <name>av_const</name></type> <name>av_bswap64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>_byteswap_uint64</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_INLINE_ASM</name></expr></cpp:elif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AV_GCC_VERSION_AT_MOST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap16</name></cpp:macro> <cpp:value>av_bswap16</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>unsigned</name></type> <name>av_bswap16</name><parameter_list>(<parameter><decl><type><name>unsigned</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__("rorw $8, %w0" : "+r"(x));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>AV_GCC_VERSION_AT_MOST</name><argument_list>(<argument><expr><literal type="number">4</literal><operator>,</operator><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap32</name></cpp:macro> <cpp:value>av_bswap32</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>av_const</name> <name>uint32_t</name></type> <name>av_bswap32</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__("bswap %0" : "+r" (x));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>ARCH_X86_64</name></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>av_bswap64</name></cpp:macro> <cpp:value>av_bswap64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name> <name>av_const</name></type> <name>av_bswap64</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>x</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__("bswap %0": "=r" (x) : "0" (x));</asm>

<return>return <expr><name>x</name></expr>;</return>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
