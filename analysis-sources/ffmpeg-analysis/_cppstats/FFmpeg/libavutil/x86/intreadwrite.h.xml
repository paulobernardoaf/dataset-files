<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\x86\intreadwrite.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/attributes.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_MMX</name></expr></cpp:if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>!</operator><name>HAVE_FAST_64BIT</name> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__MMX__</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_COPY64</name></cpp:macro> <cpp:value>AV_COPY64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_COPY64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__("movq %1, %%mm0 \n\t"

"movq %%mm0, %0 \n\t"

: "=m"(*(uint64_t*)d)

: "m" (*(const uint64_t*)s)

: "mm0");</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_SWAP64</name></cpp:macro> <cpp:value>AV_SWAP64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_SWAP64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__("movq %1, %%mm0 \n\t"

"movq %0, %%mm1 \n\t"

"movq %%mm0, %0 \n\t"

"movq %%mm1, %1 \n\t"

: "+m"(*(uint64_t*)a), "+m"(*(uint64_t*)b)

::"mm0", "mm1");</asm>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_ZERO64</name></cpp:macro> <cpp:value>AV_ZERO64</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_ZERO64</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<asm>__asm__("pxor %%mm0, %%mm0 \n\t"

"movq %%mm0, %0 \n\t"

: "=m"(*(uint64_t*)d)

:: "mm0");</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_COPY128</name></cpp:macro> <cpp:value>AV_COPY128</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_COPY128</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>s</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct>struct <name>v</name> <block>{<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>}</block>;</struct>

<asm>__asm__("movaps %1, %%xmm0 \n\t"

"movaps %%xmm0, %0 \n\t"

: "=m"(*(struct v*)d)

: "m" (*(const struct v*)s)

: "xmm0");</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__SSE2__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AV_ZERO128</name></cpp:macro> <cpp:value>AV_ZERO128</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>av_always_inline</name> <name>void</name></type> <name>AV_ZERO128</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<struct>struct <name>v</name> <block>{<decl_stmt><decl><type><name>uint64_t</name></type> <name><name>v</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>}</block>;</struct>

<asm>__asm__("pxor %%xmm0, %%xmm0 \n\t"

"movdqa %%xmm0, %0 \n\t"

: "=m"(*(struct v*)d)

:: "xmm0");</asm>

</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

</unit>
