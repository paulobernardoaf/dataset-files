<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\cuda_check.h"><typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>cuda_check_GetErrorName</name><parameter_list>(<parameter><decl><type><name>CUresult</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pstr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <function_decl><type><name>CUresult</name> <name>CUDAAPI</name></type> <name>cuda_check_GetErrorString</name><parameter_list>(<parameter><decl><type><name>CUresult</name></type> <name>error</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>pstr</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>int</name></type> <name>ff_cuda_check</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>avctx</name></decl></parameter>,

<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cuGetErrorName_fn</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>cuGetErrorString_fn</name></decl></parameter>,

<parameter><decl><type><name>CUresult</name></type> <name>err</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_name</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>err_string</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_TRACE</name></expr></argument>, <argument><expr><literal type="string">"Calling %s\n"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err</name> <operator>==</operator> <name>CUDA_SUCCESS</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>cuda_check_GetErrorName</name> <operator>*</operator><operator>)</operator><name>cuGetErrorName_fn</name><operator>)</operator><operator>(</operator><name>err</name><operator>,</operator> <operator>&amp;</operator><name>err_name</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><operator>(</operator><operator>(</operator><name>cuda_check_GetErrorString</name> <operator>*</operator><operator>)</operator><name>cuGetErrorString_fn</name><operator>)</operator><operator>(</operator><name>err</name><operator>,</operator> <operator>&amp;</operator><name>err_string</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"%s failed"</literal></expr></argument>, <argument><expr><name>func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>err_name</name> <operator>&amp;&amp;</operator> <name>err_string</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">" -&gt; %s: %s"</literal></expr></argument>, <argument><expr><name>err_name</name></expr></argument>, <argument><expr><name>err_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>avctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_EXTERNAL</name></expr>;</return>

</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CUDA_CHECK</name><parameter_list>(<parameter><type><name>avclass</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_cuda_check(avclass, cuGetErrorName, cuGetErrorString, (x), #x)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FF_CUDA_CHECK_DL</name><parameter_list>(<parameter><type><name>avclass</name></type></parameter>, <parameter><type><name>cudl</name></type></parameter>, <parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>ff_cuda_check(avclass, cudl-&gt;cuGetErrorName, cudl-&gt;cuGetErrorString, (x), #x)</cpp:value></cpp:define>

</unit>
