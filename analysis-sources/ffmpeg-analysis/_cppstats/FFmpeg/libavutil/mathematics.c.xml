<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\mathematics.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mathematics.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/intmath.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libavutil/common.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"avassert.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<function><type><name>int64_t</name></type> <name>av_gcd</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>)</parameter_list> <block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>za</name></decl>, <decl><type ref="prev"/><name>zb</name></decl>, <decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>u</name></decl>, <decl><type ref="prev"/><name>v</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>b</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>za</name> <operator>=</operator> <call><name>ff_ctzll</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>zb</name> <operator>=</operator> <call><name>ff_ctzll</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>FFMIN</name><argument_list>(<argument><expr><name>za</name></expr></argument>, <argument><expr><name>zb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>u</name> <operator>=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>a</name> <operator>&gt;&gt;</operator> <name>za</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>=</operator> <call><name>llabs</name><argument_list>(<argument><expr><name>b</name> <operator>&gt;&gt;</operator> <name>zb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<while>while <condition>(<expr><name>u</name> <operator>!=</operator> <name>v</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>u</name> <operator>&gt;</operator> <name>v</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><call><name>FFSWAP</name><argument_list>(<argument><expr><name>int64_t</name></expr></argument>, <argument><expr><name>v</name></expr></argument>, <argument><expr><name>u</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>v</name> <operator>-=</operator> <name>u</name></expr>;</expr_stmt>

<expr_stmt><expr><name>v</name> <operator>&gt;&gt;=</operator> <call><name>ff_ctzll</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></while>

<return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>u</name> <operator>&lt;&lt;</operator> <name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_rescale_rnd</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name><name>enum</name> <name>AVRounding</name></name></type> <name>rnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><name>b</name> <operator>&gt;=</operator><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert2</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rnd</name><operator>&amp;</operator><operator>~</operator><name>AV_ROUND_PASS_MINMAX</name><operator>)</operator><operator>&lt;=</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>rnd</name><operator>&amp;</operator><operator>~</operator><name>AV_ROUND_PASS_MINMAX</name><operator>)</operator><operator>!=</operator><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>b</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>(</operator><name>unsigned</name><operator>)</operator><operator>(</operator><name>rnd</name><operator>&amp;</operator><operator>~</operator><name>AV_ROUND_PASS_MINMAX</name><operator>)</operator><operator>&lt;=</operator><literal type="number">5</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>rnd</name><operator>&amp;</operator><operator>~</operator><name>AV_ROUND_PASS_MINMAX</name><operator>)</operator><operator>!=</operator><literal type="number">4</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT64_MIN</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rnd</name> <operator>&amp;</operator> <name>AV_ROUND_PASS_MINMAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>==</operator> <name>INT64_MIN</name> <operator>||</operator> <name>a</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>a</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name>rnd</name> <operator>-=</operator> <name>AV_ROUND_PASS_MINMAX</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><operator>-</operator><call><name>FFMAX</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><operator>-</operator><name>INT64_MAX</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>rnd</name> <operator>^</operator> <operator>(</operator><operator>(</operator><name>rnd</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>rnd</name> <operator>==</operator> <name>AV_ROUND_NEAR_INF</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>c</name> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if>

<if type="elseif">else if <condition>(<expr><name>rnd</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>r</name> <operator>=</operator> <name>c</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>b</name> <operator>&lt;=</operator> <name>INT_MAX</name> <operator>&amp;&amp;</operator> <name>c</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition> <block>{<block_content>

<if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>a</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>c</name></expr>;</return></block_content></block></if>

<else>else <block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>ad</name> <init>= <expr><name>a</name> <operator>/</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>a2</name> <init>= <expr><operator>(</operator><name>a</name> <operator>%</operator> <name>c</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>r</name><operator>)</operator> <operator>/</operator> <name>c</name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>ad</name> <operator>&gt;=</operator> <name>INT32_MAX</name> <operator>&amp;&amp;</operator> <name>b</name> <operator>&amp;&amp;</operator> <name>ad</name> <operator>&gt;</operator> <operator>(</operator><name>INT64_MAX</name> <operator>-</operator> <name>a2</name><operator>)</operator> <operator>/</operator> <name>b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT64_MIN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>ad</name> <operator>*</operator> <name>b</name> <operator>+</operator> <name>a2</name></expr>;</return>

</block_content>}</block></else></if_stmt>

</block_content>}</block></if> <else>else <block>{<block_content>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a0</name> <init>= <expr><name>a</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>a1</name> <init>= <expr><name>a</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>b0</name> <init>= <expr><name>b</name> <operator>&amp;</operator> <literal type="number">0xFFFFFFFF</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>b1</name> <init>= <expr><name>b</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t1</name> <init>= <expr><name>a0</name> <operator>*</operator> <name>b1</name> <operator>+</operator> <name>a1</name> <operator>*</operator> <name>b0</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>t1a</name> <init>= <expr><name>t1</name> <operator>&lt;&lt;</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<expr_stmt><expr><name>a0</name> <operator>=</operator> <name>a0</name> <operator>*</operator> <name>b0</name> <operator>+</operator> <name>t1a</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>=</operator> <name>a1</name> <operator>*</operator> <name>b1</name> <operator>+</operator> <operator>(</operator><name>t1</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal><operator>)</operator> <operator>+</operator> <operator>(</operator><name>a0</name> <operator>&lt;</operator> <name>t1a</name><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>a0</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>

<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>a0</name> <operator>&lt;</operator> <name>r</name></expr>;</expr_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">63</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>

<expr_stmt><expr><name>a1</name> <operator>+=</operator> <name>a1</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>a0</name> <operator>&gt;&gt;</operator> <name>i</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name> <operator>+=</operator> <name>t1</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <name>a1</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>a1</name> <operator>-=</operator> <name>c</name></expr>;</expr_stmt>

<expr_stmt><expr><name>t1</name><operator>++</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></for>

<if_stmt><if>if <condition>(<expr><name>t1</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>INT64_MIN</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>t1</name></expr>;</return>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<decl_stmt><decl><type><name>AVInteger</name></type> <name>ai</name></decl>;</decl_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>av_mul_i</name><argument_list>(<argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ai</name> <operator>=</operator> <call><name>av_add_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>av_i2int</name><argument_list>(<argument><expr><call><name>av_div_i</name><argument_list>(<argument><expr><name>ai</name></expr></argument>, <argument><expr><call><name>av_int2i</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_rescale</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>AV_ROUND_NEAR_INF</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_rescale_q_rnd</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>bq</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>cq</name></decl></parameter>,

<parameter><decl><type><name><name>enum</name> <name>AVRounding</name></name></type> <name>rnd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><name><name>bq</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>cq</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><name><name>cq</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>bq</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>

<return>return <expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>rnd</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_rescale_q</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>bq</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>cq</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_rescale_q_rnd</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>bq</name></expr></argument>, <argument><expr><name>cq</name></expr></argument>, <argument><expr><name>AV_ROUND_NEAR_INF</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_compare_ts</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts_a</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tb_a</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts_b</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>tb_b</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><name><name>tb_a</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>tb_b</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><name><name>tb_b</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>tb_a</name><operator>.</operator><name>den</name></name></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>ts_a</name></expr></argument>)</argument_list></call><operator>|</operator><name>a</name><operator>|</operator><call><name>FFABS</name><argument_list>(<argument><expr><name>ts_b</name></expr></argument>)</argument_list></call><operator>|</operator><name>b</name><operator>)</operator> <operator>&lt;=</operator> <name>INT_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>(</operator><name>ts_a</name><operator>*</operator><name>a</name> <operator>&gt;</operator> <name>ts_b</name><operator>*</operator><name>b</name><operator>)</operator> <operator>-</operator> <operator>(</operator><name>ts_a</name><operator>*</operator><name>a</name> <operator>&lt;</operator> <name>ts_b</name><operator>*</operator><name>b</name><operator>)</operator></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>ts_a</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ts_b</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>av_rescale_rnd</name><argument_list>(<argument><expr><name>ts_b</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>ts_a</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_compare_mod</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>a</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>b</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>mod</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><operator>(</operator><name>a</name> <operator>-</operator> <name>b</name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><name>mod</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <operator>(</operator><name>mod</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>c</name> <operator>-=</operator> <name>mod</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

<return>return <expr><name>c</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_rescale_delta</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>in_tb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>in_ts</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>fs_tb</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>duration</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>last</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>out_tb</name></decl></parameter>)</parameter_list><block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>a</name></decl>, <decl><type ref="prev"/><name>b</name></decl>, <decl><type ref="prev"/><name>this</name></decl>;</decl_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>in_ts</name> <operator>!=</operator> <name>AV_NOPTS_VALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>av_assert0</name><argument_list>(<argument><expr><name>duration</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name>last</name> <operator>==</operator> <name>AV_NOPTS_VALUE</name> <operator>||</operator> <operator>!</operator><name>duration</name> <operator>||</operator> <name><name>in_tb</name><operator>.</operator><name>num</name></name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>out_tb</name><operator>.</operator><name>den</name></name> <operator>&lt;=</operator> <name><name>out_tb</name><operator>.</operator><name>num</name></name><operator>*</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>in_tb</name><operator>.</operator><name>den</name></name></expr>)</condition> <block>{<block_content>

<label><name>simple_round</name>:</label>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <call><name>av_rescale_q</name><argument_list>(<argument><expr><name>in_ts</name></expr></argument>, <argument><expr><name>in_tb</name></expr></argument>, <argument><expr><name>fs_tb</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>duration</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>in_ts</name></expr></argument>, <argument><expr><name>in_tb</name></expr></argument>, <argument><expr><name>out_tb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>av_rescale_q_rnd</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>in_ts</name><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>in_tb</name></expr></argument>, <argument><expr><name>fs_tb</name></expr></argument>, <argument><expr><name>AV_ROUND_DOWN</name></expr></argument>)</argument_list></call> <operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>b</name> <operator>=</operator> <operator>(</operator><call><name>av_rescale_q_rnd</name><argument_list>(<argument><expr><literal type="number">2</literal><operator>*</operator><name>in_ts</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>in_tb</name></expr></argument>, <argument><expr><name>fs_tb</name></expr></argument>, <argument><expr><name>AV_ROUND_UP</name></expr></argument> )</argument_list></call><operator>+</operator><literal type="number">1</literal><operator>)</operator><operator>&gt;&gt;</operator><literal type="number">1</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>last</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">2</literal><operator>*</operator><name>a</name> <operator>-</operator> <name>b</name> <operator>||</operator> <operator>*</operator><name>last</name></expr></argument> &gt;</argument_list></name> <literal type="number">2</literal><operator>*</operator><name>b</name> <operator>-</operator> <name>a</name></expr>)</condition><block type="pseudo"><block_content>

<goto>goto <name>simple_round</name>;</goto></block_content></block></if></if_stmt>

<expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>av_clip64</name><argument_list>(<argument><expr><operator>*</operator><name>last</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><operator>*</operator><name>last</name> <operator>=</operator> <name>this</name> <operator>+</operator> <name>duration</name></expr>;</expr_stmt>

<return>return <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>fs_tb</name></expr></argument>, <argument><expr><name>out_tb</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>av_add_stable</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>ts_tb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>inc_tb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>inc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>m</name></decl>, <decl><type ref="prev"/><name>d</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>inc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>inc_tb</name> <operator>=</operator> <macro><name>av_mul_q</name><argument_list>(<argument>inc_tb</argument>, <argument>(AVRational) {inc</argument>, <argument><literal type="number">1</literal>}</argument>)</argument_list></macro></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>inc_tb</name><operator>.</operator><name>num</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>ts_tb</name><operator>.</operator><name>den</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>inc_tb</name><operator>.</operator><name>den</name></name> <operator>*</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>ts_tb</name><operator>.</operator><name>num</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>%</operator> <name>d</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ts</name> <operator>&lt;=</operator> <name>INT64_MAX</name> <operator>-</operator> <name>m</name> <operator>/</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ts</name> <operator>+</operator> <name>m</name> <operator>/</operator> <name>d</name></expr>;</return></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <name>d</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ts</name></expr>;</return></block_content></block></if></if_stmt>

<block>{<block_content>

<decl_stmt><decl><type><name>int64_t</name></type> <name>old</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name>ts_tb</name></expr></argument>, <argument><expr><name>inc_tb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>old_ts</name> <init>= <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>old</name></expr></argument>, <argument><expr><name>inc_tb</name></expr></argument>, <argument><expr><name>ts_tb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ts</name></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><call><name>av_rescale_q</name><argument_list>(<argument><expr><name>old</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>inc_tb</name></expr></argument>, <argument><expr><name>ts_tb</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>ts</name> <operator>-</operator> <name>old_ts</name><operator>)</operator></expr>;</return>

</block_content>}</block>

</block_content>}</block></function>

</unit>
