<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\murmur3.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"intreadwrite.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"murmur3.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>AVMurMur3</name> <block>{

<decl_stmt><decl><type><name>uint64_t</name></type> <name>h1</name></decl>, <name>h2</name>;</decl_stmt>

<decl_stmt><decl><type><name>uint8_t</name></type> <name><name>state</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>state_pos</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>

}</block></struct></type> <name>AVMurMur3</name>;</typedef>

<function><type><name>AVMurMur3</name> <modifier>*</modifier></type><name>av_murmur3_alloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>av_mallocz</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>AVMurMur3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_murmur3_init_seeded</name><parameter_list>(<parameter><decl><type><name>AVMurMur3</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h1</name></name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>h2</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_murmur3_init</name><parameter_list>(<parameter><decl><type><name>AVMurMur3</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>av_murmur3_init_seeded</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><literal type="number">0x725acc55daddca55</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>c1</name> <init>= <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x87c37b91114253d5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>c2</name> <init>= <expr><call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0x4cf5ad432745937f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ROT</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt;&lt; (b)) | ((a) &gt;&gt; (64 - (b))))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint64_t</name> <specifier>inline</specifier></type> <name>get_k1</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>k</name> <init>= <expr><call><name>AV_RL64</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ROT</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>get_k2</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>src</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>k</name> <init>= <expr><call><name>AV_RL64</name><argument_list>(<argument><expr><name>src</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <name>c2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ROT</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">33</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <name>c1</name></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>update_h1</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>h1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>h2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ROT</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">0x52dce729</literal></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>update_h2</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>h1</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>h2</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>=</operator> <call><name>ROT</name><argument_list>(<argument><expr><name>k</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <literal type="number">5</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>+=</operator> <literal type="number">0x38495ab5</literal></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>FF_API_CRYPTO_SIZE_T</name></expr></cpp:if>

<decl_stmt><decl><type><name>void</name></type> <name>av_murmur3_update</name><argument_list>(<argument><expr><name>AVMurMur3</name> <operator>*</operator><name>c</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>int</name> <name>len</name></expr></argument>)</argument_list>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<name>void</name> <name>av_murmur3_update</name><argument_list>(<argument><expr><name>AVMurMur3</name> <operator>*</operator><name>c</name></expr></argument>, <argument><expr><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><name>src</name></expr></argument>, <argument><expr><name>size_t</name> <name>len</name></expr></argument>)</argument_list>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<block>{<block_content>

<decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>end</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>h1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>h1</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h2</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>h2</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>k1</name></decl>, <decl><type ref="prev"/><name>k2</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>state_pos</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<while>while <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>state_pos</name></name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><index>[<expr><name><name>c</name><operator>-&gt;</operator><name>state_pos</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>*</operator><name>src</name><operator>++</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><operator>--</operator><name>len</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state_pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>get_k1</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>get_k2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>update_h1</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>update_h2</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>end</name> <operator>=</operator> <name>src</name> <operator>+</operator> <operator>(</operator><name>len</name> <operator>&amp;</operator> <operator>~</operator><literal type="number">15</literal><operator>)</operator></expr>;</expr_stmt>

<while>while <condition>(<expr><name>src</name> <operator>&lt;</operator> <name>end</name></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>get_k1</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k2</name> <operator>=</operator> <call><name>get_k2</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>update_h1</name><argument_list>(<argument><expr><name>k1</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>update_h2</name><argument_list>(<argument><expr><name>k2</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>src</name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>

</block_content>}</block></while>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h1</name></name> <operator>=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>h2</name></name> <operator>=</operator> <name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>len</name> <operator>&amp;=</operator> <literal type="number">15</literal></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state_pos</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>fmix</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>k</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xff51afd7ed558ccd</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>*=</operator> <call><name>UINT64_C</name><argument_list>(<argument><expr><literal type="number">0xc4ceb9fe1a85ec53</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>k</name> <operator>^=</operator> <name>k</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>

<return>return <expr><name>k</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>void</name></type> <name>av_murmur3_final</name><parameter_list>(<parameter><decl><type><name>AVMurMur3</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name><name>dst</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>uint64_t</name></type> <name>h1</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>h1</name></name></expr></init></decl>, <decl><type ref="prev"/><name>h2</name> <init>= <expr><name><name>c</name><operator>-&gt;</operator><name>h2</name></name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name> <operator>+</operator> <name><name>c</name><operator>-&gt;</operator><name>state_pos</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>c</name><operator>-&gt;</operator><name>state_pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>^=</operator> <call><name>get_k1</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>^=</operator> <call><name>get_k2</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>^</operator> <name><name>c</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>=</operator> <call><name>fmix</name><argument_list>(<argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>=</operator> <call><name>fmix</name><argument_list>(<argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>h1</name> <operator>+=</operator> <name>h2</name></expr>;</expr_stmt>

<expr_stmt><expr><name>h2</name> <operator>+=</operator> <name>h1</name></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL64</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>h1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>AV_WL64</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <literal type="number">8</literal></expr></argument>, <argument><expr><name>h2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>

</unit>
