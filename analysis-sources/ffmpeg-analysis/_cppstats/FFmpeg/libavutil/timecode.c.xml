<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="D:\Pesquisa\Projects\ffmpeg-analysis\_cppstats\FFmpeg\libavutil\timecode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"timecode.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"error.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>av_timecode_adjust_ntsc_framenum2</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>framenum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>drop_frames</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>frames_per_10mins</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>fps</name> <operator>==</operator> <literal type="number">30</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>drop_frames</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_per_10mins</name> <operator>=</operator> <literal type="number">17982</literal></expr>;</expr_stmt>

</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fps</name> <operator>==</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>drop_frames</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>frames_per_10mins</name> <operator>=</operator> <literal type="number">35964</literal></expr>;</expr_stmt>

</block_content>}</block></if> <else>else<block type="pseudo"><block_content>

<return>return <expr><name>framenum</name></expr>;</return></block_content></block></else></if_stmt>

<expr_stmt><expr><name>d</name> <operator>=</operator> <name>framenum</name> <operator>/</operator> <name>frames_per_10mins</name></expr>;</expr_stmt>

<expr_stmt><expr><name>m</name> <operator>=</operator> <name>framenum</name> <operator>%</operator> <name>frames_per_10mins</name></expr>;</expr_stmt>

<return>return <expr><name>framenum</name> <operator>+</operator> <literal type="number">9</literal> <operator>*</operator> <name>drop_frames</name> <operator>*</operator> <name>d</name> <operator>+</operator> <name>drop_frames</name> <operator>*</operator> <operator>(</operator><operator>(</operator><name>m</name> <operator>-</operator> <name>drop_frames</name><operator>)</operator> <operator>/</operator> <operator>(</operator><name>frames_per_10mins</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator><operator>)</operator></expr>;</return>

</block_content>}</block></function>

<function><type><name>uint32_t</name></type> <name>av_timecode_get_smpte_from_framenum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVTimecode</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>framenum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>fps</name> <init>= <expr><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>drop</name> <init>= <expr><operator>!</operator><operator>!</operator><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_DROPFRAME</name><operator>)</operator></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ff</name></decl>;</decl_stmt>

<expr_stmt><expr><name>framenum</name> <operator>+=</operator> <name><name>tc</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>framenum</name> <operator>=</operator> <call><name>av_timecode_adjust_ntsc_framenum2</name><argument_list>(<argument><expr><name>framenum</name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name>framenum</name> <operator>%</operator> <name>fps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <name>framenum</name> <operator>/</operator> <name>fps</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mm</name> <operator>=</operator> <name>framenum</name> <operator>/</operator> <operator>(</operator><name>fps</name><operator>*</operator><literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hh</name> <operator>=</operator> <name>framenum</name> <operator>/</operator> <operator>(</operator><name>fps</name><operator>*</operator><literal type="number">3600</literal><operator>)</operator> <operator>%</operator> <literal type="number">24</literal></expr>;</expr_stmt>

<return>return <expr><literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">31</literal> <operator>|</operator> 

<name>drop</name> <operator>&lt;&lt;</operator> <literal type="number">30</literal> <operator>|</operator> 

<operator>(</operator><name>ff</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">28</literal> <operator>|</operator> 

<operator>(</operator><name>ff</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">24</literal> <operator>|</operator> 

<literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">23</literal> <operator>|</operator> 

<operator>(</operator><name>ss</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">20</literal> <operator>|</operator> 

<operator>(</operator><name>ss</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">16</literal> <operator>|</operator> 

<literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">15</literal> <operator>|</operator> 

<operator>(</operator><name>mm</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">12</literal> <operator>|</operator> 

<operator>(</operator><name>mm</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">8</literal> <operator>|</operator> 

<literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">7</literal> <operator>|</operator> 

<literal type="number">0</literal> <operator>&lt;&lt;</operator> <literal type="number">6</literal> <operator>|</operator> 

<operator>(</operator><name>hh</name> <operator>/</operator> <literal type="number">10</literal><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">4</literal> <operator>|</operator> 

<operator>(</operator><name>hh</name> <operator>%</operator> <literal type="number">10</literal><operator>)</operator></expr>;</return> 

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>av_timecode_make_string</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>AVTimecode</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>framenum</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>fps</name> <init>= <expr><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>drop</name> <init>= <expr><name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_DROPFRAME</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ff</name></decl>, <decl><type ref="prev"/><name>neg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name>framenum</name> <operator>+=</operator> <name><name>tc</name><operator>-&gt;</operator><name>start</name></name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>drop</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>framenum</name> <operator>=</operator> <call><name>av_timecode_adjust_ntsc_framenum2</name><argument_list>(<argument><expr><name>framenum</name></expr></argument>, <argument><expr><name>fps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><name>framenum</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><name>framenum</name> <operator>=</operator> <operator>-</operator><name>framenum</name></expr>;</expr_stmt>

<expr_stmt><expr><name>neg</name> <operator>=</operator> <name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_ALLOWNEGATIVE</name></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><name>ff</name> <operator>=</operator> <name>framenum</name> <operator>%</operator> <name>fps</name></expr>;</expr_stmt>

<expr_stmt><expr><name>ss</name> <operator>=</operator> <name>framenum</name> <operator>/</operator> <name>fps</name> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>mm</name> <operator>=</operator> <name>framenum</name> <operator>/</operator> <operator>(</operator><name>fps</name><operator>*</operator><literal type="number">60</literal><operator>)</operator> <operator>%</operator> <literal type="number">60</literal></expr>;</expr_stmt>

<expr_stmt><expr><name>hh</name> <operator>=</operator> <name>framenum</name> <operator>/</operator> <operator>(</operator><name>fps</name><operator>*</operator><literal type="number">3600</literal><operator>)</operator></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_24HOURSMAX</name></expr>)</condition><block type="pseudo"><block_content>

<expr_stmt><expr><name>hh</name> <operator>=</operator> <name>hh</name> <operator>%</operator> <literal type="number">24</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AV_TIMECODE_STR_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%s%02d:%02d:%02d%c%02d"</literal></expr></argument>,

<argument><expr><ternary><condition><expr><name>neg</name></expr> ?</condition><then> <expr><literal type="string">"-"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>,

<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><ternary><condition><expr><name>drop</name></expr> ?</condition><then> <expr><literal type="char">';'</literal></expr> </then><else>: <expr><literal type="char">':'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>unsigned</name></type> <name>bcd2uint</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>bcd</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>low</name> <init>= <expr><name>bcd</name> <operator>&amp;</operator> <literal type="number">0xf</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>unsigned</name></type> <name>high</name> <init>= <expr><name>bcd</name> <operator>&gt;&gt;</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><name>low</name> <operator>&gt;</operator> <literal type="number">9</literal> <operator>||</operator> <name>high</name> <operator>&gt;</operator> <literal type="number">9</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><name>low</name> <operator>+</operator> <literal type="number">10</literal><operator>*</operator><name>high</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>av_timecode_make_smpte_tc_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tcsmpte</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prevent_df</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>unsigned</name></type> <name>hh</name> <init>= <expr><call><name>bcd2uint</name><argument_list>(<argument><expr><name>tcsmpte</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>mm</name> <init>= <expr><call><name>bcd2uint</name><argument_list>(<argument><expr><name>tcsmpte</name><operator>&gt;&gt;</operator><literal type="number">8</literal> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>ss</name> <init>= <expr><call><name>bcd2uint</name><argument_list>(<argument><expr><name>tcsmpte</name><operator>&gt;&gt;</operator><literal type="number">16</literal> <operator>&amp;</operator> <literal type="number">0x7f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>ff</name> <init>= <expr><call><name>bcd2uint</name><argument_list>(<argument><expr><name>tcsmpte</name><operator>&gt;&gt;</operator><literal type="number">24</literal> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> 

<decl_stmt><decl><type><name>unsigned</name></type> <name>drop</name> <init>= <expr><name>tcsmpte</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">30</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>prevent_df</name></expr></init></decl>;</decl_stmt> 

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AV_TIMECODE_STR_SIZE</name></expr></argument>, <argument><expr><literal type="string">"%02u:%02u:%02u%c%02u"</literal></expr></argument>,

<argument><expr><name>hh</name></expr></argument>, <argument><expr><name>mm</name></expr></argument>, <argument><expr><name>ss</name></expr></argument>, <argument><expr><ternary><condition><expr><name>drop</name></expr> ?</condition><then> <expr><literal type="char">';'</literal></expr> </then><else>: <expr><literal type="char">':'</literal></expr></else></ternary></expr></argument>, <argument><expr><name>ff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>av_timecode_make_mpeg_tc_string</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>tc25bit</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>AV_TIMECODE_STR_SIZE</name></expr></argument>,

<argument><expr><literal type="string">"%02"</literal><name>PRIu32</name><literal type="string">":%02"</literal><name>PRIu32</name><literal type="string">":%02"</literal><name>PRIu32</name><literal type="string">"%c%02"</literal><name>PRIu32</name></expr></argument>,

<argument><expr><name>tc25bit</name><operator>&gt;&gt;</operator><literal type="number">19</literal> <operator>&amp;</operator> <literal type="number">0x1f</literal></expr></argument>, 

<argument><expr><name>tc25bit</name><operator>&gt;&gt;</operator><literal type="number">13</literal> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>, 

<argument><expr><name>tc25bit</name><operator>&gt;&gt;</operator><literal type="number">6</literal> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>, 

<argument><expr><ternary><condition><expr><name>tc25bit</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>&lt;&lt;</operator><literal type="number">24</literal></expr> ?</condition><then> <expr><literal type="char">';'</literal></expr> </then><else>: <expr><literal type="char">':'</literal></expr></else></ternary></expr></argument>, 

<argument><expr><name>tc25bit</name> <operator>&amp;</operator> <literal type="number">0x3f</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 

<return>return <expr><name>buf</name></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_fps</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fps</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>supported_fps</name><index>[]</index></name> <init>= <expr><block>{

<expr><literal type="number">24</literal></expr>, <expr><literal type="number">25</literal></expr>, <expr><literal type="number">30</literal></expr>, <expr><literal type="number">48</literal></expr>, <expr><literal type="number">50</literal></expr>, <expr><literal type="number">60</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">120</literal></expr>, <expr><literal type="number">150</literal></expr>,

}</block></expr></init></decl>;</decl_stmt>

<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>FF_ARRAY_ELEMS</name><argument_list>(<argument><expr><name>supported_fps</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>

<if_stmt><if>if <condition>(<expr><name>fps</name> <operator>==</operator> <name><name>supported_fps</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>check_timecode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>, <parameter><decl><type><name>AVTimecode</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name>int</name><operator>)</operator><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Valid timecode frame rate must be specified. Minimum value is 1\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_DROPFRAME</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>tc</name><operator>-&gt;</operator><name>fps</name></name> <operator>!=</operator> <literal type="number">30</literal> <operator>&amp;&amp;</operator> <name><name>tc</name><operator>-&gt;</operator><name>fps</name></name> <operator>!=</operator> <literal type="number">60</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Drop frame is only allowed with 30000/1001 or 60000/1001 FPS\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>AVERROR</name><argument_list>(<argument><expr><name>EINVAL</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></if></if_stmt>

<if_stmt><if>if <condition>(<expr><call><name>check_fps</name><argument_list>(<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_WARNING</name></expr></argument>, <argument><expr><literal type="string">"Using non-standard frame rate %d/%d\n"</literal></expr></argument>,

<argument><expr><name><name>tc</name><operator>-&gt;</operator><name>rate</name><operator>.</operator><name>num</name></name></expr></argument>, <argument><expr><name><name>tc</name><operator>-&gt;</operator><name>rate</name><operator>.</operator><name>den</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>fps_from_frame_rate</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>rate</name><operator>.</operator><name>den</name></name> <operator>||</operator> <operator>!</operator><name><name>rate</name><operator>.</operator><name>num</name></name></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

<return>return <expr><operator>(</operator><name><name>rate</name><operator>.</operator><name>num</name></name> <operator>+</operator> <name><name>rate</name><operator>.</operator><name>den</name></name><operator>/</operator><literal type="number">2</literal><operator>)</operator> <operator>/</operator> <name><name>rate</name><operator>.</operator><name>den</name></name></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_timecode_check_frame_rate</name><parameter_list>(<parameter><decl><type><name>AVRational</name></type> <name>rate</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<return>return <expr><call><name>check_fps</name><argument_list>(<argument><expr><call><name>fps_from_frame_rate</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_timecode_init</name><parameter_list>(<parameter><decl><type><name>AVTimecode</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>flags</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>frame_start</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>frame_start</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name> <operator>=</operator> <call><name>fps_from_frame_rate</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><call><name>check_timecode</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>av_timecode_init_from_string</name><parameter_list>(<parameter><decl><type><name>AVTimecode</name> <modifier>*</modifier></type><name>tc</name></decl></parameter>, <parameter><decl><type><name>AVRational</name></type> <name>rate</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>log_ctx</name></decl></parameter>)</parameter_list>

<block>{<block_content>

<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>hh</name></decl>, <decl><type ref="prev"/><name>mm</name></decl>, <decl><type ref="prev"/><name>ss</name></decl>, <decl><type ref="prev"/><name>ff</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>

<if_stmt><if>if <condition>(<expr><call><name>sscanf</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><literal type="string">"%d:%d:%d%c%d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>hh</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>mm</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ss</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ff</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>

<expr_stmt><expr><call><name>av_log</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>AV_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Unable to parse timecode, "</literal>

<literal type="string">"syntax: hh:mm:ss[:;.]ff\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<return>return <expr><name>AVERROR_INVALIDDATA</name></expr>;</return>

</block_content>}</block></if></if_stmt>

<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tc</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <ternary><condition><expr><name>c</name> <operator>!=</operator> <literal type="char">':'</literal></expr> ?</condition><then> <expr><name>AV_TIMECODE_FLAG_DROPFRAME</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt> 

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>rate</name></name> <operator>=</operator> <name>rate</name></expr>;</expr_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name> <operator>=</operator> <call><name>fps_from_frame_rate</name><argument_list>(<argument><expr><name>rate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>check_timecode</name><argument_list>(<argument><expr><name>log_ctx</name></expr></argument>, <argument><expr><name>tc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>

<return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <operator>(</operator><name>hh</name><operator>*</operator><literal type="number">3600</literal> <operator>+</operator> <name>mm</name><operator>*</operator><literal type="number">60</literal> <operator>+</operator> <name>ss</name><operator>)</operator> <operator>*</operator> <name><name>tc</name><operator>-&gt;</operator><name>fps</name></name> <operator>+</operator> <name>ff</name></expr>;</expr_stmt>

<if_stmt><if>if <condition>(<expr><name><name>tc</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>AV_TIMECODE_FLAG_DROPFRAME</name></expr>)</condition> <block>{<block_content> 

<decl_stmt><decl><type><name>int</name></type> <name>tmins</name> <init>= <expr><literal type="number">60</literal><operator>*</operator><name>hh</name> <operator>+</operator> <name>mm</name></expr></init></decl>;</decl_stmt>

<expr_stmt><expr><name><name>tc</name><operator>-&gt;</operator><name>start</name></name> <operator>-=</operator> <operator>(</operator><ternary><condition><expr><name><name>tc</name><operator>-&gt;</operator><name>fps</name></name> <operator>==</operator> <literal type="number">30</literal></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <operator>(</operator><name>tmins</name> <operator>-</operator> <name>tmins</name><operator>/</operator><literal type="number">10</literal><operator>)</operator></expr>;</expr_stmt>

</block_content>}</block></if></if_stmt>

<return>return <expr><literal type="number">0</literal></expr>;</return>

</block_content>}</block></function>

</unit>
